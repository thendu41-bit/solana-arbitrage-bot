"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfigPda = exports.getTreasuryPda = exports.getRandomTreasuryId = exports.getGuardianSetPda = exports.DEFAULT_PUSH_ORACLE_PROGRAM_ID = exports.DEFAULT_WORMHOLE_PROGRAM_ID = exports.DEFAULT_RECEIVER_PROGRAM_ID = void 0;
const web3_js_1 = require("@solana/web3.js");
/**
 * The default Pyth Solana Receiver program ID.
 * The program is deployed at this address on all SVM networks.
 */
exports.DEFAULT_RECEIVER_PROGRAM_ID = new web3_js_1.PublicKey("rec5EKMGg6MxZYaMdyBfgwp4d5rB9T1VQH5pJv5LtFJ");
/**
 * The default Wormhole program ID.
 * The program is deployed at this address on all SVM networks.
 */
exports.DEFAULT_WORMHOLE_PROGRAM_ID = new web3_js_1.PublicKey("HDwcJBJXjL9FpJ7UBsYBtaDjsBUhuLCUYoz3zr8SWWaQ");
exports.DEFAULT_PUSH_ORACLE_PROGRAM_ID = new web3_js_1.PublicKey("pythWSnswVUd12oZpeFP8e9CVaEqJg25g1Vtc2biRsT");
/**
 * Returns the address of a guardian set account from the Wormhole program.
 */
const getGuardianSetPda = (guardianSetIndex, wormholeProgramId) => {
    const guardianSetIndexBuf = Buffer.alloc(4);
    guardianSetIndexBuf.writeUInt32BE(guardianSetIndex, 0);
    return web3_js_1.PublicKey.findProgramAddressSync([Buffer.from("GuardianSet"), guardianSetIndexBuf], wormholeProgramId)[0];
};
exports.getGuardianSetPda = getGuardianSetPda;
/**
 * The Pyth Solana Receiver has one treasury account for each u8 `treasuryId`.
 * This is meant to avoid write-locks on the treasury account by load-balancing the writes across multiple accounts.
 */
function getRandomTreasuryId() {
    return Math.floor(Math.random() * 256);
}
exports.getRandomTreasuryId = getRandomTreasuryId;
/**
 * Returns the address of a treasury account from the Pyth Solana Receiver program.
 */
const getTreasuryPda = (treasuryId, receiverProgramId) => {
    return web3_js_1.PublicKey.findProgramAddressSync([Buffer.from("treasury"), Buffer.from([treasuryId])], receiverProgramId)[0];
};
exports.getTreasuryPda = getTreasuryPda;
/**
 * Returns the address of the config account from the Pyth Solana Receiver program.
 */
const getConfigPda = (receiverProgramId) => {
    return web3_js_1.PublicKey.findProgramAddressSync([Buffer.from("config")], receiverProgramId)[0];
};
exports.getConfigPda = getConfigPda;
