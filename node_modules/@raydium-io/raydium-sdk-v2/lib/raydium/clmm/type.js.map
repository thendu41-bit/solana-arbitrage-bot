{"version":3,"sources":["../../../src/raydium/clmm/type.ts"],"sourcesContent":["import { EpochInfo, Keypair, PublicKey, Signer, Transaction } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport Decimal from \"decimal.js\";\nimport { ApiClmmConfigInfo, ApiV3PoolInfoConcentratedItem, ApiV3Token, ClmmKeys } from \"../../api/type\";\nimport { TxVersion } from \"../../common/txTool/txType\";\nimport { Fraction, Percent, Price, TokenAmount } from \"../../module\";\nimport { ComputeBudgetConfig, TxTipConfig } from \"../../raydium/type\";\nimport { TokenInfo } from \"../token/type\";\nimport { GetTransferAmountFee, TransferAmountFee } from \"../type\";\nimport { TickArray } from \"./utils/tick\";\n\nimport { ClmmPositionLayout, PoolInfoLayout, LockClPositionLayoutV2 } from \"./layout\";\n\nexport { ApiClmmConfigInfo };\n\nexport interface ApiClmmPoint {\n  price: string;\n  liquidity: string;\n}\n\nexport interface ApiClmmConfigInfos {\n  [configId: string]: ApiClmmConfigInfo;\n}\n\nexport interface ClmmConfigInfo {\n  id: PublicKey;\n  index: number;\n  protocolFeeRate: number;\n  tradeFeeRate: number;\n  tickSpacing: number;\n  fundFeeRate: number;\n  fundOwner: string;\n  description: string;\n}\n\nexport interface ClmmPoolRewardInfo {\n  rewardState: number;\n  openTime: BN;\n  endTime: BN;\n  lastUpdateTime: BN;\n  emissionsPerSecondX64: BN;\n  rewardTotalEmissioned: BN;\n  rewardClaimed: BN;\n  tokenMint: PublicKey;\n  tokenVault: PublicKey;\n  creator: PublicKey;\n  rewardGrowthGlobalX64: BN;\n  perSecond: Decimal;\n  remainingRewards: undefined | BN;\n  tokenProgramId: PublicKey;\n}\nexport interface ClmmPoolInfo {\n  id: PublicKey;\n  mintA: {\n    programId: PublicKey;\n    mint: PublicKey;\n    vault: PublicKey;\n    decimals: number;\n  };\n  mintB: {\n    programId: PublicKey;\n    mint: PublicKey;\n    vault: PublicKey;\n    decimals: number;\n  };\n\n  ammConfig: ClmmConfigInfo;\n  observationId: PublicKey;\n\n  creator: PublicKey;\n  programId: PublicKey;\n  version: 6;\n\n  tickSpacing: number;\n  liquidity: BN;\n  sqrtPriceX64: BN;\n  currentPrice: Decimal;\n  tickCurrent: number;\n  feeGrowthGlobalX64A: BN;\n  feeGrowthGlobalX64B: BN;\n  protocolFeesTokenA: BN;\n  protocolFeesTokenB: BN;\n  swapInAmountTokenA: BN;\n  swapOutAmountTokenB: BN;\n  swapInAmountTokenB: BN;\n  swapOutAmountTokenA: BN;\n  tickArrayBitmap: BN[];\n\n  rewardInfos: ClmmPoolRewardInfo[];\n\n  day: {\n    volume: number;\n    volumeFee: number;\n    feeA: number;\n    feeB: number;\n    feeApr: number;\n    rewardApr: {\n      A: number;\n      B: number;\n      C: number;\n    };\n    apr: number;\n    priceMin: number;\n    priceMax: number;\n  };\n  week: {\n    volume: number;\n    volumeFee: number;\n    feeA: number;\n    feeB: number;\n    feeApr: number;\n    rewardApr: {\n      A: number;\n      B: number;\n      C: number;\n    };\n    apr: number;\n    priceMin: number;\n    priceMax: number;\n  };\n  month: {\n    volume: number;\n    volumeFee: number;\n    feeA: number;\n    feeB: number;\n    feeApr: number;\n    rewardApr: {\n      A: number;\n      B: number;\n      C: number;\n    };\n    apr: number;\n    priceMin: number;\n    priceMax: number;\n  };\n  tvl: number;\n  lookupTableAccount: PublicKey;\n\n  startTime: number;\n\n  exBitmapInfo: TickArrayBitmapExtensionType;\n}\n\nexport interface ComputeClmmPoolInfo {\n  id: PublicKey;\n  version: 6;\n  mintA: ApiV3Token;\n  mintB: ApiV3Token;\n\n  ammConfig: ClmmConfigInfo;\n  observationId: PublicKey;\n  exBitmapAccount: PublicKey;\n\n  creator: PublicKey;\n  programId: PublicKey;\n\n  tickSpacing: number;\n  liquidity: BN;\n  sqrtPriceX64: BN;\n  currentPrice: Decimal;\n  tickCurrent: number;\n  feeGrowthGlobalX64A: BN;\n  feeGrowthGlobalX64B: BN;\n  protocolFeesTokenA: BN;\n  protocolFeesTokenB: BN;\n  swapInAmountTokenA: BN;\n  swapOutAmountTokenB: BN;\n  swapInAmountTokenB: BN;\n  swapOutAmountTokenA: BN;\n  tickArrayBitmap: BN[];\n\n  startTime: number;\n\n  exBitmapInfo: TickArrayBitmapExtensionType;\n  rewardInfos: ReturnType<typeof PoolInfoLayout.decode>[\"rewardInfos\"];\n}\n\nexport interface ReturnTypeMakeHarvestTransaction {\n  transactions: {\n    transaction: Transaction;\n    signer: Signer[];\n  }[];\n  address: { [key: string]: PublicKey };\n}\n\nexport interface ClmmPoolPersonalPosition {\n  poolId: PublicKey;\n  nftMint: PublicKey;\n\n  priceLower: Decimal;\n  priceUpper: Decimal;\n  amountA: BN;\n  amountB: BN;\n  tickLower: number;\n  tickUpper: number;\n  liquidity: BN;\n  feeGrowthInsideLastX64A: BN;\n  feeGrowthInsideLastX64B: BN;\n  tokenFeesOwedA: BN;\n  tokenFeesOwedB: BN;\n  rewardInfos: {\n    growthInsideLastX64: BN;\n    rewardAmountOwed: BN;\n    pendingReward: BN;\n  }[];\n\n  leverage: number;\n  tokenFeeAmountA: BN;\n  tokenFeeAmountB: BN;\n}\n\nexport type SDKParsedConcentratedInfo = {\n  state: ClmmPoolInfo;\n  positionAccount?: ClmmPoolPersonalPosition[];\n};\n\nexport interface ReturnTypeMakeCreatePoolTransaction {\n  signers: (Signer | Keypair)[];\n  transaction: Transaction;\n  mockPoolInfo: ClmmPoolInfo;\n}\n\nexport type ManipulateLiquidityExtInfo = {\n  address: {\n    tickArrayLower: PublicKey;\n    tickArrayUpper: PublicKey;\n    positionNftAccount: PublicKey;\n    personalPosition: PublicKey;\n    protocolPosition: PublicKey;\n  };\n};\n\nexport interface ReturnTypeGetLiquidityAmountOut {\n  liquidity: BN;\n  amountSlippageA: GetTransferAmountFee;\n  amountSlippageB: GetTransferAmountFee;\n  amountA: GetTransferAmountFee;\n  amountB: GetTransferAmountFee;\n  expirationTime: number | undefined;\n}\nexport interface ReturnTypeGetAmountsFromLiquidity {\n  amountSlippageA: BN;\n  amountSlippageB: BN;\n}\nexport interface ReturnTypeComputeAmountOutFormat {\n  allTrade: boolean;\n  realAmountIn: TransferAmountFee;\n  amountOut: TransferAmountFee;\n  minAmountOut: TransferAmountFee;\n  expirationTime: number | undefined;\n  currentPrice: Price;\n  executionPrice: Price;\n  priceImpact: Percent;\n  fee: TokenAmount;\n  remainingAccounts: PublicKey[];\n  executionPriceX64: BN;\n}\nexport interface ReturnTypeComputeAmountOut {\n  allTrade: boolean;\n  realAmountIn: GetTransferAmountFee;\n  amountOut: GetTransferAmountFee;\n  minAmountOut: GetTransferAmountFee;\n  expirationTime: number | undefined;\n  currentPrice: Decimal;\n  executionPrice: Decimal;\n  priceImpact: Percent;\n  fee: BN;\n  remainingAccounts: PublicKey[];\n  executionPriceX64: BN;\n}\n\nexport interface ReturnTypeComputeAmountOutBaseOut {\n  amountIn: GetTransferAmountFee;\n  maxAmountIn: GetTransferAmountFee;\n  realAmountOut: GetTransferAmountFee;\n  expirationTime: number | undefined;\n  currentPrice: Decimal;\n  executionPrice: Decimal;\n  priceImpact: Percent;\n  fee: BN;\n  remainingAccounts: PublicKey[];\n}\n\nexport interface ReturnTypeFetchMultiplePoolTickArrays {\n  [poolId: string]: { [key: string]: TickArray };\n}\n\nexport interface CreateConcentratedPool<T = TxVersion.LEGACY> {\n  programId: PublicKey;\n  owner?: PublicKey;\n  mint1: ApiV3Token;\n  mint2: ApiV3Token;\n  ammConfig: ClmmConfigInfo;\n  initialPrice: Decimal;\n  computeBudgetConfig?: ComputeBudgetConfig;\n  txTipConfig?: TxTipConfig;\n  forerunCreate?: boolean;\n  getObserveState?: boolean;\n  txVersion?: T;\n  feePayer?: PublicKey;\n}\n\nexport interface UserPositionAccount {\n  /** transform to SDK function, should not used directlly in UI */\n  sdkParsed: ClmmPoolPersonalPosition;\n  rewardInfos: {\n    pendingReward: TokenAmount | undefined;\n    apr24h: Percent;\n    apr7d: Percent;\n    apr30d: Percent;\n  }[];\n  inRange: boolean;\n  poolId: PublicKey;\n  nftMint: PublicKey;\n  priceLower: Fraction;\n  priceUpper: Fraction;\n  amountA?: TokenAmount;\n  amountB?: TokenAmount;\n  tokenA?: TokenInfo;\n  tokenB?: TokenInfo;\n  leverage: number;\n  tickLower: number;\n  tickUpper: number;\n  positionPercentA: Percent;\n  positionPercentB: Percent;\n  tokenFeeAmountA?: TokenAmount;\n  tokenFeeAmountB?: TokenAmount;\n  getLiquidityVolume: (tokenPrices: Record<string, Price>) => {\n    wholeLiquidity: Fraction | undefined;\n    baseLiquidity: Fraction | undefined;\n    quoteLiquidity: Fraction | undefined;\n  };\n}\n\nexport interface IncreasePositionFromLiquidity<T = TxVersion.LEGACY> {\n  poolInfo: ApiV3PoolInfoConcentratedItem;\n  poolKeys?: ClmmKeys;\n  ownerPosition: ClmmPositionLayout;\n  ownerInfo: {\n    useSOLBalance?: boolean;\n  };\n\n  amountMaxA: BN;\n  amountMaxB: BN;\n\n  liquidity: BN;\n  associatedOnly?: boolean;\n  checkCreateATAOwner?: boolean;\n  computeBudgetConfig?: ComputeBudgetConfig;\n  txVersion?: T;\n  txTipConfig?: TxTipConfig;\n  feePayer?: PublicKey;\n}\n\nexport interface IncreasePositionFromBase<T = TxVersion.LEGACY> {\n  poolInfo: ApiV3PoolInfoConcentratedItem;\n  ownerPosition: ClmmPoolPersonalPosition;\n  ownerInfo: {\n    useSOLBalance?: boolean;\n  };\n  base: \"MintA\" | \"MintB\";\n  baseAmount: BN;\n  otherAmountMax: BN;\n  associatedOnly?: boolean;\n  checkCreateATAOwner?: boolean;\n  computeBudgetConfig?: ComputeBudgetConfig;\n  txVersion?: T;\n  txTipConfig?: TxTipConfig;\n  feePayer?: PublicKey;\n}\n\nexport interface DecreaseLiquidity<T = TxVersion.LEGACY> {\n  poolInfo: ApiV3PoolInfoConcentratedItem;\n  poolKeys?: ClmmKeys;\n  ownerPosition: ClmmPositionLayout;\n  ownerInfo: {\n    useSOLBalance?: boolean; // if has WSOL mint\n    closePosition?: boolean;\n  };\n\n  liquidity: BN;\n  amountMinA: BN;\n  amountMinB: BN;\n  nftAccount?: PublicKey;\n\n  associatedOnly?: boolean;\n  checkCreateATAOwner?: boolean;\n  computeBudgetConfig?: ComputeBudgetConfig;\n  txVersion?: T;\n  txTipConfig?: TxTipConfig;\n  feePayer?: PublicKey;\n}\n\nexport interface LockPosition<T = TxVersion.LEGACY> {\n  programId?: PublicKey;\n  authProgramId?: PublicKey;\n  poolProgramId?: PublicKey;\n  ownerPosition: ClmmPositionLayout;\n  payer?: PublicKey;\n  computeBudgetConfig?: ComputeBudgetConfig;\n  txTipConfig?: TxTipConfig;\n  txVersion?: T;\n  getEphemeralSigners?: (k: number) => any;\n  feePayer?: PublicKey;\n}\n\nexport interface HarvestLockPosition<T = TxVersion.LEGACY> {\n  programId?: PublicKey;\n  authProgramId?: PublicKey;\n  clmmProgram?: PublicKey;\n  poolKeys?: ClmmKeys;\n  lockData: ReturnType<typeof LockClPositionLayoutV2.decode>;\n  ownerInfo?: {\n    useSOLBalance?: boolean; // if has WSOL mint\n  };\n  associatedOnly?: boolean;\n  checkCreateATAOwner?: boolean;\n  computeBudgetConfig?: ComputeBudgetConfig;\n  txVersion?: T;\n  txTipConfig?: TxTipConfig;\n  feePayer?: PublicKey;\n}\n\nexport interface ClmmPoolRewardLayoutInfo {\n  rewardState: number;\n  openTime: BN;\n  endTime: BN;\n  lastUpdateTime: BN;\n  emissionsPerSecondX64: BN;\n  rewardTotalEmissioned: BN;\n  rewardClaimed: BN;\n  tokenMint: PublicKey;\n  tokenVault: PublicKey;\n  creator: PublicKey;\n  rewardGrowthGlobalX64: BN;\n  feePayer?: PublicKey;\n}\n\nexport interface OpenPositionFromBase<T = TxVersion.LEGACY> {\n  poolInfo: ApiV3PoolInfoConcentratedItem;\n  poolKeys?: ClmmKeys;\n  ownerInfo: {\n    useSOLBalance?: boolean; // if has WSOL mint (default: true)\n  };\n  tickLower: number;\n  tickUpper: number;\n\n  base: \"MintA\" | \"MintB\";\n  baseAmount: BN;\n  otherAmountMax: BN;\n\n  nft2022?: boolean;\n  associatedOnly?: boolean;\n  checkCreateATAOwner?: boolean;\n  withMetadata?: \"create\" | \"no-create\";\n  getEphemeralSigners?: (k: number) => any;\n  computeBudgetConfig?: ComputeBudgetConfig;\n  txVersion?: T;\n  txTipConfig?: TxTipConfig;\n  feePayer?: PublicKey;\n}\n\nexport interface OpenPositionFromBaseExtInfo {\n  nftMint: PublicKey;\n  tickArrayLower: PublicKey;\n  tickArrayUpper: PublicKey;\n  positionNftAccount: PublicKey;\n  metadataAccount: PublicKey;\n  personalPosition: PublicKey;\n  protocolPosition: PublicKey;\n}\n\nexport interface OpenPositionFromLiquidity<T = TxVersion.LEGACY> {\n  poolInfo: ApiV3PoolInfoConcentratedItem;\n  poolKeys?: ClmmKeys;\n  ownerInfo: {\n    useSOLBalance?: boolean; // if has WSOL mint (default: true)\n  };\n  amountMaxA: BN;\n  amountMaxB: BN;\n  tickLower: number;\n  tickUpper: number;\n  liquidity: BN;\n  associatedOnly?: boolean;\n  checkCreateATAOwner?: boolean;\n  withMetadata?: \"create\" | \"no-create\";\n  getEphemeralSigners?: (k: number) => any;\n  txVersion?: T;\n  computeBudgetConfig;\n  nft2022?: boolean;\n  txTipConfig?: TxTipConfig;\n  feePayer?: PublicKey;\n}\n\nexport interface OpenPositionFromLiquidityExtInfo {\n  address: {\n    nftMint: PublicKey;\n    tickArrayLower: PublicKey;\n    tickArrayUpper: PublicKey;\n    positionNftAccount: PublicKey;\n    metadataAccount: PublicKey;\n    personalPosition: PublicKey;\n    protocolPosition: PublicKey;\n  };\n}\n\nexport interface GetAmountParams {\n  poolInfo: ApiV3PoolInfoConcentratedItem;\n  ownerPosition: ClmmPositionLayout;\n  liquidity: BN;\n  slippage: number;\n  add: boolean;\n  epochInfo: EpochInfo;\n}\n\nexport interface InitRewardParams<T = TxVersion.LEGACY> {\n  poolInfo: ApiV3PoolInfoConcentratedItem;\n  poolKeys?: ClmmKeys;\n  ownerInfo: {\n    feePayer?: PublicKey;\n    useSOLBalance?: boolean; // if has WSOL mint\n  };\n  rewardInfo: {\n    mint: ApiV3Token;\n    openTime: number;\n    endTime: number;\n    perSecond: Decimal;\n  };\n  associatedOnly?: boolean;\n  checkCreateATAOwner?: boolean;\n  computeBudgetConfig?: ComputeBudgetConfig;\n  txVersion?: T;\n  txTipConfig?: TxTipConfig;\n  feePayer?: PublicKey;\n}\n\nexport interface InitRewardsParams<T = TxVersion.LEGACY> extends Omit<InitRewardParams<T>, \"rewardInfo\"> {\n  rewardInfos: {\n    mint: ApiV3Token;\n    openTime: number;\n    endTime: number;\n    perSecond: Decimal;\n  }[];\n}\n\nexport interface SetRewardParams<T = TxVersion.LEGACY> {\n  poolInfo: ApiV3PoolInfoConcentratedItem;\n  poolKeys?: ClmmKeys;\n  ownerInfo: {\n    feePayer?: PublicKey;\n    useSOLBalance?: boolean; // if has WSOL mint\n  };\n\n  rewardInfo: {\n    programId: PublicKey;\n    mint: PublicKey;\n    openTime: number; // If the reward is being distributed, please give 0\n    endTime: number; // If no modification is required, enter 0\n    perSecond: Decimal;\n  };\n  associatedOnly?: boolean;\n  checkCreateATAOwner?: boolean;\n  computeBudgetConfig?: ComputeBudgetConfig;\n  txVersion?: T;\n  txTipConfig?: TxTipConfig;\n  feePayer?: PublicKey;\n}\n\nexport interface SetRewardsParams<T = TxVersion.LEGACY> extends Omit<SetRewardParams<T>, \"rewardInfo\"> {\n  rewardInfos: {\n    mint: ApiV3Token;\n    openTime: number; // If the reward is being distributed, please give 0\n    endTime: number; // If no modification is required, enter 0\n    perSecond: Decimal;\n  }[];\n}\n\nexport interface CollectRewardParams<T = TxVersion.LEGACY> {\n  poolInfo: ApiV3PoolInfoConcentratedItem;\n  ownerInfo: {\n    feePayer?: PublicKey;\n    useSOLBalance?: boolean; // if has WSOL mint\n  };\n  rewardMint: PublicKey;\n  associatedOnly?: boolean;\n  checkCreateATAOwner?: boolean;\n  computeBudgetConfig?: ComputeBudgetConfig;\n  txVersion?: T;\n  txTipConfig?: TxTipConfig;\n  feePayer?: PublicKey;\n}\n\nexport interface CollectRewardsParams<T = TxVersion.LEGACY> extends Omit<CollectRewardParams, \"rewardMint\"> {\n  rewardMints: PublicKey[];\n}\n\nexport interface HarvestAllRewardsParams<T = TxVersion.LEGACY> {\n  allPoolInfo: Record<string, ApiV3PoolInfoConcentratedItem>;\n  allPositions: Record<string, ClmmPositionLayout[]>;\n  ownerInfo: {\n    feePayer?: PublicKey;\n    useSOLBalance?: boolean;\n  };\n  lockInfo?: { [poolId: string]: { [positionNft: string]: ReturnType<typeof LockClPositionLayoutV2.decode> } };\n  associatedOnly?: boolean;\n  checkCreateATAOwner?: boolean;\n  programId?: PublicKey;\n  txVersion?: T;\n  computeBudgetConfig?: ComputeBudgetConfig;\n  txTipConfig?: TxTipConfig;\n  feePayer?: PublicKey;\n}\n\nexport interface TickArrayBitmapExtensionType {\n  poolId: PublicKey;\n  positiveTickArrayBitmap: BN[][];\n  negativeTickArrayBitmap: BN[][];\n}\n\nexport interface ReturnTypeFetchExBitmaps {\n  [exBitmapId: string]: TickArrayBitmapExtensionType;\n}\n\nexport interface ClosePositionExtInfo {\n  address: {\n    positionNftAccount: PublicKey;\n    personalPosition: PublicKey;\n  };\n}\n\nexport interface InitRewardExtInfo {\n  address: {\n    poolRewardVault: PublicKey;\n    operationId: PublicKey;\n  };\n}\n\nexport type ClmmRpcData = ReturnType<typeof PoolInfoLayout.decode> & { currentPrice: number; programId: PublicKey };\n\nexport interface ClmmLockAddress {\n  positionId: PublicKey;\n  lockPositionId: PublicKey;\n  lockNftAccount: PublicKey;\n  lockNftMint: PublicKey;\n  positionNftAccount: PublicKey;\n  metadataAccount: PublicKey;\n}\n"],"mappings":"kWAAA","names":[]}