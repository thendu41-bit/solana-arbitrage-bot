{"version":3,"sources":["../../../src/raydium/farm/type.ts"],"sourcesContent":["import { PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport { ApiV3PoolInfoStandardItem, ApiV3Token, FormatFarmInfoOut } from \"../../api/type\";\nimport { TxVersion } from \"../../common\";\nimport { BigNumberish } from \"../../common/bignumber\";\nimport { ComputeBudgetConfig, TxTipConfig } from \"../../raydium/type\";\nimport { poolTypeV6 } from \"./config\";\n\nexport type RewardType = keyof typeof poolTypeV6;\nexport interface APIRewardInfo {\n  rewardMint: string;\n  rewardVault: string;\n  rewardOpenTime: number;\n  rewardEndTime: number;\n  rewardPerSecond: string | number;\n  rewardSender?: string;\n  rewardType: string;\n}\n\nexport interface RewardInfoWithKey {\n  rewardMint: PublicKey;\n  rewardVault: PublicKey;\n  rewardOpenTime: number;\n  rewardEndTime: number;\n  rewardType: RewardType;\n  rewardPerSecond: string | number;\n  rewardSender?: PublicKey;\n}\nexport interface FarmRewardInfo {\n  mint: PublicKey;\n  perSecond: string;\n  openTime: number;\n  endTime: number;\n  rewardType: RewardType;\n}\n\nexport interface FarmRewardInfoConfig {\n  isSet: BN;\n  rewardPerSecond: BN;\n  rewardOpenTime: BN;\n  rewardEndTime: BN;\n  rewardType: BN;\n}\n\nexport interface RewardInfoKey {\n  rewardMint: PublicKey;\n  rewardVault: PublicKey;\n  userRewardToken: PublicKey;\n}\n\nexport interface FarmPoolInfoV6 {\n  version: number;\n  programId: PublicKey;\n\n  lpMint: PublicKey;\n\n  rewardInfos: FarmRewardInfo[];\n\n  lockInfo: {\n    lockMint: PublicKey;\n    lockVault: PublicKey;\n  };\n}\n\nexport interface CreateFarm<T = TxVersion.LEGACY> {\n  poolInfo: ApiV3PoolInfoStandardItem;\n  rewardInfos: FarmRewardInfo[];\n  payer?: PublicKey;\n  programId?: PublicKey;\n  txVersion?: T;\n  computeBudgetConfig?: ComputeBudgetConfig;\n  txTipConfig?: TxTipConfig;\n  feePayer?: PublicKey;\n}\n\nexport interface CreateFarmExtInfo {\n  farmId: PublicKey;\n  farmAuthority: PublicKey;\n  lpVault: PublicKey;\n  lockUserAccount: PublicKey;\n  nonce: number;\n}\n\nexport interface UpdateFarmReward<T = TxVersion.LEGACY> {\n  farmInfo: FormatFarmInfoOut;\n  newRewardInfo: FarmRewardInfo;\n  payer?: PublicKey;\n  txVersion?: T;\n  computeBudgetConfig?: ComputeBudgetConfig;\n  txTipConfig?: TxTipConfig;\n  feePayer?: PublicKey;\n}\n\nexport interface UpdateFarmRewards<T = TxVersion.LEGACY> {\n  farmInfo: FormatFarmInfoOut;\n  newRewardInfos: FarmRewardInfo[];\n  payer?: PublicKey;\n  txVersion?: T;\n  computeBudgetConfig?: ComputeBudgetConfig;\n  txTipConfig?: TxTipConfig;\n  feePayer?: PublicKey;\n}\n\nexport interface FarmDWParam<T = TxVersion.LEGACY> {\n  farmInfo: {\n    id: string;\n    programId: string;\n    lpMint: ApiV3Token;\n    rewardInfos: { mint: ApiV3Token }[];\n  };\n  amount: BigNumberish;\n  feePayer?: PublicKey;\n  useSOLBalance?: boolean;\n  associatedOnly?: boolean;\n  checkCreateATAOwner?: boolean;\n  deposited?: BN;\n  txVersion?: T;\n  userAuxiliaryLedgers?: string[];\n  computeBudgetConfig?: ComputeBudgetConfig;\n  txTipConfig?: TxTipConfig;\n}\n/* ================= pool keys ================= */\nexport type FarmPoolKeys = {\n  readonly id: PublicKey;\n  readonly lpMint: PublicKey;\n  readonly version: number;\n  readonly programId: PublicKey;\n  readonly authority: PublicKey;\n  readonly lpVault: PublicKey;\n  readonly upcoming: boolean;\n  readonly rewardInfos: (\n    | {\n      readonly rewardMint: PublicKey;\n      readonly rewardVault: PublicKey;\n    }\n    | {\n      readonly rewardMint: PublicKey;\n      readonly rewardVault: PublicKey;\n      readonly rewardOpenTime: number;\n      readonly rewardEndTime: number;\n      readonly rewardPerSecond: number;\n      readonly rewardType: RewardType;\n    }\n  )[];\n};\n"],"mappings":"kWAAA","names":[]}