{"version":3,"sources":["../../../src/raydium/tradeV2/type.ts"],"sourcesContent":["import { Keypair, PublicKey, Signer, Transaction, TransactionInstruction } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport Decimal from \"decimal.js\";\nimport { ApiV3PoolInfoItem, PoolKeys } from \"../../api/type\";\nimport { Token, TokenAmount } from \"../../module\";\nimport { ComputeClmmPoolInfo } from \"../../raydium/clmm/type\";\nimport { ComputeAmountOutParam } from \"../../raydium/liquidity/type\";\nimport { CpmmComputeData } from \"../cpmm\";\nimport { TransferAmountFee } from \"../type\";\n\nexport interface ComputeAmountOutAmmLayout {\n  amountIn: TransferAmountFee;\n  amountOut: TransferAmountFee;\n  minAmountOut: TransferAmountFee;\n  currentPrice: Decimal | undefined;\n  executionPrice: Decimal | null;\n  priceImpact: Decimal;\n  fee: TokenAmount[];\n  routeType: \"amm\";\n  poolInfoList: ComputePoolType[];\n  remainingAccounts: PublicKey[][];\n  poolReady: boolean;\n  poolType: \"CLMM\" | \"CPMM\" | \"STABLE\" | undefined;\n\n  feeConfig?: {\n    feeAmount: BN;\n    feeAccount: PublicKey;\n  };\n\n  expirationTime: number | undefined;\n\n  allTrade: boolean;\n  slippage: number;\n  clmmExPriceX64: (BN | undefined)[];\n}\nexport interface ComputeAmountOutRouteLayout {\n  amountIn: TransferAmountFee;\n  amountOut: TransferAmountFee;\n  minAmountOut: TransferAmountFee;\n  currentPrice: Decimal | undefined;\n  executionPrice: Decimal | null;\n  priceImpact: Decimal;\n  fee: TokenAmount[];\n  routeType: \"route\";\n  poolInfoList: ComputePoolType[];\n  remainingAccounts: (PublicKey[] | undefined)[];\n  minMiddleAmountFee: TokenAmount | undefined;\n  middleToken: Token;\n  poolReady: boolean;\n  poolType: (string | undefined)[];\n\n  feeConfig?: {\n    feeAmount: BN;\n    feeAccount: PublicKey;\n  };\n\n  expirationTime: number | undefined;\n  allTrade: boolean;\n  slippage: number;\n  clmmExPriceX64: (BN | undefined)[];\n}\n\nexport type ComputeAmountOutLayout = ComputeAmountOutAmmLayout | ComputeAmountOutRouteLayout;\n\nexport type MakeSwapInstructionParam = {\n  ownerInfo: {\n    wallet: PublicKey;\n    // tokenAccountA: PublicKey\n    // tokenAccountB: PublicKey\n\n    sourceToken: PublicKey;\n    routeToken?: PublicKey;\n    destinationToken: PublicKey;\n    userPdaAccount?: PublicKey;\n  };\n\n  inputMint: PublicKey;\n  routeProgram: PublicKey;\n\n  // ComputeAmountOutAmmLayout | ComputeAmountOutRouteLayout;\n  swapInfo:\n  | (\n    | (Omit<ComputeAmountOutAmmLayout, \"poolKey\"> & {\n      poolKey: PoolKeys[];\n      poolInfo: ComputePoolType[];\n    })\n    | (Omit<ComputeAmountOutRouteLayout, \"poolKey\"> & {\n      poolKey: PoolKeys[];\n      poolInfo: ComputePoolType[];\n    })\n  ) & {\n    outputMint: PublicKey;\n  };\n};\n\nexport interface PoolAccountInfoV4 {\n  ammId: string;\n  status: BN;\n  baseDecimals: number;\n  quoteDecimals: number;\n  lpDecimals: number;\n  baseReserve: BN;\n  quoteReserve: BN;\n  lpSupply: BN;\n  startTime: BN;\n}\n\nexport interface ReturnTypeFetchMultipleInfo {\n  [ammId: string]: ComputeAmountOutParam[\"poolInfo\"];\n}\nexport type ReturnTypeGetAddLiquidityDefaultPool = ApiV3PoolInfoItem | undefined;\nexport interface ReturnTypeMakeSwapInstruction {\n  signers: (Keypair | Signer)[];\n  instructions: TransactionInstruction[];\n  instructionTypes: string[];\n  address: { [key: string]: PublicKey };\n  lookupTableAddress: string[];\n}\nexport interface ReturnTypeMakeSwapTransaction {\n  transactions: {\n    transaction: Transaction;\n    signer: (Keypair | Signer)[];\n  }[];\n  address: { [key: string]: PublicKey };\n}\n\nexport type BasicPoolInfo = {\n  id: PublicKey;\n  version: number;\n  mintA: PublicKey;\n  mintB: PublicKey;\n};\n\nexport type RoutePathType = {\n  [routeMint: string]: {\n    skipMintCheck?: boolean;\n    mintProgram: PublicKey;\n    in: BasicPoolInfo[];\n    out: BasicPoolInfo[];\n    mDecimals: number;\n  };\n};\n\nexport interface ReturnTypeGetAllRoute {\n  directPath: BasicPoolInfo[];\n  addLiquidityPools: BasicPoolInfo[];\n  routePathDict: RoutePathType;\n  needSimulate: BasicPoolInfo[];\n  needTickArray: BasicPoolInfo[];\n  cpmmPoolList: BasicPoolInfo[];\n}\n\nexport type ComputePoolType = ComputeAmountOutParam[\"poolInfo\"] | ComputeClmmPoolInfo | CpmmComputeData;\nexport type ComputeRoutePathType = {\n  [routeMint: string]: {\n    skipMintCheck?: boolean;\n    mintProgram: PublicKey;\n    in: ComputePoolType[];\n    out: ComputePoolType[];\n    mDecimals: number;\n  };\n};\n"],"mappings":"kWAAA","names":[]}