/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export const getTickArrayStartTickIndex: (a: number, b: number) => number;
export const tickIndexToSqrtPrice: (a: number) => number;
export const sqrtPriceToTickIndex: (a: number) => number;
export const getInitializableTickIndex: (a: number, b: number, c: number) => number;
export const getPrevInitializableTickIndex: (a: number, b: number) => number;
export const getNextInitializableTickIndex: (a: number, b: number) => number;
export const isTickIndexInBounds: (a: number) => number;
export const isTickInitializable: (a: number, b: number) => number;
export const invertTickIndex: (a: number) => number;
export const invertSqrtPrice: (a: number) => number;
export const getFullRangeTickIndexes: (a: number) => number;
export const orderTickIndexes: (a: number, b: number) => number;
export const isFullRangeOnly: (a: number) => number;
export const getTickIndexInArray: (a: number, b: number, c: number, d: number) => void;
export const decreaseLiquidityQuote: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => void;
export const decreaseLiquidityQuoteA: (a: number, b: bigint, c: number, d: number, e: number, f: number, g: number, h: number) => void;
export const decreaseLiquidityQuoteB: (a: number, b: bigint, c: number, d: number, e: number, f: number, g: number, h: number) => void;
export const increaseLiquidityQuote: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => void;
export const increaseLiquidityQuoteA: (a: number, b: bigint, c: number, d: number, e: number, f: number, g: number, h: number) => void;
export const increaseLiquidityQuoteB: (a: number, b: bigint, c: number, d: number, e: number, f: number, g: number, h: number) => void;
export const tryGetAmountDeltaA: (a: number, b: number, c: number, d: number, e: number) => void;
export const tryGetAmountDeltaB: (a: number, b: number, c: number, d: number, e: number) => void;
export const tryGetNextSqrtPriceFromA: (a: number, b: number, c: number, d: bigint, e: number) => void;
export const tryGetNextSqrtPriceFromB: (a: number, b: number, c: number, d: bigint, e: number) => void;
export const tryApplyTransferFee: (a: number, b: bigint, c: number) => void;
export const tryReverseApplyTransferFee: (a: number, b: bigint, c: number) => void;
export const tryGetMaxAmountWithSlippageTolerance: (a: number, b: bigint, c: number) => void;
export const tryGetMinAmountWithSlippageTolerance: (a: number, b: bigint, c: number) => void;
export const tryApplySwapFee: (a: number, b: bigint, c: number) => void;
export const tryReverseApplySwapFee: (a: number, b: bigint, c: number) => void;
export const swapQuoteByInputToken: (a: number, b: bigint, c: number, d: number, e: number, f: number, g: number, h: bigint, i: number, j: number) => void;
export const swapQuoteByOutputToken: (a: number, b: bigint, c: number, d: number, e: number, f: number, g: number, h: bigint, i: number, j: number) => void;
export const _REDUCTION_FACTOR_DENOMINATOR: () => number;
export const _ADAPTIVE_FEE_CONTROL_FACTOR_DENOMINATOR: () => number;
export const _MAX_REFERENCE_AGE: () => bigint;
export const _POSITION_BUNDLE_SIZE: () => number;
export const _TICK_ARRAY_NOT_EVENLY_SPACED: (a: number) => void;
export const _TICK_INDEX_OUT_OF_BOUNDS: (a: number) => void;
export const _INVALID_TICK_INDEX: (a: number) => void;
export const _ARITHMETIC_OVERFLOW: (a: number) => void;
export const _AMOUNT_EXCEEDS_MAX_U64: (a: number) => void;
export const _SQRT_PRICE_OUT_OF_BOUNDS: (a: number) => void;
export const _TICK_SEQUENCE_EMPTY: (a: number) => void;
export const _SQRT_PRICE_LIMIT_OUT_OF_BOUNDS: (a: number) => void;
export const _INVALID_SQRT_PRICE_LIMIT_DIRECTION: (a: number) => void;
export const _ZERO_TRADABLE_AMOUNT: (a: number) => void;
export const _INVALID_TIMESTAMP: (a: number) => void;
export const _INVALID_TRANSFER_FEE: (a: number) => void;
export const _INVALID_SLIPPAGE_TOLERANCE: (a: number) => void;
export const _TICK_INDEX_NOT_IN_ARRAY: (a: number) => void;
export const _INVALID_TICK_ARRAY_SEQUENCE: (a: number) => void;
export const _INVALID_ADAPTIVE_FEE_INFO: (a: number) => void;
export const _NUM_REWARDS: () => number;
export const _FEE_RATE_DENOMINATOR: () => number;
export const _TICK_ARRAY_SIZE: () => number;
export const _FULL_RANGE_ONLY_TICK_SPACING_THRESHOLD: () => number;
export const _MIN_TICK_INDEX: () => number;
export const _MAX_TICK_INDEX: () => number;
export const isPositionInRange: (a: number, b: number, c: number) => number;
export const positionStatus: (a: number, b: number, c: number) => number;
export const positionRatio: (a: number, b: number, c: number) => number;
export const priceToSqrtPrice: (a: number, b: number, c: number) => number;
export const sqrtPriceToPrice: (a: number, b: number, c: number) => number;
export const invertPrice: (a: number, b: number, c: number) => number;
export const tickIndexToPrice: (a: number, b: number, c: number) => number;
export const priceToTickIndex: (a: number, b: number, c: number) => number;
export const _VOLATILITY_ACCUMULATOR_SCALE_FACTOR: () => number;
export const _FEE_RATE_HARD_LIMIT: () => number;
export const collectRewardsQuote: (a: number, b: number, c: number, d: number, e: number, f: bigint, g: number, h: number, i: number) => void;
export const firstUnoccupiedPositionInBundle: (a: number, b: number) => number;
export const isPositionBundleFull: (a: number, b: number) => number;
export const isPositionBundleEmpty: (a: number, b: number) => number;
export const isInitializedWithAdaptiveFee: (a: number) => number;
export const collectFeesQuote: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => void;
export const __wbindgen_export_0: (a: number, b: number) => number;
export const __wbindgen_export_1: (a: number, b: number, c: number, d: number) => number;
export const __wbindgen_export_2: (a: number) => void;
export const __wbindgen_add_to_stack_pointer: (a: number) => number;
