{"version":3,"file":"index.iife.min.js","sources":["../../../node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js","../../../node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js","../../../node_modules/.pnpm/buffer@6.0.3/node_modules/buffer/index.js","../../../node_modules/.pnpm/@noble+hashes@1.4.0/node_modules/@noble/hashes/esm/_assert.js","../../../node_modules/.pnpm/@noble+hashes@1.4.0/node_modules/@noble/hashes/esm/crypto.js","../../../node_modules/.pnpm/@noble+hashes@1.4.0/node_modules/@noble/hashes/esm/utils.js","../../../node_modules/.pnpm/@noble+hashes@1.4.0/node_modules/@noble/hashes/esm/_md.js","../../../node_modules/.pnpm/@noble+hashes@1.4.0/node_modules/@noble/hashes/esm/_u64.js","../../../node_modules/.pnpm/@noble+hashes@1.4.0/node_modules/@noble/hashes/esm/sha512.js","../../../node_modules/.pnpm/@noble+curves@1.4.2/node_modules/@noble/curves/esm/abstract/utils.js","../../../node_modules/.pnpm/@noble+curves@1.4.2/node_modules/@noble/curves/esm/abstract/modular.js","../../../node_modules/.pnpm/@noble+curves@1.4.2/node_modules/@noble/curves/esm/abstract/curve.js","../../../node_modules/.pnpm/@noble+curves@1.4.2/node_modules/@noble/curves/esm/abstract/edwards.js","../../../node_modules/.pnpm/@noble+curves@1.4.2/node_modules/@noble/curves/esm/ed25519.js","../../../node_modules/.pnpm/bn.js@5.2.1/node_modules/bn.js/lib/bn.js","../../../node_modules/.pnpm/safe-buffer@5.2.1/node_modules/safe-buffer/index.js","../../../node_modules/.pnpm/base-x@3.0.9/node_modules/base-x/src/index.js","../../../node_modules/.pnpm/bs58@4.0.1/node_modules/bs58/index.js","../../../node_modules/.pnpm/@noble+hashes@1.4.0/node_modules/@noble/hashes/esm/sha256.js","../../../node_modules/.pnpm/text-encoding-utf-8@1.0.2/node_modules/text-encoding-utf-8/lib/encoding.lib.js","../../../node_modules/.pnpm/borsh@0.7.0/node_modules/borsh/lib/index.js","../../../node_modules/.pnpm/@solana+buffer-layout@4.0.1/node_modules/@solana/buffer-layout/lib/Layout.js","../../../node_modules/.pnpm/bigint-buffer@1.1.5/node_modules/bigint-buffer/dist/browser.js","../../../node_modules/.pnpm/superstruct@2.0.2/node_modules/superstruct/dist/index.mjs","../../../node_modules/.pnpm/@noble+hashes@1.4.0/node_modules/@noble/hashes/esm/hmac.js","../../../node_modules/.pnpm/@noble+curves@1.4.2/node_modules/@noble/curves/esm/abstract/weierstrass.js","../../../node_modules/.pnpm/@noble+curves@1.4.2/node_modules/@noble/curves/esm/_shortw_utils.js","../../../node_modules/.pnpm/@noble+curves@1.4.2/node_modules/@noble/curves/esm/secp256k1.js","../../../node_modules/.pnpm/@solana+web3.js@1.95.3/node_modules/@solana/web3.js/lib/index.browser.esm.js","../../../token/js/lib/esm/constants.js","../../../node_modules/.pnpm/@solana+buffer-layout-utils@0.2.0/node_modules/@solana/buffer-layout-utils/lib/esm/base.mjs","../../../node_modules/.pnpm/@solana+buffer-layout-utils@0.2.0/node_modules/@solana/buffer-layout-utils/lib/esm/bigint.mjs","../../../node_modules/.pnpm/@solana+buffer-layout-utils@0.2.0/node_modules/@solana/buffer-layout-utils/lib/esm/native.mjs","../../../node_modules/.pnpm/@solana+buffer-layout-utils@0.2.0/node_modules/@solana/buffer-layout-utils/lib/esm/web3.mjs","../../../token/js/lib/esm/errors.js","../../../token/js/lib/esm/instructions/types.js","../../../token/js/lib/esm/instructions/internal.js","../../../token/js/lib/esm/instructions/approve.js","../../../token/js/lib/esm/extensions/accountType.js","../../../token/js/lib/esm/state/multisig.js","../../../token/js/lib/esm/state/account.js","../../../token/js/lib/esm/state/mint.js","../../../token/js/lib/esm/instructions/associatedTokenAccount.js","../src/utils/math.ts","../src/constants.ts","../src/utils/program-address.ts","../../../node_modules/.pnpm/buffer-layout@1.2.2/node_modules/buffer-layout/lib/Layout.js","../src/codecs.ts","../src/layouts.ts","../src/utils/stake.ts","../src/utils/instruction.ts","../src/utils/index.ts","../src/instructions.ts","../src/index.ts"],"sourcesContent":["'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","function number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`positive integer expected, not ${n}`);\n}\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`boolean expected, not ${b}`);\n}\n// copied from utils\nexport function isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\nfunction bytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Uint8Array expected');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);\n}\nfunction hash(h) {\n    if (typeof h !== 'function' || typeof h.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(h.outputLen);\n    number(h.blockLen);\n}\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nexport { number, bool, bytes, hash, exists, output };\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n//# sourceMappingURL=_assert.js.map","export const crypto = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n//# sourceMappingURL=crypto.js.map","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nimport { bytes as abytes } from './_assert.js';\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nexport function isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\n// Cast array to different type\nexport const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nexport const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\n// The rotate left (circular left shift) operation for uint32\nexport const rotl = (word, shift) => (word << shift) | ((word >>> (32 - shift)) >>> 0);\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// The byte swap operation for uint32\nexport const byteSwap = (word) => ((word << 24) & 0xff000000) |\n    ((word << 8) & 0xff0000) |\n    ((word >>> 8) & 0xff00) |\n    ((word >>> 24) & 0xff);\n// Conditionally byte swap if on a big-endian platform\nexport const byteSwapIfBE = isLE ? (n) => n : (n) => byteSwap(n);\n// In place byte swap for Uint32Array\nexport function byteSwap32(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        arr[i] = byteSwap(arr[i]);\n    }\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9)\n        return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F)\n        return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f)\n        return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    abytes(data);\n    return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// For runtime check if class implements interface\nexport class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nconst toStr = {}.toString;\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexport function wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexport function wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto && typeof crypto.getRandomValues === 'function') {\n        return crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map","import { exists, output } from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js';\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Choice: a ? b : c\nexport const Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nexport const Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport class HashMD extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        exists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        exists(this);\n        output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in\n        // current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n//# sourceMappingURL=_md.js.map","const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nconst rotr32L = (h, _l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nexport { fromBig, split, toBig, shrSH, shrSL, rotrSH, rotrSL, rotrBH, rotrBL, rotr32H, rotr32L, rotlSH, rotlSL, rotlBH, rotlBL, add, add3L, add3H, add4L, add4H, add5H, add5L, };\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n//# sourceMappingURL=_u64.js.map","import { HashMD } from './_md.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => u64.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nexport class SHA512 extends HashMD {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nclass SHA512_224 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x8c3d37c8 | 0;\n        this.Al = 0x19544da2 | 0;\n        this.Bh = 0x73e19966 | 0;\n        this.Bl = 0x89dcd4d6 | 0;\n        this.Ch = 0x1dfab7ae | 0;\n        this.Cl = 0x32ff9c82 | 0;\n        this.Dh = 0x679dd514 | 0;\n        this.Dl = 0x582f9fcf | 0;\n        this.Eh = 0x0f6d2b69 | 0;\n        this.El = 0x7bd44da8 | 0;\n        this.Fh = 0x77e36f73 | 0;\n        this.Fl = 0x04c48942 | 0;\n        this.Gh = 0x3f9d85a8 | 0;\n        this.Gl = 0x6a1d36c8 | 0;\n        this.Hh = 0x1112e6ad | 0;\n        this.Hl = 0x91d692a1 | 0;\n        this.outputLen = 28;\n    }\n}\nclass SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nexport const sha512 = /* @__PURE__ */ wrapConstructor(() => new SHA512());\nexport const sha512_224 = /* @__PURE__ */ wrapConstructor(() => new SHA512_224());\nexport const sha512_256 = /* @__PURE__ */ wrapConstructor(() => new SHA512_256());\nexport const sha384 = /* @__PURE__ */ wrapConstructor(() => new SHA384());\n//# sourceMappingURL=sha512.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nexport function isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\nexport function abytes(item) {\n    if (!isBytes(item))\n        throw new Error('Uint8Array expected');\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nexport function numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nexport function hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // Big Endian\n    return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9)\n        return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F)\n        return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f)\n        return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes) {\n    abytes(bytes);\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nexport function numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n) {\n    return hexToBytes(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = hexToBytes(hex);\n        }\n        catch (e) {\n            throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n        }\n    }\n    else if (isBytes(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(`${title} must be hex string or Uint8Array`);\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n    return res;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a, b) {\n    if (a.length !== b.length)\n        return false;\n    let diff = 0;\n    for (let i = 0; i < a.length; i++)\n        diff |= a[i] ^ b[i];\n    return diff === 0;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n) {\n    let len;\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\n        ;\n    return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n, pos) {\n    return (n >> BigInt(pos)) & _1n;\n}\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n, pos, value) {\n    return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;\n// DRBG\nconst u8n = (data) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr) => Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n()) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    stringOrUint8Array: (val) => typeof val === 'string' || isBytes(val),\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nexport function validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error(`Invalid validator \"${type}\", expected function`);\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n//# sourceMappingURL=utils.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport { bitMask, bytesToNumberBE, bytesToNumberLE, ensureBytes, numberToBytesBE, numberToBytesLE, validateObject, } from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n// Calculates a modulo b\nexport function mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num, power, modulo) {\n    if (modulo <= _0n || power < _0n)\n        throw new Error('Expected power/modulo > 0');\n    if (modulo === _1n)\n        return _0n;\n    let res = _1n;\n    while (power > _0n) {\n        if (power & _1n)\n            res = (res * num) % modulo;\n        num = (num * num) % modulo;\n        power >>= _1n;\n    }\n    return res;\n}\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n// Inverses number over modulo\nexport function invert(number, modulo) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P) {\n    // Legendre constant: used to calculate Legendre symbol (a | p),\n    // which denotes the value of a^((p-1)/2) (mod p).\n    // (a | p) ≡ 1    if a is a square (mod p)\n    // (a | p) ≡ -1   if a is not a square (mod p)\n    // (a | p) ≡ 0    if a ≡ 0 (mod p)\n    const legendreC = (P - _1n) / _2n;\n    let Q, S, Z;\n    // Step 1: By factoring out powers of 2 from p - 1,\n    // find q and s such that p - 1 = q*(2^s) with q odd\n    for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++)\n        ;\n    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n    for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++)\n        ;\n    // Fast-path\n    if (S === 1) {\n        const p1div4 = (P + _1n) / _4n;\n        return function tonelliFast(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Slow-path\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))\n            throw new Error('Cannot find square root');\n        let r = S;\n        // TODO: will fail at Fp2/etc\n        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n        let x = Fp.pow(n, Q1div2); // first guess at the square root\n        let b = Fp.pow(n, Q); // first guess at the fudge factor\n        while (!Fp.eql(b, Fp.ONE)) {\n            if (Fp.eql(b, Fp.ZERO))\n                return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n            // Find m such b^(2^m)==1\n            let m = 1;\n            for (let t2 = Fp.sqr(b); m < r; m++) {\n                if (Fp.eql(t2, Fp.ONE))\n                    break;\n                t2 = Fp.sqr(t2); // t2 *= t2\n            }\n            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n            const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n            g = Fp.sqr(ge); // g = ge * ge\n            x = Fp.mul(x, ge); // x *= ge\n            b = Fp.mul(b, g); // b *= g\n            r = m;\n        }\n        return x;\n    };\n}\nexport function FpSqrt(P) {\n    // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n    // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n    // P ≡ 3 (mod 4)\n    // √n = n^((P+1)/4)\n    if (P % _4n === _3n) {\n        // Not all roots possible!\n        // const ORDER =\n        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n        // const NUM = 72057594037927816n;\n        const p1div4 = (P + _1n) / _4n;\n        return function sqrt3mod4(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            // Throw if root**2 != n\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n    if (P % _8n === _5n) {\n        const c1 = (P - _5n) / _8n;\n        return function sqrt5mod8(Fp, n) {\n            const n2 = Fp.mul(n, _2n);\n            const v = Fp.pow(n2, c1);\n            const nv = Fp.mul(n, v);\n            const i = Fp.mul(Fp.mul(nv, _2n), v);\n            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // P ≡ 9 (mod 16)\n    if (P % _16n === _9n) {\n        // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n        // Means we cannot use sqrt for constants at all!\n        //\n        // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n        // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n        // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n        // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n        // sqrt = (x) => {\n        //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n        //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n        //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n        //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n        //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n        //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n        //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n        //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n        //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n        //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n        // }\n    }\n    // Other cases: Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\n    'addN', 'subN', 'mulN', 'sqrN'\n];\nexport function validateField(field) {\n    const initial = {\n        ORDER: 'bigint',\n        MASK: 'bigint',\n        BYTES: 'isSafeInteger',\n        BITS: 'isSafeInteger',\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n        map[val] = 'function';\n        return map;\n    }, initial);\n    return validateObject(field, opts);\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow(f, num, power) {\n    // Should have same speed as pow for bigints\n    // TODO: benchmark!\n    if (power < _0n)\n        throw new Error('Expected power > 0');\n    if (power === _0n)\n        return f.ONE;\n    if (power === _1n)\n        return num;\n    let p = f.ONE;\n    let d = num;\n    while (power > _0n) {\n        if (power & _1n)\n            p = f.mul(p, d);\n        d = f.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch(f, nums) {\n    const tmp = new Array(nums.length);\n    // Walk from first to last, multiply them by each other MOD p\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = acc;\n        return f.mul(acc, num);\n    }, f.ONE);\n    // Invert last element\n    const inverted = f.inv(lastMultiplied);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = f.mul(acc, tmp[i]);\n        return f.mul(acc, num);\n    }, inverted);\n    return tmp;\n}\nexport function FpDiv(f, lhs, rhs) {\n    return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare(f) {\n    const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n    return (x) => {\n        const p = f.pow(x, legendreConst);\n        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n    };\n}\n// CURVE.n lengths\nexport function nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return { nBitLength: _nBitLength, nByteLength };\n}\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(ORDER, bitLen, isLE = false, redef = {}) {\n    if (ORDER <= _0n)\n        throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n    if (BYTES > 2048)\n        throw new Error('Field lengths over 2048 bytes are not supported');\n    const sqrtP = FpSqrt(ORDER);\n    const f = Object.freeze({\n        ORDER,\n        BITS,\n        BYTES,\n        MASK: bitMask(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num) => mod(num, ORDER),\n        isValid: (num) => {\n            if (typeof num !== 'bigint')\n                throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num) => num === _0n,\n        isOdd: (num) => (num & _1n) === _1n,\n        neg: (num) => mod(-num, ORDER),\n        eql: (lhs, rhs) => lhs === rhs,\n        sqr: (num) => mod(num * num, ORDER),\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n        pow: (num, power) => FpPow(f, num, power),\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num) => num * num,\n        addN: (lhs, rhs) => lhs + rhs,\n        subN: (lhs, rhs) => lhs - rhs,\n        mulN: (lhs, rhs) => lhs * rhs,\n        inv: (num) => invert(num, ORDER),\n        sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n        invertBatch: (lst) => FpInvertBatch(f, lst),\n        // TODO: do we really need constant cmov?\n        // We don't have const-time bigints anyway, so probably will be not very useful\n        cmov: (a, b, c) => (c ? b : a),\n        toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n        fromBytes: (bytes) => {\n            if (bytes.length !== BYTES)\n                throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n            return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n        },\n    });\n    return Object.freeze(f);\n}\nexport function FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nexport function FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nexport function hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = ensureBytes('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n        throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n    const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== 'bigint')\n        throw new Error('field order must be bigint');\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024)\n        throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n    const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n//# sourceMappingURL=modular.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { validateField, nLength } from './modular.js';\nimport { validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF(c, bits) {\n    const constTimeNegate = (condition, item) => {\n        const neg = item.negate();\n        return condition ? neg : item;\n    };\n    const opts = (W) => {\n        const windows = Math.ceil(bits / W) + 1; // +1, because\n        const windowSize = 2 ** (W - 1); // -1 because we skip zero\n        return { windows, windowSize };\n    };\n    return {\n        constTimeNegate,\n        // non-const time multiplication ladder\n        unsafeLadder(elm, n) {\n            let p = c.ZERO;\n            let d = elm;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @returns precomputed point tables flattened to a single array\n         */\n        precomputeWindow(elm, W) {\n            const { windows, windowSize } = opts(W);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for (let window = 0; window < windows; window++) {\n                base = p;\n                points.push(base);\n                // =1, because we skip zero\n                for (let i = 1; i < windowSize; i++) {\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */\n        wNAF(W, precomputes, n) {\n            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n            // But need to carefully remove other checks before wNAF. ORDER == bits here\n            const { windows, windowSize } = opts(W);\n            let p = c.ZERO;\n            let f = c.BASE;\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for (let window = 0; window < windows; window++) {\n                const offset = window * windowSize;\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n                // there is negate now: it is possible that negated element from low value\n                // would be the same as high element, which will create carry into next window.\n                // It's not obvious how this can fail, but still worth investigating later.\n                // Check if we're onto Zero point.\n                // Add random point inside current window to f.\n                const offset1 = offset;\n                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n                const cond1 = window % 2 !== 0;\n                const cond2 = wbits < 0;\n                if (wbits === 0) {\n                    // The most important part for const-time getPublicKey\n                    f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n                }\n                else {\n                    p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n                }\n            }\n            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n            // Even if the variable is still unused, there are some checks which will\n            // throw an exception, so compiler needs to prove they won't happen, which is hard.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return { p, f };\n        },\n        wNAFCached(P, precomputesMap, n, transform) {\n            // @ts-ignore\n            const W = P._WINDOW_SIZE || 1;\n            // Calculate precomputes on a first run, reuse them after\n            let comp = precomputesMap.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1) {\n                    precomputesMap.set(P, transform(comp));\n                }\n            }\n            return this.wNAF(W, comp, n);\n        },\n    };\n}\nexport function validateBasic(curve) {\n    validateField(curve.Fp);\n    validateObject(curve, {\n        n: 'bigint',\n        h: 'bigint',\n        Gx: 'field',\n        Gy: 'field',\n    }, {\n        nBitLength: 'isSafeInteger',\n        nByteLength: 'isSafeInteger',\n    });\n    // Set defaults\n    return Object.freeze({\n        ...nLength(curve.n, curve.nBitLength),\n        ...curve,\n        ...{ p: curve.Fp.ORDER },\n    });\n}\n//# sourceMappingURL=curve.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Twisted Edwards curve. The formula is: ax² + y² = 1 + dx²y²\nimport { validateBasic, wNAF } from './curve.js';\nimport { mod } from './modular.js';\nimport * as ut from './utils.js';\nimport { ensureBytes } from './utils.js';\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _8n = BigInt(8);\n// verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:\nconst VERIFY_DEFAULT = { zip215: true };\nfunction validateOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(curve, {\n        hash: 'function',\n        a: 'bigint',\n        d: 'bigint',\n        randomBytes: 'function',\n    }, {\n        adjustScalarBytes: 'function',\n        domain: 'function',\n        uvRatio: 'function',\n        mapToCurve: 'function',\n    });\n    // Set defaults\n    return Object.freeze({ ...opts });\n}\n// It is not generic twisted curve for now, but ed25519/ed448 generic implementation\nexport function twistedEdwards(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER, prehash: prehash, hash: cHash, randomBytes, nByteLength, h: cofactor, } = CURVE;\n    const MASK = _2n << (BigInt(nByteLength * 8) - _1n);\n    const modP = Fp.create; // Function overrides\n    // sqrt(u/v)\n    const uvRatio = CURVE.uvRatio ||\n        ((u, v) => {\n            try {\n                return { isValid: true, value: Fp.sqrt(u * Fp.inv(v)) };\n            }\n            catch (e) {\n                return { isValid: false, value: _0n };\n            }\n        });\n    const adjustScalarBytes = CURVE.adjustScalarBytes || ((bytes) => bytes); // NOOP\n    const domain = CURVE.domain ||\n        ((data, ctx, phflag) => {\n            if (ctx.length || phflag)\n                throw new Error('Contexts/pre-hash are not supported');\n            return data;\n        }); // NOOP\n    const inBig = (n) => typeof n === 'bigint' && _0n < n; // n in [1..]\n    const inRange = (n, max) => inBig(n) && inBig(max) && n < max; // n in [1..max-1]\n    const in0MaskRange = (n) => n === _0n || inRange(n, MASK); // n in [0..MASK-1]\n    function assertInRange(n, max) {\n        // n in [1..max-1]\n        if (inRange(n, max))\n            return n;\n        throw new Error(`Expected valid scalar < ${max}, got ${typeof n} ${n}`);\n    }\n    function assertGE0(n) {\n        // n in [0..CURVE_ORDER-1]\n        return n === _0n ? n : assertInRange(n, CURVE_ORDER); // GE = prime subgroup, not full group\n    }\n    const pointPrecomputes = new Map();\n    function isPoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ExtendedPoint expected');\n    }\n    // Extended Point works in extended coordinates: (x, y, z, t) ∋ (x=x/z, y=y/z, t=xy).\n    // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates\n    class Point {\n        constructor(ex, ey, ez, et) {\n            this.ex = ex;\n            this.ey = ey;\n            this.ez = ez;\n            this.et = et;\n            if (!in0MaskRange(ex))\n                throw new Error('x required');\n            if (!in0MaskRange(ey))\n                throw new Error('y required');\n            if (!in0MaskRange(ez))\n                throw new Error('z required');\n            if (!in0MaskRange(et))\n                throw new Error('t required');\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        static fromAffine(p) {\n            if (p instanceof Point)\n                throw new Error('extended point not allowed');\n            const { x, y } = p || {};\n            if (!in0MaskRange(x) || !in0MaskRange(y))\n                throw new Error('invalid affine point');\n            return new Point(x, y, _1n, modP(x * y));\n        }\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p) => p.ez));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            this._WINDOW_SIZE = windowSize;\n            pointPrecomputes.delete(this);\n        }\n        // Not required for fromHex(), which always creates valid points.\n        // Could be useful for fromAffine().\n        assertValidity() {\n            const { a, d } = CURVE;\n            if (this.is0())\n                throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?\n            // Equation in affine coordinates: ax² + y² = 1 + dx²y²\n            // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²\n            const { ex: X, ey: Y, ez: Z, et: T } = this;\n            const X2 = modP(X * X); // X²\n            const Y2 = modP(Y * Y); // Y²\n            const Z2 = modP(Z * Z); // Z²\n            const Z4 = modP(Z2 * Z2); // Z⁴\n            const aX2 = modP(X2 * a); // aX²\n            const left = modP(Z2 * modP(aX2 + Y2)); // (aX² + Y²)Z²\n            const right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z⁴ + dX²Y²\n            if (left !== right)\n                throw new Error('bad point: equation left != right (1)');\n            // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T\n            const XY = modP(X * Y);\n            const ZT = modP(Z * T);\n            if (XY !== ZT)\n                throw new Error('bad point: equation left != right (2)');\n        }\n        // Compare one point to another.\n        equals(other) {\n            isPoint(other);\n            const { ex: X1, ey: Y1, ez: Z1 } = this;\n            const { ex: X2, ey: Y2, ez: Z2 } = other;\n            const X1Z2 = modP(X1 * Z2);\n            const X2Z1 = modP(X2 * Z1);\n            const Y1Z2 = modP(Y1 * Z2);\n            const Y2Z1 = modP(Y2 * Z1);\n            return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        negate() {\n            // Flips point sign to a negative one (-x, y in affine coords)\n            return new Point(modP(-this.ex), this.ey, this.ez, modP(-this.et));\n        }\n        // Fast algo for doubling Extended Point.\n        // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n        // Cost: 4M + 4S + 1*a + 6add + 1*2.\n        double() {\n            const { a } = CURVE;\n            const { ex: X1, ey: Y1, ez: Z1 } = this;\n            const A = modP(X1 * X1); // A = X12\n            const B = modP(Y1 * Y1); // B = Y12\n            const C = modP(_2n * modP(Z1 * Z1)); // C = 2*Z12\n            const D = modP(a * A); // D = a*A\n            const x1y1 = X1 + Y1;\n            const E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B\n            const G = D + B; // G = D+B\n            const F = G - C; // F = G-C\n            const H = D - B; // H = D-B\n            const X3 = modP(E * F); // X3 = E*F\n            const Y3 = modP(G * H); // Y3 = G*H\n            const T3 = modP(E * H); // T3 = E*H\n            const Z3 = modP(F * G); // Z3 = F*G\n            return new Point(X3, Y3, Z3, T3);\n        }\n        // Fast algo for adding 2 Extended Points.\n        // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n        // Cost: 9M + 1*a + 1*d + 7add.\n        add(other) {\n            isPoint(other);\n            const { a, d } = CURVE;\n            const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this;\n            const { ex: X2, ey: Y2, ez: Z2, et: T2 } = other;\n            // Faster algo for adding 2 Extended Points when curve's a=-1.\n            // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-4\n            // Cost: 8M + 8add + 2*2.\n            // Note: It does not check whether the `other` point is valid.\n            if (a === BigInt(-1)) {\n                const A = modP((Y1 - X1) * (Y2 + X2));\n                const B = modP((Y1 + X1) * (Y2 - X2));\n                const F = modP(B - A);\n                if (F === _0n)\n                    return this.double(); // Same point. Tests say it doesn't affect timing\n                const C = modP(Z1 * _2n * T2);\n                const D = modP(T1 * _2n * Z2);\n                const E = D + C;\n                const G = B + A;\n                const H = D - C;\n                const X3 = modP(E * F);\n                const Y3 = modP(G * H);\n                const T3 = modP(E * H);\n                const Z3 = modP(F * G);\n                return new Point(X3, Y3, Z3, T3);\n            }\n            const A = modP(X1 * X2); // A = X1*X2\n            const B = modP(Y1 * Y2); // B = Y1*Y2\n            const C = modP(T1 * d * T2); // C = T1*d*T2\n            const D = modP(Z1 * Z2); // D = Z1*Z2\n            const E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B\n            const F = D - C; // F = D-C\n            const G = D + C; // G = D+C\n            const H = modP(B - a * A); // H = B-a*A\n            const X3 = modP(E * F); // X3 = E*F\n            const Y3 = modP(G * H); // Y3 = G*H\n            const T3 = modP(E * H); // T3 = E*H\n            const Z3 = modP(F * G); // Z3 = F*G\n            return new Point(X3, Y3, Z3, T3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, pointPrecomputes, n, Point.normalizeZ);\n        }\n        // Constant-time multiplication.\n        multiply(scalar) {\n            const { p, f } = this.wNAF(assertInRange(scalar, CURVE_ORDER));\n            return Point.normalizeZ([p, f])[0];\n        }\n        // Non-constant-time multiplication. Uses double-and-add algorithm.\n        // It's faster, but should only be used when you don't care about\n        // an exposed private key e.g. sig verification.\n        // Does NOT allow scalars higher than CURVE.n.\n        multiplyUnsafe(scalar) {\n            let n = assertGE0(scalar); // 0 <= scalar < CURVE.n\n            if (n === _0n)\n                return I;\n            if (this.equals(I) || n === _1n)\n                return this;\n            if (this.equals(G))\n                return this.wNAF(n).p;\n            return wnaf.unsafeLadder(this, n);\n        }\n        // Checks if point is of small order.\n        // If you add something to small order point, you will have \"dirty\"\n        // point with torsion component.\n        // Multiplies point by cofactor and checks if the result is 0.\n        isSmallOrder() {\n            return this.multiplyUnsafe(cofactor).is0();\n        }\n        // Multiplies point by curve order and checks if the result is 0.\n        // Returns `false` is the point is dirty.\n        isTorsionFree() {\n            return wnaf.unsafeLadder(this, CURVE_ORDER).is0();\n        }\n        // Converts Extended point to default (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        toAffine(iz) {\n            const { ex: x, ey: y, ez: z } = this;\n            const is0 = this.is0();\n            if (iz == null)\n                iz = is0 ? _8n : Fp.inv(z); // 8 was chosen arbitrarily\n            const ax = modP(x * iz);\n            const ay = modP(y * iz);\n            const zz = modP(z * iz);\n            if (is0)\n                return { x: _0n, y: _1n };\n            if (zz !== _1n)\n                throw new Error('invZ was invalid');\n            return { x: ax, y: ay };\n        }\n        clearCofactor() {\n            const { h: cofactor } = CURVE;\n            if (cofactor === _1n)\n                return this;\n            return this.multiplyUnsafe(cofactor);\n        }\n        // Converts hash string or Uint8Array to Point.\n        // Uses algo from RFC8032 5.1.3.\n        static fromHex(hex, zip215 = false) {\n            const { d, a } = CURVE;\n            const len = Fp.BYTES;\n            hex = ensureBytes('pointHex', hex, len); // copy hex to a new array\n            const normed = hex.slice(); // copy again, we'll manipulate it\n            const lastByte = hex[len - 1]; // select last byte\n            normed[len - 1] = lastByte & ~0x80; // clear last bit\n            const y = ut.bytesToNumberLE(normed);\n            if (y === _0n) {\n                // y=0 is allowed\n            }\n            else {\n                // RFC8032 prohibits >= p, but ZIP215 doesn't\n                if (zip215)\n                    assertInRange(y, MASK); // zip215=true [1..P-1] (2^255-19-1 for ed25519)\n                else\n                    assertInRange(y, Fp.ORDER); // zip215=false [1..MASK-1] (2^256-1 for ed25519)\n            }\n            // Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:\n            // ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)\n            const y2 = modP(y * y); // denominator is always non-0 mod p.\n            const u = modP(y2 - _1n); // u = y² - 1\n            const v = modP(d * y2 - a); // v = d y² + 1.\n            let { isValid, value: x } = uvRatio(u, v); // √(u/v)\n            if (!isValid)\n                throw new Error('Point.fromHex: invalid y coordinate');\n            const isXOdd = (x & _1n) === _1n; // There are 2 square roots. Use x_0 bit to select proper\n            const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit\n            if (!zip215 && x === _0n && isLastByteOdd)\n                // if x=0 and x_0 = 1, fail\n                throw new Error('Point.fromHex: x=0 and x_0=1');\n            if (isLastByteOdd !== isXOdd)\n                x = modP(-x); // if x_0 != x mod 2, set x = p-x\n            return Point.fromAffine({ x, y });\n        }\n        static fromPrivateKey(privKey) {\n            return getExtendedPublicKey(privKey).point;\n        }\n        toRawBytes() {\n            const { x, y } = this.toAffine();\n            const bytes = ut.numberToBytesLE(y, Fp.BYTES); // each y has 2 x values (x, -y)\n            bytes[bytes.length - 1] |= x & _1n ? 0x80 : 0; // when compressing, it's enough to store y\n            return bytes; // and use the last byte to encode sign of x\n        }\n        toHex() {\n            return ut.bytesToHex(this.toRawBytes()); // Same as toRawBytes, but returns string.\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, _1n, modP(CURVE.Gx * CURVE.Gy));\n    Point.ZERO = new Point(_0n, _1n, _1n, _0n); // 0, 1, 1, 0\n    const { BASE: G, ZERO: I } = Point;\n    const wnaf = wNAF(Point, nByteLength * 8);\n    function modN(a) {\n        return mod(a, CURVE_ORDER);\n    }\n    // Little-endian SHA512 with modulo n\n    function modN_LE(hash) {\n        return modN(ut.bytesToNumberLE(hash));\n    }\n    /** Convenience method that creates public key and other stuff. RFC8032 5.1.5 */\n    function getExtendedPublicKey(key) {\n        const len = nByteLength;\n        key = ensureBytes('private key', key, len);\n        // Hash private key with curve's hash function to produce uniformingly random input\n        // Check byte lengths: ensure(64, h(ensure(32, key)))\n        const hashed = ensureBytes('hashed private key', cHash(key), 2 * len);\n        const head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE\n        const prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)\n        const scalar = modN_LE(head); // The actual private scalar\n        const point = G.multiply(scalar); // Point on Edwards curve aka public key\n        const pointBytes = point.toRawBytes(); // Uint8Array representation\n        return { head, prefix, scalar, point, pointBytes };\n    }\n    // Calculates EdDSA pub key. RFC8032 5.1.5. Privkey is hashed. Use first half with 3 bits cleared\n    function getPublicKey(privKey) {\n        return getExtendedPublicKey(privKey).pointBytes;\n    }\n    // int('LE', SHA512(dom2(F, C) || msgs)) mod N\n    function hashDomainToScalar(context = new Uint8Array(), ...msgs) {\n        const msg = ut.concatBytes(...msgs);\n        return modN_LE(cHash(domain(msg, ensureBytes('context', context), !!prehash)));\n    }\n    /** Signs message with privateKey. RFC8032 5.1.6 */\n    function sign(msg, privKey, options = {}) {\n        msg = ensureBytes('message', msg);\n        if (prehash)\n            msg = prehash(msg); // for ed25519ph etc.\n        const { prefix, scalar, pointBytes } = getExtendedPublicKey(privKey);\n        const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)\n        const R = G.multiply(r).toRawBytes(); // R = rG\n        const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)\n        const s = modN(r + k * scalar); // S = (r + k * s) mod L\n        assertGE0(s); // 0 <= s < l\n        const res = ut.concatBytes(R, ut.numberToBytesLE(s, Fp.BYTES));\n        return ensureBytes('result', res, nByteLength * 2); // 64-byte signature\n    }\n    const verifyOpts = VERIFY_DEFAULT;\n    function verify(sig, msg, publicKey, options = verifyOpts) {\n        const { context, zip215 } = options;\n        const len = Fp.BYTES; // Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n        sig = ensureBytes('signature', sig, 2 * len); // An extended group equation is checked.\n        msg = ensureBytes('message', msg);\n        if (prehash)\n            msg = prehash(msg); // for ed25519ph, etc\n        const s = ut.bytesToNumberLE(sig.slice(len, 2 * len));\n        // zip215: true is good for consensus-critical apps and allows points < 2^256\n        // zip215: false follows RFC8032 / NIST186-5 and restricts points to CURVE.p\n        let A, R, SB;\n        try {\n            A = Point.fromHex(publicKey, zip215);\n            R = Point.fromHex(sig.slice(0, len), zip215);\n            SB = G.multiplyUnsafe(s); // 0 <= s < l is done inside\n        }\n        catch (error) {\n            return false;\n        }\n        if (!zip215 && A.isSmallOrder())\n            return false;\n        const k = hashDomainToScalar(context, R.toRawBytes(), A.toRawBytes(), msg);\n        const RkA = R.add(A.multiplyUnsafe(k));\n        // [8][S]B = [8]R + [8][k]A'\n        return RkA.subtract(SB).clearCofactor().equals(Point.ZERO);\n    }\n    G._setWindowSize(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n    const utils = {\n        getExtendedPublicKey,\n        // ed25519 private keys are uniform 32b. No need to check for modulo bias, like in secp256k1.\n        randomPrivateKey: () => randomBytes(Fp.BYTES),\n        /**\n         * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT\n         * values. This slows down first getPublicKey() by milliseconds (see Speed section),\n         * but allows to speed-up subsequent getPublicKey() calls up to 20x.\n         * @param windowSize 2, 4, 8, 16\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3));\n            return point;\n        },\n    };\n    return {\n        CURVE,\n        getPublicKey,\n        sign,\n        verify,\n        ExtendedPoint: Point,\n        utils,\n    };\n}\n//# sourceMappingURL=edwards.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha512 } from '@noble/hashes/sha512';\nimport { concatBytes, randomBytes, utf8ToBytes } from '@noble/hashes/utils';\nimport { twistedEdwards } from './abstract/edwards.js';\nimport { createHasher, expand_message_xmd } from './abstract/hash-to-curve.js';\nimport { Field, FpSqrtEven, isNegativeLE, mod, pow2 } from './abstract/modular.js';\nimport { montgomery } from './abstract/montgomery.js';\nimport { bytesToHex, bytesToNumberLE, ensureBytes, equalBytes, numberToBytesLE, } from './abstract/utils.js';\n/**\n * ed25519 Twisted Edwards curve with following addons:\n * - X25519 ECDH\n * - Ristretto cofactor elimination\n * - Elligator hash-to-group / point indistinguishability\n */\nconst ED25519_P = BigInt('57896044618658097711785492504343953926634992332820282019728792003956564819949');\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst ED25519_SQRT_M1 = /* @__PURE__ */ BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _5n = BigInt(5), _8n = BigInt(8);\nfunction ed25519_pow_2_252_3(x) {\n    // prettier-ignore\n    const _10n = BigInt(10), _20n = BigInt(20), _40n = BigInt(40), _80n = BigInt(80);\n    const P = ED25519_P;\n    const x2 = (x * x) % P;\n    const b2 = (x2 * x) % P; // x^3, 11\n    const b4 = (pow2(b2, _2n, P) * b2) % P; // x^15, 1111\n    const b5 = (pow2(b4, _1n, P) * x) % P; // x^31\n    const b10 = (pow2(b5, _5n, P) * b5) % P;\n    const b20 = (pow2(b10, _10n, P) * b10) % P;\n    const b40 = (pow2(b20, _20n, P) * b20) % P;\n    const b80 = (pow2(b40, _40n, P) * b40) % P;\n    const b160 = (pow2(b80, _80n, P) * b80) % P;\n    const b240 = (pow2(b160, _80n, P) * b80) % P;\n    const b250 = (pow2(b240, _10n, P) * b10) % P;\n    const pow_p_5_8 = (pow2(b250, _2n, P) * x) % P;\n    // ^ To pow to (p+3)/8, multiply it by x.\n    return { pow_p_5_8, b2 };\n}\nfunction adjustScalarBytes(bytes) {\n    // Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,\n    // set the three least significant bits of the first byte\n    bytes[0] &= 248; // 0b1111_1000\n    // and the most significant bit of the last to zero,\n    bytes[31] &= 127; // 0b0111_1111\n    // set the second most significant bit of the last byte to 1\n    bytes[31] |= 64; // 0b0100_0000\n    return bytes;\n}\n// sqrt(u/v)\nfunction uvRatio(u, v) {\n    const P = ED25519_P;\n    const v3 = mod(v * v * v, P); // v³\n    const v7 = mod(v3 * v3 * v, P); // v⁷\n    // (p+3)/8 and (p-5)/8\n    const pow = ed25519_pow_2_252_3(u * v7).pow_p_5_8;\n    let x = mod(u * v3 * pow, P); // (uv³)(uv⁷)^(p-5)/8\n    const vx2 = mod(v * x * x, P); // vx²\n    const root1 = x; // First root candidate\n    const root2 = mod(x * ED25519_SQRT_M1, P); // Second root candidate\n    const useRoot1 = vx2 === u; // If vx² = u (mod p), x is a square root\n    const useRoot2 = vx2 === mod(-u, P); // If vx² = -u, set x <-- x * 2^((p-1)/4)\n    const noRoot = vx2 === mod(-u * ED25519_SQRT_M1, P); // There is no valid root, vx² = -u√(-1)\n    if (useRoot1)\n        x = root1;\n    if (useRoot2 || noRoot)\n        x = root2; // We return root2 anyway, for const-time\n    if (isNegativeLE(x, P))\n        x = mod(-x, P);\n    return { isValid: useRoot1 || useRoot2, value: x };\n}\n// Just in case\nexport const ED25519_TORSION_SUBGROUP = [\n    '0100000000000000000000000000000000000000000000000000000000000000',\n    'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n    '0000000000000000000000000000000000000000000000000000000000000080',\n    '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n    'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n    '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n    '0000000000000000000000000000000000000000000000000000000000000000',\n    'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n];\nconst Fp = /* @__PURE__ */ (() => Field(ED25519_P, undefined, true))();\nconst ed25519Defaults = /* @__PURE__ */ (() => ({\n    // Param: a\n    a: BigInt(-1), // Fp.create(-1) is proper; our way still works and is faster\n    // d is equal to -121665/121666 over finite field.\n    // Negative number is P - number, and division is invert(number, P)\n    d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n    // Finite field 𝔽p over which we'll do calculations; 2n**255n - 19n\n    Fp,\n    // Subgroup order: how many points curve has\n    // 2n**252n + 27742317777372353535851937790883648493n;\n    n: BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989'),\n    // Cofactor\n    h: _8n,\n    // Base point (x, y) aka generator point\n    Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n    Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n    hash: sha512,\n    randomBytes,\n    adjustScalarBytes,\n    // dom2\n    // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.\n    // Constant-time, u/√v\n    uvRatio,\n}))();\nexport const ed25519 = /* @__PURE__ */ (() => twistedEdwards(ed25519Defaults))();\nfunction ed25519_domain(data, ctx, phflag) {\n    if (ctx.length > 255)\n        throw new Error('Context is too big');\n    return concatBytes(utf8ToBytes('SigEd25519 no Ed25519 collisions'), new Uint8Array([phflag ? 1 : 0, ctx.length]), ctx, data);\n}\nexport const ed25519ctx = /* @__PURE__ */ (() => twistedEdwards({\n    ...ed25519Defaults,\n    domain: ed25519_domain,\n}))();\nexport const ed25519ph = /* @__PURE__ */ (() => twistedEdwards(Object.assign({}, ed25519Defaults, {\n    domain: ed25519_domain,\n    prehash: sha512,\n})))();\nexport const x25519 = /* @__PURE__ */ (() => montgomery({\n    P: ED25519_P,\n    a: BigInt(486662),\n    montgomeryBits: 255, // n is 253 bits\n    nByteLength: 32,\n    Gu: BigInt(9),\n    powPminus2: (x) => {\n        const P = ED25519_P;\n        // x^(p-2) aka x^(2^255-21)\n        const { pow_p_5_8, b2 } = ed25519_pow_2_252_3(x);\n        return mod(pow2(pow_p_5_8, _3n, P) * b2, P);\n    },\n    adjustScalarBytes,\n    randomBytes,\n}))();\n/**\n * Converts ed25519 public key to x25519 public key. Uses formula:\n * * `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`\n * * `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`\n * @example\n *   const someonesPub = ed25519.getPublicKey(ed25519.utils.randomPrivateKey());\n *   const aPriv = x25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(aPriv, edwardsToMontgomeryPub(someonesPub))\n */\nexport function edwardsToMontgomeryPub(edwardsPub) {\n    const { y } = ed25519.ExtendedPoint.fromHex(edwardsPub);\n    const _1n = BigInt(1);\n    return Fp.toBytes(Fp.create((_1n + y) * Fp.inv(_1n - y)));\n}\nexport const edwardsToMontgomery = edwardsToMontgomeryPub; // deprecated\n/**\n * Converts ed25519 secret key to x25519 secret key.\n * @example\n *   const someonesPub = x25519.getPublicKey(x25519.utils.randomPrivateKey());\n *   const aPriv = ed25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(edwardsToMontgomeryPriv(aPriv), someonesPub)\n */\nexport function edwardsToMontgomeryPriv(edwardsPriv) {\n    const hashed = ed25519Defaults.hash(edwardsPriv.subarray(0, 32));\n    return ed25519Defaults.adjustScalarBytes(hashed).subarray(0, 32);\n}\n// Hash To Curve Elligator2 Map (NOTE: different from ristretto255 elligator)\n// NOTE: very important part is usage of FpSqrtEven for ELL2_C1_EDWARDS, since\n// SageMath returns different root first and everything falls apart\nconst ELL2_C1 = /* @__PURE__ */ (() => (Fp.ORDER + _3n) / _8n)(); // 1. c1 = (q + 3) / 8       # Integer arithmetic\nconst ELL2_C2 = /* @__PURE__ */ (() => Fp.pow(_2n, ELL2_C1))(); // 2. c2 = 2^c1\nconst ELL2_C3 = /* @__PURE__ */ (() => Fp.sqrt(Fp.neg(Fp.ONE)))(); // 3. c3 = sqrt(-1)\n// prettier-ignore\nfunction map_to_curve_elligator2_curve25519(u) {\n    const ELL2_C4 = (Fp.ORDER - _5n) / _8n; // 4. c4 = (q - 5) / 8       # Integer arithmetic\n    const ELL2_J = BigInt(486662);\n    let tv1 = Fp.sqr(u); //  1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, _2n); //  2.  tv1 = 2 * tv1\n    let xd = Fp.add(tv1, Fp.ONE); //  3.   xd = tv1 + 1         # Nonzero: -1 is square (mod p), tv1 is not\n    let x1n = Fp.neg(ELL2_J); //  4.  x1n = -J              # x1 = x1n / xd = -J / (1 + 2 * u^2)\n    let tv2 = Fp.sqr(xd); //  5.  tv2 = xd^2\n    let gxd = Fp.mul(tv2, xd); //  6.  gxd = tv2 * xd        # gxd = xd^3\n    let gx1 = Fp.mul(tv1, ELL2_J); //  7.  gx1 = J * tv1         # x1n + J * xd\n    gx1 = Fp.mul(gx1, x1n); //  8.  gx1 = gx1 * x1n       # x1n^2 + J * x1n * xd\n    gx1 = Fp.add(gx1, tv2); //  9.  gx1 = gx1 + tv2       # x1n^2 + J * x1n * xd + xd^2\n    gx1 = Fp.mul(gx1, x1n); //  10. gx1 = gx1 * x1n       # x1n^3 + J * x1n^2 * xd + x1n * xd^2\n    let tv3 = Fp.sqr(gxd); //  11. tv3 = gxd^2\n    tv2 = Fp.sqr(tv3); //  12. tv2 = tv3^2           # gxd^4\n    tv3 = Fp.mul(tv3, gxd); //  13. tv3 = tv3 * gxd       # gxd^3\n    tv3 = Fp.mul(tv3, gx1); //  14. tv3 = tv3 * gx1       # gx1 * gxd^3\n    tv2 = Fp.mul(tv2, tv3); //  15. tv2 = tv2 * tv3       # gx1 * gxd^7\n    let y11 = Fp.pow(tv2, ELL2_C4); //  16. y11 = tv2^c4        # (gx1 * gxd^7)^((p - 5) / 8)\n    y11 = Fp.mul(y11, tv3); //  17. y11 = y11 * tv3       # gx1*gxd^3*(gx1*gxd^7)^((p-5)/8)\n    let y12 = Fp.mul(y11, ELL2_C3); //  18. y12 = y11 * c3\n    tv2 = Fp.sqr(y11); //  19. tv2 = y11^2\n    tv2 = Fp.mul(tv2, gxd); //  20. tv2 = tv2 * gxd\n    let e1 = Fp.eql(tv2, gx1); //  21.  e1 = tv2 == gx1\n    let y1 = Fp.cmov(y12, y11, e1); //  22.  y1 = CMOV(y12, y11, e1)  # If g(x1) is square, this is its sqrt\n    let x2n = Fp.mul(x1n, tv1); //  23. x2n = x1n * tv1       # x2 = x2n / xd = 2 * u^2 * x1n / xd\n    let y21 = Fp.mul(y11, u); //  24. y21 = y11 * u\n    y21 = Fp.mul(y21, ELL2_C2); //  25. y21 = y21 * c2\n    let y22 = Fp.mul(y21, ELL2_C3); //  26. y22 = y21 * c3\n    let gx2 = Fp.mul(gx1, tv1); //  27. gx2 = gx1 * tv1       # g(x2) = gx2 / gxd = 2 * u^2 * g(x1)\n    tv2 = Fp.sqr(y21); //  28. tv2 = y21^2\n    tv2 = Fp.mul(tv2, gxd); //  29. tv2 = tv2 * gxd\n    let e2 = Fp.eql(tv2, gx2); //  30.  e2 = tv2 == gx2\n    let y2 = Fp.cmov(y22, y21, e2); //  31.  y2 = CMOV(y22, y21, e2)  # If g(x2) is square, this is its sqrt\n    tv2 = Fp.sqr(y1); //  32. tv2 = y1^2\n    tv2 = Fp.mul(tv2, gxd); //  33. tv2 = tv2 * gxd\n    let e3 = Fp.eql(tv2, gx1); //  34.  e3 = tv2 == gx1\n    let xn = Fp.cmov(x2n, x1n, e3); //  35.  xn = CMOV(x2n, x1n, e3)  # If e3, x = x1, else x = x2\n    let y = Fp.cmov(y2, y1, e3); //  36.   y = CMOV(y2, y1, e3)    # If e3, y = y1, else y = y2\n    let e4 = Fp.isOdd(y); //  37.  e4 = sgn0(y) == 1        # Fix sign of y\n    y = Fp.cmov(y, Fp.neg(y), e3 !== e4); //  38.   y = CMOV(y, -y, e3 XOR e4)\n    return { xMn: xn, xMd: xd, yMn: y, yMd: _1n }; //  39. return (xn, xd, y, 1)\n}\nconst ELL2_C1_EDWARDS = /* @__PURE__ */ (() => FpSqrtEven(Fp, Fp.neg(BigInt(486664))))(); // sgn0(c1) MUST equal 0\nfunction map_to_curve_elligator2_edwards25519(u) {\n    const { xMn, xMd, yMn, yMd } = map_to_curve_elligator2_curve25519(u); //  1.  (xMn, xMd, yMn, yMd) =\n    // map_to_curve_elligator2_curve25519(u)\n    let xn = Fp.mul(xMn, yMd); //  2.  xn = xMn * yMd\n    xn = Fp.mul(xn, ELL2_C1_EDWARDS); //  3.  xn = xn * c1\n    let xd = Fp.mul(xMd, yMn); //  4.  xd = xMd * yMn    # xn / xd = c1 * xM / yM\n    let yn = Fp.sub(xMn, xMd); //  5.  yn = xMn - xMd\n    let yd = Fp.add(xMn, xMd); //  6.  yd = xMn + xMd    # (n / d - 1) / (n / d + 1) = (n - d) / (n + d)\n    let tv1 = Fp.mul(xd, yd); //  7. tv1 = xd * yd\n    let e = Fp.eql(tv1, Fp.ZERO); //  8.   e = tv1 == 0\n    xn = Fp.cmov(xn, Fp.ZERO, e); //  9.  xn = CMOV(xn, 0, e)\n    xd = Fp.cmov(xd, Fp.ONE, e); //  10. xd = CMOV(xd, 1, e)\n    yn = Fp.cmov(yn, Fp.ONE, e); //  11. yn = CMOV(yn, 1, e)\n    yd = Fp.cmov(yd, Fp.ONE, e); //  12. yd = CMOV(yd, 1, e)\n    const inv = Fp.invertBatch([xd, yd]); // batch division\n    return { x: Fp.mul(xn, inv[0]), y: Fp.mul(yn, inv[1]) }; //  13. return (xn, xd, yn, yd)\n}\nconst htf = /* @__PURE__ */ (() => createHasher(ed25519.ExtendedPoint, (scalars) => map_to_curve_elligator2_edwards25519(scalars[0]), {\n    DST: 'edwards25519_XMD:SHA-512_ELL2_RO_',\n    encodeDST: 'edwards25519_XMD:SHA-512_ELL2_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha512,\n}))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\nfunction assertRstPoint(other) {\n    if (!(other instanceof RistPoint))\n        throw new Error('RistrettoPoint expected');\n}\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst SQRT_M1 = ED25519_SQRT_M1;\n// √(ad - 1)\nconst SQRT_AD_MINUS_ONE = /* @__PURE__ */ BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\n// 1 / √(a-d)\nconst INVSQRT_A_MINUS_D = /* @__PURE__ */ BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\n// 1-d²\nconst ONE_MINUS_D_SQ = /* @__PURE__ */ BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\n// (d-1)²\nconst D_MINUS_ONE_SQ = /* @__PURE__ */ BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\n// Calculates 1/√(number)\nconst invertSqrt = (number) => uvRatio(_1n, number);\nconst MAX_255B = /* @__PURE__ */ BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nconst bytes255ToNumberLE = (bytes) => ed25519.CURVE.Fp.create(bytesToNumberLE(bytes) & MAX_255B);\n// Computes Elligator map for Ristretto\n// https://ristretto.group/formulas/elligator.html\nfunction calcElligatorRistrettoMap(r0) {\n    const { d } = ed25519.CURVE;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const r = mod(SQRT_M1 * r0 * r0); // 1\n    const Ns = mod((r + _1n) * ONE_MINUS_D_SQ); // 2\n    let c = BigInt(-1); // 3\n    const D = mod((c - d * r) * mod(r + d)); // 4\n    let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D); // 5\n    let s_ = mod(s * r0); // 6\n    if (!isNegativeLE(s_, P))\n        s_ = mod(-s_);\n    if (!Ns_D_is_sq)\n        s = s_; // 7\n    if (!Ns_D_is_sq)\n        c = r; // 8\n    const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D); // 9\n    const s2 = s * s;\n    const W0 = mod((s + s) * D); // 10\n    const W1 = mod(Nt * SQRT_AD_MINUS_ONE); // 11\n    const W2 = mod(_1n - s2); // 12\n    const W3 = mod(_1n + s2); // 13\n    return new ed25519.ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n}\n/**\n * Each ed25519/ExtendedPoint has 8 different equivalent points. This can be\n * a source of bugs for protocols like ring signatures. Ristretto was created to solve this.\n * Ristretto point operates in X:Y:Z:T extended coordinates like ExtendedPoint,\n * but it should work in its own namespace: do not combine those two.\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-ristretto255-decaf448\n */\nclass RistPoint {\n    // Private property to discourage combining ExtendedPoint + RistrettoPoint\n    // Always use Ristretto encoding/decoding instead.\n    constructor(ep) {\n        this.ep = ep;\n    }\n    static fromAffine(ap) {\n        return new RistPoint(ed25519.ExtendedPoint.fromAffine(ap));\n    }\n    /**\n     * Takes uniform output of 64-byte hash function like sha512 and converts it to `RistrettoPoint`.\n     * The hash-to-group operation applies Elligator twice and adds the results.\n     * **Note:** this is one-way map, there is no conversion from point to hash.\n     * https://ristretto.group/formulas/elligator.html\n     * @param hex 64-byte output of a hash function\n     */\n    static hashToCurve(hex) {\n        hex = ensureBytes('ristrettoHash', hex, 64);\n        const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n        const R1 = calcElligatorRistrettoMap(r1);\n        const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n        const R2 = calcElligatorRistrettoMap(r2);\n        return new RistPoint(R1.add(R2));\n    }\n    /**\n     * Converts ristretto-encoded string to ristretto point.\n     * https://ristretto.group/formulas/decoding.html\n     * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding\n     */\n    static fromHex(hex) {\n        hex = ensureBytes('ristrettoHex', hex, 32);\n        const { a, d } = ed25519.CURVE;\n        const P = ed25519.CURVE.Fp.ORDER;\n        const mod = ed25519.CURVE.Fp.create;\n        const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n        const s = bytes255ToNumberLE(hex);\n        // 1. Check that s_bytes is the canonical encoding of a field element, or else abort.\n        // 3. Check that s is non-negative, or else abort\n        if (!equalBytes(numberToBytesLE(s, 32), hex) || isNegativeLE(s, P))\n            throw new Error(emsg);\n        const s2 = mod(s * s);\n        const u1 = mod(_1n + a * s2); // 4 (a is -1)\n        const u2 = mod(_1n - a * s2); // 5\n        const u1_2 = mod(u1 * u1);\n        const u2_2 = mod(u2 * u2);\n        const v = mod(a * d * u1_2 - u2_2); // 6\n        const { isValid, value: I } = invertSqrt(mod(v * u2_2)); // 7\n        const Dx = mod(I * u2); // 8\n        const Dy = mod(I * Dx * v); // 9\n        let x = mod((s + s) * Dx); // 10\n        if (isNegativeLE(x, P))\n            x = mod(-x); // 10\n        const y = mod(u1 * Dy); // 11\n        const t = mod(x * y); // 12\n        if (!isValid || isNegativeLE(t, P) || y === _0n)\n            throw new Error(emsg);\n        return new RistPoint(new ed25519.ExtendedPoint(x, y, _1n, t));\n    }\n    /**\n     * Encodes ristretto point to Uint8Array.\n     * https://ristretto.group/formulas/encoding.html\n     */\n    toRawBytes() {\n        let { ex: x, ey: y, ez: z, et: t } = this.ep;\n        const P = ed25519.CURVE.Fp.ORDER;\n        const mod = ed25519.CURVE.Fp.create;\n        const u1 = mod(mod(z + y) * mod(z - y)); // 1\n        const u2 = mod(x * y); // 2\n        // Square root always exists\n        const u2sq = mod(u2 * u2);\n        const { value: invsqrt } = invertSqrt(mod(u1 * u2sq)); // 3\n        const D1 = mod(invsqrt * u1); // 4\n        const D2 = mod(invsqrt * u2); // 5\n        const zInv = mod(D1 * D2 * t); // 6\n        let D; // 7\n        if (isNegativeLE(t * zInv, P)) {\n            let _x = mod(y * SQRT_M1);\n            let _y = mod(x * SQRT_M1);\n            x = _x;\n            y = _y;\n            D = mod(D1 * INVSQRT_A_MINUS_D);\n        }\n        else {\n            D = D2; // 8\n        }\n        if (isNegativeLE(x * zInv, P))\n            y = mod(-y); // 9\n        let s = mod((z - y) * D); // 10 (check footer's note, no sqrt(-a))\n        if (isNegativeLE(s, P))\n            s = mod(-s);\n        return numberToBytesLE(s, 32); // 11\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toString() {\n        return this.toHex();\n    }\n    // Compare one point to another.\n    equals(other) {\n        assertRstPoint(other);\n        const { ex: X1, ey: Y1 } = this.ep;\n        const { ex: X2, ey: Y2 } = other.ep;\n        const mod = ed25519.CURVE.Fp.create;\n        // (x1 * y2 == y1 * x2) | (y1 * y2 == x1 * x2)\n        const one = mod(X1 * Y2) === mod(Y1 * X2);\n        const two = mod(Y1 * Y2) === mod(X1 * X2);\n        return one || two;\n    }\n    add(other) {\n        assertRstPoint(other);\n        return new RistPoint(this.ep.add(other.ep));\n    }\n    subtract(other) {\n        assertRstPoint(other);\n        return new RistPoint(this.ep.subtract(other.ep));\n    }\n    multiply(scalar) {\n        return new RistPoint(this.ep.multiply(scalar));\n    }\n    multiplyUnsafe(scalar) {\n        return new RistPoint(this.ep.multiplyUnsafe(scalar));\n    }\n    double() {\n        return new RistPoint(this.ep.double());\n    }\n    negate() {\n        return new RistPoint(this.ep.negate());\n    }\n}\nexport const RistrettoPoint = /* @__PURE__ */ (() => {\n    if (!RistPoint.BASE)\n        RistPoint.BASE = new RistPoint(ed25519.ExtendedPoint.BASE);\n    if (!RistPoint.ZERO)\n        RistPoint.ZERO = new RistPoint(ed25519.ExtendedPoint.ZERO);\n    return RistPoint;\n})();\n// Hashing to ristretto255. https://www.rfc-editor.org/rfc/rfc9380#appendix-B\nexport const hashToRistretto255 = (msg, options) => {\n    const d = options.DST;\n    const DST = typeof d === 'string' ? utf8ToBytes(d) : d;\n    const uniform_bytes = expand_message_xmd(msg, DST, 64, sha512);\n    const P = RistPoint.hashToCurve(uniform_bytes);\n    return P;\n};\nexport const hash_to_ristretto255 = hashToRistretto255; // legacy\n//# sourceMappingURL=ed25519.js.map","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {\n      Buffer = window.Buffer;\n    } else {\n      Buffer = require('buffer').Buffer;\n    }\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n      this.negative = 1;\n    }\n\n    if (start < number.length) {\n      if (base === 16) {\n        this._parseHex(number, start, endian);\n      } else {\n        this._parseBase(number, base, start);\n        if (endian === 'le') {\n          this._initArray(this.toArray(), base, endian);\n        }\n      }\n    }\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [number & 0x3ffffff];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [0];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this._strip();\n  };\n\n  function parseHex4Bits (string, index) {\n    var c = string.charCodeAt(index);\n    // '0' - '9'\n    if (c >= 48 && c <= 57) {\n      return c - 48;\n    // 'A' - 'F'\n    } else if (c >= 65 && c <= 70) {\n      return c - 55;\n    // 'a' - 'f'\n    } else if (c >= 97 && c <= 102) {\n      return c - 87;\n    } else {\n      assert(false, 'Invalid character in ' + string);\n    }\n  }\n\n  function parseHexByte (string, lowerBound, index) {\n    var r = parseHex4Bits(string, index);\n    if (index - 1 >= lowerBound) {\n      r |= parseHex4Bits(string, index - 1) << 4;\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start, endian) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    // 24-bits chunks\n    var off = 0;\n    var j = 0;\n\n    var w;\n    if (endian === 'be') {\n      for (i = number.length - 1; i >= start; i -= 2) {\n        w = parseHexByte(number, start, i) << off;\n        this.words[j] |= w & 0x3ffffff;\n        if (off >= 18) {\n          off -= 18;\n          j += 1;\n          this.words[j] |= w >>> 26;\n        } else {\n          off += 8;\n        }\n      }\n    } else {\n      var parseLength = number.length - start;\n      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {\n        w = parseHexByte(number, start, i) << off;\n        this.words[j] |= w & 0x3ffffff;\n        if (off >= 18) {\n          off -= 18;\n          j += 1;\n          this.words[j] |= w >>> 26;\n        } else {\n          off += 8;\n        }\n      }\n    }\n\n    this._strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var b = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        b = c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        b = c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        b = c;\n      }\n      assert(c >= 0 && b < mul, 'Invalid character');\n      r += b;\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [0];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    this._strip();\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  function move (dest, src) {\n    dest.words = src.words;\n    dest.length = src.length;\n    dest.negative = src.negative;\n    dest.red = src.red;\n  }\n\n  BN.prototype._move = function _move (dest) {\n    move(dest, this);\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype._strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  // Check Symbol.for because not everywhere where Symbol defined\n  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility\n  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {\n    try {\n      BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;\n    } catch (e) {\n      BN.prototype.inspect = inspect;\n    }\n  } else {\n    BN.prototype.inspect = inspect;\n  }\n\n  function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  }\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modrn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16, 2);\n  };\n\n  if (Buffer) {\n    BN.prototype.toBuffer = function toBuffer (endian, length) {\n      return this.toArrayLike(Buffer, endian, length);\n    };\n  }\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  var allocate = function allocate (ArrayType, size) {\n    if (ArrayType.allocUnsafe) {\n      return ArrayType.allocUnsafe(size);\n    }\n    return new ArrayType(size);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    this._strip();\n\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    var res = allocate(ArrayType, reqLength);\n    var postfix = endian === 'le' ? 'LE' : 'BE';\n    this['_toArrayLike' + postfix](res, byteLength);\n    return res;\n  };\n\n  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {\n    var position = 0;\n    var carry = 0;\n\n    for (var i = 0, shift = 0; i < this.length; i++) {\n      var word = (this.words[i] << shift) | carry;\n\n      res[position++] = word & 0xff;\n      if (position < res.length) {\n        res[position++] = (word >> 8) & 0xff;\n      }\n      if (position < res.length) {\n        res[position++] = (word >> 16) & 0xff;\n      }\n\n      if (shift === 6) {\n        if (position < res.length) {\n          res[position++] = (word >> 24) & 0xff;\n        }\n        carry = 0;\n        shift = 0;\n      } else {\n        carry = word >>> 24;\n        shift += 2;\n      }\n    }\n\n    if (position < res.length) {\n      res[position++] = carry;\n\n      while (position < res.length) {\n        res[position++] = 0;\n      }\n    }\n  };\n\n  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {\n    var position = res.length - 1;\n    var carry = 0;\n\n    for (var i = 0, shift = 0; i < this.length; i++) {\n      var word = (this.words[i] << shift) | carry;\n\n      res[position--] = word & 0xff;\n      if (position >= 0) {\n        res[position--] = (word >> 8) & 0xff;\n      }\n      if (position >= 0) {\n        res[position--] = (word >> 16) & 0xff;\n      }\n\n      if (shift === 6) {\n        if (position >= 0) {\n          res[position--] = (word >> 24) & 0xff;\n        }\n        carry = 0;\n        shift = 0;\n      } else {\n        carry = word >>> 24;\n        shift += 2;\n      }\n    }\n\n    if (position >= 0) {\n      res[position--] = carry;\n\n      while (position >= 0) {\n        res[position--] = 0;\n      }\n    }\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] >>> wbit) & 0x01;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this._strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this._strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this._strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this._strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this._strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out._strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out._strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    // Temporary disable, see https://github.com/indutny/bn.js/issues/211\n    // var fftm = new FFTM();\n    // return fftm.mulp(self, num, out);\n    return bigMulTo(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out._strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    var isNegNum = num < 0;\n    if (isNegNum) num = -num;\n\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return isNegNum ? this.ineg() : this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this._strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) <= num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this._strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this._strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q._strip();\n    }\n    a._strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modrn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modrn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modrn = function modrn (num) {\n    var isNegNum = num < 0;\n    if (isNegNum) num = -num;\n\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return isNegNum ? -acc : acc;\n  };\n\n  // WARNING: DEPRECATED\n  BN.prototype.modn = function modn (num) {\n    return this.modrn(num);\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    var isNegNum = num < 0;\n    if (isNegNum) num = -num;\n\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    this._strip();\n    return isNegNum ? this.ineg() : this;\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this._strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      if (r.strip !== undefined) {\n        // r is a BN v4 instance\n        r.strip();\n      } else {\n        // r is a BN v5 instance\n        r._strip();\n      }\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n\n    move(a, a.umod(this.m)._forceRed(this));\n    return a;\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1).toRed(this);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.prototype = Object.create(Buffer.prototype)\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","import { HashMD, Chi, Maj } from './_md.js';\nimport { rotr, wrapConstructor } from './utils.js';\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state:\n// first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends HashMD {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = SHA256_IV[0] | 0;\n        this.B = SHA256_IV[1] | 0;\n        this.C = SHA256_IV[2] | 0;\n        this.D = SHA256_IV[3] | 0;\n        this.E = SHA256_IV[4] | 0;\n        this.F = SHA256_IV[5] | 0;\n        this.G = SHA256_IV[6] | 0;\n        this.H = SHA256_IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n//# sourceMappingURL=sha256.js.map","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexports.TextEncoder = TextEncoder;\nexports.TextDecoder = TextDecoder;","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(require(\"text-encoding-utf-8\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", { fatal: true });\nfunction baseEncode(value) {\n    if (typeof value === \"string\") {\n        value = Buffer.from(value, \"utf8\");\n    }\n    return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n    return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybeResize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    writeU8(value) {\n        this.maybeResize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    writeU16(value) {\n        this.maybeResize();\n        this.buf.writeUInt16LE(value, this.length);\n        this.length += 2;\n    }\n    writeU32(value) {\n        this.maybeResize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    writeU64(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n    writeU128(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n    writeU256(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n    writeU512(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n    writeBuffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([\n            Buffer.from(this.buf.subarray(0, this.length)),\n            buffer,\n            Buffer.alloc(INITIAL_LENGTH),\n        ]);\n        this.length += buffer.length;\n    }\n    writeString(str) {\n        this.maybeResize();\n        const b = Buffer.from(str, \"utf8\");\n        this.writeU32(b.length);\n        this.writeBuffer(b);\n    }\n    writeFixedArray(array) {\n        this.writeBuffer(Buffer.from(array));\n    }\n    writeArray(array, fn) {\n        this.maybeResize();\n        this.writeU32(array.length);\n        for (const elem of array) {\n            this.maybeResize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n                    throw new BorshError(\"Reached the end of buffer when deserializing\");\n                }\n            }\n            throw e;\n        }\n    };\n}\nclass BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    readU8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.buf.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readU64() {\n        const buf = this.readBuffer(8);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU128() {\n        const buf = this.readBuffer(16);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU256() {\n        const buf = this.readBuffer(32);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU512() {\n        const buf = this.readBuffer(64);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readBuffer(len) {\n        if (this.offset + len > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    readString() {\n        const len = this.readU32();\n        const buf = this.readBuffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    readFixedArray(len) {\n        return new Uint8Array(this.readBuffer(len));\n    }\n    readArray(fn) {\n        const len = this.readU32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU16\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU256\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU512\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readString\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === \"string\") {\n            writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.writeFixedArray(value);\n            }\n            else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n                if (value.length !== fieldType[1]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n                }\n                for (let i = 0; i < fieldType[1]; i++) {\n                    serializeField(schema, null, value[i], fieldType[0], writer);\n                }\n            }\n            else {\n                writer.writeArray(value, (item) => {\n                    serializeField(schema, fieldName, item, fieldType[0], writer);\n                });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case \"option\": {\n                    if (value === null || value === undefined) {\n                        writer.writeU8(0);\n                    }\n                    else {\n                        writer.writeU8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                case \"map\": {\n                    writer.writeU32(value.size);\n                    value.forEach((val, key) => {\n                        serializeField(schema, fieldName, key, fieldType.key, writer);\n                        serializeField(schema, fieldName, val, fieldType.value, writer);\n                    });\n                    break;\n                }\n                default:\n                    throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction serializeStruct(schema, obj, writer) {\n    if (typeof obj.borshSerialize === \"function\") {\n        obj.borshSerialize(writer);\n        return;\n    }\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === \"enum\") {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.writeU8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n    const writer = new Writer();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === \"string\") {\n            return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                return reader.readFixedArray(fieldType[0]);\n            }\n            else if (typeof fieldType[1] === \"number\") {\n                const arr = [];\n                for (let i = 0; i < fieldType[1]; i++) {\n                    arr.push(deserializeField(schema, null, fieldType[0], reader));\n                }\n                return arr;\n            }\n            else {\n                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n            }\n        }\n        if (fieldType.kind === \"option\") {\n            const option = reader.readU8();\n            if (option) {\n                return deserializeField(schema, fieldName, fieldType.type, reader);\n            }\n            return undefined;\n        }\n        if (fieldType.kind === \"map\") {\n            let map = new Map();\n            const length = reader.readU32();\n            for (let i = 0; i < length; i++) {\n                const key = deserializeField(schema, fieldName, fieldType.key, reader);\n                const val = deserializeField(schema, fieldName, fieldType.value, reader);\n                map.set(key, val);\n            }\n            return map;\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction deserializeStruct(schema, classType, reader) {\n    if (typeof classType.borshDeserialize === \"function\") {\n        return classType.borshDeserialize(reader);\n    }\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === \"enum\") {\n        const idx = reader.readU8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;\n","/* The MIT License (MIT)\n *\n * Copyright 2015-2018 Peter A. Bigot\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n/**\n * Support for translating between Uint8Array instances and JavaScript\n * native types.\n *\n * {@link module:Layout~Layout|Layout} is the basis of a class\n * hierarchy that associates property names with sequences of encoded\n * bytes.\n *\n * Layouts are supported for these scalar (numeric) types:\n * * {@link module:Layout~UInt|Unsigned integers in little-endian\n *   format} with {@link module:Layout.u8|8-bit}, {@link\n *   module:Layout.u16|16-bit}, {@link module:Layout.u24|24-bit},\n *   {@link module:Layout.u32|32-bit}, {@link\n *   module:Layout.u40|40-bit}, and {@link module:Layout.u48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~UIntBE|Unsigned integers in big-endian\n *   format} with {@link module:Layout.u16be|16-bit}, {@link\n *   module:Layout.u24be|24-bit}, {@link module:Layout.u32be|32-bit},\n *   {@link module:Layout.u40be|40-bit}, and {@link\n *   module:Layout.u48be|48-bit} representation ranges;\n * * {@link module:Layout~Int|Signed integers in little-endian\n *   format} with {@link module:Layout.s8|8-bit}, {@link\n *   module:Layout.s16|16-bit}, {@link module:Layout.s24|24-bit},\n *   {@link module:Layout.s32|32-bit}, {@link\n *   module:Layout.s40|40-bit}, and {@link module:Layout.s48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~IntBE|Signed integers in big-endian format}\n *   with {@link module:Layout.s16be|16-bit}, {@link\n *   module:Layout.s24be|24-bit}, {@link module:Layout.s32be|32-bit},\n *   {@link module:Layout.s40be|40-bit}, and {@link\n *   module:Layout.s48be|48-bit} representation ranges;\n * * 64-bit integral values that decode to an exact (if magnitude is\n *   less than 2^53) or nearby integral Number in {@link\n *   module:Layout.nu64|unsigned little-endian}, {@link\n *   module:Layout.nu64be|unsigned big-endian}, {@link\n *   module:Layout.ns64|signed little-endian}, and {@link\n *   module:Layout.ns64be|unsigned big-endian} encodings;\n * * 32-bit floating point values with {@link\n *   module:Layout.f32|little-endian} and {@link\n *   module:Layout.f32be|big-endian} representations;\n * * 64-bit floating point values with {@link\n *   module:Layout.f64|little-endian} and {@link\n *   module:Layout.f64be|big-endian} representations;\n * * {@link module:Layout.const|Constants} that take no space in the\n *   encoded expression.\n *\n * and for these aggregate types:\n * * {@link module:Layout.seq|Sequence}s of instances of a {@link\n *   module:Layout~Layout|Layout}, with JavaScript representation as\n *   an Array and constant or data-dependent {@link\n *   module:Layout~Sequence#count|length};\n * * {@link module:Layout.struct|Structure}s that aggregate a\n *   heterogeneous sequence of {@link module:Layout~Layout|Layout}\n *   instances, with JavaScript representation as an Object;\n * * {@link module:Layout.union|Union}s that support multiple {@link\n *   module:Layout~VariantLayout|variant layouts} over a fixed\n *   (padded) or variable (not padded) span of bytes, using an\n *   unsigned integer at the start of the data or a separate {@link\n *   module:Layout.unionLayoutDiscriminator|layout element} to\n *   determine which layout to use when interpreting the buffer\n *   contents;\n * * {@link module:Layout.bits|BitStructure}s that contain a sequence\n *   of individual {@link\n *   module:Layout~BitStructure#addField|BitField}s packed into an 8,\n *   16, 24, or 32-bit unsigned integer starting at the least- or\n *   most-significant bit;\n * * {@link module:Layout.cstr|C strings} of varying length;\n * * {@link module:Layout.blob|Blobs} of fixed- or variable-{@link\n *   module:Layout~Blob#length|length} raw data.\n *\n * All {@link module:Layout~Layout|Layout} instances are immutable\n * after construction, to prevent internal state from becoming\n * inconsistent.\n *\n * @local Layout\n * @local ExternalLayout\n * @local GreedyCount\n * @local OffsetLayout\n * @local UInt\n * @local UIntBE\n * @local Int\n * @local IntBE\n * @local NearUInt64\n * @local NearUInt64BE\n * @local NearInt64\n * @local NearInt64BE\n * @local Float\n * @local FloatBE\n * @local Double\n * @local DoubleBE\n * @local Sequence\n * @local Structure\n * @local UnionDiscriminator\n * @local UnionLayoutDiscriminator\n * @local Union\n * @local VariantLayout\n * @local BitStructure\n * @local BitField\n * @local Boolean\n * @local Blob\n * @local CString\n * @local Constant\n * @local bindConstructorLayout\n * @module Layout\n * @license MIT\n * @author Peter A. Bigot\n * @see {@link https://github.com/pabigot/buffer-layout|buffer-layout on GitHub}\n */\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.s16 = exports.s8 = exports.nu64be = exports.u48be = exports.u40be = exports.u32be = exports.u24be = exports.u16be = exports.nu64 = exports.u48 = exports.u40 = exports.u32 = exports.u24 = exports.u16 = exports.u8 = exports.offset = exports.greedy = exports.Constant = exports.UTF8 = exports.CString = exports.Blob = exports.Boolean = exports.BitField = exports.BitStructure = exports.VariantLayout = exports.Union = exports.UnionLayoutDiscriminator = exports.UnionDiscriminator = exports.Structure = exports.Sequence = exports.DoubleBE = exports.Double = exports.FloatBE = exports.Float = exports.NearInt64BE = exports.NearInt64 = exports.NearUInt64BE = exports.NearUInt64 = exports.IntBE = exports.Int = exports.UIntBE = exports.UInt = exports.OffsetLayout = exports.GreedyCount = exports.ExternalLayout = exports.bindConstructorLayout = exports.nameWithProperty = exports.Layout = exports.uint8ArrayToBuffer = exports.checkUint8Array = void 0;\nexports.constant = exports.utf8 = exports.cstr = exports.blob = exports.unionLayoutDiscriminator = exports.union = exports.seq = exports.bits = exports.struct = exports.f64be = exports.f64 = exports.f32be = exports.f32 = exports.ns64be = exports.s48be = exports.s40be = exports.s32be = exports.s24be = exports.s16be = exports.ns64 = exports.s48 = exports.s40 = exports.s32 = exports.s24 = void 0;\nconst buffer_1 = require(\"buffer\");\n/* Check if a value is a Uint8Array.\n *\n * @ignore */\nfunction checkUint8Array(b) {\n    if (!(b instanceof Uint8Array)) {\n        throw new TypeError('b must be a Uint8Array');\n    }\n}\nexports.checkUint8Array = checkUint8Array;\n/* Create a Buffer instance from a Uint8Array.\n *\n * @ignore */\nfunction uint8ArrayToBuffer(b) {\n    checkUint8Array(b);\n    return buffer_1.Buffer.from(b.buffer, b.byteOffset, b.length);\n}\nexports.uint8ArrayToBuffer = uint8ArrayToBuffer;\n/**\n * Base class for layout objects.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * Layout#encode|encode} or {@link Layout#decode|decode} functions.\n *\n * @param {Number} span - Initializer for {@link Layout#span|span}.  The\n * parameter must be an integer; a negative value signifies that the\n * span is {@link Layout#getSpan|value-specific}.\n *\n * @param {string} [property] - Initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n */\nclass Layout {\n    constructor(span, property) {\n        if (!Number.isInteger(span)) {\n            throw new TypeError('span must be an integer');\n        }\n        /** The span of the layout in bytes.\n         *\n         * Positive values are generally expected.\n         *\n         * Zero will only appear in {@link Constant}s and in {@link\n         * Sequence}s where the {@link Sequence#count|count} is zero.\n         *\n         * A negative value indicates that the span is value-specific, and\n         * must be obtained using {@link Layout#getSpan|getSpan}. */\n        this.span = span;\n        /** The property name used when this layout is represented in an\n         * Object.\n         *\n         * Used only for layouts that {@link Layout#decode|decode} to Object\n         * instances.  If left undefined the span of the unnamed layout will\n         * be treated as padding: it will not be mutated by {@link\n         * Layout#encode|encode} nor represented as a property in the\n         * decoded Object. */\n        this.property = property;\n    }\n    /** Function to create an Object into which decoded properties will\n     * be written.\n     *\n     * Used only for layouts that {@link Layout#decode|decode} to Object\n     * instances, which means:\n     * * {@link Structure}\n     * * {@link Union}\n     * * {@link VariantLayout}\n     * * {@link BitStructure}\n     *\n     * If left undefined the JavaScript representation of these layouts\n     * will be Object instances.\n     *\n     * See {@link bindConstructorLayout}.\n     */\n    makeDestinationObject() {\n        return {};\n    }\n    /**\n     * Calculate the span of a specific instance of a layout.\n     *\n     * @param {Uint8Array} b - the buffer that contains an encoded instance.\n     *\n     * @param {Number} [offset] - the offset at which the encoded instance\n     * starts.  If absent a zero offset is inferred.\n     *\n     * @return {Number} - the number of bytes covered by the layout\n     * instance.  If this method is not overridden in a subclass the\n     * definition-time constant {@link Layout#span|span} will be\n     * returned.\n     *\n     * @throws {RangeError} - if the length of the value cannot be\n     * determined.\n     */\n    getSpan(b, offset) {\n        if (0 > this.span) {\n            throw new RangeError('indeterminate span');\n        }\n        return this.span;\n    }\n    /**\n     * Replicate the layout using a new property.\n     *\n     * This function must be used to get a structurally-equivalent layout\n     * with a different name since all {@link Layout} instances are\n     * immutable.\n     *\n     * **NOTE** This is a shallow copy.  All fields except {@link\n     * Layout#property|property} are strictly equal to the origin layout.\n     *\n     * @param {String} property - the value for {@link\n     * Layout#property|property} in the replica.\n     *\n     * @returns {Layout} - the copy with {@link Layout#property|property}\n     * set to `property`.\n     */\n    replicate(property) {\n        const rv = Object.create(this.constructor.prototype);\n        Object.assign(rv, this);\n        rv.property = property;\n        return rv;\n    }\n    /**\n     * Create an object from layout properties and an array of values.\n     *\n     * **NOTE** This function returns `undefined` if invoked on a layout\n     * that does not return its value as an Object.  Objects are\n     * returned for things that are a {@link Structure}, which includes\n     * {@link VariantLayout|variant layouts} if they are structures, and\n     * excludes {@link Union}s.  If you want this feature for a union\n     * you must use {@link Union.getVariant|getVariant} to select the\n     * desired layout.\n     *\n     * @param {Array} values - an array of values that correspond to the\n     * default order for properties.  As with {@link Layout#decode|decode}\n     * layout elements that have no property name are skipped when\n     * iterating over the array values.  Only the top-level properties are\n     * assigned; arguments are not assigned to properties of contained\n     * layouts.  Any unused values are ignored.\n     *\n     * @return {(Object|undefined)}\n     */\n    fromArray(values) {\n        return undefined;\n    }\n}\nexports.Layout = Layout;\n/* Provide text that carries a name (such as for a function that will\n * be throwing an error) annotated with the property of a given layout\n * (such as one for which the value was unacceptable).\n *\n * @ignore */\nfunction nameWithProperty(name, lo) {\n    if (lo.property) {\n        return name + '[' + lo.property + ']';\n    }\n    return name;\n}\nexports.nameWithProperty = nameWithProperty;\n/**\n * Augment a class so that instances can be encoded/decoded using a\n * given layout.\n *\n * Calling this function couples `Class` with `layout` in several ways:\n *\n * * `Class.layout_` becomes a static member property equal to `layout`;\n * * `layout.boundConstructor_` becomes a static member property equal\n *    to `Class`;\n * * The {@link Layout#makeDestinationObject|makeDestinationObject()}\n *   property of `layout` is set to a function that returns a `new\n *   Class()`;\n * * `Class.decode(b, offset)` becomes a static member function that\n *   delegates to {@link Layout#decode|layout.decode}.  The\n *   synthesized function may be captured and extended.\n * * `Class.prototype.encode(b, offset)` provides an instance member\n *   function that delegates to {@link Layout#encode|layout.encode}\n *   with `src` set to `this`.  The synthesized function may be\n *   captured and extended, but when the extension is invoked `this`\n *   must be explicitly bound to the instance.\n *\n * @param {class} Class - a JavaScript class with a nullary\n * constructor.\n *\n * @param {Layout} layout - the {@link Layout} instance used to encode\n * instances of `Class`.\n */\n// `Class` must be a constructor Function, but the assignment of a `layout_` property to it makes it difficult to type\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction bindConstructorLayout(Class, layout) {\n    if ('function' !== typeof Class) {\n        throw new TypeError('Class must be constructor');\n    }\n    if (Object.prototype.hasOwnProperty.call(Class, 'layout_')) {\n        throw new Error('Class is already bound to a layout');\n    }\n    if (!(layout && (layout instanceof Layout))) {\n        throw new TypeError('layout must be a Layout');\n    }\n    if (Object.prototype.hasOwnProperty.call(layout, 'boundConstructor_')) {\n        throw new Error('layout is already bound to a constructor');\n    }\n    Class.layout_ = layout;\n    layout.boundConstructor_ = Class;\n    layout.makeDestinationObject = (() => new Class());\n    Object.defineProperty(Class.prototype, 'encode', {\n        value(b, offset) {\n            return layout.encode(this, b, offset);\n        },\n        writable: true,\n    });\n    Object.defineProperty(Class, 'decode', {\n        value(b, offset) {\n            return layout.decode(b, offset);\n        },\n        writable: true,\n    });\n}\nexports.bindConstructorLayout = bindConstructorLayout;\n/**\n * An object that behaves like a layout but does not consume space\n * within its containing layout.\n *\n * This is primarily used to obtain metadata about a member, such as a\n * {@link OffsetLayout} that can provide data about a {@link\n * Layout#getSpan|value-specific span}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support {@link\n * ExternalLayout#isCount|isCount} or other {@link Layout} functions.\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n * @augments {Layout}\n */\nclass ExternalLayout extends Layout {\n    /**\n     * Return `true` iff the external layout decodes to an unsigned\n     * integer layout.\n     *\n     * In that case it can be used as the source of {@link\n     * Sequence#count|Sequence counts}, {@link Blob#length|Blob lengths},\n     * or as {@link UnionLayoutDiscriminator#layout|external union\n     * discriminators}.\n     *\n     * @abstract\n     */\n    isCount() {\n        throw new Error('ExternalLayout is abstract');\n    }\n}\nexports.ExternalLayout = ExternalLayout;\n/**\n * An {@link ExternalLayout} that determines its {@link\n * Layout#decode|value} based on offset into and length of the buffer\n * on which it is invoked.\n *\n * *Factory*: {@link module:Layout.greedy|greedy}\n *\n * @param {Number} [elementSpan] - initializer for {@link\n * GreedyCount#elementSpan|elementSpan}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {ExternalLayout}\n */\nclass GreedyCount extends ExternalLayout {\n    constructor(elementSpan = 1, property) {\n        if ((!Number.isInteger(elementSpan)) || (0 >= elementSpan)) {\n            throw new TypeError('elementSpan must be a (positive) integer');\n        }\n        super(-1, property);\n        /** The layout for individual elements of the sequence.  The value\n         * must be a positive integer.  If not provided, the value will be\n         * 1. */\n        this.elementSpan = elementSpan;\n    }\n    /** @override */\n    isCount() {\n        return true;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        checkUint8Array(b);\n        const rem = b.length - offset;\n        return Math.floor(rem / this.elementSpan);\n    }\n    /** @override */\n    encode(src, b, offset) {\n        return 0;\n    }\n}\nexports.GreedyCount = GreedyCount;\n/**\n * An {@link ExternalLayout} that supports accessing a {@link Layout}\n * at a fixed offset from the start of another Layout.  The offset may\n * be before, within, or after the base layout.\n *\n * *Factory*: {@link module:Layout.offset|offset}\n *\n * @param {Layout} layout - initializer for {@link\n * OffsetLayout#layout|layout}, modulo `property`.\n *\n * @param {Number} [offset] - Initializes {@link\n * OffsetLayout#offset|offset}.  Defaults to zero.\n *\n * @param {string} [property] - Optional new property name for a\n * {@link Layout#replicate| replica} of `layout` to be used as {@link\n * OffsetLayout#layout|layout}.  If not provided the `layout` is used\n * unchanged.\n *\n * @augments {Layout}\n */\nclass OffsetLayout extends ExternalLayout {\n    constructor(layout, offset = 0, property) {\n        if (!(layout instanceof Layout)) {\n            throw new TypeError('layout must be a Layout');\n        }\n        if (!Number.isInteger(offset)) {\n            throw new TypeError('offset must be integer or undefined');\n        }\n        super(layout.span, property || layout.property);\n        /** The subordinated layout. */\n        this.layout = layout;\n        /** The location of {@link OffsetLayout#layout} relative to the\n         * start of another layout.\n         *\n         * The value may be positive or negative, but an error will thrown\n         * if at the point of use it goes outside the span of the Uint8Array\n         * being accessed.  */\n        this.offset = offset;\n    }\n    /** @override */\n    isCount() {\n        return ((this.layout instanceof UInt)\n            || (this.layout instanceof UIntBE));\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return this.layout.decode(b, offset + this.offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        return this.layout.encode(src, b, offset + this.offset);\n    }\n}\nexports.OffsetLayout = OffsetLayout;\n/**\n * Represent an unsigned integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.u8|u8}, {@link\n *  module:Layout.u16|u16}, {@link module:Layout.u24|u24}, {@link\n *  module:Layout.u32|u32}, {@link module:Layout.u40|u40}, {@link\n *  module:Layout.u48|u48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UInt extends Layout {\n    constructor(span, property) {\n        super(span, property);\n        if (6 < this.span) {\n            throw new RangeError('span must not exceed 6 bytes');\n        }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readUIntLE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeUIntLE(src, offset, this.span);\n        return this.span;\n    }\n}\nexports.UInt = UInt;\n/**\n * Represent an unsigned integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.u8be|u8be}, {@link\n * module:Layout.u16be|u16be}, {@link module:Layout.u24be|u24be},\n * {@link module:Layout.u32be|u32be}, {@link\n * module:Layout.u40be|u40be}, {@link module:Layout.u48be|u48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UIntBE extends Layout {\n    constructor(span, property) {\n        super(span, property);\n        if (6 < this.span) {\n            throw new RangeError('span must not exceed 6 bytes');\n        }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readUIntBE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeUIntBE(src, offset, this.span);\n        return this.span;\n    }\n}\nexports.UIntBE = UIntBE;\n/**\n * Represent a signed integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.s8|s8}, {@link\n *  module:Layout.s16|s16}, {@link module:Layout.s24|s24}, {@link\n *  module:Layout.s32|s32}, {@link module:Layout.s40|s40}, {@link\n *  module:Layout.s48|s48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Int extends Layout {\n    constructor(span, property) {\n        super(span, property);\n        if (6 < this.span) {\n            throw new RangeError('span must not exceed 6 bytes');\n        }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readIntLE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeIntLE(src, offset, this.span);\n        return this.span;\n    }\n}\nexports.Int = Int;\n/**\n * Represent a signed integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.s8be|s8be}, {@link\n * module:Layout.s16be|s16be}, {@link module:Layout.s24be|s24be},\n * {@link module:Layout.s32be|s32be}, {@link\n * module:Layout.s40be|s40be}, {@link module:Layout.s48be|s48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass IntBE extends Layout {\n    constructor(span, property) {\n        super(span, property);\n        if (6 < this.span) {\n            throw new RangeError('span must not exceed 6 bytes');\n        }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readIntBE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeIntBE(src, offset, this.span);\n        return this.span;\n    }\n}\nexports.IntBE = IntBE;\nconst V2E32 = Math.pow(2, 32);\n/* True modulus high and low 32-bit words, where low word is always\n * non-negative. */\nfunction divmodInt64(src) {\n    const hi32 = Math.floor(src / V2E32);\n    const lo32 = src - (hi32 * V2E32);\n    return { hi32, lo32 };\n}\n/* Reconstruct Number from quotient and non-negative remainder */\nfunction roundedInt64(hi32, lo32) {\n    return hi32 * V2E32 + lo32;\n}\n/**\n * Represent an unsigned 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64|nu64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearUInt64 extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const buffer = uint8ArrayToBuffer(b);\n        const lo32 = buffer.readUInt32LE(offset);\n        const hi32 = buffer.readUInt32LE(offset + 4);\n        return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        const split = divmodInt64(src);\n        const buffer = uint8ArrayToBuffer(b);\n        buffer.writeUInt32LE(split.lo32, offset);\n        buffer.writeUInt32LE(split.hi32, offset + 4);\n        return 8;\n    }\n}\nexports.NearUInt64 = NearUInt64;\n/**\n * Represent an unsigned 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64be|nu64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearUInt64BE extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const buffer = uint8ArrayToBuffer(b);\n        const hi32 = buffer.readUInt32BE(offset);\n        const lo32 = buffer.readUInt32BE(offset + 4);\n        return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        const split = divmodInt64(src);\n        const buffer = uint8ArrayToBuffer(b);\n        buffer.writeUInt32BE(split.hi32, offset);\n        buffer.writeUInt32BE(split.lo32, offset + 4);\n        return 8;\n    }\n}\nexports.NearUInt64BE = NearUInt64BE;\n/**\n * Represent a signed 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64|ns64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearInt64 extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const buffer = uint8ArrayToBuffer(b);\n        const lo32 = buffer.readUInt32LE(offset);\n        const hi32 = buffer.readInt32LE(offset + 4);\n        return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        const split = divmodInt64(src);\n        const buffer = uint8ArrayToBuffer(b);\n        buffer.writeUInt32LE(split.lo32, offset);\n        buffer.writeInt32LE(split.hi32, offset + 4);\n        return 8;\n    }\n}\nexports.NearInt64 = NearInt64;\n/**\n * Represent a signed 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64be|ns64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearInt64BE extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const buffer = uint8ArrayToBuffer(b);\n        const hi32 = buffer.readInt32BE(offset);\n        const lo32 = buffer.readUInt32BE(offset + 4);\n        return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        const split = divmodInt64(src);\n        const buffer = uint8ArrayToBuffer(b);\n        buffer.writeInt32BE(split.hi32, offset);\n        buffer.writeUInt32BE(split.lo32, offset + 4);\n        return 8;\n    }\n}\nexports.NearInt64BE = NearInt64BE;\n/**\n * Represent a 32-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f32|f32}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Float extends Layout {\n    constructor(property) {\n        super(4, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readFloatLE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeFloatLE(src, offset);\n        return 4;\n    }\n}\nexports.Float = Float;\n/**\n * Represent a 32-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f32be|f32be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass FloatBE extends Layout {\n    constructor(property) {\n        super(4, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readFloatBE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeFloatBE(src, offset);\n        return 4;\n    }\n}\nexports.FloatBE = FloatBE;\n/**\n * Represent a 64-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f64|f64}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Double extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readDoubleLE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeDoubleLE(src, offset);\n        return 8;\n    }\n}\nexports.Double = Double;\n/**\n * Represent a 64-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f64be|f64be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass DoubleBE extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readDoubleBE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeDoubleBE(src, offset);\n        return 8;\n    }\n}\nexports.DoubleBE = DoubleBE;\n/**\n * Represent a contiguous sequence of a specific layout as an Array.\n *\n * *Factory*: {@link module:Layout.seq|seq}\n *\n * @param {Layout} elementLayout - initializer for {@link\n * Sequence#elementLayout|elementLayout}.\n *\n * @param {(Number|ExternalLayout)} count - initializer for {@link\n * Sequence#count|count}.  The parameter must be either a positive\n * integer or an instance of {@link ExternalLayout}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Sequence extends Layout {\n    constructor(elementLayout, count, property) {\n        if (!(elementLayout instanceof Layout)) {\n            throw new TypeError('elementLayout must be a Layout');\n        }\n        if (!(((count instanceof ExternalLayout) && count.isCount())\n            || (Number.isInteger(count) && (0 <= count)))) {\n            throw new TypeError('count must be non-negative integer '\n                + 'or an unsigned integer ExternalLayout');\n        }\n        let span = -1;\n        if ((!(count instanceof ExternalLayout))\n            && (0 < elementLayout.span)) {\n            span = count * elementLayout.span;\n        }\n        super(span, property);\n        /** The layout for individual elements of the sequence. */\n        this.elementLayout = elementLayout;\n        /** The number of elements in the sequence.\n         *\n         * This will be either a non-negative integer or an instance of\n         * {@link ExternalLayout} for which {@link\n         * ExternalLayout#isCount|isCount()} is `true`. */\n        this.count = count;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        if (0 <= this.span) {\n            return this.span;\n        }\n        let span = 0;\n        let count = this.count;\n        if (count instanceof ExternalLayout) {\n            count = count.decode(b, offset);\n        }\n        if (0 < this.elementLayout.span) {\n            span = count * this.elementLayout.span;\n        }\n        else {\n            let idx = 0;\n            while (idx < count) {\n                span += this.elementLayout.getSpan(b, offset + span);\n                ++idx;\n            }\n        }\n        return span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const rv = [];\n        let i = 0;\n        let count = this.count;\n        if (count instanceof ExternalLayout) {\n            count = count.decode(b, offset);\n        }\n        while (i < count) {\n            rv.push(this.elementLayout.decode(b, offset));\n            offset += this.elementLayout.getSpan(b, offset);\n            i += 1;\n        }\n        return rv;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Sequence}.\n     *\n     * **NOTE** If `src` is shorter than {@link Sequence#count|count} then\n     * the unused space in the buffer is left unchanged.  If `src` is\n     * longer than {@link Sequence#count|count} the unneeded elements are\n     * ignored.\n     *\n     * **NOTE** If {@link Layout#count|count} is an instance of {@link\n     * ExternalLayout} then the length of `src` will be encoded as the\n     * count after `src` is encoded. */\n    encode(src, b, offset = 0) {\n        const elo = this.elementLayout;\n        const span = src.reduce((span, v) => {\n            return span + elo.encode(v, b, offset + span);\n        }, 0);\n        if (this.count instanceof ExternalLayout) {\n            this.count.encode(src.length, b, offset);\n        }\n        return span;\n    }\n}\nexports.Sequence = Sequence;\n/**\n * Represent a contiguous sequence of arbitrary layout elements as an\n * Object.\n *\n * *Factory*: {@link module:Layout.struct|struct}\n *\n * **NOTE** The {@link Layout#span|span} of the structure is variable\n * if any layout in {@link Structure#fields|fields} has a variable\n * span.  When {@link Layout#encode|encoding} we must have a value for\n * all variable-length fields, or we wouldn't be able to figure out\n * how much space to use for storage.  We can only identify the value\n * for a field when it has a {@link Layout#property|property}.  As\n * such, although a structure may contain both unnamed fields and\n * variable-length fields, it cannot contain an unnamed\n * variable-length field.\n *\n * @param {Layout[]} fields - initializer for {@link\n * Structure#fields|fields}.  An error is raised if this contains a\n * variable-length field for which a {@link Layout#property|property}\n * is not defined.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @param {Boolean} [decodePrefixes] - initializer for {@link\n * Structure#decodePrefixes|property}.\n *\n * @throws {Error} - if `fields` contains an unnamed variable-length\n * layout.\n *\n * @augments {Layout}\n */\nclass Structure extends Layout {\n    constructor(fields, property, decodePrefixes) {\n        if (!(Array.isArray(fields)\n            && fields.reduce((acc, v) => acc && (v instanceof Layout), true))) {\n            throw new TypeError('fields must be array of Layout instances');\n        }\n        if (('boolean' === typeof property)\n            && (undefined === decodePrefixes)) {\n            decodePrefixes = property;\n            property = undefined;\n        }\n        /* Verify absence of unnamed variable-length fields. */\n        for (const fd of fields) {\n            if ((0 > fd.span)\n                && (undefined === fd.property)) {\n                throw new Error('fields cannot contain unnamed variable-length layout');\n            }\n        }\n        let span = -1;\n        try {\n            span = fields.reduce((span, fd) => span + fd.getSpan(), 0);\n        }\n        catch (e) {\n            // ignore error\n        }\n        super(span, property);\n        /** The sequence of {@link Layout} values that comprise the\n         * structure.\n         *\n         * The individual elements need not be the same type, and may be\n         * either scalar or aggregate layouts.  If a member layout leaves\n         * its {@link Layout#property|property} undefined the\n         * corresponding region of the buffer associated with the element\n         * will not be mutated.\n         *\n         * @type {Layout[]} */\n        this.fields = fields;\n        /** Control behavior of {@link Layout#decode|decode()} given short\n         * buffers.\n         *\n         * In some situations a structure many be extended with additional\n         * fields over time, with older installations providing only a\n         * prefix of the full structure.  If this property is `true`\n         * decoding will accept those buffers and leave subsequent fields\n         * undefined, as long as the buffer ends at a field boundary.\n         * Defaults to `false`. */\n        this.decodePrefixes = !!decodePrefixes;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        if (0 <= this.span) {\n            return this.span;\n        }\n        let span = 0;\n        try {\n            span = this.fields.reduce((span, fd) => {\n                const fsp = fd.getSpan(b, offset);\n                offset += fsp;\n                return span + fsp;\n            }, 0);\n        }\n        catch (e) {\n            throw new RangeError('indeterminate span');\n        }\n        return span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        checkUint8Array(b);\n        const dest = this.makeDestinationObject();\n        for (const fd of this.fields) {\n            if (undefined !== fd.property) {\n                dest[fd.property] = fd.decode(b, offset);\n            }\n            offset += fd.getSpan(b, offset);\n            if (this.decodePrefixes\n                && (b.length === offset)) {\n                break;\n            }\n        }\n        return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Structure}.\n     *\n     * If `src` is missing a property for a member with a defined {@link\n     * Layout#property|property} the corresponding region of the buffer is\n     * left unmodified. */\n    encode(src, b, offset = 0) {\n        const firstOffset = offset;\n        let lastOffset = 0;\n        let lastWrote = 0;\n        for (const fd of this.fields) {\n            let span = fd.span;\n            lastWrote = (0 < span) ? span : 0;\n            if (undefined !== fd.property) {\n                const fv = src[fd.property];\n                if (undefined !== fv) {\n                    lastWrote = fd.encode(fv, b, offset);\n                    if (0 > span) {\n                        /* Read the as-encoded span, which is not necessarily the\n                         * same as what we wrote. */\n                        span = fd.getSpan(b, offset);\n                    }\n                }\n            }\n            lastOffset = offset;\n            offset += span;\n        }\n        /* Use (lastOffset + lastWrote) instead of offset because the last\n         * item may have had a dynamic length and we don't want to include\n         * the padding between it and the end of the space reserved for\n         * it. */\n        return (lastOffset + lastWrote) - firstOffset;\n    }\n    /** @override */\n    fromArray(values) {\n        const dest = this.makeDestinationObject();\n        for (const fd of this.fields) {\n            if ((undefined !== fd.property)\n                && (0 < values.length)) {\n                dest[fd.property] = values.shift();\n            }\n        }\n        return dest;\n    }\n    /**\n     * Get access to the layout of a given property.\n     *\n     * @param {String} property - the structure member of interest.\n     *\n     * @return {Layout} - the layout associated with `property`, or\n     * undefined if there is no such property.\n     */\n    layoutFor(property) {\n        if ('string' !== typeof property) {\n            throw new TypeError('property must be string');\n        }\n        for (const fd of this.fields) {\n            if (fd.property === property) {\n                return fd;\n            }\n        }\n        return undefined;\n    }\n    /**\n     * Get the offset of a structure member.\n     *\n     * @param {String} property - the structure member of interest.\n     *\n     * @return {Number} - the offset in bytes to the start of `property`\n     * within the structure, or undefined if `property` is not a field\n     * within the structure.  If the property is a member but follows a\n     * variable-length structure member a negative number will be\n     * returned.\n     */\n    offsetOf(property) {\n        if ('string' !== typeof property) {\n            throw new TypeError('property must be string');\n        }\n        let offset = 0;\n        for (const fd of this.fields) {\n            if (fd.property === property) {\n                return offset;\n            }\n            if (0 > fd.span) {\n                offset = -1;\n            }\n            else if (0 <= offset) {\n                offset += fd.span;\n            }\n        }\n        return undefined;\n    }\n}\nexports.Structure = Structure;\n/**\n * An object that can provide a {@link\n * Union#discriminator|discriminator} API for {@link Union}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * UnionDiscriminator#encode|encode} or {@link\n * UnionDiscriminator#decode|decode} functions.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}.\n *\n * @abstract\n */\nclass UnionDiscriminator {\n    constructor(property) {\n        /** The {@link Layout#property|property} to be used when the\n         * discriminator is referenced in isolation (generally when {@link\n         * Union#decode|Union decode} cannot delegate to a specific\n         * variant). */\n        this.property = property;\n    }\n    /** Analog to {@link Layout#decode|Layout decode} for union discriminators.\n     *\n     * The implementation of this method need not reference the buffer if\n     * variant information is available through other means. */\n    decode(b, offset) {\n        throw new Error('UnionDiscriminator is abstract');\n    }\n    /** Analog to {@link Layout#decode|Layout encode} for union discriminators.\n     *\n     * The implementation of this method need not store the value if\n     * variant information is maintained through other means. */\n    encode(src, b, offset) {\n        throw new Error('UnionDiscriminator is abstract');\n    }\n}\nexports.UnionDiscriminator = UnionDiscriminator;\n/**\n * An object that can provide a {@link\n * UnionDiscriminator|discriminator API} for {@link Union} using an\n * unsigned integral {@link Layout} instance located either inside or\n * outside the union.\n *\n * @param {ExternalLayout} layout - initializes {@link\n * UnionLayoutDiscriminator#layout|layout}.  Must satisfy {@link\n * ExternalLayout#isCount|isCount()}.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}, superseding the property\n * from `layout`, but defaulting to `variant` if neither `property`\n * nor layout provide a property name.\n *\n * @augments {UnionDiscriminator}\n */\nclass UnionLayoutDiscriminator extends UnionDiscriminator {\n    constructor(layout, property) {\n        if (!((layout instanceof ExternalLayout)\n            && layout.isCount())) {\n            throw new TypeError('layout must be an unsigned integer ExternalLayout');\n        }\n        super(property || layout.property || 'variant');\n        /** The {@link ExternalLayout} used to access the discriminator\n         * value. */\n        this.layout = layout;\n    }\n    /** Delegate decoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n    decode(b, offset) {\n        return this.layout.decode(b, offset);\n    }\n    /** Delegate encoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n    encode(src, b, offset) {\n        return this.layout.encode(src, b, offset);\n    }\n}\nexports.UnionLayoutDiscriminator = UnionLayoutDiscriminator;\n/**\n * Represent any number of span-compatible layouts.\n *\n * *Factory*: {@link module:Layout.union|union}\n *\n * If the union has a {@link Union#defaultLayout|default layout} that\n * layout must have a non-negative {@link Layout#span|span}.  The span\n * of a fixed-span union includes its {@link\n * Union#discriminator|discriminator} if the variant is a {@link\n * Union#usesPrefixDiscriminator|prefix of the union}, plus the span\n * of its {@link Union#defaultLayout|default layout}.\n *\n * If the union does not have a default layout then the encoded span\n * of the union depends on the encoded span of its variant (which may\n * be fixed or variable).\n *\n * {@link VariantLayout#layout|Variant layout}s are added through\n * {@link Union#addVariant|addVariant}.  If the union has a default\n * layout, the span of the {@link VariantLayout#layout|layout\n * contained by the variant} must not exceed the span of the {@link\n * Union#defaultLayout|default layout} (minus the span of a {@link\n * Union#usesPrefixDiscriminator|prefix disriminator}, if used).  The\n * span of the variant will equal the span of the union itself.\n *\n * The variant for a buffer can only be identified from the {@link\n * Union#discriminator|discriminator} {@link\n * UnionDiscriminator#property|property} (in the case of the {@link\n * Union#defaultLayout|default layout}), or by using {@link\n * Union#getVariant|getVariant} and examining the resulting {@link\n * VariantLayout} instance.\n *\n * A variant compatible with a JavaScript object can be identified\n * using {@link Union#getSourceVariant|getSourceVariant}.\n *\n * @param {(UnionDiscriminator|ExternalLayout|Layout)} discr - How to\n * identify the layout used to interpret the union contents.  The\n * parameter must be an instance of {@link UnionDiscriminator}, an\n * {@link ExternalLayout} that satisfies {@link\n * ExternalLayout#isCount|isCount()}, or {@link UInt} (or {@link\n * UIntBE}).  When a non-external layout element is passed the layout\n * appears at the start of the union.  In all cases the (synthesized)\n * {@link UnionDiscriminator} instance is recorded as {@link\n * Union#discriminator|discriminator}.\n *\n * @param {(Layout|null)} defaultLayout - initializer for {@link\n * Union#defaultLayout|defaultLayout}.  If absent defaults to `null`.\n * If `null` there is no default layout: the union has data-dependent\n * length and attempts to decode or encode unrecognized variants will\n * throw an exception.  A {@link Layout} instance must have a\n * non-negative {@link Layout#span|span}, and if it lacks a {@link\n * Layout#property|property} the {@link\n * Union#defaultLayout|defaultLayout} will be a {@link\n * Layout#replicate|replica} with property `content`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Union extends Layout {\n    constructor(discr, defaultLayout, property) {\n        let discriminator;\n        if ((discr instanceof UInt)\n            || (discr instanceof UIntBE)) {\n            discriminator = new UnionLayoutDiscriminator(new OffsetLayout(discr));\n        }\n        else if ((discr instanceof ExternalLayout)\n            && discr.isCount()) {\n            discriminator = new UnionLayoutDiscriminator(discr);\n        }\n        else if (!(discr instanceof UnionDiscriminator)) {\n            throw new TypeError('discr must be a UnionDiscriminator '\n                + 'or an unsigned integer layout');\n        }\n        else {\n            discriminator = discr;\n        }\n        if (undefined === defaultLayout) {\n            defaultLayout = null;\n        }\n        if (!((null === defaultLayout)\n            || (defaultLayout instanceof Layout))) {\n            throw new TypeError('defaultLayout must be null or a Layout');\n        }\n        if (null !== defaultLayout) {\n            if (0 > defaultLayout.span) {\n                throw new Error('defaultLayout must have constant span');\n            }\n            if (undefined === defaultLayout.property) {\n                defaultLayout = defaultLayout.replicate('content');\n            }\n        }\n        /* The union span can be estimated only if there's a default\n         * layout.  The union spans its default layout, plus any prefix\n         * variant layout.  By construction both layouts, if present, have\n         * non-negative span. */\n        let span = -1;\n        if (defaultLayout) {\n            span = defaultLayout.span;\n            if ((0 <= span) && ((discr instanceof UInt)\n                || (discr instanceof UIntBE))) {\n                span += discriminator.layout.span;\n            }\n        }\n        super(span, property);\n        /** The interface for the discriminator value in isolation.\n         *\n         * This a {@link UnionDiscriminator} either passed to the\n         * constructor or synthesized from the `discr` constructor\n         * argument.  {@link\n         * Union#usesPrefixDiscriminator|usesPrefixDiscriminator} will be\n         * `true` iff the `discr` parameter was a non-offset {@link\n         * Layout} instance. */\n        this.discriminator = discriminator;\n        /** `true` if the {@link Union#discriminator|discriminator} is the\n         * first field in the union.\n         *\n         * If `false` the discriminator is obtained from somewhere\n         * else. */\n        this.usesPrefixDiscriminator = (discr instanceof UInt)\n            || (discr instanceof UIntBE);\n        /** The layout for non-discriminator content when the value of the\n         * discriminator is not recognized.\n         *\n         * This is the value passed to the constructor.  It is\n         * structurally equivalent to the second component of {@link\n         * Union#layout|layout} but may have a different property\n         * name. */\n        this.defaultLayout = defaultLayout;\n        /** A registry of allowed variants.\n         *\n         * The keys are unsigned integers which should be compatible with\n         * {@link Union.discriminator|discriminator}.  The property value\n         * is the corresponding {@link VariantLayout} instances assigned\n         * to this union by {@link Union#addVariant|addVariant}.\n         *\n         * **NOTE** The registry remains mutable so that variants can be\n         * {@link Union#addVariant|added} at any time.  Users should not\n         * manipulate the content of this property. */\n        this.registry = {};\n        /* Private variable used when invoking getSourceVariant */\n        let boundGetSourceVariant = this.defaultGetSourceVariant.bind(this);\n        /** Function to infer the variant selected by a source object.\n         *\n         * Defaults to {@link\n         * Union#defaultGetSourceVariant|defaultGetSourceVariant} but may\n         * be overridden using {@link\n         * Union#configGetSourceVariant|configGetSourceVariant}.\n         *\n         * @param {Object} src - as with {@link\n         * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n         *\n         * @returns {(undefined|VariantLayout)} The default variant\n         * (`undefined`) or first registered variant that uses a property\n         * available in `src`. */\n        this.getSourceVariant = function (src) {\n            return boundGetSourceVariant(src);\n        };\n        /** Function to override the implementation of {@link\n         * Union#getSourceVariant|getSourceVariant}.\n         *\n         * Use this if the desired variant cannot be identified using the\n         * algorithm of {@link\n         * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n         *\n         * **NOTE** The provided function will be invoked bound to this\n         * Union instance, providing local access to {@link\n         * Union#registry|registry}.\n         *\n         * @param {Function} gsv - a function that follows the API of\n         * {@link Union#defaultGetSourceVariant|defaultGetSourceVariant}. */\n        this.configGetSourceVariant = function (gsv) {\n            boundGetSourceVariant = gsv.bind(this);\n        };\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        if (0 <= this.span) {\n            return this.span;\n        }\n        /* Default layouts always have non-negative span, so we don't have\n         * one and we have to recognize the variant which will in turn\n         * determine the span. */\n        const vlo = this.getVariant(b, offset);\n        if (!vlo) {\n            throw new Error('unable to determine span for unrecognized variant');\n        }\n        return vlo.getSpan(b, offset);\n    }\n    /**\n     * Method to infer a registered Union variant compatible with `src`.\n     *\n     * The first satisfied rule in the following sequence defines the\n     * return value:\n     * * If `src` has properties matching the Union discriminator and\n     *   the default layout, `undefined` is returned regardless of the\n     *   value of the discriminator property (this ensures the default\n     *   layout will be used);\n     * * If `src` has a property matching the Union discriminator, the\n     *   value of the discriminator identifies a registered variant, and\n     *   either (a) the variant has no layout, or (b) `src` has the\n     *   variant's property, then the variant is returned (because the\n     *   source satisfies the constraints of the variant it identifies);\n     * * If `src` does not have a property matching the Union\n     *   discriminator, but does have a property matching a registered\n     *   variant, then the variant is returned (because the source\n     *   matches a variant without an explicit conflict);\n     * * An error is thrown (because we either can't identify a variant,\n     *   or we were explicitly told the variant but can't satisfy it).\n     *\n     * @param {Object} src - an object presumed to be compatible with\n     * the content of the Union.\n     *\n     * @return {(undefined|VariantLayout)} - as described above.\n     *\n     * @throws {Error} - if `src` cannot be associated with a default or\n     * registered variant.\n     */\n    defaultGetSourceVariant(src) {\n        if (Object.prototype.hasOwnProperty.call(src, this.discriminator.property)) {\n            if (this.defaultLayout && this.defaultLayout.property\n                && Object.prototype.hasOwnProperty.call(src, this.defaultLayout.property)) {\n                return undefined;\n            }\n            const vlo = this.registry[src[this.discriminator.property]];\n            if (vlo\n                && ((!vlo.layout)\n                    || (vlo.property && Object.prototype.hasOwnProperty.call(src, vlo.property)))) {\n                return vlo;\n            }\n        }\n        else {\n            for (const tag in this.registry) {\n                const vlo = this.registry[tag];\n                if (vlo.property && Object.prototype.hasOwnProperty.call(src, vlo.property)) {\n                    return vlo;\n                }\n            }\n        }\n        throw new Error('unable to infer src variant');\n    }\n    /** Implement {@link Layout#decode|decode} for {@link Union}.\n     *\n     * If the variant is {@link Union#addVariant|registered} the return\n     * value is an instance of that variant, with no explicit\n     * discriminator.  Otherwise the {@link Union#defaultLayout|default\n     * layout} is used to decode the content. */\n    decode(b, offset = 0) {\n        let dest;\n        const dlo = this.discriminator;\n        const discr = dlo.decode(b, offset);\n        const clo = this.registry[discr];\n        if (undefined === clo) {\n            const defaultLayout = this.defaultLayout;\n            let contentOffset = 0;\n            if (this.usesPrefixDiscriminator) {\n                contentOffset = dlo.layout.span;\n            }\n            dest = this.makeDestinationObject();\n            dest[dlo.property] = discr;\n            // defaultLayout.property can be undefined, but this is allowed by buffer-layout\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            dest[defaultLayout.property] = defaultLayout.decode(b, offset + contentOffset);\n        }\n        else {\n            dest = clo.decode(b, offset);\n        }\n        return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Union}.\n     *\n     * This API assumes the `src` object is consistent with the union's\n     * {@link Union#defaultLayout|default layout}.  To encode variants\n     * use the appropriate variant-specific {@link VariantLayout#encode}\n     * method. */\n    encode(src, b, offset = 0) {\n        const vlo = this.getSourceVariant(src);\n        if (undefined === vlo) {\n            const dlo = this.discriminator;\n            // this.defaultLayout is not undefined when vlo is undefined\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const clo = this.defaultLayout;\n            let contentOffset = 0;\n            if (this.usesPrefixDiscriminator) {\n                contentOffset = dlo.layout.span;\n            }\n            dlo.encode(src[dlo.property], b, offset);\n            // clo.property is not undefined when vlo is undefined\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            return contentOffset + clo.encode(src[clo.property], b, offset + contentOffset);\n        }\n        return vlo.encode(src, b, offset);\n    }\n    /** Register a new variant structure within a union.  The newly\n     * created variant is returned.\n     *\n     * @param {Number} variant - initializer for {@link\n     * VariantLayout#variant|variant}.\n     *\n     * @param {Layout} layout - initializer for {@link\n     * VariantLayout#layout|layout}.\n     *\n     * @param {String} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {VariantLayout} */\n    addVariant(variant, layout, property) {\n        const rv = new VariantLayout(this, variant, layout, property);\n        this.registry[variant] = rv;\n        return rv;\n    }\n    /**\n     * Get the layout associated with a registered variant.\n     *\n     * If `vb` does not produce a registered variant the function returns\n     * `undefined`.\n     *\n     * @param {(Number|Uint8Array)} vb - either the variant number, or a\n     * buffer from which the discriminator is to be read.\n     *\n     * @param {Number} offset - offset into `vb` for the start of the\n     * union.  Used only when `vb` is an instance of {Uint8Array}.\n     *\n     * @return {({VariantLayout}|undefined)}\n     */\n    getVariant(vb, offset = 0) {\n        let variant;\n        if (vb instanceof Uint8Array) {\n            variant = this.discriminator.decode(vb, offset);\n        }\n        else {\n            variant = vb;\n        }\n        return this.registry[variant];\n    }\n}\nexports.Union = Union;\n/**\n * Represent a specific variant within a containing union.\n *\n * **NOTE** The {@link Layout#span|span} of the variant may include\n * the span of the {@link Union#discriminator|discriminator} used to\n * identify it, but values read and written using the variant strictly\n * conform to the content of {@link VariantLayout#layout|layout}.\n *\n * **NOTE** User code should not invoke this constructor directly.  Use\n * the union {@link Union#addVariant|addVariant} helper method.\n *\n * @param {Union} union - initializer for {@link\n * VariantLayout#union|union}.\n *\n * @param {Number} variant - initializer for {@link\n * VariantLayout#variant|variant}.\n *\n * @param {Layout} [layout] - initializer for {@link\n * VariantLayout#layout|layout}.  If absent the variant carries no\n * data.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.  Unlike many other layouts, variant\n * layouts normally include a property name so they can be identified\n * within their containing {@link Union}.  The property identifier may\n * be absent only if `layout` is is absent.\n *\n * @augments {Layout}\n */\nclass VariantLayout extends Layout {\n    constructor(union, variant, layout, property) {\n        if (!(union instanceof Union)) {\n            throw new TypeError('union must be a Union');\n        }\n        if ((!Number.isInteger(variant)) || (0 > variant)) {\n            throw new TypeError('variant must be a (non-negative) integer');\n        }\n        if (('string' === typeof layout)\n            && (undefined === property)) {\n            property = layout;\n            layout = null;\n        }\n        if (layout) {\n            if (!(layout instanceof Layout)) {\n                throw new TypeError('layout must be a Layout');\n            }\n            if ((null !== union.defaultLayout)\n                && (0 <= layout.span)\n                && (layout.span > union.defaultLayout.span)) {\n                throw new Error('variant span exceeds span of containing union');\n            }\n            if ('string' !== typeof property) {\n                throw new TypeError('variant must have a String property');\n            }\n        }\n        let span = union.span;\n        if (0 > union.span) {\n            span = layout ? layout.span : 0;\n            if ((0 <= span) && union.usesPrefixDiscriminator) {\n                span += union.discriminator.layout.span;\n            }\n        }\n        super(span, property);\n        /** The {@link Union} to which this variant belongs. */\n        this.union = union;\n        /** The unsigned integral value identifying this variant within\n         * the {@link Union#discriminator|discriminator} of the containing\n         * union. */\n        this.variant = variant;\n        /** The {@link Layout} to be used when reading/writing the\n         * non-discriminator part of the {@link\n         * VariantLayout#union|union}.  If `null` the variant carries no\n         * data. */\n        this.layout = layout || null;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        if (0 <= this.span) {\n            /* Will be equal to the containing union span if that is not\n             * variable. */\n            return this.span;\n        }\n        let contentOffset = 0;\n        if (this.union.usesPrefixDiscriminator) {\n            contentOffset = this.union.discriminator.layout.span;\n        }\n        /* Span is defined solely by the variant (and prefix discriminator) */\n        let span = 0;\n        if (this.layout) {\n            span = this.layout.getSpan(b, offset + contentOffset);\n        }\n        return contentOffset + span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const dest = this.makeDestinationObject();\n        if (this !== this.union.getVariant(b, offset)) {\n            throw new Error('variant mismatch');\n        }\n        let contentOffset = 0;\n        if (this.union.usesPrefixDiscriminator) {\n            contentOffset = this.union.discriminator.layout.span;\n        }\n        if (this.layout) {\n            dest[this.property] = this.layout.decode(b, offset + contentOffset);\n        }\n        else if (this.property) {\n            dest[this.property] = true;\n        }\n        else if (this.union.usesPrefixDiscriminator) {\n            dest[this.union.discriminator.property] = this.variant;\n        }\n        return dest;\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        let contentOffset = 0;\n        if (this.union.usesPrefixDiscriminator) {\n            contentOffset = this.union.discriminator.layout.span;\n        }\n        if (this.layout\n            && (!Object.prototype.hasOwnProperty.call(src, this.property))) {\n            throw new TypeError('variant lacks property ' + this.property);\n        }\n        this.union.discriminator.encode(this.variant, b, offset);\n        let span = contentOffset;\n        if (this.layout) {\n            this.layout.encode(src[this.property], b, offset + contentOffset);\n            span += this.layout.getSpan(b, offset + contentOffset);\n            if ((0 <= this.union.span)\n                && (span > this.union.span)) {\n                throw new Error('encoded variant overruns containing union');\n            }\n        }\n        return span;\n    }\n    /** Delegate {@link Layout#fromArray|fromArray} to {@link\n     * VariantLayout#layout|layout}. */\n    fromArray(values) {\n        if (this.layout) {\n            return this.layout.fromArray(values);\n        }\n        return undefined;\n    }\n}\nexports.VariantLayout = VariantLayout;\n/** JavaScript chose to define bitwise operations as operating on\n * signed 32-bit values in 2's complement form, meaning any integer\n * with bit 31 set is going to look negative.  For right shifts that's\n * not a problem, because `>>>` is a logical shift, but for every\n * other bitwise operator we have to compensate for possible negative\n * results. */\nfunction fixBitwiseResult(v) {\n    if (0 > v) {\n        v += 0x100000000;\n    }\n    return v;\n}\n/**\n * Contain a sequence of bit fields as an unsigned integer.\n *\n * *Factory*: {@link module:Layout.bits|bits}\n *\n * This is a container element; within it there are {@link BitField}\n * instances that provide the extracted properties.  The container\n * simply defines the aggregate representation and its bit ordering.\n * The representation is an object containing properties with numeric\n * or {@link Boolean} values.\n *\n * {@link BitField}s are added with the {@link\n * BitStructure#addField|addField} and {@link\n * BitStructure#addBoolean|addBoolean} methods.\n\n * @param {Layout} word - initializer for {@link\n * BitStructure#word|word}.  The parameter must be an instance of\n * {@link UInt} (or {@link UIntBE}) that is no more than 4 bytes wide.\n *\n * @param {bool} [msb] - `true` if the bit numbering starts at the\n * most significant bit of the containing word; `false` (default) if\n * it starts at the least significant bit of the containing word.  If\n * the parameter at this position is a string and `property` is\n * `undefined` the value of this argument will instead be used as the\n * value of `property`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass BitStructure extends Layout {\n    constructor(word, msb, property) {\n        if (!((word instanceof UInt)\n            || (word instanceof UIntBE))) {\n            throw new TypeError('word must be a UInt or UIntBE layout');\n        }\n        if (('string' === typeof msb)\n            && (undefined === property)) {\n            property = msb;\n            msb = false;\n        }\n        if (4 < word.span) {\n            throw new RangeError('word cannot exceed 32 bits');\n        }\n        super(word.span, property);\n        /** The layout used for the packed value.  {@link BitField}\n         * instances are packed sequentially depending on {@link\n         * BitStructure#msb|msb}. */\n        this.word = word;\n        /** Whether the bit sequences are packed starting at the most\n         * significant bit growing down (`true`), or the least significant\n         * bit growing up (`false`).\n         *\n         * **NOTE** Regardless of this value, the least significant bit of\n         * any {@link BitField} value is the least significant bit of the\n         * corresponding section of the packed value. */\n        this.msb = !!msb;\n        /** The sequence of {@link BitField} layouts that comprise the\n         * packed structure.\n         *\n         * **NOTE** The array remains mutable to allow fields to be {@link\n         * BitStructure#addField|added} after construction.  Users should\n         * not manipulate the content of this property.*/\n        this.fields = [];\n        /* Storage for the value.  Capture a variable instead of using an\n         * instance property because we don't want anything to change the\n         * value without going through the mutator. */\n        let value = 0;\n        this._packedSetValue = function (v) {\n            value = fixBitwiseResult(v);\n            return this;\n        };\n        this._packedGetValue = function () {\n            return value;\n        };\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const dest = this.makeDestinationObject();\n        const value = this.word.decode(b, offset);\n        this._packedSetValue(value);\n        for (const fd of this.fields) {\n            if (undefined !== fd.property) {\n                dest[fd.property] = fd.decode(b);\n            }\n        }\n        return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link BitStructure}.\n     *\n     * If `src` is missing a property for a member with a defined {@link\n     * Layout#property|property} the corresponding region of the packed\n     * value is left unmodified.  Unused bits are also left unmodified. */\n    encode(src, b, offset = 0) {\n        const value = this.word.decode(b, offset);\n        this._packedSetValue(value);\n        for (const fd of this.fields) {\n            if (undefined !== fd.property) {\n                const fv = src[fd.property];\n                if (undefined !== fv) {\n                    fd.encode(fv);\n                }\n            }\n        }\n        return this.word.encode(this._packedGetValue(), b, offset);\n    }\n    /** Register a new bitfield with a containing bit structure.  The\n     * resulting bitfield is returned.\n     *\n     * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n     *\n     * @param {string} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {BitField} */\n    addField(bits, property) {\n        const bf = new BitField(this, bits, property);\n        this.fields.push(bf);\n        return bf;\n    }\n    /** As with {@link BitStructure#addField|addField} for single-bit\n     * fields with `boolean` value representation.\n     *\n     * @param {string} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {Boolean} */\n    // `Boolean` conflicts with the native primitive type\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    addBoolean(property) {\n        // This is my Boolean, not the Javascript one.\n        const bf = new Boolean(this, property);\n        this.fields.push(bf);\n        return bf;\n    }\n    /**\n     * Get access to the bit field for a given property.\n     *\n     * @param {String} property - the bit field of interest.\n     *\n     * @return {BitField} - the field associated with `property`, or\n     * undefined if there is no such property.\n     */\n    fieldFor(property) {\n        if ('string' !== typeof property) {\n            throw new TypeError('property must be string');\n        }\n        for (const fd of this.fields) {\n            if (fd.property === property) {\n                return fd;\n            }\n        }\n        return undefined;\n    }\n}\nexports.BitStructure = BitStructure;\n/**\n * Represent a sequence of bits within a {@link BitStructure}.\n *\n * All bit field values are represented as unsigned integers.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addField|addField} helper\n * method.\n *\n * **NOTE** BitField instances are not instances of {@link Layout}\n * since {@link Layout#span|span} measures 8-bit units.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n */\nclass BitField {\n    constructor(container, bits, property) {\n        if (!(container instanceof BitStructure)) {\n            throw new TypeError('container must be a BitStructure');\n        }\n        if ((!Number.isInteger(bits)) || (0 >= bits)) {\n            throw new TypeError('bits must be positive integer');\n        }\n        const totalBits = 8 * container.span;\n        const usedBits = container.fields.reduce((sum, fd) => sum + fd.bits, 0);\n        if ((bits + usedBits) > totalBits) {\n            throw new Error('bits too long for span remainder ('\n                + (totalBits - usedBits) + ' of '\n                + totalBits + ' remain)');\n        }\n        /** The {@link BitStructure} instance to which this bit field\n         * belongs. */\n        this.container = container;\n        /** The span of this value in bits. */\n        this.bits = bits;\n        /** A mask of {@link BitField#bits|bits} bits isolating value bits\n         * that fit within the field.\n         *\n         * That is, it masks a value that has not yet been shifted into\n         * position within its containing packed integer. */\n        this.valueMask = (1 << bits) - 1;\n        if (32 === bits) { // shifted value out of range\n            this.valueMask = 0xFFFFFFFF;\n        }\n        /** The offset of the value within the containing packed unsigned\n         * integer.  The least significant bit of the packed value is at\n         * offset zero, regardless of bit ordering used. */\n        this.start = usedBits;\n        if (this.container.msb) {\n            this.start = totalBits - usedBits - bits;\n        }\n        /** A mask of {@link BitField#bits|bits} isolating the field value\n         * within the containing packed unsigned integer. */\n        this.wordMask = fixBitwiseResult(this.valueMask << this.start);\n        /** The property name used when this bitfield is represented in an\n         * Object.\n         *\n         * Intended to be functionally equivalent to {@link\n         * Layout#property}.\n         *\n         * If left undefined the corresponding span of bits will be\n         * treated as padding: it will not be mutated by {@link\n         * Layout#encode|encode} nor represented as a property in the\n         * decoded Object. */\n        this.property = property;\n    }\n    /** Store a value into the corresponding subsequence of the containing\n     * bit field. */\n    decode(b, offset) {\n        const word = this.container._packedGetValue();\n        const wordValue = fixBitwiseResult(word & this.wordMask);\n        const value = wordValue >>> this.start;\n        return value;\n    }\n    /** Store a value into the corresponding subsequence of the containing\n     * bit field.\n     *\n     * **NOTE** This is not a specialization of {@link\n     * Layout#encode|Layout.encode} and there is no return value. */\n    encode(value) {\n        if ('number' !== typeof value\n            || !Number.isInteger(value)\n            || (value !== fixBitwiseResult(value & this.valueMask))) {\n            throw new TypeError(nameWithProperty('BitField.encode', this)\n                + ' value must be integer not exceeding ' + this.valueMask);\n        }\n        const word = this.container._packedGetValue();\n        const wordValue = fixBitwiseResult(value << this.start);\n        this.container._packedSetValue(fixBitwiseResult(word & ~this.wordMask)\n            | wordValue);\n    }\n}\nexports.BitField = BitField;\n/**\n * Represent a single bit within a {@link BitStructure} as a\n * JavaScript boolean.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addBoolean|addBoolean} helper\n * method.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {BitField}\n */\n/* eslint-disable no-extend-native */\nclass Boolean extends BitField {\n    constructor(container, property) {\n        super(container, 1, property);\n    }\n    /** Override {@link BitField#decode|decode} for {@link Boolean|Boolean}.\n     *\n     * @returns {boolean} */\n    decode(b, offset) {\n        return !!super.decode(b, offset);\n    }\n    /** @override */\n    encode(value) {\n        if ('boolean' === typeof value) {\n            // BitField requires integer values\n            value = +value;\n        }\n        super.encode(value);\n    }\n}\nexports.Boolean = Boolean;\n/* eslint-enable no-extend-native */\n/**\n * Contain a fixed-length block of arbitrary data, represented as a\n * Uint8Array.\n *\n * *Factory*: {@link module:Layout.blob|blob}\n *\n * @param {(Number|ExternalLayout)} length - initializes {@link\n * Blob#length|length}.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Blob extends Layout {\n    constructor(length, property) {\n        if (!(((length instanceof ExternalLayout) && length.isCount())\n            || (Number.isInteger(length) && (0 <= length)))) {\n            throw new TypeError('length must be positive integer '\n                + 'or an unsigned integer ExternalLayout');\n        }\n        let span = -1;\n        if (!(length instanceof ExternalLayout)) {\n            span = length;\n        }\n        super(span, property);\n        /** The number of bytes in the blob.\n         *\n         * This may be a non-negative integer, or an instance of {@link\n         * ExternalLayout} that satisfies {@link\n         * ExternalLayout#isCount|isCount()}. */\n        this.length = length;\n    }\n    /** @override */\n    getSpan(b, offset) {\n        let span = this.span;\n        if (0 > span) {\n            span = this.length.decode(b, offset);\n        }\n        return span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        let span = this.span;\n        if (0 > span) {\n            span = this.length.decode(b, offset);\n        }\n        return uint8ArrayToBuffer(b).slice(offset, offset + span);\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Blob}.\n     *\n     * **NOTE** If {@link Layout#count|count} is an instance of {@link\n     * ExternalLayout} then the length of `src` will be encoded as the\n     * count after `src` is encoded. */\n    encode(src, b, offset) {\n        let span = this.length;\n        if (this.length instanceof ExternalLayout) {\n            span = src.length;\n        }\n        if (!(src instanceof Uint8Array && span === src.length)) {\n            throw new TypeError(nameWithProperty('Blob.encode', this)\n                + ' requires (length ' + span + ') Uint8Array as src');\n        }\n        if ((offset + span) > b.length) {\n            throw new RangeError('encoding overruns Uint8Array');\n        }\n        const srcBuffer = uint8ArrayToBuffer(src);\n        uint8ArrayToBuffer(b).write(srcBuffer.toString('hex'), offset, span, 'hex');\n        if (this.length instanceof ExternalLayout) {\n            this.length.encode(span, b, offset);\n        }\n        return span;\n    }\n}\nexports.Blob = Blob;\n/**\n * Contain a `NUL`-terminated UTF8 string.\n *\n * *Factory*: {@link module:Layout.cstr|cstr}\n *\n * **NOTE** Any UTF8 string that incorporates a zero-valued byte will\n * not be correctly decoded by this layout.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass CString extends Layout {\n    constructor(property) {\n        super(-1, property);\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        checkUint8Array(b);\n        let idx = offset;\n        while ((idx < b.length) && (0 !== b[idx])) {\n            idx += 1;\n        }\n        return 1 + idx - offset;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const span = this.getSpan(b, offset);\n        return uint8ArrayToBuffer(b).slice(offset, offset + span - 1).toString('utf-8');\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        /* Must force this to a string, lest it be a number and the\n         * \"utf8-encoding\" below actually allocate a buffer of length\n         * src */\n        if ('string' !== typeof src) {\n            src = String(src);\n        }\n        const srcb = buffer_1.Buffer.from(src, 'utf8');\n        const span = srcb.length;\n        if ((offset + span) > b.length) {\n            throw new RangeError('encoding overruns Buffer');\n        }\n        const buffer = uint8ArrayToBuffer(b);\n        srcb.copy(buffer, offset);\n        buffer[offset + span] = 0;\n        return span + 1;\n    }\n}\nexports.CString = CString;\n/**\n * Contain a UTF8 string with implicit length.\n *\n * *Factory*: {@link module:Layout.utf8|utf8}\n *\n * **NOTE** Because the length is implicit in the size of the buffer\n * this layout should be used only in isolation, or in a situation\n * where the length can be expressed by operating on a slice of the\n * containing buffer.\n *\n * @param {Number} [maxSpan] - the maximum length allowed for encoded\n * string content.  If not provided there is no bound on the allowed\n * content.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UTF8 extends Layout {\n    constructor(maxSpan, property) {\n        if (('string' === typeof maxSpan) && (undefined === property)) {\n            property = maxSpan;\n            maxSpan = undefined;\n        }\n        if (undefined === maxSpan) {\n            maxSpan = -1;\n        }\n        else if (!Number.isInteger(maxSpan)) {\n            throw new TypeError('maxSpan must be an integer');\n        }\n        super(-1, property);\n        /** The maximum span of the layout in bytes.\n         *\n         * Positive values are generally expected.  Zero is abnormal.\n         * Attempts to encode or decode a value that exceeds this length\n         * will throw a `RangeError`.\n         *\n         * A negative value indicates that there is no bound on the length\n         * of the content. */\n        this.maxSpan = maxSpan;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        checkUint8Array(b);\n        return b.length - offset;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const span = this.getSpan(b, offset);\n        if ((0 <= this.maxSpan)\n            && (this.maxSpan < span)) {\n            throw new RangeError('text length exceeds maxSpan');\n        }\n        return uint8ArrayToBuffer(b).slice(offset, offset + span).toString('utf-8');\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        /* Must force this to a string, lest it be a number and the\n         * \"utf8-encoding\" below actually allocate a buffer of length\n         * src */\n        if ('string' !== typeof src) {\n            src = String(src);\n        }\n        const srcb = buffer_1.Buffer.from(src, 'utf8');\n        const span = srcb.length;\n        if ((0 <= this.maxSpan)\n            && (this.maxSpan < span)) {\n            throw new RangeError('text length exceeds maxSpan');\n        }\n        if ((offset + span) > b.length) {\n            throw new RangeError('encoding overruns Buffer');\n        }\n        srcb.copy(uint8ArrayToBuffer(b), offset);\n        return span;\n    }\n}\nexports.UTF8 = UTF8;\n/**\n * Contain a constant value.\n *\n * This layout may be used in cases where a JavaScript value can be\n * inferred without an expression in the binary encoding.  An example\n * would be a {@link VariantLayout|variant layout} where the content\n * is implied by the union {@link Union#discriminator|discriminator}.\n *\n * @param {Object|Number|String} value - initializer for {@link\n * Constant#value|value}.  If the value is an object (or array) and\n * the application intends the object to remain unchanged regardless\n * of what is done to values decoded by this layout, the value should\n * be frozen prior passing it to this constructor.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Constant extends Layout {\n    constructor(value, property) {\n        super(0, property);\n        /** The value produced by this constant when the layout is {@link\n         * Constant#decode|decoded}.\n         *\n         * Any JavaScript value including `null` and `undefined` is\n         * permitted.\n         *\n         * **WARNING** If `value` passed in the constructor was not\n         * frozen, it is possible for users of decoded values to change\n         * the content of the value. */\n        this.value = value;\n    }\n    /** @override */\n    decode(b, offset) {\n        return this.value;\n    }\n    /** @override */\n    encode(src, b, offset) {\n        /* Constants take no space */\n        return 0;\n    }\n}\nexports.Constant = Constant;\n/** Factory for {@link GreedyCount}. */\nexports.greedy = ((elementSpan, property) => new GreedyCount(elementSpan, property));\n/** Factory for {@link OffsetLayout}. */\nexports.offset = ((layout, offset, property) => new OffsetLayout(layout, offset, property));\n/** Factory for {@link UInt|unsigned int layouts} spanning one\n * byte. */\nexports.u8 = ((property) => new UInt(1, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning two bytes. */\nexports.u16 = ((property) => new UInt(2, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning three bytes. */\nexports.u24 = ((property) => new UInt(3, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning four bytes. */\nexports.u32 = ((property) => new UInt(4, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning five bytes. */\nexports.u40 = ((property) => new UInt(5, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning six bytes. */\nexports.u48 = ((property) => new UInt(6, property));\n/** Factory for {@link NearUInt64|little-endian unsigned int\n * layouts} interpreted as Numbers. */\nexports.nu64 = ((property) => new NearUInt64(property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning two bytes. */\nexports.u16be = ((property) => new UIntBE(2, property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning three bytes. */\nexports.u24be = ((property) => new UIntBE(3, property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning four bytes. */\nexports.u32be = ((property) => new UIntBE(4, property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning five bytes. */\nexports.u40be = ((property) => new UIntBE(5, property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning six bytes. */\nexports.u48be = ((property) => new UIntBE(6, property));\n/** Factory for {@link NearUInt64BE|big-endian unsigned int\n * layouts} interpreted as Numbers. */\nexports.nu64be = ((property) => new NearUInt64BE(property));\n/** Factory for {@link Int|signed int layouts} spanning one\n * byte. */\nexports.s8 = ((property) => new Int(1, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning two bytes. */\nexports.s16 = ((property) => new Int(2, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning three bytes. */\nexports.s24 = ((property) => new Int(3, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning four bytes. */\nexports.s32 = ((property) => new Int(4, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning five bytes. */\nexports.s40 = ((property) => new Int(5, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning six bytes. */\nexports.s48 = ((property) => new Int(6, property));\n/** Factory for {@link NearInt64|little-endian signed int layouts}\n * interpreted as Numbers. */\nexports.ns64 = ((property) => new NearInt64(property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning two bytes. */\nexports.s16be = ((property) => new IntBE(2, property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning three bytes. */\nexports.s24be = ((property) => new IntBE(3, property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning four bytes. */\nexports.s32be = ((property) => new IntBE(4, property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning five bytes. */\nexports.s40be = ((property) => new IntBE(5, property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning six bytes. */\nexports.s48be = ((property) => new IntBE(6, property));\n/** Factory for {@link NearInt64BE|big-endian signed int layouts}\n * interpreted as Numbers. */\nexports.ns64be = ((property) => new NearInt64BE(property));\n/** Factory for {@link Float|little-endian 32-bit floating point} values. */\nexports.f32 = ((property) => new Float(property));\n/** Factory for {@link FloatBE|big-endian 32-bit floating point} values. */\nexports.f32be = ((property) => new FloatBE(property));\n/** Factory for {@link Double|little-endian 64-bit floating point} values. */\nexports.f64 = ((property) => new Double(property));\n/** Factory for {@link DoubleBE|big-endian 64-bit floating point} values. */\nexports.f64be = ((property) => new DoubleBE(property));\n/** Factory for {@link Structure} values. */\nexports.struct = ((fields, property, decodePrefixes) => new Structure(fields, property, decodePrefixes));\n/** Factory for {@link BitStructure} values. */\nexports.bits = ((word, msb, property) => new BitStructure(word, msb, property));\n/** Factory for {@link Sequence} values. */\nexports.seq = ((elementLayout, count, property) => new Sequence(elementLayout, count, property));\n/** Factory for {@link Union} values. */\nexports.union = ((discr, defaultLayout, property) => new Union(discr, defaultLayout, property));\n/** Factory for {@link UnionLayoutDiscriminator} values. */\nexports.unionLayoutDiscriminator = ((layout, property) => new UnionLayoutDiscriminator(layout, property));\n/** Factory for {@link Blob} values. */\nexports.blob = ((length, property) => new Blob(length, property));\n/** Factory for {@link CString} values. */\nexports.cstr = ((property) => new CString(property));\n/** Factory for {@link UTF8} values. */\nexports.utf8 = ((maxSpan, property) => new UTF8(maxSpan, property));\n/** Factory for {@link Constant} values. */\nexports.constant = ((value, property) => new Constant(value, property));\n//# sourceMappingURL=Layout.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n","/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\nclass StructError extends TypeError {\n    constructor(failure, failures) {\n        let cached;\n        const { message, explanation, ...rest } = failure;\n        const { path } = failure;\n        const msg = path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`;\n        super(explanation ?? msg);\n        if (explanation != null)\n            this.cause = msg;\n        Object.assign(this, rest);\n        this.name = this.constructor.name;\n        this.failures = () => {\n            return (cached ?? (cached = [failure, ...failures()]));\n        };\n    }\n}\n\n/**\n * Check if a value is an iterator.\n */\nfunction isIterable(x) {\n    return isObject(x) && typeof x[Symbol.iterator] === 'function';\n}\n/**\n * Check if a value is a plain object.\n */\nfunction isObject(x) {\n    return typeof x === 'object' && x != null;\n}\n/**\n * Check if a value is a non-array object.\n */\nfunction isNonArrayObject(x) {\n    return isObject(x) && !Array.isArray(x);\n}\n/**\n * Check if a value is a plain object.\n */\nfunction isPlainObject(x) {\n    if (Object.prototype.toString.call(x) !== '[object Object]') {\n        return false;\n    }\n    const prototype = Object.getPrototypeOf(x);\n    return prototype === null || prototype === Object.prototype;\n}\n/**\n * Return a value as a printable string.\n */\nfunction print(value) {\n    if (typeof value === 'symbol') {\n        return value.toString();\n    }\n    return typeof value === 'string' ? JSON.stringify(value) : `${value}`;\n}\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\nfunction shiftIterator(input) {\n    const { done, value } = input.next();\n    return done ? undefined : value;\n}\n/**\n * Convert a single validation result to a failure.\n */\nfunction toFailure(result, context, struct, value) {\n    if (result === true) {\n        return;\n    }\n    else if (result === false) {\n        result = {};\n    }\n    else if (typeof result === 'string') {\n        result = { message: result };\n    }\n    const { path, branch } = context;\n    const { type } = struct;\n    const { refinement, message = `Expected a value of type \\`${type}\\`${refinement ? ` with refinement \\`${refinement}\\`` : ''}, but received: \\`${print(value)}\\``, } = result;\n    return {\n        value,\n        type,\n        refinement,\n        key: path[path.length - 1],\n        path,\n        branch,\n        ...result,\n        message,\n    };\n}\n/**\n * Convert a validation result to an iterable of failures.\n */\nfunction* toFailures(result, context, struct, value) {\n    if (!isIterable(result)) {\n        result = [result];\n    }\n    for (const r of result) {\n        const failure = toFailure(r, context, struct, value);\n        if (failure) {\n            yield failure;\n        }\n    }\n}\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\nfunction* run(value, struct, options = {}) {\n    const { path = [], branch = [value], coerce = false, mask = false } = options;\n    const ctx = { path, branch, mask };\n    if (coerce) {\n        value = struct.coercer(value, ctx);\n    }\n    let status = 'valid';\n    for (const failure of struct.validator(value, ctx)) {\n        failure.explanation = options.message;\n        status = 'not_valid';\n        yield [failure, undefined];\n    }\n    for (let [k, v, s] of struct.entries(value, ctx)) {\n        const ts = run(v, s, {\n            path: k === undefined ? path : [...path, k],\n            branch: k === undefined ? branch : [...branch, v],\n            coerce,\n            mask,\n            message: options.message,\n        });\n        for (const t of ts) {\n            if (t[0]) {\n                status = t[0].refinement != null ? 'not_refined' : 'not_valid';\n                yield [t[0], undefined];\n            }\n            else if (coerce) {\n                v = t[1];\n                if (k === undefined) {\n                    value = v;\n                }\n                else if (value instanceof Map) {\n                    value.set(k, v);\n                }\n                else if (value instanceof Set) {\n                    value.add(v);\n                }\n                else if (isObject(value)) {\n                    if (v !== undefined || k in value)\n                        value[k] = v;\n                }\n            }\n        }\n    }\n    if (status !== 'not_valid') {\n        for (const failure of struct.refiner(value, ctx)) {\n            failure.explanation = options.message;\n            status = 'not_refined';\n            yield [failure, undefined];\n        }\n    }\n    if (status === 'valid') {\n        yield [undefined, value];\n    }\n}\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\nclass Struct {\n    constructor(props) {\n        const { type, schema, validator, refiner, coercer = (value) => value, entries = function* () { }, } = props;\n        this.type = type;\n        this.schema = schema;\n        this.entries = entries;\n        this.coercer = coercer;\n        if (validator) {\n            this.validator = (value, context) => {\n                const result = validator(value, context);\n                return toFailures(result, context, this, value);\n            };\n        }\n        else {\n            this.validator = () => [];\n        }\n        if (refiner) {\n            this.refiner = (value, context) => {\n                const result = refiner(value, context);\n                return toFailures(result, context, this, value);\n            };\n        }\n        else {\n            this.refiner = () => [];\n        }\n    }\n    /**\n     * Assert that a value passes the struct's validation, throwing if it doesn't.\n     */\n    assert(value, message) {\n        return assert(value, this, message);\n    }\n    /**\n     * Create a value with the struct's coercion logic, then validate it.\n     */\n    create(value, message) {\n        return create(value, this, message);\n    }\n    /**\n     * Check if a value passes the struct's validation.\n     */\n    is(value) {\n        return is(value, this);\n    }\n    /**\n     * Mask a value, coercing and validating it, but returning only the subset of\n     * properties defined by the struct's schema. Masking applies recursively to\n     * props of `object` structs only.\n     */\n    mask(value, message) {\n        return mask(value, this, message);\n    }\n    /**\n     * Validate a value with the struct's validation logic, returning a tuple\n     * representing the result.\n     *\n     * You may optionally pass `true` for the `coerce` argument to coerce\n     * the value before attempting to validate it. If you do, the result will\n     * contain the coerced result when successful. Also, `mask` will turn on\n     * masking of the unknown `object` props recursively if passed.\n     */\n    validate(value, options = {}) {\n        return validate(value, this, options);\n    }\n}\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\nfunction assert(value, struct, message) {\n    const result = validate(value, struct, { message });\n    if (result[0]) {\n        throw result[0];\n    }\n}\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\nfunction create(value, struct, message) {\n    const result = validate(value, struct, { coerce: true, message });\n    if (result[0]) {\n        throw result[0];\n    }\n    else {\n        return result[1];\n    }\n}\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\nfunction mask(value, struct, message) {\n    const result = validate(value, struct, { coerce: true, mask: true, message });\n    if (result[0]) {\n        throw result[0];\n    }\n    else {\n        return result[1];\n    }\n}\n/**\n * Check if a value passes a struct.\n */\nfunction is(value, struct) {\n    const result = validate(value, struct);\n    return !result[0];\n}\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\nfunction validate(value, struct, options = {}) {\n    const tuples = run(value, struct, options);\n    const tuple = shiftIterator(tuples);\n    if (tuple[0]) {\n        const error = new StructError(tuple[0], function* () {\n            for (const t of tuples) {\n                if (t[0]) {\n                    yield t[0];\n                }\n            }\n        });\n        return [error, undefined];\n    }\n    else {\n        const v = tuple[1];\n        return [undefined, v];\n    }\n}\n\nfunction assign(...Structs) {\n    const isType = Structs[0].type === 'type';\n    const schemas = Structs.map((s) => s.schema);\n    const schema = Object.assign({}, ...schemas);\n    return isType ? type(schema) : object(schema);\n}\n/**\n * Define a new struct type with a custom validation function.\n */\nfunction define(name, validator) {\n    return new Struct({ type: name, schema: null, validator });\n}\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\nfunction deprecated(struct, log) {\n    return new Struct({\n        ...struct,\n        refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n        validator(value, ctx) {\n            if (value === undefined) {\n                return true;\n            }\n            else {\n                log(value, ctx);\n                return struct.validator(value, ctx);\n            }\n        },\n    });\n}\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\nfunction dynamic(fn) {\n    return new Struct({\n        type: 'dynamic',\n        schema: null,\n        *entries(value, ctx) {\n            const struct = fn(value, ctx);\n            yield* struct.entries(value, ctx);\n        },\n        validator(value, ctx) {\n            const struct = fn(value, ctx);\n            return struct.validator(value, ctx);\n        },\n        coercer(value, ctx) {\n            const struct = fn(value, ctx);\n            return struct.coercer(value, ctx);\n        },\n        refiner(value, ctx) {\n            const struct = fn(value, ctx);\n            return struct.refiner(value, ctx);\n        },\n    });\n}\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\nfunction lazy(fn) {\n    let struct;\n    return new Struct({\n        type: 'lazy',\n        schema: null,\n        *entries(value, ctx) {\n            struct ?? (struct = fn());\n            yield* struct.entries(value, ctx);\n        },\n        validator(value, ctx) {\n            struct ?? (struct = fn());\n            return struct.validator(value, ctx);\n        },\n        coercer(value, ctx) {\n            struct ?? (struct = fn());\n            return struct.coercer(value, ctx);\n        },\n        refiner(value, ctx) {\n            struct ?? (struct = fn());\n            return struct.refiner(value, ctx);\n        },\n    });\n}\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\nfunction omit(struct, keys) {\n    const { schema } = struct;\n    const subschema = { ...schema };\n    for (const key of keys) {\n        delete subschema[key];\n    }\n    switch (struct.type) {\n        case 'type':\n            return type(subschema);\n        default:\n            return object(subschema);\n    }\n}\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\nfunction partial(struct) {\n    const isStruct = struct instanceof Struct;\n    const schema = isStruct ? { ...struct.schema } : { ...struct };\n    for (const key in schema) {\n        schema[key] = optional(schema[key]);\n    }\n    if (isStruct && struct.type === 'type') {\n        return type(schema);\n    }\n    return object(schema);\n}\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\nfunction pick(struct, keys) {\n    const { schema } = struct;\n    const subschema = {};\n    for (const key of keys) {\n        subschema[key] = schema[key];\n    }\n    switch (struct.type) {\n        case 'type':\n            return type(subschema);\n        default:\n            return object(subschema);\n    }\n}\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\nfunction struct(name, validator) {\n    console.warn('superstruct@0.11 - The `struct` helper has been renamed to `define`.');\n    return define(name, validator);\n}\n\n/**\n * Ensure that any value passes validation.\n */\nfunction any() {\n    return define('any', () => true);\n}\nfunction array(Element) {\n    return new Struct({\n        type: 'array',\n        schema: Element,\n        *entries(value) {\n            if (Element && Array.isArray(value)) {\n                for (const [i, v] of value.entries()) {\n                    yield [i, v, Element];\n                }\n            }\n        },\n        coercer(value) {\n            return Array.isArray(value) ? value.slice() : value;\n        },\n        validator(value) {\n            return (Array.isArray(value) ||\n                `Expected an array value, but received: ${print(value)}`);\n        },\n    });\n}\n/**\n * Ensure that a value is a bigint.\n */\nfunction bigint() {\n    return define('bigint', (value) => {\n        return typeof value === 'bigint';\n    });\n}\n/**\n * Ensure that a value is a boolean.\n */\nfunction boolean() {\n    return define('boolean', (value) => {\n        return typeof value === 'boolean';\n    });\n}\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\nfunction date() {\n    return define('date', (value) => {\n        return ((value instanceof Date && !isNaN(value.getTime())) ||\n            `Expected a valid \\`Date\\` object, but received: ${print(value)}`);\n    });\n}\nfunction enums(values) {\n    const schema = {};\n    const description = values.map((v) => print(v)).join();\n    for (const key of values) {\n        schema[key] = key;\n    }\n    return new Struct({\n        type: 'enums',\n        schema,\n        validator(value) {\n            return (values.includes(value) ||\n                `Expected one of \\`${description}\\`, but received: ${print(value)}`);\n        },\n    });\n}\n/**\n * Ensure that a value is a function.\n */\nfunction func() {\n    return define('func', (value) => {\n        return (typeof value === 'function' ||\n            `Expected a function, but received: ${print(value)}`);\n    });\n}\n/**\n * Ensure that a value is an instance of a specific class.\n */\nfunction instance(Class) {\n    return define('instance', (value) => {\n        return (value instanceof Class ||\n            `Expected a \\`${Class.name}\\` instance, but received: ${print(value)}`);\n    });\n}\n/**\n * Ensure that a value is an integer.\n */\nfunction integer() {\n    return define('integer', (value) => {\n        return ((typeof value === 'number' && !isNaN(value) && Number.isInteger(value)) ||\n            `Expected an integer, but received: ${print(value)}`);\n    });\n}\n/**\n * Ensure that a value matches all of a set of types.\n */\nfunction intersection(Structs) {\n    return new Struct({\n        type: 'intersection',\n        schema: null,\n        *entries(value, ctx) {\n            for (const S of Structs) {\n                yield* S.entries(value, ctx);\n            }\n        },\n        *validator(value, ctx) {\n            for (const S of Structs) {\n                yield* S.validator(value, ctx);\n            }\n        },\n        *refiner(value, ctx) {\n            for (const S of Structs) {\n                yield* S.refiner(value, ctx);\n            }\n        },\n    });\n}\nfunction literal(constant) {\n    const description = print(constant);\n    const t = typeof constant;\n    return new Struct({\n        type: 'literal',\n        schema: t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n        validator(value) {\n            return (value === constant ||\n                `Expected the literal \\`${description}\\`, but received: ${print(value)}`);\n        },\n    });\n}\nfunction map(Key, Value) {\n    return new Struct({\n        type: 'map',\n        schema: null,\n        *entries(value) {\n            if (Key && Value && value instanceof Map) {\n                for (const [k, v] of value.entries()) {\n                    yield [k, k, Key];\n                    yield [k, v, Value];\n                }\n            }\n        },\n        coercer(value) {\n            return value instanceof Map ? new Map(value) : value;\n        },\n        validator(value) {\n            return (value instanceof Map ||\n                `Expected a \\`Map\\` object, but received: ${print(value)}`);\n        },\n    });\n}\n/**\n * Ensure that no value ever passes validation.\n */\nfunction never() {\n    return define('never', () => false);\n}\n/**\n * Augment an existing struct to allow `null` values.\n */\nfunction nullable(struct) {\n    return new Struct({\n        ...struct,\n        validator: (value, ctx) => value === null || struct.validator(value, ctx),\n        refiner: (value, ctx) => value === null || struct.refiner(value, ctx),\n    });\n}\n/**\n * Ensure that a value is a number.\n */\nfunction number() {\n    return define('number', (value) => {\n        return ((typeof value === 'number' && !isNaN(value)) ||\n            `Expected a number, but received: ${print(value)}`);\n    });\n}\nfunction object(schema) {\n    const knowns = schema ? Object.keys(schema) : [];\n    const Never = never();\n    return new Struct({\n        type: 'object',\n        schema: schema ? schema : null,\n        *entries(value) {\n            if (schema && isObject(value)) {\n                const unknowns = new Set(Object.keys(value));\n                for (const key of knowns) {\n                    unknowns.delete(key);\n                    yield [key, value[key], schema[key]];\n                }\n                for (const key of unknowns) {\n                    yield [key, value[key], Never];\n                }\n            }\n        },\n        validator(value) {\n            return (isNonArrayObject(value) ||\n                `Expected an object, but received: ${print(value)}`);\n        },\n        coercer(value, ctx) {\n            if (!isNonArrayObject(value)) {\n                return value;\n            }\n            const coerced = { ...value };\n            // The `object` struct has special behaviour enabled by the mask flag.\n            // When masking, properties that are not in the schema are deleted from\n            // the coerced object instead of eventually failing validaiton.\n            if (ctx.mask && schema) {\n                for (const key in coerced) {\n                    if (schema[key] === undefined) {\n                        delete coerced[key];\n                    }\n                }\n            }\n            return coerced;\n        },\n    });\n}\n/**\n * Augment a struct to allow `undefined` values.\n */\nfunction optional(struct) {\n    return new Struct({\n        ...struct,\n        validator: (value, ctx) => value === undefined || struct.validator(value, ctx),\n        refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n    });\n}\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\nfunction record(Key, Value) {\n    return new Struct({\n        type: 'record',\n        schema: null,\n        *entries(value) {\n            if (isObject(value)) {\n                for (const k in value) {\n                    const v = value[k];\n                    yield [k, k, Key];\n                    yield [k, v, Value];\n                }\n            }\n        },\n        validator(value) {\n            return (isNonArrayObject(value) ||\n                `Expected an object, but received: ${print(value)}`);\n        },\n        coercer(value) {\n            return isNonArrayObject(value) ? { ...value } : value;\n        },\n    });\n}\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\nfunction regexp() {\n    return define('regexp', (value) => {\n        return value instanceof RegExp;\n    });\n}\nfunction set(Element) {\n    return new Struct({\n        type: 'set',\n        schema: null,\n        *entries(value) {\n            if (Element && value instanceof Set) {\n                for (const v of value) {\n                    yield [v, v, Element];\n                }\n            }\n        },\n        coercer(value) {\n            return value instanceof Set ? new Set(value) : value;\n        },\n        validator(value) {\n            return (value instanceof Set ||\n                `Expected a \\`Set\\` object, but received: ${print(value)}`);\n        },\n    });\n}\n/**\n * Ensure that a value is a string.\n */\nfunction string() {\n    return define('string', (value) => {\n        return (typeof value === 'string' ||\n            `Expected a string, but received: ${print(value)}`);\n    });\n}\n/**\n * Ensure that a value is a tuple of a specific length, and that each of its\n * elements is of a specific type.\n */\nfunction tuple(Structs) {\n    const Never = never();\n    return new Struct({\n        type: 'tuple',\n        schema: null,\n        *entries(value) {\n            if (Array.isArray(value)) {\n                const length = Math.max(Structs.length, value.length);\n                for (let i = 0; i < length; i++) {\n                    yield [i, value[i], Structs[i] || Never];\n                }\n            }\n        },\n        validator(value) {\n            return (Array.isArray(value) ||\n                `Expected an array, but received: ${print(value)}`);\n        },\n        coercer(value) {\n            return Array.isArray(value) ? value.slice() : value;\n        },\n    });\n}\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\nfunction type(schema) {\n    const keys = Object.keys(schema);\n    return new Struct({\n        type: 'type',\n        schema,\n        *entries(value) {\n            if (isObject(value)) {\n                for (const k of keys) {\n                    yield [k, value[k], schema[k]];\n                }\n            }\n        },\n        validator(value) {\n            return (isNonArrayObject(value) ||\n                `Expected an object, but received: ${print(value)}`);\n        },\n        coercer(value) {\n            return isNonArrayObject(value) ? { ...value } : value;\n        },\n    });\n}\n/**\n * Ensure that a value matches one of a set of types.\n */\nfunction union(Structs) {\n    const description = Structs.map((s) => s.type).join(' | ');\n    return new Struct({\n        type: 'union',\n        schema: null,\n        coercer(value, ctx) {\n            for (const S of Structs) {\n                const [error, coerced] = S.validate(value, {\n                    coerce: true,\n                    mask: ctx.mask,\n                });\n                if (!error) {\n                    return coerced;\n                }\n            }\n            return value;\n        },\n        validator(value, ctx) {\n            const failures = [];\n            for (const S of Structs) {\n                const [...tuples] = run(value, S, ctx);\n                const [first] = tuples;\n                if (!first[0]) {\n                    return [];\n                }\n                else {\n                    for (const [failure] of tuples) {\n                        if (failure) {\n                            failures.push(failure);\n                        }\n                    }\n                }\n            }\n            return [\n                `Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(value)}`,\n                ...failures,\n            ];\n        },\n    });\n}\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\nfunction unknown() {\n    return define('unknown', () => true);\n}\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\nfunction coerce(struct, condition, coercer) {\n    return new Struct({\n        ...struct,\n        coercer: (value, ctx) => {\n            return is(value, condition)\n                ? struct.coercer(coercer(value, ctx), ctx)\n                : struct.coercer(value, ctx);\n        },\n    });\n}\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\nfunction defaulted(struct, fallback, options = {}) {\n    return coerce(struct, unknown(), (x) => {\n        const f = typeof fallback === 'function' ? fallback() : fallback;\n        if (x === undefined) {\n            return f;\n        }\n        if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n            const ret = { ...x };\n            let changed = false;\n            for (const key in f) {\n                if (ret[key] === undefined) {\n                    ret[key] = f[key];\n                    changed = true;\n                }\n            }\n            if (changed) {\n                return ret;\n            }\n        }\n        return x;\n    });\n}\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\nfunction trimmed(struct) {\n    return coerce(struct, string(), (x) => x.trim());\n}\n\n/**\n * Ensure that a string, array, map, or set is empty.\n */\nfunction empty(struct) {\n    return refine(struct, 'empty', (value) => {\n        const size = getSize(value);\n        return (size === 0 ||\n            `Expected an empty ${struct.type} but received one with a size of \\`${size}\\``);\n    });\n}\nfunction getSize(value) {\n    if (value instanceof Map || value instanceof Set) {\n        return value.size;\n    }\n    else {\n        return value.length;\n    }\n}\n/**\n * Ensure that a number or date is below a threshold.\n */\nfunction max(struct, threshold, options = {}) {\n    const { exclusive } = options;\n    return refine(struct, 'max', (value) => {\n        return exclusive\n            ? value < threshold\n            : value <= threshold ||\n                `Expected a ${struct.type} less than ${exclusive ? '' : 'or equal to '}${threshold} but received \\`${value}\\``;\n    });\n}\n/**\n * Ensure that a number or date is above a threshold.\n */\nfunction min(struct, threshold, options = {}) {\n    const { exclusive } = options;\n    return refine(struct, 'min', (value) => {\n        return exclusive\n            ? value > threshold\n            : value >= threshold ||\n                `Expected a ${struct.type} greater than ${exclusive ? '' : 'or equal to '}${threshold} but received \\`${value}\\``;\n    });\n}\n/**\n * Ensure that a string, array, map or set is not empty.\n */\nfunction nonempty(struct) {\n    return refine(struct, 'nonempty', (value) => {\n        const size = getSize(value);\n        return (size > 0 || `Expected a nonempty ${struct.type} but received an empty one`);\n    });\n}\n/**\n * Ensure that a string matches a regular expression.\n */\nfunction pattern(struct, regexp) {\n    return refine(struct, 'pattern', (value) => {\n        return (regexp.test(value) ||\n            `Expected a ${struct.type} matching \\`/${regexp.source}/\\` but received \"${value}\"`);\n    });\n}\n/**\n * Ensure that a string, array, number, date, map, or set has a size (or length, or time) between `min` and `max`.\n */\nfunction size(struct, min, max = min) {\n    const expected = `Expected a ${struct.type}`;\n    const of = min === max ? `of \\`${min}\\`` : `between \\`${min}\\` and \\`${max}\\``;\n    return refine(struct, 'size', (value) => {\n        if (typeof value === 'number' || value instanceof Date) {\n            return ((min <= value && value <= max) ||\n                `${expected} ${of} but received \\`${value}\\``);\n        }\n        else if (value instanceof Map || value instanceof Set) {\n            const { size } = value;\n            return ((min <= size && size <= max) ||\n                `${expected} with a size ${of} but received one with a size of \\`${size}\\``);\n        }\n        else {\n            const { length } = value;\n            return ((min <= length && length <= max) ||\n                `${expected} with a length ${of} but received one with a length of \\`${length}\\``);\n        }\n    });\n}\n/**\n * Augment a `Struct` to add an additional refinement to the validation.\n *\n * The refiner function is guaranteed to receive a value of the struct's type,\n * because the struct's existing validation will already have passed. This\n * allows you to layer additional validation on top of existing structs.\n */\nfunction refine(struct, name, refiner) {\n    return new Struct({\n        ...struct,\n        *refiner(value, ctx) {\n            yield* struct.refiner(value, ctx);\n            const result = refiner(value, ctx);\n            const failures = toFailures(result, ctx, struct, value);\n            for (const failure of failures) {\n                yield { ...failure, refinement: name };\n            }\n        },\n    });\n}\n\nexport { Struct, StructError, any, array, assert, assign, bigint, boolean, coerce, create, date, defaulted, define, deprecated, dynamic, empty, enums, func, instance, integer, intersection, is, lazy, literal, map, mask, max, min, never, nonempty, nullable, number, object, omit, optional, partial, pattern, pick, record, refine, regexp, set, size, string, struct, trimmed, tuple, type, union, unknown, validate };\n//# sourceMappingURL=index.mjs.map\n","import { hash as assertHash, bytes as assertBytes, exists as assertExists } from './_assert.js';\nimport { Hash, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nexport class HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        assertHash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        assertExists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        assertExists(this);\n        assertBytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport { validateBasic, wNAF } from './curve.js';\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { ensureBytes } from './utils.js';\nfunction validatePointOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(opts, {\n        a: 'field',\n        b: 'field',\n    }, {\n        allowedPrivateKeyLengths: 'array',\n        wrapPrivateKey: 'boolean',\n        isTorsionFree: 'function',\n        clearCofactor: 'function',\n        allowInfinityPoint: 'boolean',\n        fromBytes: 'function',\n        toBytes: 'function',\n    });\n    const { endo, Fp, a } = opts;\n    if (endo) {\n        if (!Fp.eql(a, Fp.ZERO)) {\n            throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n        }\n        if (typeof endo !== 'object' ||\n            typeof endo.beta !== 'bigint' ||\n            typeof endo.splitScalar !== 'function') {\n            throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n        }\n    }\n    return Object.freeze({ ...opts });\n}\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexport const DER = {\n    // asn.1 DER encoding utils\n    Err: class DERErr extends Error {\n        constructor(m = '') {\n            super(m);\n        }\n    },\n    _parseInt(data) {\n        const { Err: E } = DER;\n        if (data.length < 2 || data[0] !== 0x02)\n            throw new E('Invalid signature integer tag');\n        const len = data[1];\n        const res = data.subarray(2, len + 2);\n        if (!len || res.length !== len)\n            throw new E('Invalid signature integer: wrong length');\n        // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n        // since we always use positive integers here. It must always be empty:\n        // - add zero byte if exists\n        // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n        if (res[0] & 0b10000000)\n            throw new E('Invalid signature integer: negative');\n        if (res[0] === 0x00 && !(res[1] & 0b10000000))\n            throw new E('Invalid signature integer: unnecessary leading zero');\n        return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n    },\n    toSig(hex) {\n        // parse DER signature\n        const { Err: E } = DER;\n        const data = typeof hex === 'string' ? h2b(hex) : hex;\n        ut.abytes(data);\n        let l = data.length;\n        if (l < 2 || data[0] != 0x30)\n            throw new E('Invalid signature tag');\n        if (data[1] !== l - 2)\n            throw new E('Invalid signature: incorrect length');\n        const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n        const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n        if (rBytesLeft.length)\n            throw new E('Invalid signature: left bytes after parsing');\n        return { r, s };\n    },\n    hexFromSig(sig) {\n        // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n        const slice = (s) => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n        const h = (num) => {\n            const hex = num.toString(16);\n            return hex.length & 1 ? `0${hex}` : hex;\n        };\n        const s = slice(h(sig.s));\n        const r = slice(h(sig.r));\n        const shl = s.length / 2;\n        const rhl = r.length / 2;\n        const sl = h(shl);\n        const rl = h(rhl);\n        return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n    },\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\nexport function weierstrassPoints(opts) {\n    const CURVE = validatePointOpts(opts);\n    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n    const toBytes = CURVE.toBytes ||\n        ((_c, point, _isCompressed) => {\n            const a = point.toAffine();\n            return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n        });\n    const fromBytes = CURVE.fromBytes ||\n        ((bytes) => {\n            // const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n            return { x, y };\n        });\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula\n     * @returns y²\n     */\n    function weierstrassEquation(x) {\n        const { a, b } = CURVE;\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x2 * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n    }\n    // Validate whether the passed curve params are valid.\n    // We check if curve equation works for generator point.\n    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n    // ProjectivePoint class has not been initialized yet.\n    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n        throw new Error('bad generator point: equation left != right');\n    // Valid group elements reside in range 1..n-1\n    function isWithinCurveOrder(num) {\n        return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n    }\n    function assertGE(num) {\n        if (!isWithinCurveOrder(num))\n            throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n    }\n    // Validates if priv key is valid and converts it to bigint.\n    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n    function normPrivateKeyToScalar(key) {\n        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n        if (lengths && typeof key !== 'bigint') {\n            if (ut.isBytes(key))\n                key = ut.bytesToHex(key);\n            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n            if (typeof key !== 'string' || !lengths.includes(key.length))\n                throw new Error('Invalid key');\n            key = key.padStart(nByteLength * 2, '0');\n        }\n        let num;\n        try {\n            num =\n                typeof key === 'bigint'\n                    ? key\n                    : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n        }\n        catch (error) {\n            throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n        }\n        if (wrapPrivateKey)\n            num = mod.mod(num, n); // disabled by default, enabled for BLS\n        assertGE(num); // num in range [1..N-1]\n        return num;\n    }\n    const pointPrecomputes = new Map();\n    function assertPrjPoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ProjectivePoint expected');\n    }\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n     * Default Point works in 2d / affine coordinates: (x, y)\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */\n    class Point {\n        constructor(px, py, pz) {\n            this.px = px;\n            this.py = py;\n            this.pz = pz;\n            if (px == null || !Fp.isValid(px))\n                throw new Error('x required');\n            if (py == null || !Fp.isValid(py))\n                throw new Error('y required');\n            if (pz == null || !Fp.isValid(pz))\n                throw new Error('z required');\n        }\n        // Does not validate if the point is on-curve.\n        // Use fromHex instead, or call assertValidity() later.\n        static fromAffine(p) {\n            const { x, y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('invalid affine point');\n            if (p instanceof Point)\n                throw new Error('projective point not allowed');\n            const is0 = (i) => Fp.eql(i, Fp.ZERO);\n            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n            if (is0(x) && is0(y))\n                return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        /**\n         * Takes a bunch of Projective Points but executes only one\n         * inversion on all of them. Inversion is very slow operation,\n         * so this improves performance massively.\n         * Optimization: converts a list of projective points to a list of identical points with Z=1.\n         */\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p) => p.pz));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        /**\n         * Converts hash string or Uint8Array to Point.\n         * @param hex short/long ECDSA hex\n         */\n        static fromHex(hex) {\n            const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n            P.assertValidity();\n            return P;\n        }\n        // Multiplies generator point by privateKey.\n        static fromPrivateKey(privateKey) {\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            this._WINDOW_SIZE = windowSize;\n            pointPrecomputes.delete(this);\n        }\n        // A point on curve is valid if it conforms to equation.\n        assertValidity() {\n            if (this.is0()) {\n                // (0, 1, 0) aka ZERO is invalid in most contexts.\n                // In BLS, ZERO can be serialized, so we allow it.\n                // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n                if (CURVE.allowInfinityPoint && !Fp.is0(this.py))\n                    return;\n                throw new Error('bad point: ZERO');\n            }\n            // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n            const { x, y } = this.toAffine();\n            // Check if x, y are valid field elements\n            if (!Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('bad point: x or y not FE');\n            const left = Fp.sqr(y); // y²\n            const right = weierstrassEquation(x); // x³ + ax + b\n            if (!Fp.eql(left, right))\n                throw new Error('bad point: equation left != right');\n            if (!this.isTorsionFree())\n                throw new Error('bad point: not in prime-order subgroup');\n        }\n        hasEvenY() {\n            const { y } = this.toAffine();\n            if (Fp.isOdd)\n                return !Fp.isOdd(y);\n            throw new Error(\"Field doesn't support isOdd\");\n        }\n        /**\n         * Compare one point to another.\n         */\n        equals(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /**\n         * Flips point to one corresponding to (x, -y) in Affine coordinates.\n         */\n        negate() {\n            return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a, b } = CURVE;\n            const b3 = Fp.mul(b, _3n);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, _3n);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {\n                const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n                return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n            });\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */\n        multiplyUnsafe(n) {\n            const I = Point.ZERO;\n            if (n === _0n)\n                return I;\n            assertGE(n); // Will throw on 0\n            if (n === _1n)\n                return this;\n            const { endo } = CURVE;\n            if (!endo)\n                return wnaf.unsafeLadder(this, n);\n            // Apply endomorphism\n            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n            let k1p = I;\n            let k2p = I;\n            let d = this;\n            while (k1 > _0n || k2 > _0n) {\n                if (k1 & _1n)\n                    k1p = k1p.add(d);\n                if (k2 & _1n)\n                    k2p = k2p.add(d);\n                d = d.double();\n                k1 >>= _1n;\n                k2 >>= _1n;\n            }\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n            return k1p.add(k2p);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */\n        multiply(scalar) {\n            assertGE(scalar);\n            let n = scalar;\n            let point, fake; // Fake point is used to const-time mult\n            const { endo } = CURVE;\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n                let { p: k1p, f: f1p } = this.wNAF(k1);\n                let { p: k2p, f: f2p } = this.wNAF(k2);\n                k1p = wnaf.constTimeNegate(k1neg, k1p);\n                k2p = wnaf.constTimeNegate(k2neg, k2p);\n                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n                point = k1p.add(k2p);\n                fake = f1p.add(f2p);\n            }\n            else {\n                const { p, f } = this.wNAF(n);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return Point.normalizeZ([point, fake])[0];\n        }\n        /**\n         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n         * Not using Strauss-Shamir trick: precomputation tables are faster.\n         * The trick could be useful if both P and Q are not G (not in our case).\n         * @returns non-zero affine point\n         */\n        multiplyAndAddUnsafe(Q, a, b) {\n            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n            const mul = (P, a // Select faster multiply() method\n            ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n            const sum = mul(this, a).add(mul(Q, b));\n            return sum.is0() ? undefined : sum;\n        }\n        // Converts Projective point to affine (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        // (x, y, z) ∋ (x=x/z, y=y/z)\n        toAffine(iz) {\n            const { px: x, py: y, pz: z } = this;\n            const is0 = this.is0();\n            // If invZ was 0, we return zero point. However we still want to execute\n            // all operations, so we replace invZ with a random number, 1.\n            if (iz == null)\n                iz = is0 ? Fp.ONE : Fp.inv(z);\n            const ax = Fp.mul(x, iz);\n            const ay = Fp.mul(y, iz);\n            const zz = Fp.mul(z, iz);\n            if (is0)\n                return { x: Fp.ZERO, y: Fp.ZERO };\n            if (!Fp.eql(zz, Fp.ONE))\n                throw new Error('invZ was invalid');\n            return { x: ax, y: ay };\n        }\n        isTorsionFree() {\n            const { h: cofactor, isTorsionFree } = CURVE;\n            if (cofactor === _1n)\n                return true; // No subgroups, always torsion-free\n            if (isTorsionFree)\n                return isTorsionFree(Point, this);\n            throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n        }\n        clearCofactor() {\n            const { h: cofactor, clearCofactor } = CURVE;\n            if (cofactor === _1n)\n                return this; // Fast-path\n            if (clearCofactor)\n                return clearCofactor(Point, this);\n            return this.multiplyUnsafe(CURVE.h);\n        }\n        toRawBytes(isCompressed = true) {\n            this.assertValidity();\n            return toBytes(Point, this, isCompressed);\n        }\n        toHex(isCompressed = true) {\n            return ut.bytesToHex(this.toRawBytes(isCompressed));\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n    const _bits = CURVE.nBitLength;\n    const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n    // Validate if generator point is on curve\n    return {\n        CURVE,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar,\n        weierstrassEquation,\n        isWithinCurveOrder,\n    };\n}\nfunction validateOpts(curve) {\n    const opts = validateBasic(curve);\n    ut.validateObject(opts, {\n        hash: 'hash',\n        hmac: 'function',\n        randomBytes: 'function',\n    }, {\n        bits2int: 'function',\n        bits2int_modN: 'function',\n        lowS: 'boolean',\n    });\n    return Object.freeze({ lowS: true, ...opts });\n}\nexport function weierstrass(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER } = CURVE;\n    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n    function isValidFieldElement(num) {\n        return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n    }\n    function modN(a) {\n        return mod.mod(a, CURVE_ORDER);\n    }\n    function invN(a) {\n        return mod.invert(a, CURVE_ORDER);\n    }\n    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({\n        ...CURVE,\n        toBytes(_c, point, isCompressed) {\n            const a = point.toAffine();\n            const x = Fp.toBytes(a.x);\n            const cat = ut.concatBytes;\n            if (isCompressed) {\n                return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n            }\n            else {\n                return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n            }\n        },\n        fromBytes(bytes) {\n            const len = bytes.length;\n            const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // this.assertValidity() is done inside of fromHex\n            if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n                const x = ut.bytesToNumberBE(tail);\n                if (!isValidFieldElement(x))\n                    throw new Error('Point is not on curve');\n                const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n                let y;\n                try {\n                    y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n                }\n                catch (sqrtError) {\n                    const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n                    throw new Error('Point is not on curve' + suffix);\n                }\n                const isYOdd = (y & _1n) === _1n;\n                // ECDSA\n                const isHeadOdd = (head & 1) === 1;\n                if (isHeadOdd !== isYOdd)\n                    y = Fp.neg(y);\n                return { x, y };\n            }\n            else if (len === uncompressedLen && head === 0x04) {\n                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n                return { x, y };\n            }\n            else {\n                throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);\n            }\n        },\n    });\n    const numToNByteStr = (num) => ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> _1n;\n        return number > HALF;\n    }\n    function normalizeS(s) {\n        return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n    }\n    // slice bytes num\n    const slcNum = (b, from, to) => ut.bytesToNumberBE(b.slice(from, to));\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */\n    class Signature {\n        constructor(r, s, recovery) {\n            this.r = r;\n            this.s = s;\n            this.recovery = recovery;\n            this.assertValidity();\n        }\n        // pair (bytes of r, bytes of s)\n        static fromCompact(hex) {\n            const l = CURVE.nByteLength;\n            hex = ensureBytes('compactSignature', hex, l * 2);\n            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n        static fromDER(hex) {\n            const { r, s } = DER.toSig(ensureBytes('DER', hex));\n            return new Signature(r, s);\n        }\n        assertValidity() {\n            // can use assertGE here\n            if (!isWithinCurveOrder(this.r))\n                throw new Error('r must be 0 < r < CURVE.n');\n            if (!isWithinCurveOrder(this.s))\n                throw new Error('s must be 0 < s < CURVE.n');\n        }\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        recoverPublicKey(msgHash) {\n            const { r, s, recovery: rec } = this;\n            const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n            if (rec == null || ![0, 1, 2, 3].includes(rec))\n                throw new Error('recovery id invalid');\n            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n            if (radj >= Fp.ORDER)\n                throw new Error('recovery id 2 or 3 invalid');\n            const prefix = (rec & 1) === 0 ? '02' : '03';\n            const R = Point.fromHex(prefix + numToNByteStr(radj));\n            const ir = invN(radj); // r^-1\n            const u1 = modN(-h * ir); // -hr^-1\n            const u2 = modN(s * ir); // sr^-1\n            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n            if (!Q)\n                throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n        }\n        // DER-encoded\n        toDERRawBytes() {\n            return ut.hexToBytes(this.toDERHex());\n        }\n        toDERHex() {\n            return DER.hexFromSig({ r: this.r, s: this.s });\n        }\n        // padded bytes of r, then padded bytes of s\n        toCompactRawBytes() {\n            return ut.hexToBytes(this.toCompactHex());\n        }\n        toCompactHex() {\n            return numToNByteStr(this.r) + numToNByteStr(this.s);\n        }\n    }\n    const utils = {\n        isValidPrivateKey(privateKey) {\n            try {\n                normPrivateKeyToScalar(privateKey);\n                return true;\n            }\n            catch (error) {\n                return false;\n            }\n        },\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        /**\n         * Produces cryptographically secure private key from random of size\n         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n         */\n        randomPrivateKey: () => {\n            const length = mod.getMinHashLength(CURVE.n);\n            return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n        },\n        /**\n         * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n         * Allows to massively speed-up `point.multiply(scalar)`.\n         * @returns cached point\n         * @example\n         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n         * fast.multiply(privKey); // much faster ECDH now\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n            return point;\n        },\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */\n    function getPublicKey(privateKey, isCompressed = true) {\n        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */\n    function isProbPub(item) {\n        const arr = ut.isBytes(item);\n        const str = typeof item === 'string';\n        const len = (arr || str) && item.length;\n        if (arr)\n            return len === compressedLen || len === uncompressedLen;\n        if (str)\n            return len === 2 * compressedLen || len === 2 * uncompressedLen;\n        if (item instanceof Point)\n            return true;\n        return false;\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */\n    function getSharedSecret(privateA, publicB, isCompressed = true) {\n        if (isProbPub(privateA))\n            throw new Error('first arg must be private key');\n        if (!isProbPub(publicB))\n            throw new Error('second arg must be public key');\n        const b = Point.fromHex(publicB); // check for being on-curve\n        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = CURVE.bits2int ||\n        function (bytes) {\n            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n            // for some cases, since bytes.length * 8 is not actual bitLength.\n            const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n            const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n            return delta > 0 ? num >> BigInt(delta) : num;\n        };\n    const bits2int_modN = CURVE.bits2int_modN ||\n        function (bytes) {\n            return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n        };\n    // NOTE: pads output with zero as per spec\n    const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */\n    function int2octets(num) {\n        if (typeof num !== 'bigint')\n            throw new Error('bigint expected');\n        if (!(_0n <= num && num < ORDER_MASK))\n            throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n        // works with order, can have different size than numToField!\n        return ut.numberToBytesBE(num, CURVE.nByteLength);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n    // Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n        if (['recovered', 'canonical'].some((k) => k in opts))\n            throw new Error('sign() legacy options not supported');\n        const { hash, randomBytes } = CURVE;\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n        if (lowS == null)\n            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n        msgHash = ensureBytes('msgHash', msgHash);\n        if (prehash)\n            msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(msgHash);\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n        const seedArgs = [int2octets(d), int2octets(h1int)];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (ent != null && ent !== false) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n            seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n        }\n        const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n            if (!isWithinCurveOrder(k))\n                return; // Important: all mod() calls here must be done over N\n            const ik = invN(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n            const r = modN(q.x); // r = q.x mod n\n            if (r === _0n)\n                return;\n            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n            const s = modN(ik * modN(m + r * d)); // Not using blinding here\n            if (s === _0n)\n                return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return { seed, k2sig };\n    }\n    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };\n    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };\n    /**\n     * Signs message hash with a private key.\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n     * @param privKey private key\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n     * @returns signature with recovery param\n     */\n    function sign(msgHash, privKey, opts = defaultSigOpts) {\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n        const C = CURVE;\n        const drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE._setWindowSize(8);\n    // utils.precompute(8, ProjectivePoint.BASE)\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1⋅G - U2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */\n    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n        const sg = signature;\n        msgHash = ensureBytes('msgHash', msgHash);\n        publicKey = ensureBytes('publicKey', publicKey);\n        if ('strict' in opts)\n            throw new Error('options.strict was renamed to lowS');\n        const { lowS, prehash } = opts;\n        let _sig = undefined;\n        let P;\n        try {\n            if (typeof sg === 'string' || ut.isBytes(sg)) {\n                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n                // Since DER can also be 2*nByteLength bytes, we check for it first.\n                try {\n                    _sig = Signature.fromDER(sg);\n                }\n                catch (derError) {\n                    if (!(derError instanceof DER.Err))\n                        throw derError;\n                    _sig = Signature.fromCompact(sg);\n                }\n            }\n            else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n                const { r, s } = sg;\n                _sig = new Signature(r, s);\n            }\n            else {\n                throw new Error('PARSE');\n            }\n            P = Point.fromHex(publicKey);\n        }\n        catch (error) {\n            if (error.message === 'PARSE')\n                throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n            return false;\n        }\n        if (lowS && _sig.hasHighS())\n            return false;\n        if (prehash)\n            msgHash = CURVE.hash(msgHash);\n        const { r, s } = _sig;\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n        const is = invN(s); // s^-1\n        const u1 = modN(h * is); // u1 = hs^-1 mod n\n        const u2 = modN(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n        if (!R)\n            return false;\n        const v = modN(R.x);\n        return v === r;\n    }\n    return {\n        CURVE,\n        getPublicKey,\n        getSharedSecret,\n        sign,\n        verify,\n        ProjectivePoint: Point,\n        Signature,\n        utils,\n    };\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for (let o = q - _1n; o % _2n === _0n; o /= _2n)\n        l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v) => {\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for (let i = c1; i > _1n; i--) {\n            let tv5 = i - _2n; // 18.    tv5 = i - 2\n            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return { isValid: isQR, value: tv3 };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v) => {\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU(Fp, opts) {\n    mod.validateField(Fp);\n    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n        throw new Error('mapToCurveSimpleSWU: invalid opts');\n    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n    if (!Fp.isOdd)\n        throw new Error('Fp.isOdd is not implemented!');\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u) => {\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        x = Fp.div(x, tv4); // 25.   x = x / tv4\n        return { x, y };\n    };\n}\n//# sourceMappingURL=weierstrass.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass } from './abstract/weierstrass.js';\n// connects noble-curves to noble-hashes\nexport function getHash(hash) {\n    return {\n        hash,\n        hmac: (key, ...msgs) => hmac(hash, key, concatBytes(...msgs)),\n        randomBytes,\n    };\n}\nexport function createCurve(curveDef, defHash) {\n    const create = (hash) => weierstrass({ ...curveDef, ...getHash(hash) });\n    return Object.freeze({ ...create(defHash), create });\n}\n//# sourceMappingURL=_shortw_utils.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { createCurve } from './_shortw_utils.js';\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport { bytesToNumberBE, concatBytes, ensureBytes, numberToBytesBE } from './abstract/utils.js';\nimport { mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a, b) => (a + b / _2n) / b;\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y) {\n    const P = secp256k1P;\n    // prettier-ignore\n    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n    // prettier-ignore\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n    const b2 = (y * y * y) % P; // x^3, 11\n    const b3 = (b2 * b2 * y) % P; // x^7\n    const b6 = (pow2(b3, _3n, P) * b3) % P;\n    const b9 = (pow2(b6, _3n, P) * b3) % P;\n    const b11 = (pow2(b9, _2n, P) * b2) % P;\n    const b22 = (pow2(b11, _11n, P) * b11) % P;\n    const b44 = (pow2(b22, _22n, P) * b22) % P;\n    const b88 = (pow2(b44, _44n, P) * b44) % P;\n    const b176 = (pow2(b88, _88n, P) * b88) % P;\n    const b220 = (pow2(b176, _44n, P) * b44) % P;\n    const b223 = (pow2(b220, _3n, P) * b3) % P;\n    const t1 = (pow2(b223, _23n, P) * b22) % P;\n    const t2 = (pow2(t1, _6n, P) * b2) % P;\n    const root = pow2(t2, _2n, P);\n    if (!Fp.eql(Fp.sqr(root), y))\n        throw new Error('Cannot find square root');\n    return root;\n}\nconst Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\nexport const secp256k1 = createCurve({\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975\n    Fp, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n        beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n        splitScalar: (k) => {\n            const n = secp256k1N;\n            const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n            const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n            const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n            const b2 = a1;\n            const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n            const c1 = divNearest(b2 * k, n);\n            const c2 = divNearest(-b1 * k, n);\n            let k1 = mod(k - c1 * a1 - c2 * a2, n);\n            let k2 = mod(-c1 * b1 - c2 * b2, n);\n            const k1neg = k1 > POW_2_128;\n            const k2neg = k2 > POW_2_128;\n            if (k1neg)\n                k1 = n - k1;\n            if (k2neg)\n                k2 = n - k2;\n            if (k1 > POW_2_128 || k2 > POW_2_128) {\n                throw new Error('splitScalar: Endomorphism failed, k=' + k);\n            }\n            return { k1neg, k1, k2neg, k2 };\n        },\n    },\n}, sha256);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\nconst fe = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\nconst ge = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag, ...messages) {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n        const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n        tagP = concatBytes(tagH, tagH);\n        TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return sha256(concatBytes(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n) => numberToBytesBE(n, 32);\nconst modP = (x) => mod(x, secp256k1P);\nconst modN = (x) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n    let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n    let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n    const scalar = p.hasEvenY() ? d_ : modN(-d_);\n    return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x) {\n    if (!fe(x))\n        throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n    const xx = modP(x * x);\n    const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n    if (y % _2n !== _0n)\n        y = modP(-y); // Return the unique point P such that x(P) = x and\n    const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n    p.assertValidity();\n    return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args) {\n    return modN(bytesToNumberBE(taggedHash('BIP0340/challenge', ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey) {\n    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message, privateKey, auxRand = randomBytes(32)) {\n    const m = ensureBytes('message', message);\n    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n    const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n    const t = numTo32b(d ^ bytesToNumberBE(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n    const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n    const k_ = modN(bytesToNumberBE(rand)); // Let k' = int(rand) mod n\n    if (k_ === _0n)\n        throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n    sig.set(rx, 0);\n    sig.set(numTo32b(modN(k + e * d)), 32);\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n    if (!schnorrVerify(sig, m, px))\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature, message, publicKey) {\n    const sig = ensureBytes('signature', signature, 64);\n    const m = ensureBytes('message', message);\n    const pub = ensureBytes('publicKey', publicKey, 32);\n    try {\n        const P = lift_x(bytesToNumberBE(pub)); // P = lift_x(int(pk)); fail if that fails\n        const r = bytesToNumberBE(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n        if (!fe(r))\n            return false;\n        const s = bytesToNumberBE(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n        if (!ge(s))\n            return false;\n        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n        const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n        if (!R || !R.hasEvenY() || R.toAffine().x !== r)\n            return false; // -eP == (n-e)P\n        return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n    }\n    catch (error) {\n        return false;\n    }\n}\nexport const schnorr = /* @__PURE__ */ (() => ({\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    utils: {\n        randomPrivateKey: secp256k1.utils.randomPrivateKey,\n        lift_x,\n        pointToBytes,\n        numberToBytesBE,\n        bytesToNumberBE,\n        taggedHash,\n        mod,\n    },\n}))();\nconst isoMap = /* @__PURE__ */ (() => isogenyMap(Fp, [\n    // xNum\n    [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n    ],\n    // xDen\n    [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n    ],\n    // yDen\n    [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n].map((i) => i.map((j) => BigInt(j)))))();\nconst mapSWU = /* @__PURE__ */ (() => mapToCurveSimpleSWU(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11')),\n}))();\nconst htf = /* @__PURE__ */ (() => createHasher(secp256k1.ProjectivePoint, (scalars) => {\n    const { x, y } = mapSWU(Fp.create(scalars[0]));\n    return isoMap(x, y);\n}, {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256,\n}))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n//# sourceMappingURL=secp256k1.js.map","import { Buffer } from 'buffer';\nimport { ed25519 } from '@noble/curves/ed25519';\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { serialize, deserialize, deserializeUnchecked } from 'borsh';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport { blob } from '@solana/buffer-layout';\nimport { toBigIntLE, toBufferLE } from 'bigint-buffer';\nimport { coerce, instance, string, tuple, literal, unknown, type, number, array, nullable, optional, boolean, record, union, create, any, assert as assert$1 } from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport { CommonClient, WebSocket } from 'rpc-websockets';\nimport { keccak_256 } from '@noble/hashes/sha3';\nimport { secp256k1 } from '@noble/curves/secp256k1';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\n\n/**\n * Ed25519 Keypair\n */\n\nconst generatePrivateKey = ed25519.utils.randomPrivateKey;\nconst generateKeypair = () => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey\n  };\n};\nconst getPublicKey = ed25519.getPublicKey;\nfunction isOnCurve(publicKey) {\n  try {\n    ed25519.ExtendedPoint.fromHex(publicKey);\n    return true;\n  } catch {\n    return false;\n  }\n}\nconst sign = (message, secretKey) => ed25519.sign(message, secretKey.slice(0, 32));\nconst verify = ed25519.verify;\n\nconst toBuffer = arr => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n\n// Class wrapping a plain object\nclass Struct {\n  constructor(properties) {\n    Object.assign(this, properties);\n  }\n  encode() {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n  static decode(data) {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n  static decodeUnchecked(data) {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nclass Enum extends Struct {\n  constructor(properties) {\n    super(properties);\n    this.enum = '';\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\nconst SOLANA_SCHEMA = new Map();\n\nvar _PublicKey;\n\n/**\n * Maximum length of derived pubkey seed\n */\nconst MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nconst PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\n\n/**\n * JSON object representation of PublicKey class\n */\n\nfunction isPublicKeyData(value) {\n  return value._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nclass PublicKey extends Struct {\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value) {\n    super({});\n    /** @internal */\n    this._bn = void 0;\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique() {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey) {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58() {\n    return bs58.encode(this.toBytes());\n  }\n  toJSON() {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes() {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer() {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n  get [Symbol.toStringTag]() {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString() {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(fromPublicKey, seed, programId) {\n    const buffer = Buffer.concat([fromPublicKey.toBuffer(), Buffer.from(seed), programId.toBuffer()]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(seeds, programId) {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([buffer, programId.toBuffer(), Buffer.from('ProgramDerivedAddress')]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(seeds, programId) {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(seeds, programId) {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(seeds, programId) {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData) {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n_PublicKey = PublicKey;\nPublicKey.default = new _PublicKey('11111111111111111111111111111111');\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']]\n});\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nclass Account {\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey) {\n    /** @internal */\n    this._publicKey = void 0;\n    /** @internal */\n    this._secretKey = void 0;\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey() {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey() {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n\nconst BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey('BPFLoader1111111111111111111111111111111111');\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nconst PACKET_DATA_SIZE = 1280 - 40 - 8;\nconst VERSION_PREFIX_MASK = 0x7f;\nconst SIGNATURE_LENGTH_IN_BYTES = 64;\n\nclass TransactionExpiredBlockheightExceededError extends Error {\n  constructor(signature) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredBlockheightExceededError.prototype, 'name', {\n  value: 'TransactionExpiredBlockheightExceededError'\n});\nclass TransactionExpiredTimeoutError extends Error {\n  constructor(signature, timeoutSeconds) {\n    super(`Transaction was not confirmed in ${timeoutSeconds.toFixed(2)} seconds. It is ` + 'unknown if it succeeded or failed. Check signature ' + `${signature} using the Solana Explorer or CLI tools.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError'\n});\nclass TransactionExpiredNonceInvalidError extends Error {\n  constructor(signature) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError'\n});\n\nclass MessageAccountKeys {\n  constructor(staticAccountKeys, accountKeysFromLookups) {\n    this.staticAccountKeys = void 0;\n    this.accountKeysFromLookups = void 0;\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n  keySegments() {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n  get(index) {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n  get length() {\n    return this.keySegments().flat().length;\n  }\n  compileInstructions(instructions) {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n    const keyIndexMap = new Map();\n    this.keySegments().flat().forEach((key, index) => {\n      keyIndexMap.set(key.toBase58(), index);\n    });\n    const findKeyIndex = key => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined) throw new Error('Encountered an unknown instruction account key during compilation');\n      return keyIndex;\n    };\n    return instructions.map(instruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta => findKeyIndex(meta.pubkey)),\n        data: instruction.data\n      };\n    });\n  }\n}\n\n/**\n * Layout for a public key\n */\nconst publicKey = (property = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nconst signature = (property = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n/**\n * Layout for a Rust String type\n */\nconst rustString = (property = 'string') => {\n  const rsl = BufferLayout.struct([BufferLayout.u32('length'), BufferLayout.u32('lengthPadding'), BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars')], property);\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n  const rslShim = rsl;\n  rslShim.decode = (b, offset) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n  rslShim.encode = (str, b, offset) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8')\n    };\n    return _encode(data, b, offset);\n  };\n  rslShim.alloc = str => {\n    return BufferLayout.u32().span + BufferLayout.u32().span + Buffer.from(str, 'utf8').length;\n  };\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nconst authorized = (property = 'authorized') => {\n  return BufferLayout.struct([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nconst lockup = (property = 'lockup') => {\n  return BufferLayout.struct([BufferLayout.ns64('unixTimestamp'), BufferLayout.ns64('epoch'), publicKey('custodian')], property);\n};\n\n/**\n *  Layout for a VoteInit object\n */\nconst voteInit = (property = 'voteInit') => {\n  return BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedVoter'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission')], property);\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nconst voteAuthorizeWithSeedArgs = (property = 'voteAuthorizeWithSeedArgs') => {\n  return BufferLayout.struct([BufferLayout.u32('voteAuthorizationType'), publicKey('currentAuthorityDerivedKeyOwnerPubkey'), rustString('currentAuthorityDerivedKeySeed'), publicKey('newAuthorized')], property);\n};\nfunction getAlloc(type, fields) {\n  const getItemAlloc = item => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({\n        layout: item\n      }, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n  let alloc = 0;\n  type.layout.fields.forEach(item => {\n    alloc += getItemAlloc(item);\n  });\n  return alloc;\n}\n\nfunction decodeLength(bytes) {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift();\n    len |= (elem & 0x7f) << size * 7;\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\nfunction encodeLength(bytes, len) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n\nfunction assert (condition, message) {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n\nclass CompiledKeys {\n  constructor(payer, keyMetaMap) {\n    this.payer = void 0;\n    this.keyMetaMap = void 0;\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n  static compile(instructions, payer) {\n    const keyMetaMap = new Map();\n    const getOrInsertDefault = pubkey => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n  getMessageComponents() {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n    const writableSigners = mapEntries.filter(([, meta]) => meta.isSigner && meta.isWritable);\n    const readonlySigners = mapEntries.filter(([, meta]) => meta.isSigner && !meta.isWritable);\n    const writableNonSigners = mapEntries.filter(([, meta]) => !meta.isSigner && meta.isWritable);\n    const readonlyNonSigners = mapEntries.filter(([, meta]) => !meta.isSigner && !meta.isWritable);\n    const header = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length\n    };\n\n    // sanity checks\n    {\n      assert(writableSigners.length > 0, 'Expected at least one writable signer key');\n      const [payerAddress] = writableSigners[0];\n      assert(payerAddress === this.payer.toBase58(), 'Expected first writable signer key to be the fee payer');\n    }\n    const staticAccountKeys = [...writableSigners.map(([address]) => new PublicKey(address)), ...readonlySigners.map(([address]) => new PublicKey(address)), ...writableNonSigners.map(([address]) => new PublicKey(address)), ...readonlyNonSigners.map(([address]) => new PublicKey(address))];\n    return [header, staticAccountKeys];\n  }\n  extractTableLookup(lookupTable) {\n    const [writableIndexes, drainedWritableKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, keyMeta => !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable);\n    const [readonlyIndexes, drainedReadonlyKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, keyMeta => !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable);\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n    return [{\n      accountKey: lookupTable.key,\n      writableIndexes,\n      readonlyIndexes\n    }, {\n      writable: drainedWritableKeys,\n      readonly: drainedReadonlyKeys\n    }];\n  }\n\n  /** @internal */\n  drainKeysFoundInLookupTable(lookupTableEntries, keyMetaFilter) {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry => entry.equals(key));\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n\nconst END_OF_BUFFER_ERROR_MESSAGE = 'Reached end of buffer unexpectedly';\n\n/**\n * Delegates to `Array#shift`, but throws if the array is zero-length.\n */\nfunction guardedShift(byteArray) {\n  if (byteArray.length === 0) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.shift();\n}\n\n/**\n * Delegates to `Array#splice`, but throws if the section being spliced out extends past the end of\n * the array.\n */\nfunction guardedSplice(byteArray, ...args) {\n  const [start] = args;\n  if (args.length === 2 // Implies that `deleteCount` was supplied\n  ? start + (args[1] ?? 0) > byteArray.length : start >= byteArray.length) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.splice(...args);\n}\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\n\n/**\n * Message constructor arguments\n */\n\n/**\n * List of instructions to be processed atomically\n */\nclass Message {\n  constructor(args) {\n    this.header = void 0;\n    this.accountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.instructions = void 0;\n    this.indexToProgramIds = new Map();\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix => this.indexToProgramIds.set(ix.programIdIndex, this.accountKeys[ix.programIdIndex]));\n  }\n  get version() {\n    return 'legacy';\n  }\n  get staticAccountKeys() {\n    return this.accountKeys;\n  }\n  get compiledInstructions() {\n    return this.instructions.map(ix => ({\n      programIdIndex: ix.programIdIndex,\n      accountKeyIndexes: ix.accounts,\n      data: bs58.decode(ix.data)\n    }));\n  }\n  get addressTableLookups() {\n    return [];\n  }\n  getAccountKeys() {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n  static compile(args) {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(ix => ({\n      programIdIndex: ix.programIdIndex,\n      accounts: ix.accountKeyIndexes,\n      data: bs58.encode(ix.data)\n    }));\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions\n    });\n  }\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n  isAccountWritable(index) {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n  isProgramId(index) {\n    return this.indexToProgramIds.has(index);\n  }\n  programIds() {\n    return [...this.indexToProgramIds.values()];\n  }\n  nonProgramIds() {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n  serialize() {\n    const numKeys = this.accountKeys.length;\n    let keyCount = [];\n    encodeLength(keyCount, numKeys);\n    const instructions = this.instructions.map(instruction => {\n      const {\n        accounts,\n        programIdIndex\n      } = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n      let keyIndicesCount = [];\n      encodeLength(keyIndicesCount, accounts.length);\n      let dataCount = [];\n      encodeLength(dataCount, data.length);\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data\n      };\n    });\n    let instructionCount = [];\n    encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(instruction.keyIndicesCount.length, 'keyIndicesCount'), BufferLayout.seq(BufferLayout.u8('keyIndex'), instruction.keyIndices.length, 'keyIndices'), BufferLayout.blob(instruction.dataLength.length, 'dataLength'), BufferLayout.seq(BufferLayout.u8('userdatum'), instruction.data.length, 'data')]);\n      const length = instructionLayout.encode(instruction, instructionBuffer, instructionBufferLength);\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n    const signDataLayout = BufferLayout.struct([BufferLayout.blob(1, 'numRequiredSignatures'), BufferLayout.blob(1, 'numReadonlySignedAccounts'), BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'), BufferLayout.blob(keyCount.length, 'keyCount'), BufferLayout.seq(publicKey('key'), numKeys, 'keys'), publicKey('recentBlockhash')]);\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([this.header.numReadonlySignedAccounts]),\n      numReadonlyUnsignedAccounts: Buffer.from([this.header.numReadonlyUnsignedAccounts]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash)\n    };\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const numRequiredSignatures = guardedShift(byteArray);\n    if (numRequiredSignatures !== (numRequiredSignatures & VERSION_PREFIX_MASK)) {\n      throw new Error('Versioned messages must be deserialized with VersionedMessage.deserialize()');\n    }\n    const numReadonlySignedAccounts = guardedShift(byteArray);\n    const numReadonlyUnsignedAccounts = guardedShift(byteArray);\n    const accountCount = decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n    const recentBlockhash = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n    const instructionCount = decodeLength(byteArray);\n    let instructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountCount = decodeLength(byteArray);\n      const accounts = guardedSplice(byteArray, 0, accountCount);\n      const dataLength = decodeLength(byteArray);\n      const dataSlice = guardedSplice(byteArray, 0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data\n      });\n    }\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions\n    };\n    return new Message(messageArgs);\n  }\n}\n\n/**\n * Message constructor arguments\n */\n\nclass MessageV0 {\n  constructor(args) {\n    this.header = void 0;\n    this.staticAccountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.compiledInstructions = void 0;\n    this.addressTableLookups = void 0;\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n  get version() {\n    return 0;\n  }\n  get numAccountKeysFromLookups() {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n  getAccountKeys(args) {\n    let accountKeysFromLookups;\n    if (args && 'accountKeysFromLookups' in args && args.accountKeysFromLookups) {\n      if (this.numAccountKeysFromLookups != args.accountKeysFromLookups.writable.length + args.accountKeysFromLookups.readonly.length) {\n        throw new Error('Failed to get account keys because of a mismatch in the number of account keys from lookups');\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (args && 'addressLookupTableAccounts' in args && args.addressLookupTableAccounts) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(args.addressLookupTableAccounts);\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error('Failed to get account keys because address table lookups were not resolved');\n    }\n    return new MessageAccountKeys(this.staticAccountKeys, accountKeysFromLookups);\n  }\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n  isAccountWritable(index) {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce((count, lookup) => count + lookup.writableIndexes.length, 0);\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n  resolveAddressTableLookups(addressLookupTableAccounts) {\n    const accountKeysFromLookups = {\n      writable: [],\n      readonly: []\n    };\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account => account.key.equals(tableLookup.accountKey));\n      if (!tableAccount) {\n        throw new Error(`Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`);\n      }\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(tableAccount.state.addresses[index]);\n        } else {\n          throw new Error(`Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`);\n        }\n      }\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(tableAccount.state.addresses[index]);\n        } else {\n          throw new Error(`Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`);\n        }\n      }\n    }\n    return accountKeysFromLookups;\n  }\n  static compile(args) {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const addressTableLookups = new Array();\n    const accountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array()\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {\n          writable,\n          readonly\n        }] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys, accountKeysFromLookups);\n    const compiledInstructions = accountKeys.compileInstructions(args.instructions);\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups\n    });\n  }\n  serialize() {\n    const encodedStaticAccountKeysLength = Array();\n    encodeLength(encodedStaticAccountKeysLength, this.staticAccountKeys.length);\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array();\n    encodeLength(encodedInstructionsLength, this.compiledInstructions.length);\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array();\n    encodeLength(encodedAddressTableLookupsLength, this.addressTableLookups.length);\n    const messageLayout = BufferLayout.struct([BufferLayout.u8('prefix'), BufferLayout.struct([BufferLayout.u8('numRequiredSignatures'), BufferLayout.u8('numReadonlySignedAccounts'), BufferLayout.u8('numReadonlyUnsignedAccounts')], 'header'), BufferLayout.blob(encodedStaticAccountKeysLength.length, 'staticAccountKeysLength'), BufferLayout.seq(publicKey(), this.staticAccountKeys.length, 'staticAccountKeys'), publicKey('recentBlockhash'), BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'), BufferLayout.blob(serializedInstructions.length, 'serializedInstructions'), BufferLayout.blob(encodedAddressTableLookupsLength.length, 'addressTableLookupsLength'), BufferLayout.blob(serializedAddressTableLookups.length, 'serializedAddressTableLookups')]);\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode({\n      prefix: MESSAGE_VERSION_0_PREFIX,\n      header: this.header,\n      staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n      staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n      instructionsLength: new Uint8Array(encodedInstructionsLength),\n      serializedInstructions,\n      addressTableLookupsLength: new Uint8Array(encodedAddressTableLookupsLength),\n      serializedAddressTableLookups\n    }, serializedMessage);\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n  serializeInstructions() {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array();\n      encodeLength(encodedAccountKeyIndexesLength, instruction.accountKeyIndexes.length);\n      const encodedDataLength = Array();\n      encodeLength(encodedDataLength, instruction.data.length);\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(encodedAccountKeyIndexesLength.length, 'encodedAccountKeyIndexesLength'), BufferLayout.seq(BufferLayout.u8(), instruction.accountKeyIndexes.length, 'accountKeyIndexes'), BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'), BufferLayout.blob(instruction.data.length, 'data')]);\n      serializedLength += instructionLayout.encode({\n        programIdIndex: instruction.programIdIndex,\n        encodedAccountKeyIndexesLength: new Uint8Array(encodedAccountKeyIndexesLength),\n        accountKeyIndexes: instruction.accountKeyIndexes,\n        encodedDataLength: new Uint8Array(encodedDataLength),\n        data: instruction.data\n      }, serializedInstructions, serializedLength);\n    }\n    return serializedInstructions.slice(0, serializedLength);\n  }\n  serializeAddressTableLookups() {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array();\n      encodeLength(encodedWritableIndexesLength, lookup.writableIndexes.length);\n      const encodedReadonlyIndexesLength = Array();\n      encodeLength(encodedReadonlyIndexesLength, lookup.readonlyIndexes.length);\n      const addressTableLookupLayout = BufferLayout.struct([publicKey('accountKey'), BufferLayout.blob(encodedWritableIndexesLength.length, 'encodedWritableIndexesLength'), BufferLayout.seq(BufferLayout.u8(), lookup.writableIndexes.length, 'writableIndexes'), BufferLayout.blob(encodedReadonlyIndexesLength.length, 'encodedReadonlyIndexesLength'), BufferLayout.seq(BufferLayout.u8(), lookup.readonlyIndexes.length, 'readonlyIndexes')]);\n      serializedLength += addressTableLookupLayout.encode({\n        accountKey: lookup.accountKey.toBytes(),\n        encodedWritableIndexesLength: new Uint8Array(encodedWritableIndexesLength),\n        writableIndexes: lookup.writableIndexes,\n        encodedReadonlyIndexesLength: new Uint8Array(encodedReadonlyIndexesLength),\n        readonlyIndexes: lookup.readonlyIndexes\n      }, serializedAddressTableLookups, serializedLength);\n    }\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n  static deserialize(serializedMessage) {\n    let byteArray = [...serializedMessage];\n    const prefix = guardedShift(byteArray);\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(prefix !== maskedPrefix, `Expected versioned message but received legacy message`);\n    const version = maskedPrefix;\n    assert(version === 0, `Expected versioned message with version 0 but found version ${version}`);\n    const header = {\n      numRequiredSignatures: guardedShift(byteArray),\n      numReadonlySignedAccounts: guardedShift(byteArray),\n      numReadonlyUnsignedAccounts: guardedShift(byteArray)\n    };\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH)));\n    }\n    const recentBlockhash = bs58.encode(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));\n    const instructionCount = decodeLength(byteArray);\n    const compiledInstructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountKeyIndexesLength = decodeLength(byteArray);\n      const accountKeyIndexes = guardedSplice(byteArray, 0, accountKeyIndexesLength);\n      const dataLength = decodeLength(byteArray);\n      const data = new Uint8Array(guardedSplice(byteArray, 0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data\n      });\n    }\n    const addressTableLookupsCount = decodeLength(byteArray);\n    const addressTableLookups = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = decodeLength(byteArray);\n      const writableIndexes = guardedSplice(byteArray, 0, writableIndexesLength);\n      const readonlyIndexesLength = decodeLength(byteArray);\n      const readonlyIndexes = guardedSplice(byteArray, 0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes\n      });\n    }\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups\n    });\n  }\n}\n\n// eslint-disable-next-line no-redeclare\nconst VersionedMessage = {\n  deserializeMessageVersion(serializedMessage) {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n  deserialize: serializedMessage => {\n    const version = VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(`Transaction message version ${version} deserialization is not supported`);\n    }\n  }\n};\n\n/** @internal */\n\n/**\n * Transaction signature as base-58 encoded string\n */\n\nlet TransactionStatus = /*#__PURE__*/function (TransactionStatus) {\n  TransactionStatus[TransactionStatus[\"BLOCKHEIGHT_EXCEEDED\"] = 0] = \"BLOCKHEIGHT_EXCEEDED\";\n  TransactionStatus[TransactionStatus[\"PROCESSED\"] = 1] = \"PROCESSED\";\n  TransactionStatus[TransactionStatus[\"TIMED_OUT\"] = 2] = \"TIMED_OUT\";\n  TransactionStatus[TransactionStatus[\"NONCE_INVALID\"] = 3] = \"NONCE_INVALID\";\n  return TransactionStatus;\n}({});\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\n\n/**\n * Configuration object for Transaction.serialize()\n */\n\n/**\n * @internal\n */\n\n/**\n * Transaction Instruction class\n */\nclass TransactionInstruction {\n  constructor(opts) {\n    /**\n     * Public keys to include in this transaction\n     * Boolean represents whether this pubkey needs to sign the transaction\n     */\n    this.keys = void 0;\n    /**\n     * Program Id to execute\n     */\n    this.programId = void 0;\n    /**\n     * Program input\n     */\n    this.data = Buffer.alloc(0);\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON() {\n    return {\n      keys: this.keys.map(({\n        pubkey,\n        isSigner,\n        isWritable\n      }) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data]\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\n\n/**\n * @internal\n */\n\n/**\n * Transaction class\n */\nclass Transaction {\n  /**\n   * The first (payer) Transaction signature\n   *\n   * @returns {Buffer | null} Buffer of payer's signature\n   */\n  get signature() {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n\n  // Construct a transaction using a durable nonce\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts) {\n    /**\n     * Signatures for the transaction.  Typically created by invoking the\n     * `sign()` method\n     */\n    this.signatures = [];\n    this.feePayer = void 0;\n    /**\n     * The instructions to atomically execute\n     */\n    this.instructions = [];\n    /**\n     * A recent transaction id. Must be populated by the caller\n     */\n    this.recentBlockhash = void 0;\n    /**\n     * the last block chain can advance to before tx is declared expired\n     * */\n    this.lastValidBlockHeight = void 0;\n    /**\n     * Optional Nonce information. If populated, transaction will use a durable\n     * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n     */\n    this.nonceInfo = void 0;\n    /**\n     * If this is a nonce transaction this represents the minimum slot from which\n     * to evaluate if the nonce has advanced when attempting to confirm the\n     * transaction. This protects against a case where the transaction confirmation\n     * logic loads the nonce account from an old slot and assumes the mismatch in\n     * nonce value implies that the nonce has been advanced.\n     */\n    this.minNonceContextSlot = void 0;\n    /**\n     * @internal\n     */\n    this._message = void 0;\n    /**\n     * @internal\n     */\n    this._json = void 0;\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {\n        minContextSlot,\n        nonceInfo\n      } = opts;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {\n      const {\n        blockhash,\n        lastValidBlockHeight\n      } = opts;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {\n        recentBlockhash,\n        nonceInfo\n      } = opts;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON() {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo ? {\n        nonce: this.nonceInfo.nonce,\n        nonceInstruction: this.nonceInfo.nonceInstruction.toJSON()\n      } : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({\n        publicKey\n      }) => {\n        return publicKey.toJSON();\n      })\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   *\n   * @param {Array< Transaction | TransactionInstruction | TransactionInstructionCtorFields >} items - Instructions to add to the Transaction\n   */\n  add(...items) {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n    items.forEach(item => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage() {\n    if (this._message && JSON.stringify(this.toJSON()) === JSON.stringify(this._json)) {\n      return this._message;\n    }\n    let recentBlockhash;\n    let instructions;\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n    let feePayer;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(`Transaction instruction index ${i} has undefined program id`);\n      }\n    }\n    const programIds = [];\n    const accountMetas = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({\n          ...accountMeta\n        });\n      });\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable = uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner = uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      const options = {\n        localeMatcher: 'best fit',\n        usage: 'sort',\n        sensitivity: 'variant',\n        ignorePunctuation: false,\n        numeric: false,\n        caseFirst: 'lower'\n      };\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58(), 'en', options);\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn('Transaction references a signature that is unnecessary, ' + 'only the fee payer and instruction signer accounts should sign a transaction. ' + 'This behavior is deprecated and will throw an error in the next major version release.');\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys = [];\n    const unsignedKeys = [];\n    uniqueMetas.forEach(({\n      pubkey,\n      isSigner,\n      isWritable\n    }) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions = instructions.map(instruction => {\n      const {\n        data,\n        programId\n      } = instruction;\n      return {\n        programIdIndex: accountKeys.indexOf(programId.toString()),\n        accounts: instruction.keys.map(meta => accountKeys.indexOf(meta.pubkey.toString())),\n        data: bs58.encode(data)\n      };\n    });\n    compiledInstructions.forEach(instruction => {\n      assert(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => assert(keyIndex >= 0));\n    });\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile() {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(0, message.header.numRequiredSignatures);\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n      if (valid) return message;\n    }\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage() {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   *\n   * @param {Connection} connection Connection to RPC Endpoint.\n   *\n   * @returns {Promise<number | null>} The estimated fee for the transaction\n   */\n  async getEstimatedFee(connection) {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n    const seen = new Set();\n    this.signatures = signers.filter(publicKey => {\n      const key = publicKey.toString();\n      if (seen.has(key)) {\n        return false;\n      } else {\n        seen.add(key);\n        return true;\n      }\n    }).map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  sign(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey\n    }));\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  partialSign(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message, ...signers) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * @param {PublicKey} pubkey Public key that will be added to the transaction.\n   * @param {Buffer} signature An externally created signature to add to the transaction.\n   */\n  addSignature(pubkey, signature) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey, signature) {\n    assert(signature.length === 64);\n    const index = this.signatures.findIndex(sigpair => pubkey.equals(sigpair.publicKey));\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   *\n   * @param {boolean} [requireAllSignatures=true] Require a fully signed Transaction\n   */\n  verifySignatures(requireAllSignatures = true) {\n    const signatureErrors = this._getMessageSignednessErrors(this.serializeMessage(), requireAllSignatures);\n    return !signatureErrors;\n  }\n\n  /**\n   * @internal\n   */\n  _getMessageSignednessErrors(message, requireAllSignatures) {\n    const errors = {};\n    for (const {\n      signature,\n      publicKey\n    } of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          (errors.missing ||= []).push(publicKey);\n        }\n      } else {\n        if (!verify(signature, message, publicKey.toBytes())) {\n          (errors.invalid ||= []).push(publicKey);\n        }\n      }\n    }\n    return errors.invalid || errors.missing ? errors : undefined;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * @param {Buffer} [config] Config of transaction.\n   *\n   * @returns {Buffer} Signature of transaction in wire format.\n   */\n  serialize(config) {\n    const {\n      requireAllSignatures,\n      verifySignatures\n    } = Object.assign({\n      requireAllSignatures: true,\n      verifySignatures: true\n    }, config);\n    const signData = this.serializeMessage();\n    if (verifySignatures) {\n      const sigErrors = this._getMessageSignednessErrors(signData, requireAllSignatures);\n      if (sigErrors) {\n        let errorMessage = 'Signature verification failed.';\n        if (sigErrors.invalid) {\n          errorMessage += `\\nInvalid signature for public key${sigErrors.invalid.length === 1 ? '' : '(s)'} [\\`${sigErrors.invalid.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        if (sigErrors.missing) {\n          errorMessage += `\\nMissing signature for public key${sigErrors.missing.length === 1 ? '' : '(s)'} [\\`${sigErrors.missing.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        throw new Error(errorMessage);\n      }\n    }\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData) {\n    const {\n      signatures\n    } = this;\n    const signatureCount = [];\n    encodeLength(signatureCount, signatures.length);\n    const transactionLength = signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    assert(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({\n      signature\n    }, index) => {\n      if (signature !== null) {\n        assert(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(wireTransaction, signatureCount.length + index * 64);\n      }\n    });\n    signData.copy(wireTransaction, signatureCount.length + signatures.length * 64);\n    assert(wireTransaction.length <= PACKET_DATA_SIZE, `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`);\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   *\n   * @param {Buffer | Uint8Array | Array<number>} buffer Signature of wire Transaction\n   *\n   * @returns {Transaction} Transaction associated with the signature\n   */\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const signatureCount = decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   *\n   * @param {Message} message Message of transaction\n   * @param {Array<string>} signatures List of signatures to assign to the transaction\n   *\n   * @returns {Transaction} The populated Transaction\n   */\n  static populate(message, signatures = []) {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature: signature == bs58.encode(DEFAULT_SIGNATURE) ? null : bs58.decode(signature),\n        publicKey: message.accountKeys[index]\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner: transaction.signatures.some(keyObj => keyObj.publicKey.toString() === pubkey.toString()) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account)\n        };\n      });\n      transaction.instructions.push(new TransactionInstruction({\n        keys,\n        programId: message.accountKeys[instruction.programIdIndex],\n        data: bs58.decode(instruction.data)\n      }));\n    });\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n    return transaction;\n  }\n}\n\nclass TransactionMessage {\n  constructor(args) {\n    this.payerKey = void 0;\n    this.instructions = void 0;\n    this.recentBlockhash = void 0;\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n  static decompile(message, args) {\n    const {\n      header,\n      compiledInstructions,\n      recentBlockhash\n    } = message;\n    const {\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts\n    } = header;\n    const numWritableSignedAccounts = numRequiredSignatures - numReadonlySignedAccounts;\n    assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n    const numWritableUnsignedAccounts = message.staticAccountKeys.length - numRequiredSignatures - numReadonlyUnsignedAccounts;\n    assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n    const accountKeys = message.getAccountKeys(args);\n    const payerKey = accountKeys.get(0);\n    if (payerKey === undefined) {\n      throw new Error('Failed to decompile message because no account keys were found');\n    }\n    const instructions = [];\n    for (const compiledIx of compiledInstructions) {\n      const keys = [];\n      for (const keyIndex of compiledIx.accountKeyIndexes) {\n        const pubkey = accountKeys.get(keyIndex);\n        if (pubkey === undefined) {\n          throw new Error(`Failed to find key for account key index ${keyIndex}`);\n        }\n        const isSigner = keyIndex < numRequiredSignatures;\n        let isWritable;\n        if (isSigner) {\n          isWritable = keyIndex < numWritableSignedAccounts;\n        } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n          isWritable = keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n        } else {\n          isWritable = keyIndex - accountKeys.staticAccountKeys.length <\n          // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n          accountKeys.accountKeysFromLookups.writable.length;\n        }\n        keys.push({\n          pubkey,\n          isSigner: keyIndex < header.numRequiredSignatures,\n          isWritable\n        });\n      }\n      const programId = accountKeys.get(compiledIx.programIdIndex);\n      if (programId === undefined) {\n        throw new Error(`Failed to find program id for program id index ${compiledIx.programIdIndex}`);\n      }\n      instructions.push(new TransactionInstruction({\n        programId,\n        data: toBuffer(compiledIx.data),\n        keys\n      }));\n    }\n    return new TransactionMessage({\n      payerKey,\n      instructions,\n      recentBlockhash\n    });\n  }\n  compileToLegacyMessage() {\n    return Message.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions\n    });\n  }\n  compileToV0Message(addressLookupTableAccounts) {\n    return MessageV0.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n      addressLookupTableAccounts\n    });\n  }\n}\n\n/**\n * Versioned transaction class\n */\nclass VersionedTransaction {\n  get version() {\n    return this.message.version;\n  }\n  constructor(message, signatures) {\n    this.signatures = void 0;\n    this.message = void 0;\n    if (signatures !== undefined) {\n      assert(signatures.length === message.header.numRequiredSignatures, 'Expected signatures length to be equal to the number of required signatures');\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n  serialize() {\n    const serializedMessage = this.message.serialize();\n    const encodedSignaturesLength = Array();\n    encodeLength(encodedSignaturesLength, this.signatures.length);\n    const transactionLayout = BufferLayout.struct([BufferLayout.blob(encodedSignaturesLength.length, 'encodedSignaturesLength'), BufferLayout.seq(signature(), this.signatures.length, 'signatures'), BufferLayout.blob(serializedMessage.length, 'serializedMessage')]);\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode({\n      encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n      signatures: this.signatures,\n      serializedMessage\n    }, serializedTransaction);\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n  static deserialize(serializedTransaction) {\n    let byteArray = [...serializedTransaction];\n    const signatures = [];\n    const signaturesLength = decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(new Uint8Array(guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES)));\n    }\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n  sign(signers) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey => pubkey.equals(signer.publicKey));\n      assert(signerIndex >= 0, `Cannot sign with non signer key ${signer.publicKey.toBase58()}`);\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n  addSignature(publicKey, signature) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n    const signerIndex = signerPubkeys.findIndex(pubkey => pubkey.equals(publicKey));\n    assert(signerIndex >= 0, `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`);\n    this.signatures[signerIndex] = signature;\n  }\n}\n\n// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nconst NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nconst DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nconst NUM_SLOTS_PER_SECOND = NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nconst MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n\nconst SYSVAR_CLOCK_PUBKEY = new PublicKey('SysvarC1ock11111111111111111111111111111111');\nconst SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey('SysvarEpochSchedu1e111111111111111111111111');\nconst SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey('Sysvar1nstructions1111111111111111111111111');\nconst SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey('SysvarRecentB1ockHashes11111111111111111111');\nconst SYSVAR_RENT_PUBKEY = new PublicKey('SysvarRent111111111111111111111111111111111');\nconst SYSVAR_REWARDS_PUBKEY = new PublicKey('SysvarRewards111111111111111111111111111111');\nconst SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey('SysvarS1otHashes111111111111111111111111111');\nconst SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey('SysvarS1otHistory11111111111111111111111111');\nconst SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey('SysvarStakeHistory1111111111111111111111111');\n\nclass SendTransactionError extends Error {\n  constructor({\n    action,\n    signature,\n    transactionMessage,\n    logs\n  }) {\n    const maybeLogsOutput = logs ? `Logs: \\n${JSON.stringify(logs.slice(-10), null, 2)}. ` : '';\n    const guideText = '\\nCatch the `SendTransactionError` and call `getLogs()` on it for full details.';\n    let message;\n    switch (action) {\n      case 'send':\n        message = `Transaction ${signature} resulted in an error. \\n` + `${transactionMessage}. ` + maybeLogsOutput + guideText;\n        break;\n      case 'simulate':\n        message = `Simulation failed. \\nMessage: ${transactionMessage}. \\n` + maybeLogsOutput + guideText;\n        break;\n      default:\n        {\n          message = `Unknown action '${(a => a)(action)}'`;\n        }\n    }\n    super(message);\n    this.signature = void 0;\n    this.transactionMessage = void 0;\n    this.transactionLogs = void 0;\n    this.signature = signature;\n    this.transactionMessage = transactionMessage;\n    this.transactionLogs = logs ? logs : undefined;\n  }\n  get transactionError() {\n    return {\n      message: this.transactionMessage,\n      logs: Array.isArray(this.transactionLogs) ? this.transactionLogs : undefined\n    };\n  }\n\n  /* @deprecated Use `await getLogs()` instead */\n  get logs() {\n    const cachedLogs = this.transactionLogs;\n    if (cachedLogs != null && typeof cachedLogs === 'object' && 'then' in cachedLogs) {\n      return undefined;\n    }\n    return cachedLogs;\n  }\n  async getLogs(connection) {\n    if (!Array.isArray(this.transactionLogs)) {\n      this.transactionLogs = new Promise((resolve, reject) => {\n        connection.getTransaction(this.signature).then(tx => {\n          if (tx && tx.meta && tx.meta.logMessages) {\n            const logs = tx.meta.logMessages;\n            this.transactionLogs = logs;\n            resolve(logs);\n          } else {\n            reject(new Error('Log messages not found'));\n          }\n        }).catch(reject);\n      });\n    }\n    return await this.transactionLogs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nconst SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016\n};\nclass SolanaJSONRPCError extends Error {\n  constructor({\n    code,\n    message,\n    data\n  }, customMessage) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = void 0;\n    this.data = void 0;\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nasync function sendAndConfirmTransaction(connection, transaction, signers, options) {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot\n  };\n  const signature = await connection.sendTransaction(transaction, signers, sendOptions);\n  let status;\n  if (transaction.recentBlockhash != null && transaction.lastValidBlockHeight != null) {\n    status = (await connection.confirmTransaction({\n      abortSignal: options?.abortSignal,\n      signature: signature,\n      blockhash: transaction.recentBlockhash,\n      lastValidBlockHeight: transaction.lastValidBlockHeight\n    }, options && options.commitment)).value;\n  } else if (transaction.minNonceContextSlot != null && transaction.nonceInfo != null) {\n    const {\n      nonceInstruction\n    } = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (await connection.confirmTransaction({\n      abortSignal: options?.abortSignal,\n      minContextSlot: transaction.minNonceContextSlot,\n      nonceAccountPubkey,\n      nonceValue: transaction.nonceInfo.nonce,\n      signature\n    }, options && options.commitment)).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn('sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' + 'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' + 'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.');\n    }\n    status = (await connection.confirmTransaction(signature, options && options.commitment)).value;\n  }\n  if (status.err) {\n    if (signature != null) {\n      throw new SendTransactionError({\n        action: 'send',\n        signature: signature,\n        transactionMessage: `Status: (${JSON.stringify(status)})`\n      });\n    }\n    throw new Error(`Transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n  return signature;\n}\n\n// zzz\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * @internal\n */\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nfunction encodeData(type, fields) {\n  const allocLength = type.layout.span >= 0 ? type.layout.span : getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({\n    instruction: type.index\n  }, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nfunction decodeData$1(type, buffer) {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n  if (data.instruction !== type.index) {\n    throw new Error(`invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`);\n  }\n  return data;\n}\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nconst FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct([BufferLayout.u32('version'), BufferLayout.u32('state'), publicKey('authorizedPubkey'), publicKey('nonce'), BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator')]);\nconst NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\n\n/**\n * NonceAccount class\n */\nclass NonceAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.authorizedPubkey = void 0;\n    this.nonce = void 0;\n    this.feeCalculator = void 0;\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(buffer) {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator\n    });\n  }\n}\n\nconst encodeDecode = layout => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {\n    decode,\n    encode\n  };\n};\nconst bigInt = length => property => {\n  const layout = blob(length, property);\n  const {\n    encode,\n    decode\n  } = encodeDecode(layout);\n  const bigIntLayout = layout;\n  bigIntLayout.decode = (buffer, offset) => {\n    const src = decode(buffer, offset);\n    return toBigIntLE(Buffer.from(src));\n  };\n  bigIntLayout.encode = (bigInt, buffer, offset) => {\n    const src = toBufferLE(bigInt, length);\n    return encode(src, buffer, offset);\n  };\n  return bigIntLayout;\n};\nconst u64 = bigInt(8);\n\n/**\n * Create account system transaction params\n */\n\n/**\n * Transfer system transaction params\n */\n\n/**\n * Assign system transaction params\n */\n\n/**\n * Create account with seed system transaction params\n */\n\n/**\n * Create nonce account system transaction params\n */\n\n/**\n * Create nonce account with seed system transaction params\n */\n\n/**\n * Initialize nonce account system instruction params\n */\n\n/**\n * Advance nonce account system instruction params\n */\n\n/**\n * Withdraw nonce account system transaction params\n */\n\n/**\n * Authorize nonce account system transaction params\n */\n\n/**\n * Allocate account system transaction params\n */\n\n/**\n * Allocate account with seed system transaction params\n */\n\n/**\n * Assign account with seed system transaction params\n */\n\n/**\n * Transfer with seed system transaction params\n */\n\n/** Decoded transfer system transaction instruction */\n\n/** Decoded transferWithSeed system transaction instruction */\n\n/**\n * System Instruction class\n */\nclass SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Create, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Transfer, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports,\n      seed,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      space\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Allocate, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Assign, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      base,\n      seed,\n      lamports,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      authorized\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized)\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized)\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nconst SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('programId')])\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports')])\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('space')])\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), publicKey('programId')])\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports'), rustString('seed'), publicKey('programId')])\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nclass SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.newAccountPubkey,\n        isSigner: true,\n        isWritable: true\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports)\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    let keys = [{\n      pubkey: params.fromPubkey,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: params.newAccountPubkey,\n      isSigner: false,\n      isWritable: true\n    }];\n    if (!params.basePubkey.equals(params.fromPubkey)) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(params) {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    } else {\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    }\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey\n    };\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer())\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {\n      lamports: params.lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n}\nSystemProgram.programId = new PublicKey('11111111111111111111111111111111');\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nclass Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return 2 * (\n    // Every transaction requires two signatures (payer + program)\n    Math.ceil(dataLength / Loader.chunkSize) + 1 +\n    // Add one for Create transaction\n    1) // Add one for Finalize transaction\n    ;\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(connection, payer, program, programId, data) {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(data.length);\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(program.publicKey, 'confirmed');\n      let transaction = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.allocate({\n            accountPubkey: program.publicKey,\n            space: data.length\n          }));\n        }\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.assign({\n            accountPubkey: program.publicKey,\n            programId\n          }));\n        }\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.transfer({\n            fromPubkey: payer.publicKey,\n            toPubkey: program.publicKey,\n            lamports: balanceNeeded - programInfo.lamports\n          }));\n        }\n      } else {\n        transaction = new Transaction().add(SystemProgram.createAccount({\n          fromPubkey: payer.publicKey,\n          newAccountPubkey: program.publicKey,\n          lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n          space: data.length,\n          programId\n        }));\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed'\n        });\n      }\n    }\n    const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.u32('offset'), BufferLayout.u32('bytesLength'), BufferLayout.u32('bytesLengthPadding'), BufferLayout.seq(BufferLayout.u8('byte'), BufferLayout.offset(BufferLayout.u32(), -8), 'bytes')]);\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode({\n        instruction: 0,\n        // Load instruction\n        offset,\n        bytes: bytes,\n        bytesLength: 0,\n        bytesLengthPadding: 0\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }],\n        programId,\n        data\n      });\n      transactions.push(sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      }));\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode({\n        instruction: 1 // Finalize instruction\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId,\n        data\n      });\n      const deployCommitment = 'processed';\n      const finalizeSignature = await connection.sendTransaction(transaction, [payer, program], {\n        preflightCommitment: deployCommitment\n      });\n      const {\n        context,\n        value\n      } = await connection.confirmTransaction({\n        signature: finalizeSignature,\n        lastValidBlockHeight: transaction.lastValidBlockHeight,\n        blockhash: transaction.recentBlockhash\n      }, deployCommitment);\n      if (value.err) {\n        throw new Error(`Transaction ${finalizeSignature} failed (${JSON.stringify(value)})`);\n      }\n      // We prevent programs from being usable until the slot after their deployment.\n      // See https://github.com/solana-labs/solana/pull/29654\n      while (true // eslint-disable-line no-constant-condition\n      ) {\n        try {\n          const currentSlot = await connection.getSlot({\n            commitment: deployCommitment\n          });\n          if (currentSlot > context.slot) {\n            break;\n          }\n        } catch {\n          /* empty */\n        }\n        await new Promise(resolve => setTimeout(resolve, Math.round(MS_PER_SLOT / 2)));\n      }\n    }\n\n    // success\n    return true;\n  }\n}\nLoader.chunkSize = CHUNK_SIZE;\n\n/**\n * @deprecated Deprecated since Solana v1.17.20.\n */\nconst BPF_LOADER_PROGRAM_ID = new PublicKey('BPFLoader2111111111111111111111111111111111');\n\n/**\n * Factory class for transactions to interact with a program loader\n *\n * @deprecated Deprecated since Solana v1.17.20.\n */\nclass BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(connection, payer, program, elf, loaderProgramId) {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n\nfunction getDefaultExportFromCjs (x) {\n\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nvar objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nvar fastStableStringify = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n\nvar fastStableStringify$1 = /*@__PURE__*/getDefaultExportFromCjs(fastStableStringify);\n\nconst MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nclass EpochSchedule {\n  constructor(slotsPerEpoch, leaderScheduleSlotOffset, warmup, firstNormalEpoch, firstNormalSlot) {\n    /** The maximum number of slots in each epoch */\n    this.slotsPerEpoch = void 0;\n    /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n    this.leaderScheduleSlotOffset = void 0;\n    /** Indicates whether epochs start short and grow */\n    this.warmup = void 0;\n    /** The first epoch with `slotsPerEpoch` slots */\n    this.firstNormalEpoch = void 0;\n    /** The first slot of `firstNormalEpoch` */\n    this.firstNormalSlot = void 0;\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n  getEpoch(slot) {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n  getEpochAndSlotIndex(slot) {\n    if (slot < this.firstNormalSlot) {\n      const epoch = trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) - trailingZeros(MINIMUM_SLOT_PER_EPOCH) - 1;\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n  getFirstSlotInEpoch(epoch) {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (epoch - this.firstNormalEpoch) * this.slotsPerEpoch + this.firstNormalSlot;\n    }\n  }\n  getLastSlotInEpoch(epoch) {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n  getSlotsInEpoch(epoch) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n\nvar fetchImpl = globalThis.fetch;\n\nclass RpcWebSocketClient extends CommonClient {\n  constructor(address, options, generate_request_id) {\n    const webSocketFactory = url => {\n      const rpc = WebSocket(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = rpc.socket;\n      } else {\n        this.underlyingSocket = rpc;\n      }\n      return rpc;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n    this.underlyingSocket = void 0;\n  }\n  call(...args) {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(new Error('Tried to call a JSON-RPC method `' + args[0] + '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' + readyState + ')'));\n  }\n  notify(...args) {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(new Error('Tried to send a JSON-RPC notification `' + args[0] + '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' + readyState + ')'));\n  }\n}\n\n/**\n * @internal\n */\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nfunction decodeData(type, data) {\n  let decoded;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(`invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`);\n  }\n  return decoded;\n}\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\nclass AddressLookupTableAccount {\n  constructor(args) {\n    this.key = void 0;\n    this.state = void 0;\n    this.key = args.key;\n    this.state = args.state;\n  }\n  isActive() {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n  static deserialize(accountData) {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {\n      addresses\n    } = BufferLayout.struct([BufferLayout.seq(publicKey(), numSerializedAddresses, 'addresses')]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority: meta.authority.length !== 0 ? new PublicKey(meta.authority[0]) : undefined,\n      addresses: addresses.map(address => new PublicKey(address))\n    };\n  }\n}\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct([BufferLayout.u32('typeIndex'), u64('deactivationSlot'), BufferLayout.nu64('lastExtendedSlot'), BufferLayout.u8('lastExtendedStartIndex'), BufferLayout.u8(),\n  // option\n  BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u8(), -1), 'authority')])\n};\n\nconst URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\nfunction makeWebsocketUrl(endpoint) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [_,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  hostish, portWithColon, rest] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort = portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explicitly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to agave-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n\nconst PublicKeyFromString = coerce(instance(PublicKey), string(), value => new PublicKey(value));\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\nconst BufferFromRawAccountData = coerce(instance(Buffer), RawAccountDataResult, value => Buffer.from(value[0], 'base64'));\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nconst BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\n\n/** @internal */\n/** @internal */\n/** @internal */\n/** @internal */\n\n/** @internal */\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\n\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\n\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\n\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\n\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\n\n/**\n * @internal\n */\n\n/**\n * Extra contextual information for RPC responses\n */\n\n/**\n * Options for sending transactions\n */\n\n/**\n * Options for confirming transactions\n */\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\n\n/**\n * Options for getSignaturesForAddress\n */\n\n/**\n * RPC Response with extra contextual information\n */\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\n\n/**\n * This type represents all transaction confirmation strategies\n */\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig(commitmentOrConfig) {\n  let commitment;\n  let config;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {\n      commitment: specifiedCommitment,\n      ...specifiedConfig\n    } = commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {\n    commitment,\n    config\n  };\n}\n\n/**\n * @internal\n */\nfunction applyDefaultMemcmpEncodingToFilters(filters) {\n  return filters.map(filter => 'memcmp' in filter ? {\n    ...filter,\n    memcmp: {\n      ...filter.memcmp,\n      encoding: filter.memcmp.encoding ?? 'base58'\n    }\n  } : filter);\n}\n\n/**\n * @internal\n */\nfunction createRpcResult(result) {\n  return union([type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    result\n  }), type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    error: type({\n      code: unknown(),\n      message: string(),\n      data: optional(any())\n    })\n  })]);\n}\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult(schema) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema)\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext(value) {\n  return jsonRpcResult(type({\n    context: type({\n      slot: number()\n    }),\n    value\n  }));\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext(value) {\n  return type({\n    context: type({\n      slot: number()\n    }),\n    value\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(version, response) {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(accountKey => new PublicKey(accountKey)),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data)\n      })),\n      addressTableLookups: response.addressTableLookups\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\n// Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\n\n/**\n * Configuration object for changing `isBlockhashValid` query behavior\n */\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\n\n/**\n * Configuration object for changing query behavior\n */\n\n/**\n * Information describing a cluster node\n */\n\n/**\n * Information describing a vote account\n */\n\n/**\n * A collection of cluster vote accounts\n */\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\n\nconst GetInflationGovernorResult = type({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number()\n});\n\n/**\n * The inflation reward for an epoch\n */\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(array(nullable(type({\n  epoch: number(),\n  effectiveSlot: number(),\n  amount: number(),\n  postBalance: number(),\n  commission: optional(nullable(number()))\n}))));\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(type({\n  slot: number(),\n  prioritizationFee: number()\n}));\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = type({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number()\n});\n\n/**\n * Information about the current epoch\n */\n\nconst GetEpochInfoResult = type({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number())\n});\nconst GetEpochScheduleResult = type({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number()\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([type({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = type({\n  err: TransactionErrorResult\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\n\nconst VersionResult = type({\n  'solana-core': string(),\n  'feature-set': optional(number())\n});\nconst ParsedInstructionStruct = type({\n  program: string(),\n  programId: PublicKeyFromString,\n  parsed: unknown()\n});\nconst PartiallyDecodedInstructionStruct = type({\n  programId: PublicKeyFromString,\n  accounts: array(PublicKeyFromString),\n  data: string()\n});\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(type({\n  err: nullable(union([type({}), string()])),\n  logs: nullable(array(string())),\n  accounts: optional(nullable(array(nullable(type({\n    executable: boolean(),\n    owner: string(),\n    lamports: number(),\n    data: array(string()),\n    rentEpoch: optional(number())\n  }))))),\n  unitsConsumed: optional(number()),\n  returnData: optional(nullable(type({\n    programId: string(),\n    data: tuple([string(), literal('base64')])\n  }))),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(union([ParsedInstructionStruct, PartiallyDecodedInstructionStruct]))\n  }))))\n}));\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\n\n/**\n * A processed transaction from the RPC API\n */\n\n/**\n * A processed transaction from the RPC API\n */\n\n/**\n * A processed transaction message from the RPC API\n */\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0.\n */\n\n/**\n * A partially decoded transaction instruction\n */\n\n/**\n * A parsed transaction message account\n */\n\n/**\n * A parsed transaction instruction\n */\n\n/**\n * A parsed address table lookup\n */\n\n/**\n * A parsed transaction message\n */\n\n/**\n * A parsed transaction\n */\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\n\n/**\n * A parsed transaction on the ledger with meta\n */\n\n/**\n * A processed block fetched from the RPC API\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\n\n/**\n * A block with parsed transactions\n */\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\n\n/**\n * A processed block fetched from the RPC API\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0.\n */\n\n/**\n * A Block on the ledger with signatures only\n */\n\n/**\n * recent block production information\n */\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(type({\n  byIdentity: record(string(), array(number())),\n  range: type({\n    firstSlot: number(),\n    lastSlot: number()\n  })\n}));\n\n/**\n * A performance sample\n */\n\nfunction createRpcClient(url, httpHeaders, customFetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent) {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent;\n  {\n    if (httpAgent != null) {\n      console.warn('You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' + 'It has been ignored; `httpAgent` is only used in Node environments.');\n    }\n  }\n  let fetchWithMiddleware;\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise((resolve, reject) => {\n        try {\n          fetchMiddleware(info, init, (modifiedInfo, modifiedInit) => resolve([modifiedInfo, modifiedInit]));\n        } catch (error) {\n          reject(error);\n        }\n      });\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign({\n        'Content-Type': 'application/json'\n      }, httpHeaders || {}, COMMON_HTTP_HEADERS)\n    };\n    try {\n      let too_many_requests_retries = 5;\n      let res;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.error(`Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`);\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n  return clientBrowser;\n}\nfunction createRpcRequest(client) {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\nfunction createRpcBatchRequest(client) {\n  return requests => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n      const batch = requests.map(params => {\n        return client.request(params.methodName, params.args);\n      });\n      client.request(batch, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(GetRecentPrioritizationFeesResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(type({\n  total: number(),\n  circulating: number(),\n  nonCirculating: number(),\n  nonCirculatingAccounts: array(PublicKeyFromString)\n}));\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = type({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n});\n\n/**\n * Token address and balance.\n */\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(array(type({\n  address: PublicKeyFromString,\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n})));\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: BufferFromRawAccountData,\n    rentEpoch: number()\n  })\n})));\nconst ParsedAccountDataResult = type({\n  program: string(),\n  parsed: unknown(),\n  space: number()\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: ParsedAccountDataResult,\n    rentEpoch: number()\n  })\n})));\n\n/**\n * Pair of an account address and its balance\n */\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(array(type({\n  lamports: number(),\n  address: PublicKeyFromString\n})));\n\n/**\n * @internal\n */\nconst AccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number()\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\nconst ParsedOrRawAccountData = coerce(union([instance(Buffer), ParsedAccountDataResult]), union([RawAccountDataResult, ParsedAccountDataResult]), value => {\n  if (Array.isArray(value)) {\n    return create(value, BufferFromRawAccountData);\n  } else {\n    return value;\n  }\n});\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number()\n});\nconst KeyedParsedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = type({\n  state: union([literal('active'), literal('inactive'), literal('activating'), literal('deactivating')]),\n  active: number(),\n  inactive: number()\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult)\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult)\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = type({\n  parent: number(),\n  slot: number(),\n  root: number()\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = type({\n  subscription: number(),\n  result: SlotInfoResult\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([type({\n  type: union([literal('firstShredReceived'), literal('completed'), literal('optimisticConfirmation'), literal('root')]),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('createdBank'),\n  parent: number(),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('frozen'),\n  slot: number(),\n  timestamp: number(),\n  stats: type({\n    numTransactionEntries: number(),\n    numSuccessfulTransactions: number(),\n    numFailedTransactions: number(),\n    maxTransactionsPerEntry: number()\n  })\n}), type({\n  type: literal('dead'),\n  slot: number(),\n  timestamp: number(),\n  err: string()\n})]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = type({\n  subscription: number(),\n  result: SlotUpdateResult\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(union([SignatureStatusResult, SignatureReceivedResult]))\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = type({\n  subscription: number(),\n  result: number()\n});\nconst ContactInfoResult = type({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string())\n});\nconst VoteAccountInfoResult = type({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number())\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(type({\n  current: array(VoteAccountInfoResult),\n  delinquent: array(VoteAccountInfoResult)\n}));\nconst ConfirmationStatus = union([literal('processed'), literal('confirmed'), literal('finalized')]);\nconst SignatureStatusResponse = type({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus)\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(array(nullable(SignatureStatusResponse)));\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\nconst AddressTableLookupStruct = type({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number())\n});\nconst ConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(string()),\n    header: type({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number()\n    }),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    })),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct))\n  })\n});\nconst AnnotatedAccountKey = type({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')]))\n});\nconst ConfirmedTransactionAccountsModeResult = type({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string())\n});\nconst ParsedInstructionResult = type({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString\n});\nconst RawInstructionResult = type({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString\n});\nconst InstructionResult = union([RawInstructionResult, ParsedInstructionResult]);\nconst UnknownInstructionResult = union([type({\n  parsed: unknown(),\n  program: string(),\n  programId: string()\n}), type({\n  accounts: array(string()),\n  data: string(),\n  programId: string()\n})]);\nconst ParsedOrRawInstruction = coerce(InstructionResult, UnknownInstructionResult, value => {\n  if ('accounts' in value) {\n    return create(value, RawInstructionResult);\n  } else {\n    return create(value, ParsedInstructionResult);\n  }\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct)))\n  })\n});\nconst TokenBalanceResult = type({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult\n});\nconst LoadedAddressesResult = type({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString)\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    }))\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number())\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(ParsedOrRawInstruction)\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number())\n});\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = type({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number()))\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionAccountsModeResult,\n    meta: nullable(ConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ParsedConfirmedTransactionResult,\n    meta: nullable(ParsedConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionAccountsModeResult,\n    meta: nullable(ParsedConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  signatures: array(string()),\n  blockTime: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  meta: nullable(ConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number())),\n  transaction: ConfirmedTransactionResult,\n  version: optional(TransactionVersionStruct)\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  transaction: ParsedConfirmedTransactionResult,\n  meta: nullable(ParsedConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number())),\n  version: optional(TransactionVersionStruct)\n})));\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n}));\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  lastValidBlockHeight: number()\n}));\n\n/**\n * Expected JSON RPC response for the \"isBlockhashValid\" message\n */\nconst IsBlockhashValidRpcResult = jsonRpcResultAndContext(boolean());\nconst PerfSampleResult = type({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number()\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(array(PerfSampleResult));\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(nullable(type({\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n})));\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\n\n/**\n * Parsed account data\n */\n\n/**\n * Stake Activation data\n */\n\n/**\n * Data slice argument for getProgramAccounts\n */\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\n\n/**\n * A filter object for getProgramAccounts\n */\n\n/**\n * Configuration object for getProgramAccounts requests\n */\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\n\n/**\n * Configuration object for getMultipleAccounts\n */\n\n/**\n * Configuration object for `getStakeActivation`\n */\n\n/**\n * Configuration object for `getStakeActivation`\n */\n\n/**\n * Configuration object for `getStakeActivation`\n */\n\n/**\n * Configuration object for `getNonce`\n */\n\n/**\n * Configuration object for `getNonceAndContext`\n */\n\n/**\n * Information describing an account\n */\n\n/**\n * Account information identified by pubkey\n */\n\n/**\n * Callback function for account change notifications\n */\n\n/**\n * Callback function for program account change notifications\n */\n\n/**\n * Callback function for slot change notifications\n */\n\n/**\n * Callback function for slot update notifications\n */\n\n/**\n * Callback function for signature status notifications\n */\n\n/**\n * Signature status notification with transaction result\n */\n\n/**\n * Signature received notification\n */\n\n/**\n * Callback function for signature notifications\n */\n\n/**\n * Signature subscription options\n */\n\n/**\n * Callback function for root change notifications\n */\n\n/**\n * @internal\n */\nconst LogsResult = type({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string()\n});\n\n/**\n * Logs result.\n */\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = type({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number()\n});\n\n/**\n * Filter for log subscriptions.\n */\n\n/**\n * Callback function for log notifications.\n */\n\n/**\n * Signature result\n */\n\n/**\n * Transaction error\n */\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\n\n/**\n * Signature status\n */\n\n/**\n * A confirmed signature with its status\n */\n\n/**\n * An object defining headers to be passed to the RPC server\n */\n\n/**\n * The type of the JavaScript `fetch()` API\n */\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\n\n/**\n * Configuration for instantiating a Connection\n */\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${\"1.0.0-maintenance\"}`\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nclass Connection {\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(endpoint, _commitmentOrConfig) {\n    /** @internal */\n    this._commitment = void 0;\n    /** @internal */\n    this._confirmTransactionInitialTimeout = void 0;\n    /** @internal */\n    this._rpcEndpoint = void 0;\n    /** @internal */\n    this._rpcWsEndpoint = void 0;\n    /** @internal */\n    this._rpcClient = void 0;\n    /** @internal */\n    this._rpcRequest = void 0;\n    /** @internal */\n    this._rpcBatchRequest = void 0;\n    /** @internal */\n    this._rpcWebSocket = void 0;\n    /** @internal */\n    this._rpcWebSocketConnected = false;\n    /** @internal */\n    this._rpcWebSocketHeartbeat = null;\n    /** @internal */\n    this._rpcWebSocketIdleTimeout = null;\n    /** @internal\n     * A number that we increment every time an active connection closes.\n     * Used to determine whether the same socket connection that was open\n     * when an async operation started is the same one that's active when\n     * its continuation fires.\n     *\n     */\n    this._rpcWebSocketGeneration = 0;\n    /** @internal */\n    this._disableBlockhashCaching = false;\n    /** @internal */\n    this._pollingBlockhash = false;\n    /** @internal */\n    this._blockhashInfo = {\n      latestBlockhash: null,\n      lastFetch: 0,\n      transactionSignatures: [],\n      simulatedSignatures: []\n    };\n    /** @internal */\n    this._nextClientSubscriptionId = 0;\n    /** @internal */\n    this._subscriptionDisposeFunctionsByClientSubscriptionId = {};\n    /** @internal */\n    this._subscriptionHashByClientSubscriptionId = {};\n    /** @internal */\n    this._subscriptionStateChangeCallbacksByHash = {};\n    /** @internal */\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    /** @internal */\n    this._subscriptionsByHash = {};\n    /**\n     * Special case.\n     * After a signature is processed, RPCs automatically dispose of the\n     * subscription on the server side. We need to track which of these\n     * subscriptions have been disposed in such a way, so that we know\n     * whether the client is dealing with a not-yet-processed signature\n     * (in which case we must tear down the server subscription) or an\n     * already-processed signature (in which case the client can simply\n     * clear out the subscription locally without telling the server).\n     *\n     * NOTE: There is a proposal to eliminate this special case, here:\n     * https://github.com/solana-labs/solana/issues/18892\n     */\n    /** @internal */\n    this._subscriptionsAutoDisposedByRpc = new Set();\n    /*\n     * Returns the current block height of the node\n     */\n    this.getBlockHeight = (() => {\n      const requestPromises = {};\n      return async commitmentOrConfig => {\n        const {\n          commitment,\n          config\n        } = extractCommitmentFromConfig(commitmentOrConfig);\n        const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n        const requestHash = fastStableStringify$1(args);\n        requestPromises[requestHash] = requestPromises[requestHash] ?? (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(res.error, 'failed to get block height information');\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n        return await requestPromises[requestHash];\n      };\n    })();\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (_commitmentOrConfig && typeof _commitmentOrConfig === 'string') {\n      this._commitment = _commitmentOrConfig;\n    } else if (_commitmentOrConfig) {\n      this._commitment = _commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout = _commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = _commitmentOrConfig.wsEndpoint;\n      httpHeaders = _commitmentOrConfig.httpHeaders;\n      fetch = _commitmentOrConfig.fetch;\n      fetchMiddleware = _commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = _commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = _commitmentOrConfig.httpAgent;\n    }\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n    this._rpcClient = createRpcClient(endpoint, httpHeaders, fetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent);\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on('accountNotification', this._wsOnAccountNotification.bind(this));\n    this._rpcWebSocket.on('programNotification', this._wsOnProgramAccountNotification.bind(this));\n    this._rpcWebSocket.on('slotNotification', this._wsOnSlotNotification.bind(this));\n    this._rpcWebSocket.on('slotsUpdatesNotification', this._wsOnSlotUpdatesNotification.bind(this));\n    this._rpcWebSocket.on('signatureNotification', this._wsOnSignatureNotification.bind(this));\n    this._rpcWebSocket.on('rootNotification', this._wsOnRootNotification.bind(this));\n    this._rpcWebSocket.on('logsNotification', this._wsOnLogsNotification.bind(this));\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment() {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint() {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(publicKey, commitmentOrConfig) {\n    /** @internal */\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get balance for ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(publicKey, commitmentOrConfig) {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig).then(x => x.value).catch(e => {\n      throw new Error('failed to get balance of account ' + publicKey.toBase58() + ': ' + e);\n    });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot) {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get block time for slot ${slot}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot() {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get minimum ledger slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock() {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get first available block');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(config) {\n    let configArg = {};\n    if (typeof config === 'string') {\n      configArg = {\n        commitment: config\n      };\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: config && config.commitment || this.commitment\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment\n      };\n    }\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(tokenMintAddress, commitment) {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(tokenAddress, commitment) {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token account balance');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}\n   */\n  async getTokenAccountsByOwner(ownerAddress, filter, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    let _args = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(ownerAddress, filter, commitment) {\n    let _args = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(config) {\n    const arg = {\n      ...config,\n      commitment: config && config.commitment || this.commitment\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(mintAddress, commitment) {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(publicKey, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(AccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(publicKey, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(publicKey, commitmentOrConfig) {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + e);\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(publicKeys, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info for accounts ${keys}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(AccountInfoResult))));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info for accounts ${keys}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(publicKeys, commitmentOrConfig) {\n    const res = await this.getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig);\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   *\n   * @deprecated Deprecated since RPC v1.18; will be removed in a future version.\n   */\n  async getStakeActivation(publicKey, commitmentOrConfig, epoch) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined /* encoding */, {\n      ...config,\n      epoch: epoch != null ? epoch : config?.epoch\n    });\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get Stake Activation ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(programId, configOrCommitment) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(configOrCommitment);\n    const {\n      encoding,\n      ...configWithoutEncoding\n    } = config || {};\n    const args = this._buildArgs([programId.toBase58()], commitment, encoding || 'base64', {\n      ...configWithoutEncoding,\n      ...(configWithoutEncoding.filters ? {\n        filters: applyDefaultMemcmpEncodingToFilters(configWithoutEncoding.filters)\n      } : null)\n    });\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const baseSchema = array(KeyedAccountInfoResult);\n    const res = configWithoutEncoding.withContext === true ? create(unsafeRes, jsonRpcResultAndContext(baseSchema)) : create(unsafeRes, jsonRpcResult(baseSchema));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(programId, configOrCommitment) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs([programId.toBase58()], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedParsedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(strategy, commitment) {\n    let rawSignature;\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy;\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy\n      });\n    }\n  }\n  getCancellationPromise(signal) {\n    return new Promise((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n  getTransactionConfirmationPromise({\n    commitment,\n    signature\n  }) {\n    let signatureSubscriptionId;\n    let disposeSignatureSubscriptionStateChangeObserver;\n    let done = false;\n    const confirmationPromise = new Promise((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(signature, (result, context) => {\n          signatureSubscriptionId = undefined;\n          const response = {\n            context,\n            value: result\n          };\n          resolve({\n            __type: TransactionStatus.PROCESSED,\n            response\n          });\n        }, commitment);\n        const subscriptionSetupPromise = new Promise(resolveSubscriptionSetup => {\n          if (signatureSubscriptionId == null) {\n            resolveSubscriptionSetup();\n          } else {\n            disposeSignatureSubscriptionStateChangeObserver = this._onSubscriptionStateChange(signatureSubscriptionId, nextState => {\n              if (nextState === 'subscribed') {\n                resolveSubscriptionSetup();\n              }\n            });\n          }\n        });\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {\n            context,\n            value\n          } = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip':\n                {\n                  if (value.confirmationStatus === 'processed') {\n                    return;\n                  }\n                  break;\n                }\n              case 'finalized':\n              case 'max':\n              case 'root':\n                {\n                  if (value.confirmationStatus === 'processed' || value.confirmationStatus === 'confirmed') {\n                    return;\n                  }\n                  break;\n                }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value\n              }\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {\n      abortConfirmation,\n      confirmationPromise\n    };\n  }\n  async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      lastValidBlockHeight,\n      signature\n    }\n  }) {\n    let done = false;\n    const expiryPromise = new Promise(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({\n          __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED\n        });\n      })();\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result;\n    try {\n      const outcome = await Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n  async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature\n    }\n  }) {\n    let done = false;\n    const expiryPromise = new Promise(resolve => {\n      let currentNonceValue = nonceValue;\n      let lastCheckedSlot = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {\n            context,\n            value: nonceAccount\n          } = await this.getNonceAndContext(nonceAccountPubkey, {\n            commitment,\n            minContextSlot\n          });\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result;\n    try {\n      const outcome = await Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus;\n        while (true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (status.context.slot < (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {\n            confirmationStatus\n          } = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (confirmationStatus !== 'processed' && confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              (_ => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {\n              err: signatureStatus.value.err\n            }\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n  async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip':\n          {\n            timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n            break;\n          }\n      }\n      timeoutId = setTimeout(() => resolve({\n        __type: TransactionStatus.TIMED_OUT,\n        timeoutMs\n      }), timeoutMs);\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    let result;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(signature, outcome.timeoutMs / 1000);\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes() {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(startSlot, limit) {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(signature, config) {\n    const {\n      context,\n      value: values\n    } = await this.getSignatureStatuses([signature], config);\n    assert(values.length === 1);\n    const value = values[0];\n    return {\n      context,\n      value\n    };\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(signatures, config) {\n    const params = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction count');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since RPC v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment) {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(addresses, epoch, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([addresses.map(pubkey => pubkey.toBase58())], commitment, undefined /* encoding */, {\n      ...config,\n      epoch: epoch != null ? epoch : config?.epoch\n    });\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate() {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule() {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(epochSchedule.slotsPerEpoch, epochSchedule.leaderScheduleSlotOffset, epochSchedule.warmup, epochSchedule.firstNormalEpoch, epochSchedule.firstNormalSlot);\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule() {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(dataLength, commitment) {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest('getMinimumBalanceForRentExemption', args);\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since RPC v1.9.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(limit) {\n    const unsafeRes = await this._rpcRequest('getRecentPerformanceSamples', limit ? [limit] : []);\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent performance samples');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since RPC v1.9.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(blockhash, commitment) {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeCalculatorForBlockhash', args);\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {\n      context,\n      value\n    } = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(message, commitment) {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(config) {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = accounts?.length ? [accounts] : [];\n    const unsafeRes = await this._rpcRequest('getRecentPrioritizationFees', args);\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent prioritization fees');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since RPC v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(commitment) {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(commitmentOrConfig) {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns whether a blockhash is still valid or not\n   */\n  async isBlockhashValid(blockhash, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgs([blockhash], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('isBlockhashValid', args);\n    const res = create(unsafeRes, IsBlockhashValidRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to determine if the blockhash `' + blockhash + '`is valid');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion() {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash() {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(slot, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts':\n          {\n            const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        case 'none':\n          {\n            const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        default:\n          {\n            const res = create(unsafeRes, GetBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            const {\n              result\n            } = res;\n            return result ? {\n              ...result,\n              transactions: result.transactions.map(({\n                transaction,\n                meta,\n                version\n              }) => ({\n                meta,\n                transaction: {\n                  ...transaction,\n                  message: versionedMessageFromResponse(version, transaction.message)\n                },\n                version\n              }))\n            } : null;\n          }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e, 'failed to get confirmed block');\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(slot, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts':\n          {\n            const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        case 'none':\n          {\n            const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        default:\n          {\n            const res = create(unsafeRes, GetParsedBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e, 'failed to get block');\n    }\n  }\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(configOrCommitment) {\n    let extra;\n    let commitment;\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {\n        commitment: c,\n        ...rest\n      } = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block production information');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(signature, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    const result = res.result;\n    if (!result) return result;\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(result.version, result.transaction.message)\n      }\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(signature, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(signatures, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(signatures, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined /* encoding */, config);\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(result.version, result.transaction.message)\n        }\n      };\n    });\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({\n        transaction,\n        meta\n      }) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message\n          }\n        };\n      })\n    };\n    return {\n      ...block,\n      transactions: block.transactions.map(({\n        transaction,\n        meta\n      }) => {\n        return {\n          meta,\n          transaction: Transaction.populate(transaction.message, transaction.signatures)\n        };\n      })\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(startSlot, endSlot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed(endSlot !== undefined ? [startSlot, endSlot] : [startSlot], commitment);\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    const result = res.result;\n    if (!result) return result;\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures)\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(signatures, commitment) {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n      return {\n        methodName: 'getConfirmedTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transactions');\n      }\n      return res.result;\n    });\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since RPC v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(address, startSlot, endSlot) {\n    let options = {};\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n      try {\n        const block = await this.getConfirmedBlockSignatures(startSlot, 'finalized');\n        if (block.signatures.length > 0) {\n          options.until = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(address, options);\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getSignaturesForAddress} instead.\n   */\n  async getConfirmedSignaturesForAddress2(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n    const unsafeRes = await this._rpcRequest('getConfirmedSignaturesForAddress2', args);\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed signatures for address');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signatures for address');\n    }\n    return res.result;\n  }\n  async getAddressLookupTable(accountKey, config) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(accountKey, config);\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data)\n      });\n    }\n    return {\n      context,\n      value\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(nonceAccount, commitmentOrConfig) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(nonceAccount, commitmentOrConfig);\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n    return {\n      context,\n      value\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(nonceAccount, commitmentOrConfig) {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig).then(x => x.value).catch(e => {\n      throw new Error('failed to get nonce for account ' + nonceAccount.toBase58() + ': ' + e);\n    });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(to, lamports) {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [to.toBase58(), lamports]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `airdrop to ${to.toBase58()} failed`);\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(disableCache) {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash() {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash ? cachedLatestBlockhash.blockhash : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: []\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n      throw new Error(`Unable to obtain a new blockhash after ${Date.now() - startTime}ms`);\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(config) {\n    const {\n      commitment,\n      config: configArg\n    } = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get stake minimum delegation`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(transactionOrMessage, configOrSigners, includeAccounts) {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction = Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n      const config = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n      if (configOrSigners && typeof configOrSigners === 'object' && 'innerInstructions' in configOrSigners) {\n        config.innerInstructions = configOrSigners.innerInstructions;\n      }\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        if (!signers) break;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.simulatedSignatures.includes(signature) && !this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config = {\n      encoding: 'base64',\n      commitment: this.commitment\n    };\n    if (includeAccounts) {\n      const addresses = (Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()).map(key => key.toBase58());\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses\n      };\n    }\n    if (signers) {\n      config.sigVerify = true;\n    }\n    if (configOrSigners && typeof configOrSigners === 'object' && 'innerInstructions' in configOrSigners) {\n      config.innerInstructions = configOrSigners.innerInstructions;\n    }\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError({\n        action: 'simulate',\n        signature: '',\n        transactionMessage: res.error.message,\n        logs: logs\n      });\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(transaction, signersOrOptions, options) {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(rawTransaction, options) {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(encodedTransaction, options);\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(encodedTransaction, options) {\n    const config = {\n      encoding: 'base64'\n    };\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment = skipPreflight === true ? 'processed' // FIXME Remove when https://github.com/anza-xyz/agave/pull/483 is deployed.\n    : options && options.preflightCommitment || this.commitment;\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs = undefined;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError({\n        action: skipPreflight ? 'send' : 'simulate',\n        signature: '',\n        transactionMessage: res.error.message,\n        logs: logs\n      });\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration = (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(this._subscriptionsByHash).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending'\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _setSubscription(hash, nextSubscription) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks = this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _onSubscriptionStateChange(clientSubscriptionId, callback) {\n    const hash = this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = this._subscriptionStateChangeCallbacksByHash[hash] ||= new Set();\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(`Error when closing socket connection: ${err.message}`);\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n    await Promise.all(\n    // Don't be tempted to change this to `Object.entries`. We call\n    // `_updateSubscriptions` recursively when processing the state,\n    // so it's important that we look up the *current* version of\n    // each subscription, every time we process a hash.\n    Object.keys(this._subscriptionsByHash).map(async hash => {\n      const subscription = this._subscriptionsByHash[hash];\n      if (subscription === undefined) {\n        // This entry has since been deleted. Skip.\n        return;\n      }\n      switch (subscription.state) {\n        case 'pending':\n        case 'unsubscribed':\n          if (subscription.callbacks.size === 0) {\n            /**\n             * You can end up here when:\n             *\n             * - a subscription has recently unsubscribed\n             *   without having new callbacks added to it\n             *   while the unsubscribe was in flight, or\n             * - when a pending subscription has its\n             *   listeners removed before a request was\n             *   sent to the server.\n             *\n             * Being that nobody is interested in this\n             * subscription any longer, delete it.\n             */\n            delete this._subscriptionsByHash[hash];\n            if (subscription.state === 'unsubscribed') {\n              delete this._subscriptionCallbacksByServerSubscriptionId[subscription.serverSubscriptionId];\n            }\n            await this._updateSubscriptions();\n            return;\n          }\n          await (async () => {\n            const {\n              args,\n              method\n            } = subscription;\n            try {\n              this._setSubscription(hash, {\n                ...subscription,\n                state: 'subscribing'\n              });\n              const serverSubscriptionId = await this._rpcWebSocket.call(method, args);\n              this._setSubscription(hash, {\n                ...subscription,\n                serverSubscriptionId,\n                state: 'subscribed'\n              });\n              this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId] = subscription.callbacks;\n              await this._updateSubscriptions();\n            } catch (e) {\n              if (e instanceof Error) {\n                console.error(`${method} error for argument`, args, e.message);\n              }\n              if (!isCurrentConnectionStillActive()) {\n                return;\n              }\n              // TODO: Maybe add an 'errored' state or a retry limit?\n              this._setSubscription(hash, {\n                ...subscription,\n                state: 'pending'\n              });\n              await this._updateSubscriptions();\n            }\n          })();\n          break;\n        case 'subscribed':\n          if (subscription.callbacks.size === 0) {\n            // By the time we successfully set up a subscription\n            // with the server, the client stopped caring about it.\n            // Tear it down now.\n            await (async () => {\n              const {\n                serverSubscriptionId,\n                unsubscribeMethod\n              } = subscription;\n              if (this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)) {\n                /**\n                 * Special case.\n                 * If we're dealing with a subscription that has been auto-\n                 * disposed by the RPC, then we can skip the RPC call to\n                 * tear down the subscription here.\n                 *\n                 * NOTE: There is a proposal to eliminate this special case, here:\n                 * https://github.com/solana-labs/solana/issues/18892\n                 */\n                this._subscriptionsAutoDisposedByRpc.delete(serverSubscriptionId);\n              } else {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribing'\n                });\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribing'\n                });\n                try {\n                  await this._rpcWebSocket.call(unsubscribeMethod, [serverSubscriptionId]);\n                } catch (e) {\n                  if (e instanceof Error) {\n                    console.error(`${unsubscribeMethod} error:`, e.message);\n                  }\n                  if (!isCurrentConnectionStillActive()) {\n                    return;\n                  }\n                  // TODO: Maybe add an 'errored' state or a retry limit?\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'subscribed'\n                  });\n                  await this._updateSubscriptions();\n                  return;\n                }\n              }\n              this._setSubscription(hash, {\n                ...subscription,\n                state: 'unsubscribed'\n              });\n              await this._updateSubscriptions();\n            })();\n          }\n          break;\n      }\n    }));\n  }\n\n  /**\n   * @internal\n   */\n  _handleServerNotification(serverSubscriptionId, callbackArgs) {\n    const callbacks = this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n        // I failed to find a way to convince TypeScript that `cb` is of type\n        // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n        // See https://github.com/microsoft/TypeScript/issues/47615\n        // @ts-ignore\n        ...callbackArgs);\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, AccountNotificationResult);\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n\n  /**\n   * @internal\n   */\n  _makeSubscription(subscriptionConfig,\n  /**\n   * When preparing `args` for a call to `_makeSubscription`, be sure\n   * to carefully apply a default `commitment` property, if necessary.\n   *\n   * - If the user supplied a `commitment` use that.\n   * - Otherwise, if the `Connection::commitment` is set, use that.\n   * - Otherwise, set it to the RPC server default: `finalized`.\n   *\n   * This is extremely important to ensure that these two fundamentally\n   * identical subscriptions produce the same identifying hash:\n   *\n   * - A subscription made without specifying a commitment.\n   * - A subscription made where the commitment specified is the same\n   *   as the default applied to the subscription above.\n   *\n   * Example; these two subscriptions must produce the same hash:\n   *\n   * - An `accountSubscribe` subscription for `'PUBKEY'`\n   * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n   *   `'finalized'`.\n   *\n   * See the 'making a subscription with defaulted params omitted' test\n   * in `connection-subscriptions.ts` for more.\n   */\n  args) {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify$1([subscriptionConfig.method, args]);\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending'\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(subscription !== undefined, `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`);\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param config\n   * @return subscription id\n   */\n\n  /** @deprecated Instead, pass in an {@link AccountSubscriptionConfig} */\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  onAccountChange(publicKey, callback, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment || this._commitment || 'finalized',\n    // Apply connection/server default.\n    'base64', config);\n    return this._makeSubscription({\n      callback,\n      method: 'accountSubscribe',\n      unsubscribeMethod: 'accountUnsubscribe'\n    }, args);\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'account change');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, ProgramAccountNotificationResult);\n    this._handleServerNotification(subscription, [{\n      accountId: result.value.pubkey,\n      accountInfo: result.value.account\n    }, result.context]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param config\n   * @return subscription id\n   */\n\n  /** @deprecated Instead, pass in a {@link ProgramAccountSubscriptionConfig} */\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  onProgramAccountChange(programId, callback, commitmentOrConfig, maybeFilters) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([programId.toBase58()], commitment || this._commitment || 'finalized',\n    // Apply connection/server default.\n    'base64' /* encoding */, config ? config : maybeFilters ? {\n      filters: applyDefaultMemcmpEncodingToFilters(maybeFilters)\n    } : undefined /* extra */);\n    return this._makeSubscription({\n      callback,\n      method: 'programSubscribe',\n      unsubscribeMethod: 'programUnsubscribe'\n    }, args);\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'program account change');\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(filter, callback, commitment) {\n    const args = this._buildArgs([typeof filter === 'object' ? {\n      mentions: [filter.toString()]\n    } : filter], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n    return this._makeSubscription({\n      callback,\n      method: 'logsSubscribe',\n      unsubscribeMethod: 'logsUnsubscribe'\n    }, args);\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param clientSubscriptionId client subscription id to deregister.\n   */\n  async removeOnLogsListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, LogsNotificationResult);\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SlotNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotSubscribe',\n      unsubscribeMethod: 'slotUnsubscribe'\n    }, [] /* args */);\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot change');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SlotUpdateNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotsUpdatesSubscribe',\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe'\n    }, [] /* args */);\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotUpdateListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot update');\n  }\n\n  /**\n   * @internal\n   */\n\n  async _unsubscribeClientSubscription(clientSubscriptionId, subscriptionName) {\n    const dispose = this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn('Ignored unsubscribe request because an active subscription with id ' + `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` + 'could not be found.');\n    }\n  }\n  _buildArgs(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error('Using Connection with default commitment: `' + this._commitment + '`, but method requires at least `confirmed`');\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SignatureNotificationResult);\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification(subscription, result.value === 'receivedSignature' ? [{\n      type: 'received'\n    }, result.context] : [{\n      type: 'status',\n      result: result.value\n    }, result.context]);\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(signature, callback, commitment) {\n    const args = this._buildArgs([signature], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(signature, callback, options) {\n    const {\n      commitment,\n      ...extra\n    } = {\n      ...options,\n      commitment: options && options.commitment || this._commitment || 'finalized' // Apply connection/server default.\n    };\n    const args = this._buildArgs([signature], commitment, undefined /* encoding */, extra);\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        callback(notification, context);\n        // Signatures subscriptions are auto-removed by the RPC service\n        // so no need to explicitly send an unsubscribe message.\n        try {\n          this.removeSignatureListener(clientSubscriptionId);\n          // eslint-disable-next-line no-empty\n        } catch (_err) {\n          // Already removed.\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSignatureListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'signature result');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, RootNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'rootSubscribe',\n      unsubscribeMethod: 'rootUnsubscribe'\n    }, [] /* args */);\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeRootChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'root change');\n  }\n}\n\n/**\n * Keypair signer interface\n */\n\n/**\n * An account keypair used for signing transactions.\n */\nclass Keypair {\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param {Ed25519Keypair} keypair ed25519 keypair\n   */\n  constructor(keypair) {\n    this._keypair = void 0;\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   *\n   * @returns {Keypair} Keypair\n   */\n  static generate() {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options skip secret key validation\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSecretKey(secretKey, options) {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({\n      publicKey,\n      secretKey\n    });\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSeed(seed) {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({\n      publicKey,\n      secretKey\n    });\n  }\n\n  /**\n   * The public key for this keypair\n   *\n   * @returns {PublicKey} PublicKey\n   */\n  get publicKey() {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   * @returns {Uint8Array} Secret key in an array of Uint8 bytes\n   */\n  get secretKey() {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nconst LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('recentSlot'), BufferLayout.u8('bumpSeed')])\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64(), BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u32(), -8), 'addresses')])\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\nclass AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [layoutType, layout] of Object.entries(LOOKUP_TABLE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == index) {\n        type = layoutType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Invalid Instruction. Should be a LookupTable Instruction');\n    }\n    return type;\n  }\n  static decodeCreateLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n    const {\n      recentSlot\n    } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable, instruction.data);\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot)\n    };\n  }\n  static decodeExtendLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(`invalid instruction; found ${instruction.keys.length} keys, expected at least 2`);\n    }\n    const {\n      addresses\n    } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable, instruction.data);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer))\n    };\n  }\n  static decodeCloseLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey\n    };\n  }\n  static decodeFreezeLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey\n    };\n  }\n  static decodeDeactivateLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error('invalid instruction; programId is not AddressLookupTable Program');\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\nclass AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  static createLookupTable(params) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync([params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)], this.programId);\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed\n    });\n    const keys = [{\n      pubkey: lookupTableAddress,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: params.payer,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false\n    }];\n    return [new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    }), lookupTableAddress];\n  }\n  static freezeLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static extendLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes())\n    });\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (params.payer) {\n      keys.push({\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static deactivateLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static closeLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: params.recipient,\n      isSigner: false,\n      isWritable: true\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n}\nAddressLookupTableProgram.programId = new PublicKey('AddressLookupTab1e1111111111111111111111111');\n\n/**\n * Compute Budget Instruction class\n */\nclass ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a ComputeBudgetInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units,\n      additionalFee\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits, instruction.data);\n    return {\n      units,\n      additionalFee\n    };\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      bytes\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame, instruction.data);\n    return {\n      bytes\n    };\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit, instruction.data);\n    return {\n      units\n    };\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      microLamports\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice, instruction.data);\n    return {\n      microLamports\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error('invalid instruction; programId is not ComputeBudgetProgram');\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\n\n/**\n * Request units instruction params\n */\n\n/**\n * Request heap frame instruction params\n */\n\n/**\n * Set compute unit limit instruction params\n */\n\n/**\n * Set compute unit price instruction params\n */\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nconst COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units'), BufferLayout.u32('additionalFee')])\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')])\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units')])\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), u64('microLamports')])\n  }\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nclass ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static requestHeapFrame(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static setComputeUnitLimit(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static setComputeUnitPrice(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports)\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n}\nComputeBudgetProgram.programId = new PublicKey('ComputeBudget111111111111111111111111111111');\n\nconst PRIVATE_KEY_BYTES$1 = 64;\nconst PUBLIC_KEY_BYTES$1 = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u8('padding'), BufferLayout.u16('signatureOffset'), BufferLayout.u16('signatureInstructionIndex'), BufferLayout.u16('publicKeyOffset'), BufferLayout.u16('publicKeyInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u16('messageInstructionIndex')]);\nclass Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      instructionIndex\n    } = params;\n    assert(publicKey.length === PUBLIC_KEY_BYTES$1, `Public Key must be ${PUBLIC_KEY_BYTES$1} bytes but received ${publicKey.length} bytes`);\n    assert(signature.length === SIGNATURE_BYTES, `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`);\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n    const index = instructionIndex == null ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n    : instructionIndex;\n    ED25519_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      padding: 0,\n      signatureOffset,\n      signatureInstructionIndex: index,\n      publicKeyOffset,\n      publicKeyInstructionIndex: index,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: index\n    }, instructionData);\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey,\n      message,\n      instructionIndex\n    } = params;\n    assert(privateKey.length === PRIVATE_KEY_BYTES$1, `Private key must be ${PRIVATE_KEY_BYTES$1} bytes but received ${privateKey.length} bytes`);\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\nEd25519Program.programId = new PublicKey('Ed25519SigVerify111111111111111111111111111');\n\nconst ecdsaSign = (msgHash, privKey) => {\n  const signature = secp256k1.sign(msgHash, privKey);\n  return [signature.toCompactRawBytes(), signature.recovery];\n};\nsecp256k1.utils.isValidPrivateKey;\nconst publicKeyCreate = secp256k1.getPublicKey;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u16('signatureOffset'), BufferLayout.u8('signatureInstructionIndex'), BufferLayout.u16('ethAddressOffset'), BufferLayout.u8('ethAddressInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u8('messageInstructionIndex'), BufferLayout.blob(20, 'ethAddress'), BufferLayout.blob(64, 'signature'), BufferLayout.u8('recoveryId')]);\nclass Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(publicKey) {\n    assert(publicKey.length === PUBLIC_KEY_BYTES, `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`);\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    } = params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(params) {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0\n    } = params;\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n    assert(ethAddress.length === ETHEREUM_ADDRESS_BYTES, `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`);\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(SECP256K1_INSTRUCTION_LAYOUT.span + message.length);\n    SECP256K1_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      signatureOffset,\n      signatureInstructionIndex: instructionIndex,\n      ethAddressOffset,\n      ethAddressInstructionIndex: instructionIndex,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: instructionIndex,\n      signature: toBuffer(signature),\n      ethAddress: toBuffer(ethAddress),\n      recoveryId\n    }, instructionData);\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey: pkey,\n      message,\n      instructionIndex\n    } = params;\n    assert(pkey.length === PRIVATE_KEY_BYTES, `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`);\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false /* isCompressed */).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\nSecp256k1Program.programId = new PublicKey('KeccakSecp256k11111111111111111111111111111');\n\nvar _Lockup;\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nconst STAKE_CONFIG_ID = new PublicKey('StakeConfig11111111111111111111111111111111');\n\n/**\n * Stake account authority info\n */\nclass Authorized {\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker, withdrawer) {\n    /** stake authority */\n    this.staker = void 0;\n    /** withdraw authority */\n    this.withdrawer = void 0;\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n/**\n * Stake account lockup info\n */\nclass Lockup {\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp, epoch, custodian) {\n    /** Unix timestamp of lockup expiration */\n    this.unixTimestamp = void 0;\n    /** Epoch of lockup expiration */\n    this.epoch = void 0;\n    /** Lockup custodian authority */\n    this.custodian = void 0;\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n}\n_Lockup = Lockup;\nLockup.default = new _Lockup(0, 0, PublicKey.default);\n/**\n * Create stake account transaction params\n */\n/**\n * Create stake account with seed transaction params\n */\n/**\n * Initialize stake instruction params\n */\n/**\n * Delegate stake instruction params\n */\n/**\n * Authorize stake instruction params\n */\n/**\n * Authorize stake instruction params using a derived key\n */\n/**\n * Split stake instruction params\n */\n/**\n * Split with seed transaction params\n */\n/**\n * Withdraw stake instruction params\n */\n/**\n * Deactivate stake instruction params\n */\n/**\n * Merge stake instruction params\n */\n/**\n * Stake Instruction class\n */\nclass StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized,\n      lockup\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Initialize, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(new PublicKey(authorized.staker), new PublicKey(authorized.withdrawer)),\n      lockup: new Lockup(lockup.unixTimestamp, lockup.epoch, new PublicKey(lockup.custodian))\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      stakeAuthorizationType\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Split, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nconst STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), authorized(), lockup()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType')])\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType'), rustString('authoritySeed'), publicKey('authorityOwner')])\n  }\n});\n\n/**\n * Stake authorization type\n */\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nconst StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nclass StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params) {\n    const {\n      stakePubkey,\n      authorized,\n      lockup: maybeLockup\n    } = params;\n    const lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer())\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer())\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccountWithSeed({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      basePubkey: params.basePubkey,\n      seed: params.seed,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      votePubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: STAKE_CONFIG_ID,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params) {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer())\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorityBase,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {\n      lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: splitStakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params,\n  // Compute the cost of allocating the new stake account in lamports\n  rentExemptReserve) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.authorizedPubkey,\n      newAccountPubkey: params.splitStakePubkey,\n      lamports: rentExemptReserve,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params,\n  // If this stake account is new, compute the cost of allocating it in lamports\n  rentExemptReserve) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.allocate({\n      accountPubkey: splitStakePubkey,\n      basePubkey,\n      seed,\n      space: this.space,\n      programId: this.programId\n    }));\n    if (rentExemptReserve && rentExemptReserve > 0) {\n      transaction.add(SystemProgram.transfer({\n        fromPubkey: params.authorizedPubkey,\n        toPubkey: splitStakePubkey,\n        lamports: rentExemptReserve\n      }));\n    }\n    return transaction.add(this.splitInstruction({\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    }));\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params) {\n    const {\n      stakePubkey,\n      sourceStakePubKey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: sourceStakePubKey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      toPubkey,\n      lamports,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n}\nStakeProgram.programId = new PublicKey('Stake11111111111111111111111111111111111111');\n/**\n * Max space of a Stake account\n *\n * This is generated from the solana-stake-program StakeState struct as\n * `StakeStateV2::size_of()`:\n * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeStateV2.html\n */\nStakeProgram.space = 200;\n\n/**\n * Vote account info\n */\nclass VoteInit {\n  /** [0, 100] */\n\n  constructor(nodePubkey, authorizedVoter, authorizedWithdrawer, commission) {\n    this.nodePubkey = void 0;\n    this.authorizedVoter = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\n\n/**\n * InitializeAccount instruction params\n */\n\n/**\n * Authorize instruction params\n */\n\n/**\n * AuthorizeWithSeed instruction params\n */\n\n/**\n * Withdraw from vote account transaction params\n */\n\n/**\n * Update validator identity (node pubkey) vote account instruction params.\n */\n\n/**\n * Vote Instruction class\n */\nclass VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n    const {\n      voteInit\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.InitializeAccount, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(new PublicKey(voteInit.nodePubkey), new PublicKey(voteInit.authorizedVoter), new PublicKey(voteInit.authorizedWithdrawer), voteInit.commission)\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      voteAuthorizationType\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      }\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType\n      }\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(currentAuthorityDerivedKeyOwnerPubkey),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      },\n      votePubkey: instruction.keys[0].pubkey\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\n\n/** @internal */\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteInit()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('voteAuthorizationType')])\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  UpdateValidatorIdentity: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteAuthorizeWithSeedArgs()])\n  }\n});\n\n/**\n * VoteAuthorize type\n */\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nconst VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nclass VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(params) {\n    const {\n      votePubkey,\n      nodePubkey,\n      voteInit\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(voteInit.authorizedWithdrawer.toBuffer()),\n        commission: voteInit.commission\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: nodePubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.votePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.initializeAccount({\n      votePubkey: params.votePubkey,\n      nodePubkey: params.voteInit.nodePubkey,\n      voteInit: params.voteInit\n    }));\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params) {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params) {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(currentAuthorityDerivedKeyOwnerPubkey.toBuffer()),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index\n      }\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: currentAuthorityDerivedKeyBasePubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params) {\n    const {\n      votePubkey,\n      authorizedWithdrawerPubkey,\n      lamports,\n      toPubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedWithdrawerPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(params, currentVoteAccountBalance, rentExemptMinimum) {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error('Withdraw will leave vote account with insufficient funds.');\n    }\n    return VoteProgram.withdraw(params);\n  }\n\n  /**\n   * Generate a transaction to update the validator identity (node pubkey) of a Vote account.\n   */\n  static updateValidatorIdentity(params) {\n    const {\n      votePubkey,\n      authorizedWithdrawerPubkey,\n      nodePubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.UpdateValidatorIdentity;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: nodePubkey,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: authorizedWithdrawerPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n}\nVoteProgram.programId = new PublicKey('Vote111111111111111111111111111111111111111');\n/**\n * Max space of a Vote account\n *\n * This is generated from the solana-vote-program VoteState struct as\n * `VoteState::size_of()`:\n * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n *\n * KEEP IN SYNC WITH `VoteState::size_of()` in https://github.com/solana-labs/solana/blob/a474cb24b9238f5edcc982f65c0b37d4a1046f7e/sdk/program/src/vote/state/mod.rs#L340-L342\n */\nVoteProgram.space = 3762;\n\nconst VALIDATOR_INFO_KEY = new PublicKey('Va1idator1nfo111111111111111111111111111111');\n\n/**\n * @internal\n */\n\n/**\n * Info used to identity validators.\n */\n\nconst InfoString = type({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  iconUrl: optional(string()),\n  keybaseUsername: optional(string())\n});\n\n/**\n * ValidatorInfo class\n */\nclass ValidatorInfo {\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key, info) {\n    /**\n     * validator public key\n     */\n    this.key = void 0;\n    /**\n     * validator information\n     */\n    this.info = void 0;\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(buffer) {\n    let byteArray = [...buffer];\n    const configKeyCount = decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n    const configKeys = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));\n      const isSigner = guardedShift(byteArray) === 1;\n      configKeys.push({\n        publicKey,\n        isSigner\n      });\n    }\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo = rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo);\n        assert$1(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n    return null;\n  }\n}\n\nconst VOTE_PROGRAM_ID = new PublicKey('Vote111111111111111111111111111111111111111');\n\n/**\n * History of how many credits earned by the end of each epoch\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission'), BufferLayout.nu64(),\n// votes.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.u32('confirmationCount')]), BufferLayout.offset(BufferLayout.u32(), -8), 'votes'), BufferLayout.u8('rootSlotValid'), BufferLayout.nu64('rootSlot'), BufferLayout.nu64(),\n// authorizedVoters.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), publicKey('authorizedVoter')]), BufferLayout.offset(BufferLayout.u32(), -8), 'authorizedVoters'), BufferLayout.struct([BufferLayout.seq(BufferLayout.struct([publicKey('authorizedPubkey'), BufferLayout.nu64('epochOfLastAuthorizedSwitch'), BufferLayout.nu64('targetEpoch')]), 32, 'buf'), BufferLayout.nu64('idx'), BufferLayout.u8('isEmpty')], 'priorVoters'), BufferLayout.nu64(),\n// epochCredits.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), BufferLayout.nu64('credits'), BufferLayout.nu64('prevCredits')]), BufferLayout.offset(BufferLayout.u32(), -8), 'epochCredits'), BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')], 'lastTimestamp')]);\n/**\n * VoteAccount class\n */\nclass VoteAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.nodePubkey = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.rootSlot = void 0;\n    this.votes = void 0;\n    this.authorizedVoters = void 0;\n    this.priorVoters = void 0;\n    this.epochCredits = void 0;\n    this.lastTimestamp = void 0;\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(buffer) {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n    let rootSlot = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp\n    });\n  }\n}\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch\n}) {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter)\n  };\n}\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch\n}) {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch\n  };\n}\nfunction getPriorVoters({\n  buf,\n  idx,\n  isEmpty\n}) {\n  if (isEmpty) {\n    return [];\n  }\n  return [...buf.slice(idx + 1).map(parsePriorVoters), ...buf.slice(0, idx).map(parsePriorVoters)];\n}\n\nconst endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/'\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/'\n  }\n};\n/**\n * Retrieves the RPC API URL for the specified cluster\n * @param {Cluster} [cluster=\"devnet\"] - The cluster name of the RPC API URL to use. Possible options: 'devnet' | 'testnet' | 'mainnet-beta'\n * @param {boolean} [tls=\"http\"] - Use TLS when connecting to cluster.\n *\n * @returns {string} URL string of the RPC endpoint\n */\nfunction clusterApiUrl(cluster, tls) {\n  const key = tls === false ? 'http' : 'https';\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {TransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\n\n// eslint-disable-next-line no-redeclare\nasync function sendAndConfirmRawTransaction(connection, rawTransaction, confirmationStrategyOrConfirmOptions, maybeConfirmOptions) {\n  let confirmationStrategy;\n  let options;\n  if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'lastValidBlockHeight')) {\n    confirmationStrategy = confirmationStrategyOrConfirmOptions;\n    options = maybeConfirmOptions;\n  } else if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'nonceValue')) {\n    confirmationStrategy = confirmationStrategyOrConfirmOptions;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot\n  };\n  const signature = await connection.sendRawTransaction(rawTransaction, sendOptions);\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy ? connection.confirmTransaction(confirmationStrategy, commitment) : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n  if (status.err) {\n    if (signature != null) {\n      throw new SendTransactionError({\n        action: sendOptions?.skipPreflight ? 'send' : 'simulate',\n        signature: signature,\n        transactionMessage: `Status: (${JSON.stringify(status)})`\n      });\n    }\n    throw new Error(`Raw transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n  return signature;\n}\n\n/**\n * There are 1-billion lamports in one SOL\n */\nconst LAMPORTS_PER_SOL = 1000000000;\n\nexport { Account, AddressLookupTableAccount, AddressLookupTableInstruction, AddressLookupTableProgram, Authorized, BLOCKHASH_CACHE_TIMEOUT_MS, BPF_LOADER_DEPRECATED_PROGRAM_ID, BPF_LOADER_PROGRAM_ID, BpfLoader, COMPUTE_BUDGET_INSTRUCTION_LAYOUTS, ComputeBudgetInstruction, ComputeBudgetProgram, Connection, Ed25519Program, Enum, EpochSchedule, FeeCalculatorLayout, Keypair, LAMPORTS_PER_SOL, LOOKUP_TABLE_INSTRUCTION_LAYOUTS, Loader, Lockup, MAX_SEED_LENGTH, Message, MessageAccountKeys, MessageV0, NONCE_ACCOUNT_LENGTH, NonceAccount, PACKET_DATA_SIZE, PUBLIC_KEY_LENGTH, PublicKey, SIGNATURE_LENGTH_IN_BYTES, SOLANA_SCHEMA, STAKE_CONFIG_ID, STAKE_INSTRUCTION_LAYOUTS, SYSTEM_INSTRUCTION_LAYOUTS, SYSVAR_CLOCK_PUBKEY, SYSVAR_EPOCH_SCHEDULE_PUBKEY, SYSVAR_INSTRUCTIONS_PUBKEY, SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY, SYSVAR_REWARDS_PUBKEY, SYSVAR_SLOT_HASHES_PUBKEY, SYSVAR_SLOT_HISTORY_PUBKEY, SYSVAR_STAKE_HISTORY_PUBKEY, Secp256k1Program, SendTransactionError, SolanaJSONRPCError, SolanaJSONRPCErrorCode, StakeAuthorizationLayout, StakeInstruction, StakeProgram, Struct, SystemInstruction, SystemProgram, Transaction, TransactionExpiredBlockheightExceededError, TransactionExpiredNonceInvalidError, TransactionExpiredTimeoutError, TransactionInstruction, TransactionMessage, TransactionStatus, VALIDATOR_INFO_KEY, VERSION_PREFIX_MASK, VOTE_PROGRAM_ID, ValidatorInfo, VersionedMessage, VersionedTransaction, VoteAccount, VoteAuthorizationLayout, VoteInit, VoteInstruction, VoteProgram, clusterApiUrl, sendAndConfirmRawTransaction, sendAndConfirmTransaction };\n//# sourceMappingURL=index.browser.esm.js.map\n","import { PublicKey } from '@solana/web3.js';\n/** Address of the SPL Token program */\nexport const TOKEN_PROGRAM_ID = new PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');\n/** Address of the SPL Token 2022 program */\nexport const TOKEN_2022_PROGRAM_ID = new PublicKey('TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb');\n/** Address of the SPL Associated Token Account program */\nexport const ASSOCIATED_TOKEN_PROGRAM_ID = new PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n/** Address of the special mint for wrapped native SOL in spl-token */\nexport const NATIVE_MINT = new PublicKey('So11111111111111111111111111111111111111112');\n/** Address of the special mint for wrapped native SOL in spl-token-2022 */\nexport const NATIVE_MINT_2022 = new PublicKey('9pan9bMn5HatX4EJdBwg9VgCa7Uz5HL8N1m5D3NdXejP');\n/** Check that the token program provided is not `Tokenkeg...`, useful when using extensions */\nexport function programSupportsExtensions(programId) {\n    if (programId.equals(TOKEN_PROGRAM_ID)) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\n//# sourceMappingURL=constants.js.map","export const encodeDecode = (layout) => {\n    const decode = layout.decode.bind(layout);\n    const encode = layout.encode.bind(layout);\n    return { decode, encode };\n};\n//# sourceMappingURL=base.js.map","import { blob } from '@solana/buffer-layout';\nimport { toBigIntBE, toBigIntLE, toBufferBE, toBufferLE } from 'bigint-buffer';\nimport { encodeDecode } from './base.mjs';\nexport const bigInt = (length) => (property) => {\n    const layout = blob(length, property);\n    const { encode, decode } = encodeDecode(layout);\n    const bigIntLayout = layout;\n    bigIntLayout.decode = (buffer, offset) => {\n        const src = decode(buffer, offset);\n        return toBigIntLE(Buffer.from(src));\n    };\n    bigIntLayout.encode = (bigInt, buffer, offset) => {\n        const src = toBufferLE(bigInt, length);\n        return encode(src, buffer, offset);\n    };\n    return bigIntLayout;\n};\nexport const bigIntBE = (length) => (property) => {\n    const layout = blob(length, property);\n    const { encode, decode } = encodeDecode(layout);\n    const bigIntLayout = layout;\n    bigIntLayout.decode = (buffer, offset) => {\n        const src = decode(buffer, offset);\n        return toBigIntBE(Buffer.from(src));\n    };\n    bigIntLayout.encode = (bigInt, buffer, offset) => {\n        const src = toBufferBE(bigInt, length);\n        return encode(src, buffer, offset);\n    };\n    return bigIntLayout;\n};\nexport const u64 = bigInt(8);\nexport const u64be = bigIntBE(8);\nexport const u128 = bigInt(16);\nexport const u128be = bigIntBE(16);\nexport const u192 = bigInt(24);\nexport const u192be = bigIntBE(24);\nexport const u256 = bigInt(32);\nexport const u256be = bigIntBE(32);\n//# sourceMappingURL=bigint.js.map","import { u8 } from '@solana/buffer-layout';\nimport { encodeDecode } from './base.mjs';\nexport const bool = (property) => {\n    const layout = u8(property);\n    const { encode, decode } = encodeDecode(layout);\n    const boolLayout = layout;\n    boolLayout.decode = (buffer, offset) => {\n        const src = decode(buffer, offset);\n        return !!src;\n    };\n    boolLayout.encode = (bool, buffer, offset) => {\n        const src = Number(bool);\n        return encode(src, buffer, offset);\n    };\n    return boolLayout;\n};\n//# sourceMappingURL=native.js.map","import { blob } from '@solana/buffer-layout';\nimport { PublicKey } from '@solana/web3.js';\nimport { encodeDecode } from './base.mjs';\nexport const publicKey = (property) => {\n    const layout = blob(32, property);\n    const { encode, decode } = encodeDecode(layout);\n    const publicKeyLayout = layout;\n    publicKeyLayout.decode = (buffer, offset) => {\n        const src = decode(buffer, offset);\n        return new PublicKey(src);\n    };\n    publicKeyLayout.encode = (publicKey, buffer, offset) => {\n        const src = publicKey.toBuffer();\n        return encode(src, buffer, offset);\n    };\n    return publicKeyLayout;\n};\n//# sourceMappingURL=web3.js.map","/** Base class for errors */\nexport class TokenError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\n/** Thrown if an account is not found at the expected address */\nexport class TokenAccountNotFoundError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenAccountNotFoundError';\n    }\n}\n/** Thrown if a program state account is not a valid Account */\nexport class TokenInvalidAccountError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidAccountError';\n    }\n}\n/** Thrown if a program state account does not contain valid data */\nexport class TokenInvalidAccountDataError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidAccountDataError';\n    }\n}\n/** Thrown if a program state account is not owned by the expected token program */\nexport class TokenInvalidAccountOwnerError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidAccountOwnerError';\n    }\n}\n/** Thrown if the byte length of an program state account doesn't match the expected size */\nexport class TokenInvalidAccountSizeError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidAccountSizeError';\n    }\n}\n/** Thrown if the mint of a token account doesn't match the expected mint */\nexport class TokenInvalidMintError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidMintError';\n    }\n}\n/** Thrown if the owner of a token account doesn't match the expected owner */\nexport class TokenInvalidOwnerError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidOwnerError';\n    }\n}\n/** Thrown if the owner of a token account is a PDA (Program Derived Address) */\nexport class TokenOwnerOffCurveError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenOwnerOffCurveError';\n    }\n}\n/** Thrown if an instruction's program is invalid */\nexport class TokenInvalidInstructionProgramError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidInstructionProgramError';\n    }\n}\n/** Thrown if an instruction's keys are invalid */\nexport class TokenInvalidInstructionKeysError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidInstructionKeysError';\n    }\n}\n/** Thrown if an instruction's data is invalid */\nexport class TokenInvalidInstructionDataError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidInstructionDataError';\n    }\n}\n/** Thrown if an instruction's type is invalid */\nexport class TokenInvalidInstructionTypeError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenInvalidInstructionTypeError';\n    }\n}\n/** Thrown if the program does not support the desired instruction */\nexport class TokenUnsupportedInstructionError extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenUnsupportedInstructionError';\n    }\n}\n/** Thrown if the transfer hook extra accounts contains an invalid account index */\nexport class TokenTransferHookAccountNotFound extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenTransferHookAccountNotFound';\n    }\n}\n/** Thrown if the transfer hook extra accounts contains an invalid seed */\nexport class TokenTransferHookInvalidSeed extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenTransferHookInvalidSeed';\n    }\n}\n/** Thrown if account data required by an extra account meta seed config could not be fetched */\nexport class TokenTransferHookAccountDataNotFound extends TokenError {\n    constructor() {\n        super(...arguments);\n        this.name = 'TokenTransferHookAccountDataNotFound';\n    }\n}\n//# sourceMappingURL=errors.js.map","/** Instructions defined by the program */\nexport var TokenInstruction;\n(function (TokenInstruction) {\n    TokenInstruction[TokenInstruction[\"InitializeMint\"] = 0] = \"InitializeMint\";\n    TokenInstruction[TokenInstruction[\"InitializeAccount\"] = 1] = \"InitializeAccount\";\n    TokenInstruction[TokenInstruction[\"InitializeMultisig\"] = 2] = \"InitializeMultisig\";\n    TokenInstruction[TokenInstruction[\"Transfer\"] = 3] = \"Transfer\";\n    TokenInstruction[TokenInstruction[\"Approve\"] = 4] = \"Approve\";\n    TokenInstruction[TokenInstruction[\"Revoke\"] = 5] = \"Revoke\";\n    TokenInstruction[TokenInstruction[\"SetAuthority\"] = 6] = \"SetAuthority\";\n    TokenInstruction[TokenInstruction[\"MintTo\"] = 7] = \"MintTo\";\n    TokenInstruction[TokenInstruction[\"Burn\"] = 8] = \"Burn\";\n    TokenInstruction[TokenInstruction[\"CloseAccount\"] = 9] = \"CloseAccount\";\n    TokenInstruction[TokenInstruction[\"FreezeAccount\"] = 10] = \"FreezeAccount\";\n    TokenInstruction[TokenInstruction[\"ThawAccount\"] = 11] = \"ThawAccount\";\n    TokenInstruction[TokenInstruction[\"TransferChecked\"] = 12] = \"TransferChecked\";\n    TokenInstruction[TokenInstruction[\"ApproveChecked\"] = 13] = \"ApproveChecked\";\n    TokenInstruction[TokenInstruction[\"MintToChecked\"] = 14] = \"MintToChecked\";\n    TokenInstruction[TokenInstruction[\"BurnChecked\"] = 15] = \"BurnChecked\";\n    TokenInstruction[TokenInstruction[\"InitializeAccount2\"] = 16] = \"InitializeAccount2\";\n    TokenInstruction[TokenInstruction[\"SyncNative\"] = 17] = \"SyncNative\";\n    TokenInstruction[TokenInstruction[\"InitializeAccount3\"] = 18] = \"InitializeAccount3\";\n    TokenInstruction[TokenInstruction[\"InitializeMultisig2\"] = 19] = \"InitializeMultisig2\";\n    TokenInstruction[TokenInstruction[\"InitializeMint2\"] = 20] = \"InitializeMint2\";\n    TokenInstruction[TokenInstruction[\"GetAccountDataSize\"] = 21] = \"GetAccountDataSize\";\n    TokenInstruction[TokenInstruction[\"InitializeImmutableOwner\"] = 22] = \"InitializeImmutableOwner\";\n    TokenInstruction[TokenInstruction[\"AmountToUiAmount\"] = 23] = \"AmountToUiAmount\";\n    TokenInstruction[TokenInstruction[\"UiAmountToAmount\"] = 24] = \"UiAmountToAmount\";\n    TokenInstruction[TokenInstruction[\"InitializeMintCloseAuthority\"] = 25] = \"InitializeMintCloseAuthority\";\n    TokenInstruction[TokenInstruction[\"TransferFeeExtension\"] = 26] = \"TransferFeeExtension\";\n    TokenInstruction[TokenInstruction[\"ConfidentialTransferExtension\"] = 27] = \"ConfidentialTransferExtension\";\n    TokenInstruction[TokenInstruction[\"DefaultAccountStateExtension\"] = 28] = \"DefaultAccountStateExtension\";\n    TokenInstruction[TokenInstruction[\"Reallocate\"] = 29] = \"Reallocate\";\n    TokenInstruction[TokenInstruction[\"MemoTransferExtension\"] = 30] = \"MemoTransferExtension\";\n    TokenInstruction[TokenInstruction[\"CreateNativeMint\"] = 31] = \"CreateNativeMint\";\n    TokenInstruction[TokenInstruction[\"InitializeNonTransferableMint\"] = 32] = \"InitializeNonTransferableMint\";\n    TokenInstruction[TokenInstruction[\"InterestBearingMintExtension\"] = 33] = \"InterestBearingMintExtension\";\n    TokenInstruction[TokenInstruction[\"CpiGuardExtension\"] = 34] = \"CpiGuardExtension\";\n    TokenInstruction[TokenInstruction[\"InitializePermanentDelegate\"] = 35] = \"InitializePermanentDelegate\";\n    TokenInstruction[TokenInstruction[\"TransferHookExtension\"] = 36] = \"TransferHookExtension\";\n    // ConfidentialTransferFeeExtension = 37,\n    // WithdrawalExcessLamports = 38,\n    TokenInstruction[TokenInstruction[\"MetadataPointerExtension\"] = 39] = \"MetadataPointerExtension\";\n    TokenInstruction[TokenInstruction[\"GroupPointerExtension\"] = 40] = \"GroupPointerExtension\";\n    TokenInstruction[TokenInstruction[\"GroupMemberPointerExtension\"] = 41] = \"GroupMemberPointerExtension\";\n})(TokenInstruction || (TokenInstruction = {}));\n//# sourceMappingURL=types.js.map","import { PublicKey } from '@solana/web3.js';\n/** @internal */\nexport function addSigners(keys, ownerOrAuthority, multiSigners) {\n    if (multiSigners.length) {\n        keys.push({ pubkey: ownerOrAuthority, isSigner: false, isWritable: false });\n        for (const signer of multiSigners) {\n            keys.push({\n                pubkey: signer instanceof PublicKey ? signer : signer.publicKey,\n                isSigner: true,\n                isWritable: false,\n            });\n        }\n    }\n    else {\n        keys.push({ pubkey: ownerOrAuthority, isSigner: true, isWritable: false });\n    }\n    return keys;\n}\n//# sourceMappingURL=internal.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError, } from '../errors.js';\nimport { addSigners } from './internal.js';\nimport { TokenInstruction } from './types.js';\n/** TODO: docs */\nexport const approveInstructionData = struct([u8('instruction'), u64('amount')]);\n/**\n * Construct an Approve instruction\n *\n * @param account      Account to set the delegate for\n * @param delegate     Account authorized to transfer tokens from the account\n * @param owner        Owner of the account\n * @param amount       Maximum number of tokens the delegate may transfer\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createApproveInstruction(account, delegate, owner, amount, multiSigners = [], programId = TOKEN_PROGRAM_ID) {\n    const keys = addSigners([\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: delegate, isSigner: false, isWritable: false },\n    ], owner, multiSigners);\n    const data = Buffer.alloc(approveInstructionData.span);\n    approveInstructionData.encode({\n        instruction: TokenInstruction.Approve,\n        amount: BigInt(amount),\n    }, data);\n    return new TransactionInstruction({ keys, programId, data });\n}\n/**\n * Decode an Approve instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeApproveInstruction(instruction, programId = TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId))\n        throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== approveInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n    const { keys: { account, delegate, owner, multiSigners }, data, } = decodeApproveInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.Approve)\n        throw new TokenInvalidInstructionTypeError();\n    if (!account || !delegate || !owner)\n        throw new TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n        programId,\n        keys: {\n            account,\n            delegate,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n/**\n * Decode an Approve instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeApproveInstructionUnchecked({ programId, keys: [account, delegate, owner, ...multiSigners], data, }) {\n    return {\n        programId,\n        keys: {\n            account,\n            delegate,\n            owner,\n            multiSigners,\n        },\n        data: approveInstructionData.decode(data),\n    };\n}\n//# sourceMappingURL=approve.js.map","export var AccountType;\n(function (AccountType) {\n    AccountType[AccountType[\"Uninitialized\"] = 0] = \"Uninitialized\";\n    AccountType[AccountType[\"Mint\"] = 1] = \"Mint\";\n    AccountType[AccountType[\"Account\"] = 2] = \"Account\";\n})(AccountType || (AccountType = {}));\nexport const ACCOUNT_TYPE_SIZE = 1;\n//# sourceMappingURL=accountType.js.map","import { struct, u8 } from '@solana/buffer-layout';\nimport { bool, publicKey } from '@solana/buffer-layout-utils';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenAccountNotFoundError, TokenInvalidAccountOwnerError, TokenInvalidAccountSizeError } from '../errors.js';\n/** Buffer layout for de/serializing a multisig */\nexport const MultisigLayout = struct([\n    u8('m'),\n    u8('n'),\n    bool('isInitialized'),\n    publicKey('signer1'),\n    publicKey('signer2'),\n    publicKey('signer3'),\n    publicKey('signer4'),\n    publicKey('signer5'),\n    publicKey('signer6'),\n    publicKey('signer7'),\n    publicKey('signer8'),\n    publicKey('signer9'),\n    publicKey('signer10'),\n    publicKey('signer11'),\n]);\n/** Byte length of a multisig */\nexport const MULTISIG_SIZE = MultisigLayout.span;\n/**\n * Retrieve information about a multisig\n *\n * @param connection Connection to use\n * @param address    Multisig account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Multisig information\n */\nexport async function getMultisig(connection, address, commitment, programId = TOKEN_PROGRAM_ID) {\n    const info = await connection.getAccountInfo(address, commitment);\n    return unpackMultisig(address, info, programId);\n}\n/**\n * Unpack a multisig\n *\n * @param address   Multisig account\n * @param info      Multisig account data\n * @param programId SPL Token program account\n *\n * @return Unpacked multisig\n */\nexport function unpackMultisig(address, info, programId = TOKEN_PROGRAM_ID) {\n    if (!info)\n        throw new TokenAccountNotFoundError();\n    if (!info.owner.equals(programId))\n        throw new TokenInvalidAccountOwnerError();\n    if (info.data.length != MULTISIG_SIZE)\n        throw new TokenInvalidAccountSizeError();\n    const multisig = MultisigLayout.decode(info.data);\n    return { address, ...multisig };\n}\n/** Get the minimum lamport balance for a multisig to be rent exempt\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptMultisig(connection, commitment) {\n    return await connection.getMinimumBalanceForRentExemption(MULTISIG_SIZE, commitment);\n}\n//# sourceMappingURL=multisig.js.map","import { struct, u32, u8 } from '@solana/buffer-layout';\nimport { publicKey, u64 } from '@solana/buffer-layout-utils';\nimport { TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenAccountNotFoundError, TokenInvalidAccountError, TokenInvalidAccountOwnerError, TokenInvalidAccountSizeError, } from '../errors.js';\nimport { ACCOUNT_TYPE_SIZE, AccountType } from '../extensions/accountType.js';\nimport { getAccountLen } from '../extensions/extensionType.js';\nimport { MULTISIG_SIZE } from './multisig.js';\n/** Token account state as stored by the program */\nexport var AccountState;\n(function (AccountState) {\n    AccountState[AccountState[\"Uninitialized\"] = 0] = \"Uninitialized\";\n    AccountState[AccountState[\"Initialized\"] = 1] = \"Initialized\";\n    AccountState[AccountState[\"Frozen\"] = 2] = \"Frozen\";\n})(AccountState || (AccountState = {}));\n/** Buffer layout for de/serializing a token account */\nexport const AccountLayout = struct([\n    publicKey('mint'),\n    publicKey('owner'),\n    u64('amount'),\n    u32('delegateOption'),\n    publicKey('delegate'),\n    u8('state'),\n    u32('isNativeOption'),\n    u64('isNative'),\n    u64('delegatedAmount'),\n    u32('closeAuthorityOption'),\n    publicKey('closeAuthority'),\n]);\n/** Byte length of a token account */\nexport const ACCOUNT_SIZE = AccountLayout.span;\n/**\n * Retrieve information about a token account\n *\n * @param connection Connection to use\n * @param address    Token account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Token account information\n */\nexport async function getAccount(connection, address, commitment, programId = TOKEN_PROGRAM_ID) {\n    const info = await connection.getAccountInfo(address, commitment);\n    return unpackAccount(address, info, programId);\n}\n/**\n * Retrieve information about multiple token accounts in a single RPC call\n *\n * @param connection Connection to use\n * @param addresses  Token accounts\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Token account information\n */\nexport async function getMultipleAccounts(connection, addresses, commitment, programId = TOKEN_PROGRAM_ID) {\n    const infos = await connection.getMultipleAccountsInfo(addresses, commitment);\n    return addresses.map((address, i) => unpackAccount(address, infos[i], programId));\n}\n/** Get the minimum lamport balance for a base token account to be rent exempt\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptAccount(connection, commitment) {\n    return await getMinimumBalanceForRentExemptAccountWithExtensions(connection, [], commitment);\n}\n/** Get the minimum lamport balance for a rent-exempt token account with extensions\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptAccountWithExtensions(connection, extensions, commitment) {\n    const accountLen = getAccountLen(extensions);\n    return await connection.getMinimumBalanceForRentExemption(accountLen, commitment);\n}\n/**\n * Unpack a token account\n *\n * @param address   Token account\n * @param info      Token account data\n * @param programId SPL Token program account\n *\n * @return Unpacked token account\n */\nexport function unpackAccount(address, info, programId = TOKEN_PROGRAM_ID) {\n    if (!info)\n        throw new TokenAccountNotFoundError();\n    if (!info.owner.equals(programId))\n        throw new TokenInvalidAccountOwnerError();\n    if (info.data.length < ACCOUNT_SIZE)\n        throw new TokenInvalidAccountSizeError();\n    const rawAccount = AccountLayout.decode(info.data.slice(0, ACCOUNT_SIZE));\n    let tlvData = Buffer.alloc(0);\n    if (info.data.length > ACCOUNT_SIZE) {\n        if (info.data.length === MULTISIG_SIZE)\n            throw new TokenInvalidAccountSizeError();\n        if (info.data[ACCOUNT_SIZE] != AccountType.Account)\n            throw new TokenInvalidAccountError();\n        tlvData = info.data.slice(ACCOUNT_SIZE + ACCOUNT_TYPE_SIZE);\n    }\n    return {\n        address,\n        mint: rawAccount.mint,\n        owner: rawAccount.owner,\n        amount: rawAccount.amount,\n        delegate: rawAccount.delegateOption ? rawAccount.delegate : null,\n        delegatedAmount: rawAccount.delegatedAmount,\n        isInitialized: rawAccount.state !== AccountState.Uninitialized,\n        isFrozen: rawAccount.state === AccountState.Frozen,\n        isNative: !!rawAccount.isNativeOption,\n        rentExemptReserve: rawAccount.isNativeOption ? rawAccount.isNative : null,\n        closeAuthority: rawAccount.closeAuthorityOption ? rawAccount.closeAuthority : null,\n        tlvData,\n    };\n}\n//# sourceMappingURL=account.js.map","import { struct, u32, u8 } from '@solana/buffer-layout';\nimport { bool, publicKey, u64 } from '@solana/buffer-layout-utils';\nimport { PublicKey } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\nimport { TokenAccountNotFoundError, TokenInvalidAccountOwnerError, TokenInvalidAccountSizeError, TokenInvalidMintError, TokenOwnerOffCurveError, } from '../errors.js';\nimport { ACCOUNT_TYPE_SIZE, AccountType } from '../extensions/accountType.js';\nimport { getMintLen } from '../extensions/extensionType.js';\nimport { ACCOUNT_SIZE } from './account.js';\nimport { MULTISIG_SIZE } from './multisig.js';\n/** Buffer layout for de/serializing a mint */\nexport const MintLayout = struct([\n    u32('mintAuthorityOption'),\n    publicKey('mintAuthority'),\n    u64('supply'),\n    u8('decimals'),\n    bool('isInitialized'),\n    u32('freezeAuthorityOption'),\n    publicKey('freezeAuthority'),\n]);\n/** Byte length of a mint */\nexport const MINT_SIZE = MintLayout.span;\n/**\n * Retrieve information about a mint\n *\n * @param connection Connection to use\n * @param address    Mint account\n * @param commitment Desired level of commitment for querying the state\n * @param programId  SPL Token program account\n *\n * @return Mint information\n */\nexport async function getMint(connection, address, commitment, programId = TOKEN_PROGRAM_ID) {\n    const info = await connection.getAccountInfo(address, commitment);\n    return unpackMint(address, info, programId);\n}\n/**\n * Unpack a mint\n *\n * @param address   Mint account\n * @param info      Mint account data\n * @param programId SPL Token program account\n *\n * @return Unpacked mint\n */\nexport function unpackMint(address, info, programId = TOKEN_PROGRAM_ID) {\n    if (!info)\n        throw new TokenAccountNotFoundError();\n    if (!info.owner.equals(programId))\n        throw new TokenInvalidAccountOwnerError();\n    if (info.data.length < MINT_SIZE)\n        throw new TokenInvalidAccountSizeError();\n    const rawMint = MintLayout.decode(info.data.slice(0, MINT_SIZE));\n    let tlvData = Buffer.alloc(0);\n    if (info.data.length > MINT_SIZE) {\n        if (info.data.length <= ACCOUNT_SIZE)\n            throw new TokenInvalidAccountSizeError();\n        if (info.data.length === MULTISIG_SIZE)\n            throw new TokenInvalidAccountSizeError();\n        if (info.data[ACCOUNT_SIZE] != AccountType.Mint)\n            throw new TokenInvalidMintError();\n        tlvData = info.data.slice(ACCOUNT_SIZE + ACCOUNT_TYPE_SIZE);\n    }\n    return {\n        address,\n        mintAuthority: rawMint.mintAuthorityOption ? rawMint.mintAuthority : null,\n        supply: rawMint.supply,\n        decimals: rawMint.decimals,\n        isInitialized: rawMint.isInitialized,\n        freezeAuthority: rawMint.freezeAuthorityOption ? rawMint.freezeAuthority : null,\n        tlvData,\n    };\n}\n/** Get the minimum lamport balance for a mint to be rent exempt\n *\n * @param connection Connection to use\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptMint(connection, commitment) {\n    return await getMinimumBalanceForRentExemptMintWithExtensions(connection, [], commitment);\n}\n/** Get the minimum lamport balance for a rent-exempt mint with extensions\n *\n * @param connection Connection to use\n * @param extensions Extension types included in the mint\n * @param commitment Desired level of commitment for querying the state\n *\n * @return Amount of lamports required\n */\nexport async function getMinimumBalanceForRentExemptMintWithExtensions(connection, extensions, commitment) {\n    const mintLen = getMintLen(extensions);\n    return await connection.getMinimumBalanceForRentExemption(mintLen, commitment);\n}\n/**\n * Async version of getAssociatedTokenAddressSync\n * For backwards compatibility\n *\n * @param mint                     Token mint account\n * @param owner                    Owner of the new account\n * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Promise containing the address of the associated token account\n */\nexport async function getAssociatedTokenAddress(mint, owner, allowOwnerOffCurve = false, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {\n    if (!allowOwnerOffCurve && !PublicKey.isOnCurve(owner.toBuffer()))\n        throw new TokenOwnerOffCurveError();\n    const [address] = await PublicKey.findProgramAddress([owner.toBuffer(), programId.toBuffer(), mint.toBuffer()], associatedTokenProgramId);\n    return address;\n}\n/**\n * Get the address of the associated token account for a given mint and owner\n *\n * @param mint                     Token mint account\n * @param owner                    Owner of the new account\n * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Address of the associated token account\n */\nexport function getAssociatedTokenAddressSync(mint, owner, allowOwnerOffCurve = false, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {\n    if (!allowOwnerOffCurve && !PublicKey.isOnCurve(owner.toBuffer()))\n        throw new TokenOwnerOffCurveError();\n    const [address] = PublicKey.findProgramAddressSync([owner.toBuffer(), programId.toBuffer(), mint.toBuffer()], associatedTokenProgramId);\n    return address;\n}\n//# sourceMappingURL=mint.js.map","import { SystemProgram, TransactionInstruction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants.js';\nimport { getAssociatedTokenAddressSync } from '../state/mint.js';\n/**\n * Construct a CreateAssociatedTokenAccount instruction\n *\n * @param payer                    Payer of the initialization fees\n * @param associatedToken          New associated token account\n * @param owner                    Owner of the new account\n * @param mint                     Token mint account\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createAssociatedTokenAccountInstruction(payer, associatedToken, owner, mint, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {\n    return buildAssociatedTokenAccountInstruction(payer, associatedToken, owner, mint, Buffer.alloc(0), programId, associatedTokenProgramId);\n}\n/**\n * Construct a CreateAssociatedTokenAccountIdempotent instruction\n *\n * @param payer                    Payer of the initialization fees\n * @param associatedToken          New associated token account\n * @param owner                    Owner of the new account\n * @param mint                     Token mint account\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createAssociatedTokenAccountIdempotentInstruction(payer, associatedToken, owner, mint, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {\n    return buildAssociatedTokenAccountInstruction(payer, associatedToken, owner, mint, Buffer.from([1]), programId, associatedTokenProgramId);\n}\n/**\n * Derive the associated token account and construct a CreateAssociatedTokenAccountIdempotent instruction\n *\n * @param payer                    Payer of the initialization fees\n * @param owner                    Owner of the new account\n * @param mint                     Token mint account\n * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createAssociatedTokenAccountIdempotentInstructionWithDerivation(payer, owner, mint, allowOwnerOffCurve = true, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {\n    const associatedToken = getAssociatedTokenAddressSync(mint, owner, allowOwnerOffCurve);\n    return createAssociatedTokenAccountIdempotentInstruction(payer, associatedToken, owner, mint, programId, associatedTokenProgramId);\n}\nfunction buildAssociatedTokenAccountInstruction(payer, associatedToken, owner, mint, instructionData, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {\n    const keys = [\n        { pubkey: payer, isSigner: true, isWritable: true },\n        { pubkey: associatedToken, isSigner: false, isWritable: true },\n        { pubkey: owner, isSigner: false, isWritable: false },\n        { pubkey: mint, isSigner: false, isWritable: false },\n        { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n        { pubkey: programId, isSigner: false, isWritable: false },\n    ];\n    return new TransactionInstruction({\n        keys,\n        programId: associatedTokenProgramId,\n        data: instructionData,\n    });\n}\n/**\n * Construct a RecoverNested instruction\n *\n * @param nestedAssociatedToken             Nested associated token account (must be owned by `ownerAssociatedToken`)\n * @param nestedMint                        Token mint for the nested associated token account\n * @param destinationAssociatedToken        Wallet's associated token account\n * @param ownerAssociatedToken              Owner associated token account address (must be owned by `owner`)\n * @param ownerMint                         Token mint for the owner associated token account\n * @param owner                             Wallet address for the owner associated token account\n * @param programId                         SPL Token program account\n * @param associatedTokenProgramId          SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createRecoverNestedInstruction(nestedAssociatedToken, nestedMint, destinationAssociatedToken, ownerAssociatedToken, ownerMint, owner, programId = TOKEN_PROGRAM_ID, associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID) {\n    const keys = [\n        { pubkey: nestedAssociatedToken, isSigner: false, isWritable: true },\n        { pubkey: nestedMint, isSigner: false, isWritable: false },\n        { pubkey: destinationAssociatedToken, isSigner: false, isWritable: true },\n        { pubkey: ownerAssociatedToken, isSigner: false, isWritable: true },\n        { pubkey: ownerMint, isSigner: false, isWritable: false },\n        { pubkey: owner, isSigner: true, isWritable: true },\n        { pubkey: programId, isSigner: false, isWritable: false },\n    ];\n    return new TransactionInstruction({\n        keys,\n        programId: associatedTokenProgramId,\n        data: Buffer.from([2]),\n    });\n}\n//# sourceMappingURL=associatedTokenAccount.js.map","import BN from 'bn.js';\nimport { LAMPORTS_PER_SOL } from '@solana/web3.js';\n\nexport function solToLamports(amount: number): number {\n  if (isNaN(amount)) return Number(0);\n  return Number(amount * LAMPORTS_PER_SOL);\n}\n\nexport function lamportsToSol(lamports: number | BN | bigint): number {\n  if (typeof lamports === 'number') {\n    return Math.abs(lamports) / LAMPORTS_PER_SOL;\n  }\n  if (typeof lamports === 'bigint') {\n    return Math.abs(Number(lamports)) / LAMPORTS_PER_SOL;\n  }\n\n  let signMultiplier = 1;\n  if (lamports.isNeg()) {\n    signMultiplier = -1;\n  }\n\n  const absLamports = lamports.abs();\n  const lamportsString = absLamports.toString(10).padStart(10, '0');\n  const splitIndex = lamportsString.length - 9;\n  const solString = lamportsString.slice(0, splitIndex) + '.' + lamportsString.slice(splitIndex);\n  return signMultiplier * parseFloat(solString);\n}\n","import { Buffer } from 'buffer';\nimport { LAMPORTS_PER_SOL, PublicKey } from '@solana/web3.js';\n\n// Public key that identifies the metadata program.\nexport const METADATA_PROGRAM_ID = new PublicKey('metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');\nexport const METADATA_MAX_NAME_LENGTH = 32;\nexport const METADATA_MAX_SYMBOL_LENGTH = 10;\nexport const METADATA_MAX_URI_LENGTH = 200;\n\n// Public key that identifies the SPL Stake Pool program.\nexport const STAKE_POOL_PROGRAM_ID = new PublicKey('SPoo1Ku8WFXoNDMHPsrGSTSG1Y47rzgn41SLUNakuHy');\n\n// Maximum number of validators to update during UpdateValidatorListBalance.\nexport const MAX_VALIDATORS_TO_UPDATE = 5;\n\n// Seed for ephemeral stake account\nexport const EPHEMERAL_STAKE_SEED_PREFIX = Buffer.from('ephemeral');\n\n// Seed used to derive transient stake accounts.\nexport const TRANSIENT_STAKE_SEED_PREFIX = Buffer.from('transient');\n\n// Minimum amount of staked SOL required in a validator stake account to allow\n// for merges without a mismatch on credits observed\nexport const MINIMUM_ACTIVE_STAKE = LAMPORTS_PER_SOL;\n","import { PublicKey } from '@solana/web3.js';\nimport BN from 'bn.js';\nimport { Buffer } from 'buffer';\nimport {\n  METADATA_PROGRAM_ID,\n  EPHEMERAL_STAKE_SEED_PREFIX,\n  TRANSIENT_STAKE_SEED_PREFIX,\n} from '../constants';\n\n/**\n * Generates the withdraw authority program address for the stake pool\n */\nexport async function findWithdrawAuthorityProgramAddress(\n  programId: PublicKey,\n  stakePoolAddress: PublicKey,\n) {\n  const [publicKey] = await PublicKey.findProgramAddress(\n    [stakePoolAddress.toBuffer(), Buffer.from('withdraw')],\n    programId,\n  );\n  return publicKey;\n}\n\n/**\n * Generates the stake program address for a validator's vote account\n */\nexport async function findStakeProgramAddress(\n  programId: PublicKey,\n  voteAccountAddress: PublicKey,\n  stakePoolAddress: PublicKey,\n  seed?: number,\n) {\n  const [publicKey] = await PublicKey.findProgramAddress(\n    [\n      voteAccountAddress.toBuffer(),\n      stakePoolAddress.toBuffer(),\n      seed ? new BN(seed).toArrayLike(Buffer, 'le', 4) : Buffer.alloc(0),\n    ],\n    programId,\n  );\n  return publicKey;\n}\n\n/**\n * Generates the stake program address for a validator's vote account\n */\nexport async function findTransientStakeProgramAddress(\n  programId: PublicKey,\n  voteAccountAddress: PublicKey,\n  stakePoolAddress: PublicKey,\n  seed: BN,\n) {\n  const [publicKey] = await PublicKey.findProgramAddress(\n    [\n      TRANSIENT_STAKE_SEED_PREFIX,\n      voteAccountAddress.toBuffer(),\n      stakePoolAddress.toBuffer(),\n      seed.toArrayLike(Buffer, 'le', 8),\n    ],\n    programId,\n  );\n  return publicKey;\n}\n\n/**\n * Generates the ephemeral program address for stake pool redelegation\n */\nexport async function findEphemeralStakeProgramAddress(\n  programId: PublicKey,\n  stakePoolAddress: PublicKey,\n  seed: BN,\n) {\n  const [publicKey] = await PublicKey.findProgramAddress(\n    [EPHEMERAL_STAKE_SEED_PREFIX, stakePoolAddress.toBuffer(), seed.toArrayLike(Buffer, 'le', 8)],\n    programId,\n  );\n  return publicKey;\n}\n\n/**\n * Generates the metadata program address for the stake pool\n */\nexport function findMetadataAddress(stakePoolMintAddress: PublicKey) {\n  const [publicKey] = PublicKey.findProgramAddressSync(\n    [Buffer.from('metadata'), METADATA_PROGRAM_ID.toBuffer(), stakePoolMintAddress.toBuffer()],\n    METADATA_PROGRAM_ID,\n  );\n  return publicKey;\n}\n","/* The MIT License (MIT)\n *\n * Copyright 2015-2018 Peter A. Bigot\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/**\n * Support for translating between Buffer instances and JavaScript\n * native types.\n *\n * {@link module:Layout~Layout|Layout} is the basis of a class\n * hierarchy that associates property names with sequences of encoded\n * bytes.\n *\n * Layouts are supported for these scalar (numeric) types:\n * * {@link module:Layout~UInt|Unsigned integers in little-endian\n *   format} with {@link module:Layout.u8|8-bit}, {@link\n *   module:Layout.u16|16-bit}, {@link module:Layout.u24|24-bit},\n *   {@link module:Layout.u32|32-bit}, {@link\n *   module:Layout.u40|40-bit}, and {@link module:Layout.u48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~UIntBE|Unsigned integers in big-endian\n *   format} with {@link module:Layout.u16be|16-bit}, {@link\n *   module:Layout.u24be|24-bit}, {@link module:Layout.u32be|32-bit},\n *   {@link module:Layout.u40be|40-bit}, and {@link\n *   module:Layout.u48be|48-bit} representation ranges;\n * * {@link module:Layout~Int|Signed integers in little-endian\n *   format} with {@link module:Layout.s8|8-bit}, {@link\n *   module:Layout.s16|16-bit}, {@link module:Layout.s24|24-bit},\n *   {@link module:Layout.s32|32-bit}, {@link\n *   module:Layout.s40|40-bit}, and {@link module:Layout.s48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~IntBE|Signed integers in big-endian format}\n *   with {@link module:Layout.s16be|16-bit}, {@link\n *   module:Layout.s24be|24-bit}, {@link module:Layout.s32be|32-bit},\n *   {@link module:Layout.s40be|40-bit}, and {@link\n *   module:Layout.s48be|48-bit} representation ranges;\n * * 64-bit integral values that decode to an exact (if magnitude is\n *   less than 2^53) or nearby integral Number in {@link\n *   module:Layout.nu64|unsigned little-endian}, {@link\n *   module:Layout.nu64be|unsigned big-endian}, {@link\n *   module:Layout.ns64|signed little-endian}, and {@link\n *   module:Layout.ns64be|unsigned big-endian} encodings;\n * * 32-bit floating point values with {@link\n *   module:Layout.f32|little-endian} and {@link\n *   module:Layout.f32be|big-endian} representations;\n * * 64-bit floating point values with {@link\n *   module:Layout.f64|little-endian} and {@link\n *   module:Layout.f64be|big-endian} representations;\n * * {@link module:Layout.const|Constants} that take no space in the\n *   encoded expression.\n *\n * and for these aggregate types:\n * * {@link module:Layout.seq|Sequence}s of instances of a {@link\n *   module:Layout~Layout|Layout}, with JavaScript representation as\n *   an Array and constant or data-dependent {@link\n *   module:Layout~Sequence#count|length};\n * * {@link module:Layout.struct|Structure}s that aggregate a\n *   heterogeneous sequence of {@link module:Layout~Layout|Layout}\n *   instances, with JavaScript representation as an Object;\n * * {@link module:Layout.union|Union}s that support multiple {@link\n *   module:Layout~VariantLayout|variant layouts} over a fixed\n *   (padded) or variable (not padded) span of bytes, using an\n *   unsigned integer at the start of the data or a separate {@link\n *   module:Layout.unionLayoutDiscriminator|layout element} to\n *   determine which layout to use when interpreting the buffer\n *   contents;\n * * {@link module:Layout.bits|BitStructure}s that contain a sequence\n *   of individual {@link\n *   module:Layout~BitStructure#addField|BitField}s packed into an 8,\n *   16, 24, or 32-bit unsigned integer starting at the least- or\n *   most-significant bit;\n * * {@link module:Layout.cstr|C strings} of varying length;\n * * {@link module:Layout.blob|Blobs} of fixed- or variable-{@link\n *   module:Layout~Blob#length|length} raw data.\n *\n * All {@link module:Layout~Layout|Layout} instances are immutable\n * after construction, to prevent internal state from becoming\n * inconsistent.\n *\n * @local Layout\n * @local ExternalLayout\n * @local GreedyCount\n * @local OffsetLayout\n * @local UInt\n * @local UIntBE\n * @local Int\n * @local IntBE\n * @local NearUInt64\n * @local NearUInt64BE\n * @local NearInt64\n * @local NearInt64BE\n * @local Float\n * @local FloatBE\n * @local Double\n * @local DoubleBE\n * @local Sequence\n * @local Structure\n * @local UnionDiscriminator\n * @local UnionLayoutDiscriminator\n * @local Union\n * @local VariantLayout\n * @local BitStructure\n * @local BitField\n * @local Boolean\n * @local Blob\n * @local CString\n * @local Constant\n * @local bindConstructorLayout\n * @module Layout\n * @license MIT\n * @author Peter A. Bigot\n * @see {@link https://github.com/pabigot/buffer-layout|buffer-layout on GitHub}\n */\n\n'use strict';\n\n/**\n * Base class for layout objects.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * Layout#encode|encode} or {@link Layout#decode|decode} functions.\n *\n * @param {Number} span - Initializer for {@link Layout#span|span}.  The\n * parameter must be an integer; a negative value signifies that the\n * span is {@link Layout#getSpan|value-specific}.\n *\n * @param {string} [property] - Initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n */\nclass Layout {\n  constructor(span, property) {\n    if (!Number.isInteger(span)) {\n      throw new TypeError('span must be an integer');\n    }\n\n    /** The span of the layout in bytes.\n     *\n     * Positive values are generally expected.\n     *\n     * Zero will only appear in {@link Constant}s and in {@link\n     * Sequence}s where the {@link Sequence#count|count} is zero.\n     *\n     * A negative value indicates that the span is value-specific, and\n     * must be obtained using {@link Layout#getSpan|getSpan}. */\n    this.span = span;\n\n    /** The property name used when this layout is represented in an\n     * Object.\n     *\n     * Used only for layouts that {@link Layout#decode|decode} to Object\n     * instances.  If left undefined the span of the unnamed layout will\n     * be treated as padding: it will not be mutated by {@link\n     * Layout#encode|encode} nor represented as a property in the\n     * decoded Object. */\n    this.property = property;\n  }\n\n  /** Function to create an Object into which decoded properties will\n   * be written.\n   *\n   * Used only for layouts that {@link Layout#decode|decode} to Object\n   * instances, which means:\n   * * {@link Structure}\n   * * {@link Union}\n   * * {@link VariantLayout}\n   * * {@link BitStructure}\n   *\n   * If left undefined the JavaScript representation of these layouts\n   * will be Object instances.\n   *\n   * See {@link bindConstructorLayout}.\n   */\n  makeDestinationObject() {\n    return {};\n  }\n\n  /**\n   * Decode from a Buffer into an JavaScript value.\n   *\n   * @param {Buffer} b - the buffer from which encoded data is read.\n   *\n   * @param {Number} [offset] - the offset at which the encoded data\n   * starts.  If absent a zero offset is inferred.\n   *\n   * @returns {(Number|Array|Object)} - the value of the decoded data.\n   *\n   * @abstract\n   */\n  decode(b, offset) {\n    throw new Error('Layout is abstract');\n  }\n\n  /**\n   * Encode a JavaScript value into a Buffer.\n   *\n   * @param {(Number|Array|Object)} src - the value to be encoded into\n   * the buffer.  The type accepted depends on the (sub-)type of {@link\n   * Layout}.\n   *\n   * @param {Buffer} b - the buffer into which encoded data will be\n   * written.\n   *\n   * @param {Number} [offset] - the offset at which the encoded data\n   * starts.  If absent a zero offset is inferred.\n   *\n   * @returns {Number} - the number of bytes encoded, including the\n   * space skipped for internal padding, but excluding data such as\n   * {@link Sequence#count|lengths} when stored {@link\n   * ExternalLayout|externally}.  This is the adjustment to `offset`\n   * producing the offset where data for the next layout would be\n   * written.\n   *\n   * @abstract\n   */\n  encode(src, b, offset) {\n    throw new Error('Layout is abstract');\n  }\n\n  /**\n   * Calculate the span of a specific instance of a layout.\n   *\n   * @param {Buffer} b - the buffer that contains an encoded instance.\n   *\n   * @param {Number} [offset] - the offset at which the encoded instance\n   * starts.  If absent a zero offset is inferred.\n   *\n   * @return {Number} - the number of bytes covered by the layout\n   * instance.  If this method is not overridden in a subclass the\n   * definition-time constant {@link Layout#span|span} will be\n   * returned.\n   *\n   * @throws {RangeError} - if the length of the value cannot be\n   * determined.\n   */\n  getSpan(b, offset) {\n    if (0 > this.span) {\n      throw new RangeError('indeterminate span');\n    }\n    return this.span;\n  }\n\n  /**\n   * Replicate the layout using a new property.\n   *\n   * This function must be used to get a structurally-equivalent layout\n   * with a different name since all {@link Layout} instances are\n   * immutable.\n   *\n   * **NOTE** This is a shallow copy.  All fields except {@link\n   * Layout#property|property} are strictly equal to the origin layout.\n   *\n   * @param {String} property - the value for {@link\n   * Layout#property|property} in the replica.\n   *\n   * @returns {Layout} - the copy with {@link Layout#property|property}\n   * set to `property`.\n   */\n  replicate(property) {\n    const rv = Object.create(this.constructor.prototype);\n    Object.assign(rv, this);\n    rv.property = property;\n    return rv;\n  }\n\n  /**\n   * Create an object from layout properties and an array of values.\n   *\n   * **NOTE** This function returns `undefined` if invoked on a layout\n   * that does not return its value as an Object.  Objects are\n   * returned for things that are a {@link Structure}, which includes\n   * {@link VariantLayout|variant layouts} if they are structures, and\n   * excludes {@link Union}s.  If you want this feature for a union\n   * you must use {@link Union.getVariant|getVariant} to select the\n   * desired layout.\n   *\n   * @param {Array} values - an array of values that correspond to the\n   * default order for properties.  As with {@link Layout#decode|decode}\n   * layout elements that have no property name are skipped when\n   * iterating over the array values.  Only the top-level properties are\n   * assigned; arguments are not assigned to properties of contained\n   * layouts.  Any unused values are ignored.\n   *\n   * @return {(Object|undefined)}\n   */\n  fromArray(values) {\n    return undefined;\n  }\n}\nexports.Layout = Layout;\n\n/* Provide text that carries a name (such as for a function that will\n * be throwing an error) annotated with the property of a given layout\n * (such as one for which the value was unacceptable).\n *\n * @ignore */\nfunction nameWithProperty(name, lo) {\n  if (lo.property) {\n    return name + '[' + lo.property + ']';\n  }\n  return name;\n}\nexports.nameWithProperty = nameWithProperty;\n\n/**\n * Augment a class so that instances can be encoded/decoded using a\n * given layout.\n *\n * Calling this function couples `Class` with `layout` in several ways:\n *\n * * `Class.layout_` becomes a static member property equal to `layout`;\n * * `layout.boundConstructor_` becomes a static member property equal\n *    to `Class`;\n * * The {@link Layout#makeDestinationObject|makeDestinationObject()}\n *   property of `layout` is set to a function that returns a `new\n *   Class()`;\n * * `Class.decode(b, offset)` becomes a static member function that\n *   delegates to {@link Layout#decode|layout.decode}.  The\n *   synthesized function may be captured and extended.\n * * `Class.prototype.encode(b, offset)` provides an instance member\n *   function that delegates to {@link Layout#encode|layout.encode}\n *   with `src` set to `this`.  The synthesized function may be\n *   captured and extended, but when the extension is invoked `this`\n *   must be explicitly bound to the instance.\n *\n * @param {class} Class - a JavaScript class with a nullary\n * constructor.\n *\n * @param {Layout} layout - the {@link Layout} instance used to encode\n * instances of `Class`.\n */\nfunction bindConstructorLayout(Class, layout) {\n  if ('function' !== typeof Class) {\n    throw new TypeError('Class must be constructor');\n  }\n  if (Class.hasOwnProperty('layout_')) {\n    throw new Error('Class is already bound to a layout');\n  }\n  if (!(layout && (layout instanceof Layout))) {\n    throw new TypeError('layout must be a Layout');\n  }\n  if (layout.hasOwnProperty('boundConstructor_')) {\n    throw new Error('layout is already bound to a constructor');\n  }\n  Class.layout_ = layout;\n  layout.boundConstructor_ = Class;\n  layout.makeDestinationObject = (() => new Class());\n  Object.defineProperty(Class.prototype, 'encode', {\n    value: function(b, offset) {\n      return layout.encode(this, b, offset);\n    },\n    writable: true,\n  });\n  Object.defineProperty(Class, 'decode', {\n    value: function(b, offset) {\n      return layout.decode(b, offset);\n    },\n    writable: true,\n  });\n}\nexports.bindConstructorLayout = bindConstructorLayout;\n\n/**\n * An object that behaves like a layout but does not consume space\n * within its containing layout.\n *\n * This is primarily used to obtain metadata about a member, such as a\n * {@link OffsetLayout} that can provide data about a {@link\n * Layout#getSpan|value-specific span}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support {@link\n * ExternalLayout#isCount|isCount} or other {@link Layout} functions.\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n * @augments {Layout}\n */\nclass ExternalLayout extends Layout {\n  /**\n   * Return `true` iff the external layout decodes to an unsigned\n   * integer layout.\n   *\n   * In that case it can be used as the source of {@link\n   * Sequence#count|Sequence counts}, {@link Blob#length|Blob lengths},\n   * or as {@link UnionLayoutDiscriminator#layout|external union\n   * discriminators}.\n   *\n   * @abstract\n   */\n  isCount() {\n    throw new Error('ExternalLayout is abstract');\n  }\n}\n\n/**\n * An {@link ExternalLayout} that determines its {@link\n * Layout#decode|value} based on offset into and length of the buffer\n * on which it is invoked.\n *\n * *Factory*: {@link module:Layout.greedy|greedy}\n *\n * @param {Number} [elementSpan] - initializer for {@link\n * GreedyCount#elementSpan|elementSpan}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {ExternalLayout}\n */\nclass GreedyCount extends ExternalLayout {\n  constructor(elementSpan, property) {\n    if (undefined === elementSpan) {\n      elementSpan = 1;\n    }\n    if ((!Number.isInteger(elementSpan)) || (0 >= elementSpan)) {\n      throw new TypeError('elementSpan must be a (positive) integer');\n    }\n    super(-1, property);\n\n    /** The layout for individual elements of the sequence.  The value\n     * must be a positive integer.  If not provided, the value will be\n     * 1. */\n    this.elementSpan = elementSpan;\n  }\n\n  /** @override */\n  isCount() {\n    return true;\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const rem = b.length - offset;\n    return Math.floor(rem / this.elementSpan);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    return 0;\n  }\n}\n\n/**\n * An {@link ExternalLayout} that supports accessing a {@link Layout}\n * at a fixed offset from the start of another Layout.  The offset may\n * be before, within, or after the base layout.\n *\n * *Factory*: {@link module:Layout.offset|offset}\n *\n * @param {Layout} layout - initializer for {@link\n * OffsetLayout#layout|layout}, modulo `property`.\n *\n * @param {Number} [offset] - Initializes {@link\n * OffsetLayout#offset|offset}.  Defaults to zero.\n *\n * @param {string} [property] - Optional new property name for a\n * {@link Layout#replicate| replica} of `layout` to be used as {@link\n * OffsetLayout#layout|layout}.  If not provided the `layout` is used\n * unchanged.\n *\n * @augments {Layout}\n */\nclass OffsetLayout extends ExternalLayout {\n  constructor(layout, offset, property) {\n    if (!(layout instanceof Layout)) {\n      throw new TypeError('layout must be a Layout');\n    }\n\n    if (undefined === offset) {\n      offset = 0;\n    } else if (!Number.isInteger(offset)) {\n      throw new TypeError('offset must be integer or undefined');\n    }\n\n    super(layout.span, property || layout.property);\n\n    /** The subordinated layout. */\n    this.layout = layout;\n\n    /** The location of {@link OffsetLayout#layout} relative to the\n     * start of another layout.\n     *\n     * The value may be positive or negative, but an error will thrown\n     * if at the point of use it goes outside the span of the Buffer\n     * being accessed.  */\n    this.offset = offset;\n  }\n\n  /** @override */\n  isCount() {\n    return ((this.layout instanceof UInt)\n            || (this.layout instanceof UIntBE));\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return this.layout.decode(b, offset + this.offset);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return this.layout.encode(src, b, offset + this.offset);\n  }\n}\n\n/**\n * Represent an unsigned integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.u8|u8}, {@link\n *  module:Layout.u16|u16}, {@link module:Layout.u24|u24}, {@link\n *  module:Layout.u32|u32}, {@link module:Layout.u40|u40}, {@link\n *  module:Layout.u48|u48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UInt extends Layout {\n  constructor(span, property) {\n    super(span, property);\n    if (6 < this.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readUIntLE(offset, this.span);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeUIntLE(src, offset, this.span);\n    return this.span;\n  }\n}\n\n/**\n * Represent an unsigned integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.u8be|u8be}, {@link\n * module:Layout.u16be|u16be}, {@link module:Layout.u24be|u24be},\n * {@link module:Layout.u32be|u32be}, {@link\n * module:Layout.u40be|u40be}, {@link module:Layout.u48be|u48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UIntBE extends Layout {\n  constructor(span, property) {\n    super( span, property);\n    if (6 < this.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readUIntBE(offset, this.span);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeUIntBE(src, offset, this.span);\n    return this.span;\n  }\n}\n\n/**\n * Represent a signed integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.s8|s8}, {@link\n *  module:Layout.s16|s16}, {@link module:Layout.s24|s24}, {@link\n *  module:Layout.s32|s32}, {@link module:Layout.s40|s40}, {@link\n *  module:Layout.s48|s48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Int extends Layout {\n  constructor(span, property) {\n    super(span, property);\n    if (6 < this.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readIntLE(offset, this.span);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeIntLE(src, offset, this.span);\n    return this.span;\n  }\n}\n\n/**\n * Represent a signed integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.s8be|s8be}, {@link\n * module:Layout.s16be|s16be}, {@link module:Layout.s24be|s24be},\n * {@link module:Layout.s32be|s32be}, {@link\n * module:Layout.s40be|s40be}, {@link module:Layout.s48be|s48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass IntBE extends Layout {\n  constructor(span, property) {\n    super(span, property);\n    if (6 < this.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readIntBE(offset, this.span);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeIntBE(src, offset, this.span);\n    return this.span;\n  }\n}\n\nconst V2E32 = Math.pow(2, 32);\n\n/* True modulus high and low 32-bit words, where low word is always\n * non-negative. */\nfunction divmodInt64(src) {\n  const hi32 = Math.floor(src / V2E32);\n  const lo32 = src - (hi32 * V2E32);\n  return {hi32, lo32};\n}\n/* Reconstruct Number from quotient and non-negative remainder */\nfunction roundedInt64(hi32, lo32) {\n  return hi32 * V2E32 + lo32;\n}\n\n/**\n * Represent an unsigned 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64|nu64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearUInt64 extends Layout {\n  constructor(property) {\n    super(8, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const lo32 = b.readUInt32LE(offset);\n    const hi32 = b.readUInt32LE(offset + 4);\n    return roundedInt64(hi32, lo32);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const split = divmodInt64(src);\n    b.writeUInt32LE(split.lo32, offset);\n    b.writeUInt32LE(split.hi32, offset + 4);\n    return 8;\n  }\n}\n\n/**\n * Represent an unsigned 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64be|nu64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearUInt64BE extends Layout {\n  constructor(property) {\n    super(8, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const hi32 = b.readUInt32BE(offset);\n    const lo32 = b.readUInt32BE(offset + 4);\n    return roundedInt64(hi32, lo32);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const split = divmodInt64(src);\n    b.writeUInt32BE(split.hi32, offset);\n    b.writeUInt32BE(split.lo32, offset + 4);\n    return 8;\n  }\n}\n\n/**\n * Represent a signed 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64|ns64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearInt64 extends Layout {\n  constructor(property) {\n    super(8, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const lo32 = b.readUInt32LE(offset);\n    const hi32 = b.readInt32LE(offset + 4);\n    return roundedInt64(hi32, lo32);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const split = divmodInt64(src);\n    b.writeUInt32LE(split.lo32, offset);\n    b.writeInt32LE(split.hi32, offset + 4);\n    return 8;\n  }\n}\n\n/**\n * Represent a signed 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64be|ns64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearInt64BE extends Layout {\n  constructor(property) {\n    super(8, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const hi32 = b.readInt32BE(offset);\n    const lo32 = b.readUInt32BE(offset + 4);\n    return roundedInt64(hi32, lo32);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const split = divmodInt64(src);\n    b.writeInt32BE(split.hi32, offset);\n    b.writeUInt32BE(split.lo32, offset + 4);\n    return 8;\n  }\n}\n\n/**\n * Represent a 32-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f32|f32}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Float extends Layout {\n  constructor(property) {\n    super(4, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readFloatLE(offset);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeFloatLE(src, offset);\n    return 4;\n  }\n}\n\n/**\n * Represent a 32-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f32be|f32be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass FloatBE extends Layout {\n  constructor(property) {\n    super(4, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readFloatBE(offset);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeFloatBE(src, offset);\n    return 4;\n  }\n}\n\n/**\n * Represent a 64-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f64|f64}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Double extends Layout {\n  constructor(property) {\n    super(8, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readDoubleLE(offset);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeDoubleLE(src, offset);\n    return 8;\n  }\n}\n\n/**\n * Represent a 64-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f64be|f64be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass DoubleBE extends Layout {\n  constructor(property) {\n    super(8, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readDoubleBE(offset);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeDoubleBE(src, offset);\n    return 8;\n  }\n}\n\n/**\n * Represent a contiguous sequence of a specific layout as an Array.\n *\n * *Factory*: {@link module:Layout.seq|seq}\n *\n * @param {Layout} elementLayout - initializer for {@link\n * Sequence#elementLayout|elementLayout}.\n *\n * @param {(Number|ExternalLayout)} count - initializer for {@link\n * Sequence#count|count}.  The parameter must be either a positive\n * integer or an instance of {@link ExternalLayout}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Sequence extends Layout {\n  constructor(elementLayout, count, property) {\n    if (!(elementLayout instanceof Layout)) {\n      throw new TypeError('elementLayout must be a Layout');\n    }\n    if (!(((count instanceof ExternalLayout) && count.isCount())\n          || (Number.isInteger(count) && (0 <= count)))) {\n      throw new TypeError('count must be non-negative integer '\n                          + 'or an unsigned integer ExternalLayout');\n    }\n    let span = -1;\n    if ((!(count instanceof ExternalLayout))\n        && (0 < elementLayout.span)) {\n      span = count * elementLayout.span;\n    }\n\n    super(span, property);\n\n    /** The layout for individual elements of the sequence. */\n    this.elementLayout = elementLayout;\n\n    /** The number of elements in the sequence.\n     *\n     * This will be either a non-negative integer or an instance of\n     * {@link ExternalLayout} for which {@link\n     * ExternalLayout#isCount|isCount()} is `true`. */\n    this.count = count;\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    if (0 <= this.span) {\n      return this.span;\n    }\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let span = 0;\n    let count = this.count;\n    if (count instanceof ExternalLayout) {\n      count = count.decode(b, offset);\n    }\n    if (0 < this.elementLayout.span) {\n      span = count * this.elementLayout.span;\n    } else {\n      let idx = 0;\n      while (idx < count) {\n        span += this.elementLayout.getSpan(b, offset + span);\n        ++idx;\n      }\n    }\n    return span;\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const rv = [];\n    let i = 0;\n    let count = this.count;\n    if (count instanceof ExternalLayout) {\n      count = count.decode(b, offset);\n    }\n    while (i < count) {\n      rv.push(this.elementLayout.decode(b, offset));\n      offset += this.elementLayout.getSpan(b, offset);\n      i += 1;\n    }\n    return rv;\n  }\n\n  /** Implement {@link Layout#encode|encode} for {@link Sequence}.\n   *\n   * **NOTE** If `src` is shorter than {@link Sequence#count|count} then\n   * the unused space in the buffer is left unchanged.  If `src` is\n   * longer than {@link Sequence#count|count} the unneeded elements are\n   * ignored.\n   *\n   * **NOTE** If {@link Layout#count|count} is an instance of {@link\n   * ExternalLayout} then the length of `src` will be encoded as the\n   * count after `src` is encoded. */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const elo = this.elementLayout;\n    const span = src.reduce((span, v) => {\n      return span + elo.encode(v, b, offset + span);\n    }, 0);\n    if (this.count instanceof ExternalLayout) {\n      this.count.encode(src.length, b, offset);\n    }\n    return span;\n  }\n}\n\n/**\n * Represent a contiguous sequence of arbitrary layout elements as an\n * Object.\n *\n * *Factory*: {@link module:Layout.struct|struct}\n *\n * **NOTE** The {@link Layout#span|span} of the structure is variable\n * if any layout in {@link Structure#fields|fields} has a variable\n * span.  When {@link Layout#encode|encoding} we must have a value for\n * all variable-length fields, or we wouldn't be able to figure out\n * how much space to use for storage.  We can only identify the value\n * for a field when it has a {@link Layout#property|property}.  As\n * such, although a structure may contain both unnamed fields and\n * variable-length fields, it cannot contain an unnamed\n * variable-length field.\n *\n * @param {Layout[]} fields - initializer for {@link\n * Structure#fields|fields}.  An error is raised if this contains a\n * variable-length field for which a {@link Layout#property|property}\n * is not defined.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @param {Boolean} [decodePrefixes] - initializer for {@link\n * Structure#decodePrefixes|property}.\n *\n * @throws {Error} - if `fields` contains an unnamed variable-length\n * layout.\n *\n * @augments {Layout}\n */\nclass Structure extends Layout {\n  constructor(fields, property, decodePrefixes) {\n    if (!(Array.isArray(fields)\n          && fields.reduce((acc, v) => acc && (v instanceof Layout), true))) {\n      throw new TypeError('fields must be array of Layout instances');\n    }\n    if (('boolean' === typeof property)\n        && (undefined === decodePrefixes)) {\n      decodePrefixes = property;\n      property = undefined;\n    }\n\n    /* Verify absence of unnamed variable-length fields. */\n    for (const fd of fields) {\n      if ((0 > fd.span)\n          && (undefined === fd.property)) {\n        throw new Error('fields cannot contain unnamed variable-length layout');\n      }\n    }\n\n    let span = -1;\n    try {\n      span = fields.reduce((span, fd) => span + fd.getSpan(), 0);\n    } catch (e) {\n    }\n    super(span, property);\n\n    /** The sequence of {@link Layout} values that comprise the\n     * structure.\n     *\n     * The individual elements need not be the same type, and may be\n     * either scalar or aggregate layouts.  If a member layout leaves\n     * its {@link Layout#property|property} undefined the\n     * corresponding region of the buffer associated with the element\n     * will not be mutated.\n     *\n     * @type {Layout[]} */\n    this.fields = fields;\n\n    /** Control behavior of {@link Layout#decode|decode()} given short\n     * buffers.\n     *\n     * In some situations a structure many be extended with additional\n     * fields over time, with older installations providing only a\n     * prefix of the full structure.  If this property is `true`\n     * decoding will accept those buffers and leave subsequent fields\n     * undefined, as long as the buffer ends at a field boundary.\n     * Defaults to `false`. */\n    this.decodePrefixes = !!decodePrefixes;\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    if (0 <= this.span) {\n      return this.span;\n    }\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let span = 0;\n    try {\n      span = this.fields.reduce((span, fd) => {\n        const fsp = fd.getSpan(b, offset);\n        offset += fsp;\n        return span + fsp;\n      }, 0);\n    } catch (e) {\n      throw new RangeError('indeterminate span');\n    }\n    return span;\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const dest = this.makeDestinationObject();\n    for (const fd of this.fields) {\n      if (undefined !== fd.property) {\n        dest[fd.property] = fd.decode(b, offset);\n      }\n      offset += fd.getSpan(b, offset);\n      if (this.decodePrefixes\n          && (b.length === offset)) {\n        break;\n      }\n    }\n    return dest;\n  }\n\n  /** Implement {@link Layout#encode|encode} for {@link Structure}.\n   *\n   * If `src` is missing a property for a member with a defined {@link\n   * Layout#property|property} the corresponding region of the buffer is\n   * left unmodified. */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const firstOffset = offset;\n    let lastOffset = 0;\n    let lastWrote = 0;\n    for (const fd of this.fields) {\n      let span = fd.span;\n      lastWrote = (0 < span) ? span : 0;\n      if (undefined !== fd.property) {\n        const fv = src[fd.property];\n        if (undefined !== fv) {\n          lastWrote = fd.encode(fv, b, offset);\n          if (0 > span) {\n            /* Read the as-encoded span, which is not necessarily the\n             * same as what we wrote. */\n            span = fd.getSpan(b, offset);\n          }\n        }\n      }\n      lastOffset = offset;\n      offset += span;\n    }\n    /* Use (lastOffset + lastWrote) instead of offset because the last\n     * item may have had a dynamic length and we don't want to include\n     * the padding between it and the end of the space reserved for\n     * it. */\n    return (lastOffset + lastWrote) - firstOffset;\n  }\n\n  /** @override */\n  fromArray(values) {\n    const dest = this.makeDestinationObject();\n    for (const fd of this.fields) {\n      if ((undefined !== fd.property)\n          && (0 < values.length)) {\n        dest[fd.property] = values.shift();\n      }\n    }\n    return dest;\n  }\n\n  /**\n   * Get access to the layout of a given property.\n   *\n   * @param {String} property - the structure member of interest.\n   *\n   * @return {Layout} - the layout associated with `property`, or\n   * undefined if there is no such property.\n   */\n  layoutFor(property) {\n    if ('string' !== typeof property) {\n      throw new TypeError('property must be string');\n    }\n    for (const fd of this.fields) {\n      if (fd.property === property) {\n        return fd;\n      }\n    }\n  }\n\n  /**\n   * Get the offset of a structure member.\n   *\n   * @param {String} property - the structure member of interest.\n   *\n   * @return {Number} - the offset in bytes to the start of `property`\n   * within the structure, or undefined if `property` is not a field\n   * within the structure.  If the property is a member but follows a\n   * variable-length structure member a negative number will be\n   * returned.\n   */\n  offsetOf(property) {\n    if ('string' !== typeof property) {\n      throw new TypeError('property must be string');\n    }\n    let offset = 0;\n    for (const fd of this.fields) {\n      if (fd.property === property) {\n        return offset;\n      }\n      if (0 > fd.span) {\n        offset = -1;\n      } else if (0 <= offset) {\n        offset += fd.span;\n      }\n    }\n  }\n}\n\n/**\n * An object that can provide a {@link\n * Union#discriminator|discriminator} API for {@link Union}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * UnionDiscriminator#encode|encode} or {@link\n * UnionDiscriminator#decode|decode} functions.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}.\n *\n * @abstract\n */\nclass UnionDiscriminator {\n  constructor(property) {\n    /** The {@link Layout#property|property} to be used when the\n     * discriminator is referenced in isolation (generally when {@link\n     * Union#decode|Union decode} cannot delegate to a specific\n     * variant). */\n    this.property = property;\n  }\n\n  /** Analog to {@link Layout#decode|Layout decode} for union discriminators.\n   *\n   * The implementation of this method need not reference the buffer if\n   * variant information is available through other means. */\n  decode() {\n    throw new Error('UnionDiscriminator is abstract');\n  }\n\n  /** Analog to {@link Layout#decode|Layout encode} for union discriminators.\n   *\n   * The implementation of this method need not store the value if\n   * variant information is maintained through other means. */\n  encode() {\n    throw new Error('UnionDiscriminator is abstract');\n  }\n}\n\n/**\n * An object that can provide a {@link\n * UnionDiscriminator|discriminator API} for {@link Union} using an\n * unsigned integral {@link Layout} instance located either inside or\n * outside the union.\n *\n * @param {ExternalLayout} layout - initializes {@link\n * UnionLayoutDiscriminator#layout|layout}.  Must satisfy {@link\n * ExternalLayout#isCount|isCount()}.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}, superseding the property\n * from `layout`, but defaulting to `variant` if neither `property`\n * nor layout provide a property name.\n *\n * @augments {UnionDiscriminator}\n */\nclass UnionLayoutDiscriminator extends UnionDiscriminator {\n  constructor(layout, property) {\n    if (!((layout instanceof ExternalLayout)\n          && layout.isCount())) {\n      throw new TypeError('layout must be an unsigned integer ExternalLayout');\n    }\n\n    super(property || layout.property || 'variant');\n\n    /** The {@link ExternalLayout} used to access the discriminator\n     * value. */\n    this.layout = layout;\n  }\n\n  /** Delegate decoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n  decode(b, offset) {\n    return this.layout.decode(b, offset);\n  }\n\n  /** Delegate encoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n  encode(src, b, offset) {\n    return this.layout.encode(src, b, offset);\n  }\n}\n\n/**\n * Represent any number of span-compatible layouts.\n *\n * *Factory*: {@link module:Layout.union|union}\n *\n * If the union has a {@link Union#defaultLayout|default layout} that\n * layout must have a non-negative {@link Layout#span|span}.  The span\n * of a fixed-span union includes its {@link\n * Union#discriminator|discriminator} if the variant is a {@link\n * Union#usesPrefixDiscriminator|prefix of the union}, plus the span\n * of its {@link Union#defaultLayout|default layout}.\n *\n * If the union does not have a default layout then the encoded span\n * of the union depends on the encoded span of its variant (which may\n * be fixed or variable).\n *\n * {@link VariantLayout#layout|Variant layout}s are added through\n * {@link Union#addVariant|addVariant}.  If the union has a default\n * layout, the span of the {@link VariantLayout#layout|layout\n * contained by the variant} must not exceed the span of the {@link\n * Union#defaultLayout|default layout} (minus the span of a {@link\n * Union#usesPrefixDiscriminator|prefix disriminator}, if used).  The\n * span of the variant will equal the span of the union itself.\n *\n * The variant for a buffer can only be identified from the {@link\n * Union#discriminator|discriminator} {@link\n * UnionDiscriminator#property|property} (in the case of the {@link\n * Union#defaultLayout|default layout}), or by using {@link\n * Union#getVariant|getVariant} and examining the resulting {@link\n * VariantLayout} instance.\n *\n * A variant compatible with a JavaScript object can be identified\n * using {@link Union#getSourceVariant|getSourceVariant}.\n *\n * @param {(UnionDiscriminator|ExternalLayout|Layout)} discr - How to\n * identify the layout used to interpret the union contents.  The\n * parameter must be an instance of {@link UnionDiscriminator}, an\n * {@link ExternalLayout} that satisfies {@link\n * ExternalLayout#isCount|isCount()}, or {@link UInt} (or {@link\n * UIntBE}).  When a non-external layout element is passed the layout\n * appears at the start of the union.  In all cases the (synthesized)\n * {@link UnionDiscriminator} instance is recorded as {@link\n * Union#discriminator|discriminator}.\n *\n * @param {(Layout|null)} defaultLayout - initializer for {@link\n * Union#defaultLayout|defaultLayout}.  If absent defaults to `null`.\n * If `null` there is no default layout: the union has data-dependent\n * length and attempts to decode or encode unrecognized variants will\n * throw an exception.  A {@link Layout} instance must have a\n * non-negative {@link Layout#span|span}, and if it lacks a {@link\n * Layout#property|property} the {@link\n * Union#defaultLayout|defaultLayout} will be a {@link\n * Layout#replicate|replica} with property `content`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Union extends Layout {\n  constructor(discr, defaultLayout, property) {\n    const upv = ((discr instanceof UInt)\n               || (discr instanceof UIntBE));\n    if (upv) {\n      discr = new UnionLayoutDiscriminator(new OffsetLayout(discr));\n    } else if ((discr instanceof ExternalLayout)\n               && discr.isCount()) {\n      discr = new UnionLayoutDiscriminator(discr);\n    } else if (!(discr instanceof UnionDiscriminator)) {\n      throw new TypeError('discr must be a UnionDiscriminator '\n                          + 'or an unsigned integer layout');\n    }\n    if (undefined === defaultLayout) {\n      defaultLayout = null;\n    }\n    if (!((null === defaultLayout)\n          || (defaultLayout instanceof Layout))) {\n      throw new TypeError('defaultLayout must be null or a Layout');\n    }\n    if (null !== defaultLayout) {\n      if (0 > defaultLayout.span) {\n        throw new Error('defaultLayout must have constant span');\n      }\n      if (undefined === defaultLayout.property) {\n        defaultLayout = defaultLayout.replicate('content');\n      }\n    }\n\n    /* The union span can be estimated only if there's a default\n     * layout.  The union spans its default layout, plus any prefix\n     * variant layout.  By construction both layouts, if present, have\n     * non-negative span. */\n    let span = -1;\n    if (defaultLayout) {\n      span = defaultLayout.span;\n      if ((0 <= span) && upv) {\n        span += discr.layout.span;\n      }\n    }\n    super(span, property);\n\n    /** The interface for the discriminator value in isolation.\n     *\n     * This a {@link UnionDiscriminator} either passed to the\n     * constructor or synthesized from the `discr` constructor\n     * argument.  {@link\n     * Union#usesPrefixDiscriminator|usesPrefixDiscriminator} will be\n     * `true` iff the `discr` parameter was a non-offset {@link\n     * Layout} instance. */\n    this.discriminator = discr;\n\n    /** `true` if the {@link Union#discriminator|discriminator} is the\n     * first field in the union.\n     *\n     * If `false` the discriminator is obtained from somewhere\n     * else. */\n    this.usesPrefixDiscriminator = upv;\n\n    /** The layout for non-discriminator content when the value of the\n     * discriminator is not recognized.\n     *\n     * This is the value passed to the constructor.  It is\n     * structurally equivalent to the second component of {@link\n     * Union#layout|layout} but may have a different property\n     * name. */\n    this.defaultLayout = defaultLayout;\n\n    /** A registry of allowed variants.\n     *\n     * The keys are unsigned integers which should be compatible with\n     * {@link Union.discriminator|discriminator}.  The property value\n     * is the corresponding {@link VariantLayout} instances assigned\n     * to this union by {@link Union#addVariant|addVariant}.\n     *\n     * **NOTE** The registry remains mutable so that variants can be\n     * {@link Union#addVariant|added} at any time.  Users should not\n     * manipulate the content of this property. */\n    this.registry = {};\n\n    /* Private variable used when invoking getSourceVariant */\n    let boundGetSourceVariant = this.defaultGetSourceVariant.bind(this);\n\n    /** Function to infer the variant selected by a source object.\n     *\n     * Defaults to {@link\n     * Union#defaultGetSourceVariant|defaultGetSourceVariant} but may\n     * be overridden using {@link\n     * Union#configGetSourceVariant|configGetSourceVariant}.\n     *\n     * @param {Object} src - as with {@link\n     * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n     *\n     * @returns {(undefined|VariantLayout)} The default variant\n     * (`undefined`) or first registered variant that uses a property\n     * available in `src`. */\n    this.getSourceVariant = function(src) {\n      return boundGetSourceVariant(src);\n    };\n\n    /** Function to override the implementation of {@link\n     * Union#getSourceVariant|getSourceVariant}.\n     *\n     * Use this if the desired variant cannot be identified using the\n     * algorithm of {@link\n     * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n     *\n     * **NOTE** The provided function will be invoked bound to this\n     * Union instance, providing local access to {@link\n     * Union#registry|registry}.\n     *\n     * @param {Function} gsv - a function that follows the API of\n     * {@link Union#defaultGetSourceVariant|defaultGetSourceVariant}. */\n    this.configGetSourceVariant = function(gsv) {\n      boundGetSourceVariant = gsv.bind(this);\n    };\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    if (0 <= this.span) {\n      return this.span;\n    }\n    if (undefined === offset) {\n      offset = 0;\n    }\n    /* Default layouts always have non-negative span, so we don't have\n     * one and we have to recognize the variant which will in turn\n     * determine the span. */\n    const vlo = this.getVariant(b, offset);\n    if (!vlo) {\n      throw new Error('unable to determine span for unrecognized variant');\n    }\n    return vlo.getSpan(b, offset);\n  }\n\n  /**\n   * Method to infer a registered Union variant compatible with `src`.\n   *\n   * The first satisified rule in the following sequence defines the\n   * return value:\n   * * If `src` has properties matching the Union discriminator and\n   *   the default layout, `undefined` is returned regardless of the\n   *   value of the discriminator property (this ensures the default\n   *   layout will be used);\n   * * If `src` has a property matching the Union discriminator, the\n   *   value of the discriminator identifies a registered variant, and\n   *   either (a) the variant has no layout, or (b) `src` has the\n   *   variant's property, then the variant is returned (because the\n   *   source satisfies the constraints of the variant it identifies);\n   * * If `src` does not have a property matching the Union\n   *   discriminator, but does have a property matching a registered\n   *   variant, then the variant is returned (because the source\n   *   matches a variant without an explicit conflict);\n   * * An error is thrown (because we either can't identify a variant,\n   *   or we were explicitly told the variant but can't satisfy it).\n   *\n   * @param {Object} src - an object presumed to be compatible with\n   * the content of the Union.\n   *\n   * @return {(undefined|VariantLayout)} - as described above.\n   *\n   * @throws {Error} - if `src` cannot be associated with a default or\n   * registered variant.\n   */\n  defaultGetSourceVariant(src) {\n    if (src.hasOwnProperty(this.discriminator.property)) {\n      if (this.defaultLayout\n          && src.hasOwnProperty(this.defaultLayout.property)) {\n        return undefined;\n      }\n      const vlo = this.registry[src[this.discriminator.property]];\n      if (vlo\n          && ((!vlo.layout)\n              || src.hasOwnProperty(vlo.property))) {\n        return vlo;\n      }\n    } else {\n      for (const tag in this.registry) {\n        const vlo = this.registry[tag];\n        if (src.hasOwnProperty(vlo.property)) {\n          return vlo;\n        }\n      }\n    }\n    throw new Error('unable to infer src variant');\n  }\n\n  /** Implement {@link Layout#decode|decode} for {@link Union}.\n   *\n   * If the variant is {@link Union#addVariant|registered} the return\n   * value is an instance of that variant, with no explicit\n   * discriminator.  Otherwise the {@link Union#defaultLayout|default\n   * layout} is used to decode the content. */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let dest;\n    const dlo = this.discriminator;\n    const discr = dlo.decode(b, offset);\n    let clo = this.registry[discr];\n    if (undefined === clo) {\n      let contentOffset = 0;\n      clo = this.defaultLayout;\n      if (this.usesPrefixDiscriminator) {\n        contentOffset = dlo.layout.span;\n      }\n      dest = this.makeDestinationObject();\n      dest[dlo.property] = discr;\n      dest[clo.property] = this.defaultLayout.decode(b, offset + contentOffset);\n    } else {\n      dest = clo.decode(b, offset);\n    }\n    return dest;\n  }\n\n  /** Implement {@link Layout#encode|encode} for {@link Union}.\n   *\n   * This API assumes the `src` object is consistent with the union's\n   * {@link Union#defaultLayout|default layout}.  To encode variants\n   * use the appropriate variant-specific {@link VariantLayout#encode}\n   * method. */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const vlo = this.getSourceVariant(src);\n    if (undefined === vlo) {\n      const dlo = this.discriminator;\n      const clo = this.defaultLayout;\n      let contentOffset = 0;\n      if (this.usesPrefixDiscriminator) {\n        contentOffset = dlo.layout.span;\n      }\n      dlo.encode(src[dlo.property], b, offset);\n      return contentOffset + clo.encode(src[clo.property], b,\n                                        offset + contentOffset);\n    }\n    return vlo.encode(src, b, offset);\n  }\n\n  /** Register a new variant structure within a union.  The newly\n   * created variant is returned.\n   *\n   * @param {Number} variant - initializer for {@link\n   * VariantLayout#variant|variant}.\n   *\n   * @param {Layout} layout - initializer for {@link\n   * VariantLayout#layout|layout}.\n   *\n   * @param {String} property - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @return {VariantLayout} */\n  addVariant(variant, layout, property) {\n    const rv = new VariantLayout(this, variant, layout, property);\n    this.registry[variant] = rv;\n    return rv;\n  }\n\n  /**\n   * Get the layout associated with a registered variant.\n   *\n   * If `vb` does not produce a registered variant the function returns\n   * `undefined`.\n   *\n   * @param {(Number|Buffer)} vb - either the variant number, or a\n   * buffer from which the discriminator is to be read.\n   *\n   * @param {Number} offset - offset into `vb` for the start of the\n   * union.  Used only when `vb` is an instance of {Buffer}.\n   *\n   * @return {({VariantLayout}|undefined)}\n   */\n  getVariant(vb, offset) {\n    let variant = vb;\n    if (Buffer.isBuffer(vb)) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n      variant = this.discriminator.decode(vb, offset);\n    }\n    return this.registry[variant];\n  }\n}\n\n/**\n * Represent a specific variant within a containing union.\n *\n * **NOTE** The {@link Layout#span|span} of the variant may include\n * the span of the {@link Union#discriminator|discriminator} used to\n * identify it, but values read and written using the variant strictly\n * conform to the content of {@link VariantLayout#layout|layout}.\n *\n * **NOTE** User code should not invoke this constructor directly.  Use\n * the union {@link Union#addVariant|addVariant} helper method.\n *\n * @param {Union} union - initializer for {@link\n * VariantLayout#union|union}.\n *\n * @param {Number} variant - initializer for {@link\n * VariantLayout#variant|variant}.\n *\n * @param {Layout} [layout] - initializer for {@link\n * VariantLayout#layout|layout}.  If absent the variant carries no\n * data.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.  Unlike many other layouts, variant\n * layouts normally include a property name so they can be identified\n * within their containing {@link Union}.  The property identifier may\n * be absent only if `layout` is is absent.\n *\n * @augments {Layout}\n */\nclass VariantLayout extends Layout {\n  constructor(union, variant, layout, property) {\n    if (!(union instanceof Union)) {\n      throw new TypeError('union must be a Union');\n    }\n    if ((!Number.isInteger(variant)) || (0 > variant)) {\n      throw new TypeError('variant must be a (non-negative) integer');\n    }\n    if (('string' === typeof layout)\n        && (undefined === property)) {\n      property = layout;\n      layout = null;\n    }\n    if (layout) {\n      if (!(layout instanceof Layout)) {\n        throw new TypeError('layout must be a Layout');\n      }\n      if ((null !== union.defaultLayout)\n          && (0 <= layout.span)\n          && (layout.span > union.defaultLayout.span)) {\n        throw new Error('variant span exceeds span of containing union');\n      }\n      if ('string' !== typeof property) {\n        throw new TypeError('variant must have a String property');\n      }\n    }\n    let span = union.span;\n    if (0 > union.span) {\n      span = layout ? layout.span : 0;\n      if ((0 <= span) && union.usesPrefixDiscriminator) {\n        span += union.discriminator.layout.span;\n      }\n    }\n    super(span, property);\n\n    /** The {@link Union} to which this variant belongs. */\n    this.union = union;\n\n    /** The unsigned integral value identifying this variant within\n     * the {@link Union#discriminator|discriminator} of the containing\n     * union. */\n    this.variant = variant;\n\n    /** The {@link Layout} to be used when reading/writing the\n     * non-discriminator part of the {@link\n     * VariantLayout#union|union}.  If `null` the variant carries no\n     * data. */\n    this.layout = layout || null;\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    if (0 <= this.span) {\n      /* Will be equal to the containing union span if that is not\n       * variable. */\n      return this.span;\n    }\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let contentOffset = 0;\n    if (this.union.usesPrefixDiscriminator) {\n      contentOffset = this.union.discriminator.layout.span;\n    }\n    /* Span is defined solely by the variant (and prefix discriminator) */\n    return contentOffset + this.layout.getSpan(b, offset + contentOffset);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    const dest = this.makeDestinationObject();\n    if (undefined === offset) {\n      offset = 0;\n    }\n    if (this !== this.union.getVariant(b, offset)) {\n      throw new Error('variant mismatch');\n    }\n    let contentOffset = 0;\n    if (this.union.usesPrefixDiscriminator) {\n      contentOffset = this.union.discriminator.layout.span;\n    }\n    if (this.layout) {\n      dest[this.property] = this.layout.decode(b, offset + contentOffset);\n    } else if (this.property) {\n      dest[this.property] = true;\n    } else if (this.union.usesPrefixDiscriminator) {\n      dest[this.union.discriminator.property] = this.variant;\n    }\n    return dest;\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let contentOffset = 0;\n    if (this.union.usesPrefixDiscriminator) {\n      contentOffset = this.union.discriminator.layout.span;\n    }\n    if (this.layout\n        && (!src.hasOwnProperty(this.property))) {\n      throw new TypeError('variant lacks property ' + this.property);\n    }\n    this.union.discriminator.encode(this.variant, b, offset);\n    let span = contentOffset;\n    if (this.layout) {\n      this.layout.encode(src[this.property], b, offset + contentOffset);\n      span += this.layout.getSpan(b, offset + contentOffset);\n      if ((0 <= this.union.span)\n          && (span > this.union.span)) {\n        throw new Error('encoded variant overruns containing union');\n      }\n    }\n    return span;\n  }\n\n  /** Delegate {@link Layout#fromArray|fromArray} to {@link\n   * VariantLayout#layout|layout}. */\n  fromArray(values) {\n    if (this.layout) {\n      return this.layout.fromArray(values);\n    }\n  }\n}\n\n/** JavaScript chose to define bitwise operations as operating on\n * signed 32-bit values in 2's complement form, meaning any integer\n * with bit 31 set is going to look negative.  For right shifts that's\n * not a problem, because `>>>` is a logical shift, but for every\n * other bitwise operator we have to compensate for possible negative\n * results. */\nfunction fixBitwiseResult(v) {\n  if (0 > v) {\n    v += 0x100000000;\n  }\n  return v;\n}\n\n/**\n * Contain a sequence of bit fields as an unsigned integer.\n *\n * *Factory*: {@link module:Layout.bits|bits}\n *\n * This is a container element; within it there are {@link BitField}\n * instances that provide the extracted properties.  The container\n * simply defines the aggregate representation and its bit ordering.\n * The representation is an object containing properties with numeric\n * or {@link Boolean} values.\n *\n * {@link BitField}s are added with the {@link\n * BitStructure#addField|addField} and {@link\n * BitStructure#addBoolean|addBoolean} methods.\n\n * @param {Layout} word - initializer for {@link\n * BitStructure#word|word}.  The parameter must be an instance of\n * {@link UInt} (or {@link UIntBE}) that is no more than 4 bytes wide.\n *\n * @param {bool} [msb] - `true` if the bit numbering starts at the\n * most significant bit of the containing word; `false` (default) if\n * it starts at the least significant bit of the containing word.  If\n * the parameter at this position is a string and `property` is\n * `undefined` the value of this argument will instead be used as the\n * value of `property`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass BitStructure extends Layout {\n  constructor(word, msb, property) {\n    if (!((word instanceof UInt)\n          || (word instanceof UIntBE))) {\n      throw new TypeError('word must be a UInt or UIntBE layout');\n    }\n    if (('string' === typeof msb)\n        && (undefined === property)) {\n      property = msb;\n      msb = undefined;\n    }\n    if (4 < word.span) {\n      throw new RangeError('word cannot exceed 32 bits');\n    }\n    super(word.span, property);\n\n    /** The layout used for the packed value.  {@link BitField}\n     * instances are packed sequentially depending on {@link\n     * BitStructure#msb|msb}. */\n    this.word = word;\n\n    /** Whether the bit sequences are packed starting at the most\n     * significant bit growing down (`true`), or the least significant\n     * bit growing up (`false`).\n     *\n     * **NOTE** Regardless of this value, the least significant bit of\n     * any {@link BitField} value is the least significant bit of the\n     * corresponding section of the packed value. */\n    this.msb = !!msb;\n\n    /** The sequence of {@link BitField} layouts that comprise the\n     * packed structure.\n     *\n     * **NOTE** The array remains mutable to allow fields to be {@link\n     * BitStructure#addField|added} after construction.  Users should\n     * not manipulate the content of this property.*/\n    this.fields = [];\n\n    /* Storage for the value.  Capture a variable instead of using an\n     * instance property because we don't want anything to change the\n     * value without going through the mutator. */\n    let value = 0;\n    this._packedSetValue = function(v) {\n      value = fixBitwiseResult(v);\n      return this;\n    };\n    this._packedGetValue = function() {\n      return value;\n    };\n  }\n\n  /** @override */\n  decode(b, offset) {\n    const dest = this.makeDestinationObject();\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const value = this.word.decode(b, offset);\n    this._packedSetValue(value);\n    for (const fd of this.fields) {\n      if (undefined !== fd.property) {\n        dest[fd.property] = fd.decode(value);\n      }\n    }\n    return dest;\n  }\n\n  /** Implement {@link Layout#encode|encode} for {@link BitStructure}.\n   *\n   * If `src` is missing a property for a member with a defined {@link\n   * Layout#property|property} the corresponding region of the packed\n   * value is left unmodified.  Unused bits are also left unmodified. */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const value = this.word.decode(b, offset);\n    this._packedSetValue(value);\n    for (const fd of this.fields) {\n      if (undefined !== fd.property) {\n        const fv = src[fd.property];\n        if (undefined !== fv) {\n          fd.encode(fv);\n        }\n      }\n    }\n    return this.word.encode(this._packedGetValue(), b, offset);\n  }\n\n  /** Register a new bitfield with a containing bit structure.  The\n   * resulting bitfield is returned.\n   *\n   * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n   *\n   * @param {string} property - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @return {BitField} */\n  addField(bits, property) {\n    const bf = new BitField(this, bits, property);\n    this.fields.push(bf);\n    return bf;\n  }\n\n  /** As with {@link BitStructure#addField|addField} for single-bit\n   * fields with `boolean` value representation.\n   *\n   * @param {string} property - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @return {Boolean} */\n  addBoolean(property) {\n    // This is my Boolean, not the Javascript one.\n    // eslint-disable-next-line no-new-wrappers\n    const bf = new Boolean(this, property);\n    this.fields.push(bf);\n    return bf;\n  }\n\n  /**\n   * Get access to the bit field for a given property.\n   *\n   * @param {String} property - the bit field of interest.\n   *\n   * @return {BitField} - the field associated with `property`, or\n   * undefined if there is no such property.\n   */\n  fieldFor(property) {\n    if ('string' !== typeof property) {\n      throw new TypeError('property must be string');\n    }\n    for (const fd of this.fields) {\n      if (fd.property === property) {\n        return fd;\n      }\n    }\n  }\n}\n\n/**\n * Represent a sequence of bits within a {@link BitStructure}.\n *\n * All bit field values are represented as unsigned integers.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addField|addField} helper\n * method.\n *\n * **NOTE** BitField instances are not instances of {@link Layout}\n * since {@link Layout#span|span} measures 8-bit units.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n */\nclass BitField {\n  constructor(container, bits, property) {\n    if (!(container instanceof BitStructure)) {\n      throw new TypeError('container must be a BitStructure');\n    }\n    if ((!Number.isInteger(bits)) || (0 >= bits)) {\n      throw new TypeError('bits must be positive integer');\n    }\n    const totalBits = 8 * container.span;\n    const usedBits = container.fields.reduce((sum, fd) => sum + fd.bits, 0);\n    if ((bits + usedBits) > totalBits) {\n      throw new Error('bits too long for span remainder ('\n                      + (totalBits - usedBits) + ' of '\n                      + totalBits + ' remain)');\n    }\n\n    /** The {@link BitStructure} instance to which this bit field\n     * belongs. */\n    this.container = container;\n\n    /** The span of this value in bits. */\n    this.bits = bits;\n\n    /** A mask of {@link BitField#bits|bits} bits isolating value bits\n     * that fit within the field.\n     *\n     * That is, it masks a value that has not yet been shifted into\n     * position within its containing packed integer. */\n    this.valueMask = (1 << bits) - 1;\n    if (32 === bits) { // shifted value out of range\n      this.valueMask = 0xFFFFFFFF;\n    }\n\n    /** The offset of the value within the containing packed unsigned\n     * integer.  The least significant bit of the packed value is at\n     * offset zero, regardless of bit ordering used. */\n    this.start = usedBits;\n    if (this.container.msb) {\n      this.start = totalBits - usedBits - bits;\n    }\n\n    /** A mask of {@link BitField#bits|bits} isolating the field value\n     * within the containing packed unsigned integer. */\n    this.wordMask = fixBitwiseResult(this.valueMask << this.start);\n\n    /** The property name used when this bitfield is represented in an\n     * Object.\n     *\n     * Intended to be functionally equivalent to {@link\n     * Layout#property}.\n     *\n     * If left undefined the corresponding span of bits will be\n     * treated as padding: it will not be mutated by {@link\n     * Layout#encode|encode} nor represented as a property in the\n     * decoded Object. */\n    this.property = property;\n  }\n\n  /** Store a value into the corresponding subsequence of the containing\n   * bit field. */\n  decode() {\n    const word = this.container._packedGetValue();\n    const wordValue = fixBitwiseResult(word & this.wordMask);\n    const value = wordValue >>> this.start;\n    return value;\n  }\n\n  /** Store a value into the corresponding subsequence of the containing\n   * bit field.\n   *\n   * **NOTE** This is not a specialization of {@link\n   * Layout#encode|Layout.encode} and there is no return value. */\n  encode(value) {\n    if ((!Number.isInteger(value))\n        || (value !== fixBitwiseResult(value & this.valueMask))) {\n      throw new TypeError(nameWithProperty('BitField.encode', this)\n                          + ' value must be integer not exceeding ' + this.valueMask);\n    }\n    const word = this.container._packedGetValue();\n    const wordValue = fixBitwiseResult(value << this.start);\n    this.container._packedSetValue(fixBitwiseResult(word & ~this.wordMask)\n                                   | wordValue);\n  };\n}\n\n/**\n * Represent a single bit within a {@link BitStructure} as a\n * JavaScript boolean.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addBoolean|addBoolean} helper\n * method.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {BitField}\n */\n/* eslint-disable no-extend-native */\nclass Boolean extends BitField {\n  constructor(container, property) {\n    super(container, 1, property);\n  }\n\n  /** Override {@link BitField#decode|decode} for {@link Boolean|Boolean}.\n   *\n   * @returns {boolean} */\n  decode(b, offset) {\n    return !!BitField.prototype.decode.call(this, b, offset);\n  }\n\n  /** @override */\n  encode(value) {\n    if ('boolean' === typeof value) {\n      // BitField requires integer values\n      value = +value;\n    }\n    return BitField.prototype.encode.call(this, value);\n  }\n}\n/* eslint-enable no-extend-native */\n\n/**\n * Contain a fixed-length block of arbitrary data, represented as a\n * Buffer.\n *\n * *Factory*: {@link module:Layout.blob|blob}\n *\n * @param {(Number|ExternalLayout)} length - initializes {@link\n * Blob#length|length}.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Blob extends Layout {\n  constructor(length, property) {\n    if (!(((length instanceof ExternalLayout) && length.isCount())\n          || (Number.isInteger(length) && (0 <= length)))) {\n      throw new TypeError('length must be positive integer '\n                          + 'or an unsigned integer ExternalLayout');\n    }\n\n    let span = -1;\n    if (!(length instanceof ExternalLayout)) {\n      span = length;\n    }\n    super(span, property);\n\n    /** The number of bytes in the blob.\n     *\n     * This may be a non-negative integer, or an instance of {@link\n     * ExternalLayout} that satisfies {@link\n     * ExternalLayout#isCount|isCount()}. */\n    this.length = length;\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    let span = this.span;\n    if (0 > span) {\n      span = this.length.decode(b, offset);\n    }\n    return span;\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let span = this.span;\n    if (0 > span) {\n      span = this.length.decode(b, offset);\n    }\n    return b.slice(offset, offset + span);\n  }\n\n  /** Implement {@link Layout#encode|encode} for {@link Blob}.\n   *\n   * **NOTE** If {@link Layout#count|count} is an instance of {@link\n   * ExternalLayout} then the length of `src` will be encoded as the\n   * count after `src` is encoded. */\n  encode(src, b, offset) {\n    let span = this.length;\n    if (this.length instanceof ExternalLayout) {\n      span = src.length;\n    }\n    if (!(Buffer.isBuffer(src)\n          && (span === src.length))) {\n      throw new TypeError(nameWithProperty('Blob.encode', this)\n                          + ' requires (length ' + span + ') Buffer as src');\n    }\n    if ((offset + span) > b.length) {\n      throw new RangeError('encoding overruns Buffer');\n    }\n    b.write(src.toString('hex'), offset, span, 'hex');\n    if (this.length instanceof ExternalLayout) {\n      this.length.encode(span, b, offset);\n    }\n    return span;\n  }\n}\n\n/**\n * Contain a `NUL`-terminated UTF8 string.\n *\n * *Factory*: {@link module:Layout.cstr|cstr}\n *\n * **NOTE** Any UTF8 string that incorporates a zero-valued byte will\n * not be correctly decoded by this layout.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass CString extends Layout {\n  constructor(property) {\n    super(-1, property);\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    if (!Buffer.isBuffer(b)) {\n      throw new TypeError('b must be a Buffer');\n    }\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let idx = offset;\n    while ((idx < b.length) && (0 !== b[idx])) {\n      idx += 1;\n    }\n    return 1 + idx - offset;\n  }\n\n  /** @override */\n  decode(b, offset, dest) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let span = this.getSpan(b, offset);\n    return b.slice(offset, offset + span - 1).toString('utf-8');\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    /* Must force this to a string, lest it be a number and the\n     * \"utf8-encoding\" below actually allocate a buffer of length\n     * src */\n    if ('string' !== typeof src) {\n      src = src.toString();\n    }\n    const srcb = new Buffer(src, 'utf8');\n    const span = srcb.length;\n    if ((offset + span) > b.length) {\n      throw new RangeError('encoding overruns Buffer');\n    }\n    srcb.copy(b, offset);\n    b[offset + span] = 0;\n    return span + 1;\n  }\n}\n\n/**\n * Contain a UTF8 string with implicit length.\n *\n * *Factory*: {@link module:Layout.utf8|utf8}\n *\n * **NOTE** Because the length is implicit in the size of the buffer\n * this layout should be used only in isolation, or in a situation\n * where the length can be expressed by operating on a slice of the\n * containing buffer.\n *\n * @param {Number} [maxSpan] - the maximum length allowed for encoded\n * string content.  If not provided there is no bound on the allowed\n * content.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UTF8 extends Layout {\n  constructor(maxSpan, property) {\n    if (('string' === typeof maxSpan)\n        && (undefined === property)) {\n      property = maxSpan;\n      maxSpan = undefined;\n    }\n    if (undefined === maxSpan) {\n      maxSpan = -1;\n    } else if (!Number.isInteger(maxSpan)) {\n      throw new TypeError('maxSpan must be an integer');\n    }\n\n    super(-1, property);\n\n    /** The maximum span of the layout in bytes.\n     *\n     * Positive values are generally expected.  Zero is abnormal.\n     * Attempts to encode or decode a value that exceeds this length\n     * will throw a `RangeError`.\n     *\n     * A negative value indicates that there is no bound on the length\n     * of the content. */\n    this.maxSpan = maxSpan;\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    if (!Buffer.isBuffer(b)) {\n      throw new TypeError('b must be a Buffer');\n    }\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.length - offset;\n  }\n\n  /** @override */\n  decode(b, offset, dest) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let span = this.getSpan(b, offset);\n    if ((0 <= this.maxSpan)\n        && (this.maxSpan < span)) {\n      throw new RangeError('text length exceeds maxSpan');\n    }\n    return b.slice(offset, offset + span).toString('utf-8');\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    /* Must force this to a string, lest it be a number and the\n     * \"utf8-encoding\" below actually allocate a buffer of length\n     * src */\n    if ('string' !== typeof src) {\n      src = src.toString();\n    }\n    const srcb = new Buffer(src, 'utf8');\n    const span = srcb.length;\n    if ((0 <= this.maxSpan)\n        && (this.maxSpan < span)) {\n      throw new RangeError('text length exceeds maxSpan');\n    }\n    if ((offset + span) > b.length) {\n      throw new RangeError('encoding overruns Buffer');\n    }\n    srcb.copy(b, offset);\n    return span;\n  }\n}\n\n/**\n * Contain a constant value.\n *\n * This layout may be used in cases where a JavaScript value can be\n * inferred without an expression in the binary encoding.  An example\n * would be a {@link VariantLayout|variant layout} where the content\n * is implied by the union {@link Union#discriminator|discriminator}.\n *\n * @param {Object|Number|String} value - initializer for {@link\n * Constant#value|value}.  If the value is an object (or array) and\n * the application intends the object to remain unchanged regardless\n * of what is done to values decoded by this layout, the value should\n * be frozen prior passing it to this constructor.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Constant extends Layout {\n  constructor(value, property) {\n    super(0, property);\n\n    /** The value produced by this constant when the layout is {@link\n     * Constant#decode|decoded}.\n     *\n     * Any JavaScript value including `null` and `undefined` is\n     * permitted.\n     *\n     * **WARNING** If `value` passed in the constructor was not\n     * frozen, it is possible for users of decoded values to change\n     * the content of the value. */\n    this.value = value;\n  }\n\n  /** @override */\n  decode(b, offset, dest) {\n    return this.value;\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    /* Constants take no space */\n    return 0;\n  }\n}\n\nexports.ExternalLayout = ExternalLayout;\nexports.GreedyCount = GreedyCount;\nexports.OffsetLayout = OffsetLayout;\nexports.UInt = UInt;\nexports.UIntBE = UIntBE;\nexports.Int = Int;\nexports.IntBE = IntBE;\nexports.Float = Float;\nexports.FloatBE = FloatBE;\nexports.Double = Double;\nexports.DoubleBE = DoubleBE;\nexports.Sequence = Sequence;\nexports.Structure = Structure;\nexports.UnionDiscriminator = UnionDiscriminator;\nexports.UnionLayoutDiscriminator = UnionLayoutDiscriminator;\nexports.Union = Union;\nexports.VariantLayout = VariantLayout;\nexports.BitStructure = BitStructure;\nexports.BitField = BitField;\nexports.Boolean = Boolean;\nexports.Blob = Blob;\nexports.CString = CString;\nexports.UTF8 = UTF8;\nexports.Constant = Constant;\n\n/** Factory for {@link GreedyCount}. */\nexports.greedy = ((elementSpan, property) => new GreedyCount(elementSpan, property));\n\n/** Factory for {@link OffsetLayout}. */\nexports.offset = ((layout, offset, property) => new OffsetLayout(layout, offset, property));\n\n/** Factory for {@link UInt|unsigned int layouts} spanning one\n * byte. */\nexports.u8 = (property => new UInt(1, property));\n\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning two bytes. */\nexports.u16 = (property => new UInt(2, property));\n\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning three bytes. */\nexports.u24 = (property => new UInt(3, property));\n\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning four bytes. */\nexports.u32 = (property => new UInt(4, property));\n\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning five bytes. */\nexports.u40 = (property => new UInt(5, property));\n\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning six bytes. */\nexports.u48 = (property => new UInt(6, property));\n\n/** Factory for {@link NearUInt64|little-endian unsigned int\n * layouts} interpreted as Numbers. */\nexports.nu64 = (property => new NearUInt64(property));\n\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning two bytes. */\nexports.u16be = (property => new UIntBE(2, property));\n\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning three bytes. */\nexports.u24be = (property => new UIntBE(3, property));\n\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning four bytes. */\nexports.u32be = (property => new UIntBE(4, property));\n\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning five bytes. */\nexports.u40be = (property => new UIntBE(5, property));\n\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning six bytes. */\nexports.u48be = (property => new UIntBE(6, property));\n\n/** Factory for {@link NearUInt64BE|big-endian unsigned int\n * layouts} interpreted as Numbers. */\nexports.nu64be = (property => new NearUInt64BE(property));\n\n/** Factory for {@link Int|signed int layouts} spanning one\n * byte. */\nexports.s8 = (property => new Int(1, property));\n\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning two bytes. */\nexports.s16 = (property => new Int(2, property));\n\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning three bytes. */\nexports.s24 = (property => new Int(3, property));\n\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning four bytes. */\nexports.s32 = (property => new Int(4, property));\n\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning five bytes. */\nexports.s40 = (property => new Int(5, property));\n\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning six bytes. */\nexports.s48 = (property => new Int(6, property));\n\n/** Factory for {@link NearInt64|little-endian signed int layouts}\n * interpreted as Numbers. */\nexports.ns64 = (property => new NearInt64(property));\n\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning two bytes. */\nexports.s16be = (property => new IntBE(2, property));\n\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning three bytes. */\nexports.s24be = (property => new IntBE(3, property));\n\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning four bytes. */\nexports.s32be = (property => new IntBE(4, property));\n\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning five bytes. */\nexports.s40be = (property => new IntBE(5, property));\n\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning six bytes. */\nexports.s48be = (property => new IntBE(6, property));\n\n/** Factory for {@link NearInt64BE|big-endian signed int layouts}\n * interpreted as Numbers. */\nexports.ns64be = (property => new NearInt64BE(property));\n\n/** Factory for {@link Float|little-endian 32-bit floating point} values. */\nexports.f32 = (property => new Float(property));\n\n/** Factory for {@link FloatBE|big-endian 32-bit floating point} values. */\nexports.f32be = (property => new FloatBE(property));\n\n/** Factory for {@link Double|little-endian 64-bit floating point} values. */\nexports.f64 = (property => new Double(property));\n\n/** Factory for {@link DoubleBE|big-endian 64-bit floating point} values. */\nexports.f64be = (property => new DoubleBE(property));\n\n/** Factory for {@link Structure} values. */\nexports.struct = ((fields, property, decodePrefixes) => new Structure(fields, property, decodePrefixes));\n\n/** Factory for {@link BitStructure} values. */\nexports.bits = ((word, msb, property) => new BitStructure(word, msb, property));\n\n/** Factory for {@link Sequence} values. */\nexports.seq = ((elementLayout, count, property) => new Sequence(elementLayout, count, property));\n\n/** Factory for {@link Union} values. */\nexports.union = ((discr, defaultLayout, property) => new Union(discr, defaultLayout, property));\n\n/** Factory for {@link UnionLayoutDiscriminator} values. */\nexports.unionLayoutDiscriminator = ((layout, property) => new UnionLayoutDiscriminator(layout, property));\n\n/** Factory for {@link Blob} values. */\nexports.blob = ((length, property) => new Blob(length, property));\n\n/** Factory for {@link CString} values. */\nexports.cstr = (property => new CString(property));\n\n/** Factory for {@link UTF8} values. */\nexports.utf8 = ((maxSpan, property) => new UTF8(maxSpan, property));\n\n/** Factory for {@link Constant} values. */\nexports.const = ((value, property) => new Constant(value, property));\n","import { blob, Layout as LayoutCls, offset, seq, struct, u32, u8 } from 'buffer-layout';\nimport { PublicKey } from '@solana/web3.js';\nimport BN from 'bn.js';\n\nexport interface Layout<T> {\n  span: number;\n  property?: string;\n\n  decode(b: Buffer, offset?: number): T;\n\n  encode(src: T, b: Buffer, offset?: number): number;\n\n  getSpan(b: Buffer, offset?: number): number;\n\n  replicate(name: string): this;\n}\n\nclass BNLayout extends LayoutCls<BN> {\n  blob: Layout<Buffer>;\n  signed: boolean;\n\n  constructor(span: number, signed: boolean, property?: string) {\n    super(span, property);\n    this.blob = blob(span);\n    this.signed = signed;\n  }\n\n  decode(b: Buffer, offset = 0) {\n    const num = new BN(this.blob.decode(b, offset), 10, 'le');\n    if (this.signed) {\n      return num.fromTwos(this.span * 8).clone();\n    }\n    return num;\n  }\n\n  encode(src: BN, b: Buffer, offset = 0) {\n    if (this.signed) {\n      src = src.toTwos(this.span * 8);\n    }\n    return this.blob.encode(src.toArrayLike(Buffer, 'le', this.span), b, offset);\n  }\n}\n\nexport function u64(property?: string): Layout<BN> {\n  return new BNLayout(8, false, property);\n}\n\nclass WrappedLayout<T, U> extends LayoutCls<U> {\n  layout: Layout<T>;\n  decoder: (data: T) => U;\n  encoder: (src: U) => T;\n\n  constructor(\n    layout: Layout<T>,\n    decoder: (data: T) => U,\n    encoder: (src: U) => T,\n    property?: string,\n  ) {\n    super(layout.span, property);\n    this.layout = layout;\n    this.decoder = decoder;\n    this.encoder = encoder;\n  }\n\n  decode(b: Buffer, offset?: number): U {\n    return this.decoder(this.layout.decode(b, offset));\n  }\n\n  encode(src: U, b: Buffer, offset?: number): number {\n    return this.layout.encode(this.encoder(src), b, offset);\n  }\n\n  getSpan(b: Buffer, offset?: number): number {\n    return this.layout.getSpan(b, offset);\n  }\n}\n\nexport function publicKey(property?: string): Layout<PublicKey> {\n  return new WrappedLayout(\n    blob(32),\n    (b: Buffer) => new PublicKey(b),\n    (key: PublicKey) => key.toBuffer(),\n    property,\n  );\n}\n\nclass OptionLayout<T> extends LayoutCls<T | null> {\n  layout: Layout<T>;\n  discriminator: Layout<number>;\n\n  constructor(layout: Layout<T>, property?: string) {\n    super(-1, property);\n    this.layout = layout;\n    this.discriminator = u8();\n  }\n\n  encode(src: T | null, b: Buffer, offset = 0): number {\n    if (src === null || src === undefined) {\n      return this.discriminator.encode(0, b, offset);\n    }\n    this.discriminator.encode(1, b, offset);\n    return this.layout.encode(src, b, offset + 1) + 1;\n  }\n\n  decode(b: Buffer, offset = 0): T | null {\n    const discriminator = this.discriminator.decode(b, offset);\n    if (discriminator === 0) {\n      return null;\n    } else if (discriminator === 1) {\n      return this.layout.decode(b, offset + 1);\n    }\n    throw new Error('Invalid option ' + this.property);\n  }\n\n  getSpan(b: Buffer, offset = 0): number {\n    const discriminator = this.discriminator.decode(b, offset);\n    if (discriminator === 0) {\n      return 1;\n    } else if (discriminator === 1) {\n      return this.layout.getSpan(b, offset + 1) + 1;\n    }\n    throw new Error('Invalid option ' + this.property);\n  }\n}\n\nexport function option<T>(layout: Layout<T>, property?: string): Layout<T | null> {\n  return new OptionLayout<T>(layout, property);\n}\n\nexport function bool(property?: string): Layout<boolean> {\n  return new WrappedLayout(u8(), decodeBool, encodeBool, property);\n}\n\nfunction decodeBool(value: number): boolean {\n  if (value === 0) {\n    return false;\n  } else if (value === 1) {\n    return true;\n  }\n  throw new Error('Invalid bool: ' + value);\n}\n\nfunction encodeBool(value: boolean): number {\n  return value ? 1 : 0;\n}\n\nexport function vec<T>(elementLayout: Layout<T>, property?: string): Layout<T[]> {\n  const length = u32('length');\n  const layout: Layout<{ values: T[] }> = struct([\n    length,\n    seq(elementLayout, offset(length, -length.span), 'values'),\n  ]);\n  return new WrappedLayout(\n    layout,\n    ({ values }) => values,\n    (values) => ({ values }),\n    property,\n  );\n}\n","import { Layout, publicKey, u64, option, vec } from './codecs';\nimport { struct, Layout as LayoutCls, u8, u32 } from 'buffer-layout';\nimport { PublicKey } from '@solana/web3.js';\nimport BN from 'bn.js';\nimport {\n  Infer,\n  number,\n  nullable,\n  enums,\n  type,\n  coerce,\n  instance,\n  string,\n  optional,\n} from 'superstruct';\n\nexport interface Fee {\n  denominator: BN;\n  numerator: BN;\n}\n\nconst feeFields = [u64('denominator'), u64('numerator')];\n\nexport enum AccountType {\n  Uninitialized,\n  StakePool,\n  ValidatorList,\n}\n\nexport const BigNumFromString = coerce(instance(BN), string(), (value) => {\n  if (typeof value === 'string') return new BN(value, 10);\n  throw new Error('invalid big num');\n});\n\nexport const PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  (value) => new PublicKey(value),\n);\n\nexport class FutureEpochLayout<T> extends LayoutCls<T | null> {\n  layout: Layout<T>;\n  discriminator: Layout<number>;\n\n  constructor(layout: Layout<T>, property?: string) {\n    super(-1, property);\n    this.layout = layout;\n    this.discriminator = u8();\n  }\n\n  encode(src: T | null, b: Buffer, offset = 0): number {\n    if (src === null || src === undefined) {\n      return this.discriminator.encode(0, b, offset);\n    }\n    // This isn't right, but we don't typically encode outside of tests\n    this.discriminator.encode(2, b, offset);\n    return this.layout.encode(src, b, offset + 1) + 1;\n  }\n\n  decode(b: Buffer, offset = 0): T | null {\n    const discriminator = this.discriminator.decode(b, offset);\n    if (discriminator === 0) {\n      return null;\n    } else if (discriminator === 1 || discriminator === 2) {\n      return this.layout.decode(b, offset + 1);\n    }\n    throw new Error('Invalid future epoch ' + this.property);\n  }\n\n  getSpan(b: Buffer, offset = 0): number {\n    const discriminator = this.discriminator.decode(b, offset);\n    if (discriminator === 0) {\n      return 1;\n    } else if (discriminator === 1 || discriminator === 2) {\n      return this.layout.getSpan(b, offset + 1) + 1;\n    }\n    throw new Error('Invalid future epoch ' + this.property);\n  }\n}\n\nexport function futureEpoch<T>(layout: Layout<T>, property?: string): LayoutCls<T | null> {\n  return new FutureEpochLayout<T>(layout, property);\n}\n\nexport type StakeAccountType = Infer<typeof StakeAccountType>;\nexport const StakeAccountType = enums(['uninitialized', 'initialized', 'delegated', 'rewardsPool']);\n\nexport type StakeMeta = Infer<typeof StakeMeta>;\nexport const StakeMeta = type({\n  rentExemptReserve: BigNumFromString,\n  authorized: type({\n    staker: PublicKeyFromString,\n    withdrawer: PublicKeyFromString,\n  }),\n  lockup: type({\n    unixTimestamp: number(),\n    epoch: number(),\n    custodian: PublicKeyFromString,\n  }),\n});\n\nexport type StakeAccountInfo = Infer<typeof StakeAccountInfo>;\nexport const StakeAccountInfo = type({\n  meta: StakeMeta,\n  stake: nullable(\n    type({\n      delegation: type({\n        voter: PublicKeyFromString,\n        stake: BigNumFromString,\n        activationEpoch: BigNumFromString,\n        deactivationEpoch: BigNumFromString,\n        warmupCooldownRate: number(),\n      }),\n      creditsObserved: number(),\n    }),\n  ),\n});\n\nexport type StakeAccount = Infer<typeof StakeAccount>;\nexport const StakeAccount = type({\n  type: StakeAccountType,\n  info: optional(StakeAccountInfo),\n});\nexport interface Lockup {\n  unixTimestamp: BN;\n  epoch: BN;\n  custodian: PublicKey;\n}\n\nexport interface StakePool {\n  accountType: AccountType;\n  manager: PublicKey;\n  staker: PublicKey;\n  stakeDepositAuthority: PublicKey;\n  stakeWithdrawBumpSeed: number;\n  validatorList: PublicKey;\n  reserveStake: PublicKey;\n  poolMint: PublicKey;\n  managerFeeAccount: PublicKey;\n  tokenProgramId: PublicKey;\n  totalLamports: BN;\n  poolTokenSupply: BN;\n  lastUpdateEpoch: BN;\n  lockup: Lockup;\n  epochFee: Fee;\n  nextEpochFee?: Fee | undefined;\n  preferredDepositValidatorVoteAddress?: PublicKey | undefined;\n  preferredWithdrawValidatorVoteAddress?: PublicKey | undefined;\n  stakeDepositFee: Fee;\n  stakeWithdrawalFee: Fee;\n  nextStakeWithdrawalFee?: Fee | undefined;\n  stakeReferralFee: number;\n  solDepositAuthority?: PublicKey | undefined;\n  solDepositFee: Fee;\n  solReferralFee: number;\n  solWithdrawAuthority?: PublicKey | undefined;\n  solWithdrawalFee: Fee;\n  nextSolWithdrawalFee?: Fee | undefined;\n  lastEpochPoolTokenSupply: BN;\n  lastEpochTotalLamports: BN;\n}\n\nexport const StakePoolLayout = struct<StakePool>([\n  u8('accountType'),\n  publicKey('manager'),\n  publicKey('staker'),\n  publicKey('stakeDepositAuthority'),\n  u8('stakeWithdrawBumpSeed'),\n  publicKey('validatorList'),\n  publicKey('reserveStake'),\n  publicKey('poolMint'),\n  publicKey('managerFeeAccount'),\n  publicKey('tokenProgramId'),\n  u64('totalLamports'),\n  u64('poolTokenSupply'),\n  u64('lastUpdateEpoch'),\n  struct([u64('unixTimestamp'), u64('epoch'), publicKey('custodian')], 'lockup'),\n  struct(feeFields, 'epochFee'),\n  futureEpoch(struct(feeFields), 'nextEpochFee'),\n  option(publicKey(), 'preferredDepositValidatorVoteAddress'),\n  option(publicKey(), 'preferredWithdrawValidatorVoteAddress'),\n  struct(feeFields, 'stakeDepositFee'),\n  struct(feeFields, 'stakeWithdrawalFee'),\n  futureEpoch(struct(feeFields), 'nextStakeWithdrawalFee'),\n  u8('stakeReferralFee'),\n  option(publicKey(), 'solDepositAuthority'),\n  struct(feeFields, 'solDepositFee'),\n  u8('solReferralFee'),\n  option(publicKey(), 'solWithdrawAuthority'),\n  struct(feeFields, 'solWithdrawalFee'),\n  futureEpoch(struct(feeFields), 'nextSolWithdrawalFee'),\n  u64('lastEpochPoolTokenSupply'),\n  u64('lastEpochTotalLamports'),\n]);\n\nexport enum ValidatorStakeInfoStatus {\n  Active,\n  DeactivatingTransient,\n  ReadyForRemoval,\n}\n\nexport interface ValidatorStakeInfo {\n  status: ValidatorStakeInfoStatus;\n  voteAccountAddress: PublicKey;\n  activeStakeLamports: BN;\n  transientStakeLamports: BN;\n  transientSeedSuffixStart: BN;\n  transientSeedSuffixEnd: BN;\n  lastUpdateEpoch: BN;\n}\n\nexport const ValidatorStakeInfoLayout = struct<ValidatorStakeInfo>([\n  /// Amount of active stake delegated to this validator\n  /// Note that if `last_update_epoch` does not match the current epoch then\n  /// this field may not be accurate\n  u64('activeStakeLamports'),\n  /// Amount of transient stake delegated to this validator\n  /// Note that if `last_update_epoch` does not match the current epoch then\n  /// this field may not be accurate\n  u64('transientStakeLamports'),\n  /// Last epoch the active and transient stake lamports fields were updated\n  u64('lastUpdateEpoch'),\n  /// Start of the validator transient account seed suffixes\n  u64('transientSeedSuffixStart'),\n  /// End of the validator transient account seed suffixes\n  u64('transientSeedSuffixEnd'),\n  /// Status of the validator stake account\n  u8('status'),\n  /// Validator vote account address\n  publicKey('voteAccountAddress'),\n]);\n\nexport interface ValidatorList {\n  /// Account type, must be ValidatorList currently\n  accountType: number;\n  /// Maximum allowable number of validators\n  maxValidators: number;\n  /// List of stake info for each validator in the pool\n  validators: ValidatorStakeInfo[];\n}\n\nexport const ValidatorListLayout = struct<ValidatorList>([\n  u8('accountType'),\n  u32('maxValidators'),\n  vec(ValidatorStakeInfoLayout, 'validators'),\n]);\n","import {\n  Connection,\n  Keypair,\n  PublicKey,\n  StakeProgram,\n  SystemProgram,\n  TransactionInstruction,\n} from '@solana/web3.js';\nimport { findStakeProgramAddress, findTransientStakeProgramAddress } from './program-address';\nimport BN from 'bn.js';\n\nimport { lamportsToSol } from './math';\nimport { WithdrawAccount } from '../index';\nimport {\n  Fee,\n  StakePool,\n  ValidatorList,\n  ValidatorListLayout,\n  ValidatorStakeInfoStatus,\n} from '../layouts';\nimport { MINIMUM_ACTIVE_STAKE, STAKE_POOL_PROGRAM_ID } from '../constants';\n\nexport async function getValidatorListAccount(connection: Connection, pubkey: PublicKey) {\n  const account = await connection.getAccountInfo(pubkey);\n  if (!account) {\n    throw new Error('Invalid validator list account');\n  }\n\n  return {\n    pubkey,\n    account: {\n      data: ValidatorListLayout.decode(account?.data) as ValidatorList,\n      executable: account.executable,\n      lamports: account.lamports,\n      owner: account.owner,\n    },\n  };\n}\n\nexport interface ValidatorAccount {\n  type: 'preferred' | 'active' | 'transient' | 'reserve';\n  voteAddress?: PublicKey | undefined;\n  stakeAddress: PublicKey;\n  lamports: BN;\n}\n\nexport async function prepareWithdrawAccounts(\n  connection: Connection,\n  stakePool: StakePool,\n  stakePoolAddress: PublicKey,\n  amount: BN,\n  compareFn?: (a: ValidatorAccount, b: ValidatorAccount) => number,\n  skipFee?: boolean,\n): Promise<WithdrawAccount[]> {\n  const validatorListAcc = await connection.getAccountInfo(stakePool.validatorList);\n  const validatorList = ValidatorListLayout.decode(validatorListAcc?.data) as ValidatorList;\n\n  if (!validatorList?.validators || validatorList?.validators.length == 0) {\n    throw new Error('No accounts found');\n  }\n\n  const minBalanceForRentExemption = await connection.getMinimumBalanceForRentExemption(\n    StakeProgram.space,\n  );\n  const minBalance = new BN(minBalanceForRentExemption + MINIMUM_ACTIVE_STAKE);\n\n  let accounts = [] as Array<{\n    type: 'preferred' | 'active' | 'transient' | 'reserve';\n    voteAddress?: PublicKey | undefined;\n    stakeAddress: PublicKey;\n    lamports: BN;\n  }>;\n\n  // Prepare accounts\n  for (const validator of validatorList.validators) {\n    if (validator.status !== ValidatorStakeInfoStatus.Active) {\n      continue;\n    }\n\n    const stakeAccountAddress = await findStakeProgramAddress(\n      STAKE_POOL_PROGRAM_ID,\n      validator.voteAccountAddress,\n      stakePoolAddress,\n    );\n\n    if (!validator.activeStakeLamports.isZero()) {\n      const isPreferred = stakePool?.preferredWithdrawValidatorVoteAddress?.equals(\n        validator.voteAccountAddress,\n      );\n      accounts.push({\n        type: isPreferred ? 'preferred' : 'active',\n        voteAddress: validator.voteAccountAddress,\n        stakeAddress: stakeAccountAddress,\n        lamports: validator.activeStakeLamports,\n      });\n    }\n\n    const transientStakeLamports = validator.transientStakeLamports.sub(minBalance);\n    if (transientStakeLamports.gt(new BN(0))) {\n      const transientStakeAccountAddress = await findTransientStakeProgramAddress(\n        STAKE_POOL_PROGRAM_ID,\n        validator.voteAccountAddress,\n        stakePoolAddress,\n        validator.transientSeedSuffixStart,\n      );\n      accounts.push({\n        type: 'transient',\n        voteAddress: validator.voteAccountAddress,\n        stakeAddress: transientStakeAccountAddress,\n        lamports: transientStakeLamports,\n      });\n    }\n  }\n\n  // Sort from highest to lowest balance\n  accounts = accounts.sort(compareFn ? compareFn : (a, b) => b.lamports.sub(a.lamports).toNumber());\n\n  const reserveStake = await connection.getAccountInfo(stakePool.reserveStake);\n  const reserveStakeBalance = new BN((reserveStake?.lamports ?? 0) - minBalanceForRentExemption);\n  if (reserveStakeBalance.gt(new BN(0))) {\n    accounts.push({\n      type: 'reserve',\n      stakeAddress: stakePool.reserveStake,\n      lamports: reserveStakeBalance,\n    });\n  }\n\n  // Prepare the list of accounts to withdraw from\n  const withdrawFrom: WithdrawAccount[] = [];\n  let remainingAmount = new BN(amount);\n\n  const fee = stakePool.stakeWithdrawalFee;\n  const inverseFee: Fee = {\n    numerator: fee.denominator.sub(fee.numerator),\n    denominator: fee.denominator,\n  };\n\n  for (const type of ['preferred', 'active', 'transient', 'reserve']) {\n    const filteredAccounts = accounts.filter((a) => a.type == type);\n\n    for (const { stakeAddress, voteAddress, lamports } of filteredAccounts) {\n      if (lamports.lte(minBalance) && type == 'transient') {\n        continue;\n      }\n\n      let availableForWithdrawal = calcPoolTokensForDeposit(stakePool, lamports);\n\n      if (!skipFee && !inverseFee.numerator.isZero()) {\n        availableForWithdrawal = availableForWithdrawal\n          .mul(inverseFee.denominator)\n          .div(inverseFee.numerator);\n      }\n\n      const poolAmount = BN.min(availableForWithdrawal, remainingAmount);\n      if (poolAmount.lte(new BN(0))) {\n        continue;\n      }\n\n      // Those accounts will be withdrawn completely with `claim` instruction\n      withdrawFrom.push({ stakeAddress, voteAddress, poolAmount });\n      remainingAmount = remainingAmount.sub(poolAmount);\n\n      if (remainingAmount.isZero()) {\n        break;\n      }\n    }\n\n    if (remainingAmount.isZero()) {\n      break;\n    }\n  }\n\n  // Not enough stake to withdraw the specified amount\n  if (remainingAmount.gt(new BN(0))) {\n    throw new Error(\n      `No stake accounts found in this pool with enough balance to withdraw ${lamportsToSol(\n        amount,\n      )} pool tokens.`,\n    );\n  }\n\n  return withdrawFrom;\n}\n\n/**\n * Calculate the pool tokens that should be minted for a deposit of `stakeLamports`\n */\nexport function calcPoolTokensForDeposit(stakePool: StakePool, stakeLamports: BN): BN {\n  if (stakePool.poolTokenSupply.isZero() || stakePool.totalLamports.isZero()) {\n    return stakeLamports;\n  }\n  const numerator = stakeLamports.mul(stakePool.poolTokenSupply);\n  return numerator.div(stakePool.totalLamports);\n}\n\n/**\n * Calculate lamports amount on withdrawal\n */\nexport function calcLamportsWithdrawAmount(stakePool: StakePool, poolTokens: BN): BN {\n  const numerator = poolTokens.mul(stakePool.totalLamports);\n  const denominator = stakePool.poolTokenSupply;\n  if (numerator.lt(denominator)) {\n    return new BN(0);\n  }\n  return numerator.div(denominator);\n}\n\nexport function newStakeAccount(\n  feePayer: PublicKey,\n  instructions: TransactionInstruction[],\n  lamports: number,\n): Keypair {\n  // Account for tokens not specified, creating one\n  const stakeReceiverKeypair = Keypair.generate();\n  console.log(`Creating account to receive stake ${stakeReceiverKeypair.publicKey}`);\n\n  instructions.push(\n    // Creating new account\n    SystemProgram.createAccount({\n      fromPubkey: feePayer,\n      newAccountPubkey: stakeReceiverKeypair.publicKey,\n      lamports,\n      space: StakeProgram.space,\n      programId: StakeProgram.programId,\n    }),\n  );\n\n  return stakeReceiverKeypair;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport { Buffer } from 'buffer';\n\n/**\n * @internal\n */\nexport type InstructionType = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<any>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData(type: InstructionType, fields?: any): Buffer {\n  const allocLength = type.layout.span;\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({ instruction: type.index }, fields);\n  type.layout.encode(layoutFields, data);\n\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData(type: InstructionType, buffer: Buffer): any {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","export * from './math';\nexport * from './program-address';\nexport * from './stake';\nexport * from './instruction';\n\nexport function arrayChunk(array: any[], size: number): any[] {\n  const result = [];\n  for (let i = 0; i < array.length; i += size) {\n    result.push(array.slice(i, i + size));\n  }\n  return result;\n}\n","import {\n  PublicKey,\n  STAKE_CONFIG_ID,\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n  StakeProgram,\n  SystemProgram,\n  TransactionInstruction,\n} from '@solana/web3.js';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { InstructionType, encodeData, decodeData } from './utils';\nimport {\n  METADATA_MAX_NAME_LENGTH,\n  METADATA_MAX_SYMBOL_LENGTH,\n  METADATA_MAX_URI_LENGTH,\n  METADATA_PROGRAM_ID,\n  STAKE_POOL_PROGRAM_ID,\n} from './constants';\n\n/**\n * An enumeration of valid StakePoolInstructionType's\n */\nexport type StakePoolInstructionType =\n  | 'IncreaseValidatorStake'\n  | 'DecreaseValidatorStake'\n  | 'UpdateValidatorListBalance'\n  | 'UpdateStakePoolBalance'\n  | 'CleanupRemovedValidatorEntries'\n  | 'DepositStake'\n  | 'DepositSol'\n  | 'WithdrawStake'\n  | 'WithdrawSol'\n  | 'IncreaseAdditionalValidatorStake'\n  | 'DecreaseAdditionalValidatorStake'\n  | 'DecreaseValidatorStakeWithReserve'\n  | 'Redelegate'\n  | 'AddValidatorToPool'\n  | 'RemoveValidatorFromPool';\n\n// 'UpdateTokenMetadata' and 'CreateTokenMetadata' have dynamic layouts\n\nconst MOVE_STAKE_LAYOUT = BufferLayout.struct<any>([\n  BufferLayout.u8('instruction'),\n  BufferLayout.ns64('lamports'),\n  BufferLayout.ns64('transientStakeSeed'),\n]);\n\nconst UPDATE_VALIDATOR_LIST_BALANCE_LAYOUT = BufferLayout.struct<any>([\n  BufferLayout.u8('instruction'),\n  BufferLayout.u32('startIndex'),\n  BufferLayout.u8('noMerge'),\n]);\n\nexport function tokenMetadataLayout(\n  instruction: number,\n  nameLength: number,\n  symbolLength: number,\n  uriLength: number,\n) {\n  if (nameLength > METADATA_MAX_NAME_LENGTH) {\n    throw 'maximum token name length is 32 characters';\n  }\n\n  if (symbolLength > METADATA_MAX_SYMBOL_LENGTH) {\n    throw 'maximum token symbol length is 10 characters';\n  }\n\n  if (uriLength > METADATA_MAX_URI_LENGTH) {\n    throw 'maximum token uri length is 200 characters';\n  }\n\n  return {\n    index: instruction,\n    layout: BufferLayout.struct<any>([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('nameLen'),\n      BufferLayout.blob(nameLength, 'name'),\n      BufferLayout.u32('symbolLen'),\n      BufferLayout.blob(symbolLength, 'symbol'),\n      BufferLayout.u32('uriLen'),\n      BufferLayout.blob(uriLength, 'uri'),\n    ]),\n  };\n}\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_POOL_INSTRUCTION_LAYOUTS: {\n  /* eslint-disable-next-line @typescript-eslint/no-unused-vars */\n  [type in StakePoolInstructionType]: InstructionType;\n} = Object.freeze({\n  AddValidatorToPool: {\n    index: 1,\n    layout: BufferLayout.struct<any>([BufferLayout.u8('instruction'), BufferLayout.u32('seed')]),\n  },\n  RemoveValidatorFromPool: {\n    index: 2,\n    layout: BufferLayout.struct<any>([BufferLayout.u8('instruction')]),\n  },\n  DecreaseValidatorStake: {\n    index: 3,\n    layout: MOVE_STAKE_LAYOUT,\n  },\n  IncreaseValidatorStake: {\n    index: 4,\n    layout: MOVE_STAKE_LAYOUT,\n  },\n  UpdateValidatorListBalance: {\n    index: 6,\n    layout: UPDATE_VALIDATOR_LIST_BALANCE_LAYOUT,\n  },\n  UpdateStakePoolBalance: {\n    index: 7,\n    layout: BufferLayout.struct<any>([BufferLayout.u8('instruction')]),\n  },\n  CleanupRemovedValidatorEntries: {\n    index: 8,\n    layout: BufferLayout.struct<any>([BufferLayout.u8('instruction')]),\n  },\n  DepositStake: {\n    index: 9,\n    layout: BufferLayout.struct<any>([BufferLayout.u8('instruction')]),\n  },\n  /// Withdraw the token from the pool at the current ratio.\n  WithdrawStake: {\n    index: 10,\n    layout: BufferLayout.struct<any>([\n      BufferLayout.u8('instruction'),\n      BufferLayout.ns64('poolTokens'),\n    ]),\n  },\n  /// Deposit SOL directly into the pool's reserve account. The output is a \"pool\" token\n  /// representing ownership into the pool. Inputs are converted to the current ratio.\n  DepositSol: {\n    index: 14,\n    layout: BufferLayout.struct<any>([\n      BufferLayout.u8('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  /// Withdraw SOL directly from the pool's reserve account. Fails if the\n  /// reserve does not have enough SOL.\n  WithdrawSol: {\n    index: 16,\n    layout: BufferLayout.struct<any>([\n      BufferLayout.u8('instruction'),\n      BufferLayout.ns64('poolTokens'),\n    ]),\n  },\n  IncreaseAdditionalValidatorStake: {\n    index: 19,\n    layout: BufferLayout.struct<any>([\n      BufferLayout.u8('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('transientStakeSeed'),\n      BufferLayout.ns64('ephemeralStakeSeed'),\n    ]),\n  },\n  DecreaseAdditionalValidatorStake: {\n    index: 20,\n    layout: BufferLayout.struct<any>([\n      BufferLayout.u8('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('transientStakeSeed'),\n      BufferLayout.ns64('ephemeralStakeSeed'),\n    ]),\n  },\n  DecreaseValidatorStakeWithReserve: {\n    index: 21,\n    layout: MOVE_STAKE_LAYOUT,\n  },\n  Redelegate: {\n    index: 22,\n    layout: BufferLayout.struct<any>([BufferLayout.u8('instruction')]),\n  },\n});\n\n/**\n * Cleans up validator stake account entries marked as `ReadyForRemoval`\n */\nexport type CleanupRemovedValidatorEntriesParams = {\n  stakePool: PublicKey;\n  validatorList: PublicKey;\n};\n\n/**\n * Updates balances of validator and transient stake accounts in the pool.\n */\nexport type UpdateValidatorListBalanceParams = {\n  stakePool: PublicKey;\n  withdrawAuthority: PublicKey;\n  validatorList: PublicKey;\n  reserveStake: PublicKey;\n  validatorAndTransientStakePairs: PublicKey[];\n  startIndex: number;\n  noMerge: boolean;\n};\n\n/**\n * Updates total pool balance based on balances in the reserve and validator list.\n */\nexport type UpdateStakePoolBalanceParams = {\n  stakePool: PublicKey;\n  withdrawAuthority: PublicKey;\n  validatorList: PublicKey;\n  reserveStake: PublicKey;\n  managerFeeAccount: PublicKey;\n  poolMint: PublicKey;\n};\n\n/**\n * (Staker only) Decrease active stake on a validator, eventually moving it to the reserve\n */\nexport type DecreaseValidatorStakeParams = {\n  stakePool: PublicKey;\n  staker: PublicKey;\n  withdrawAuthority: PublicKey;\n  validatorList: PublicKey;\n  validatorStake: PublicKey;\n  transientStake: PublicKey;\n  // Amount of lamports to split into the transient stake account\n  lamports: number;\n  // Seed to used to create the transient stake account\n  transientStakeSeed: number;\n};\n\nexport interface DecreaseValidatorStakeWithReserveParams extends DecreaseValidatorStakeParams {\n  reserveStake: PublicKey;\n}\n\nexport interface DecreaseAdditionalValidatorStakeParams extends DecreaseValidatorStakeParams {\n  reserveStake: PublicKey;\n  ephemeralStake: PublicKey;\n  ephemeralStakeSeed: number;\n}\n\n/**\n * (Staker only) Increase stake on a validator from the reserve account.\n */\nexport type IncreaseValidatorStakeParams = {\n  stakePool: PublicKey;\n  staker: PublicKey;\n  withdrawAuthority: PublicKey;\n  validatorList: PublicKey;\n  reserveStake: PublicKey;\n  transientStake: PublicKey;\n  validatorStake: PublicKey;\n  validatorVote: PublicKey;\n  // Amount of lamports to split into the transient stake account\n  lamports: number;\n  // Seed to used to create the transient stake account\n  transientStakeSeed: number;\n};\n\nexport interface IncreaseAdditionalValidatorStakeParams extends IncreaseValidatorStakeParams {\n  ephemeralStake: PublicKey;\n  ephemeralStakeSeed: number;\n}\n\n/**\n * Deposits a stake account into the pool in exchange for pool tokens\n */\nexport type DepositStakeParams = {\n  stakePool: PublicKey;\n  validatorList: PublicKey;\n  depositAuthority: PublicKey;\n  withdrawAuthority: PublicKey;\n  depositStake: PublicKey;\n  validatorStake: PublicKey;\n  reserveStake: PublicKey;\n  destinationPoolAccount: PublicKey;\n  managerFeeAccount: PublicKey;\n  referralPoolAccount: PublicKey;\n  poolMint: PublicKey;\n};\n\n/**\n * Withdraws a stake account from the pool in exchange for pool tokens\n */\nexport type WithdrawStakeParams = {\n  stakePool: PublicKey;\n  validatorList: PublicKey;\n  withdrawAuthority: PublicKey;\n  validatorStake: PublicKey;\n  destinationStake: PublicKey;\n  destinationStakeAuthority: PublicKey;\n  sourceTransferAuthority: PublicKey;\n  sourcePoolAccount: PublicKey;\n  managerFeeAccount: PublicKey;\n  poolMint: PublicKey;\n  poolTokens: number;\n};\n\n/**\n * Withdraw sol instruction params\n */\nexport type WithdrawSolParams = {\n  stakePool: PublicKey;\n  sourcePoolAccount: PublicKey;\n  withdrawAuthority: PublicKey;\n  reserveStake: PublicKey;\n  destinationSystemAccount: PublicKey;\n  sourceTransferAuthority: PublicKey;\n  solWithdrawAuthority?: PublicKey | undefined;\n  managerFeeAccount: PublicKey;\n  poolMint: PublicKey;\n  poolTokens: number;\n};\n\n/**\n * Deposit SOL directly into the pool's reserve account. The output is a \"pool\" token\n * representing ownership into the pool. Inputs are converted to the current ratio.\n */\nexport type DepositSolParams = {\n  stakePool: PublicKey;\n  depositAuthority?: PublicKey | undefined;\n  withdrawAuthority: PublicKey;\n  reserveStake: PublicKey;\n  fundingAccount: PublicKey;\n  destinationPoolAccount: PublicKey;\n  managerFeeAccount: PublicKey;\n  referralPoolAccount: PublicKey;\n  poolMint: PublicKey;\n  lamports: number;\n};\n\nexport type CreateTokenMetadataParams = {\n  stakePool: PublicKey;\n  manager: PublicKey;\n  tokenMetadata: PublicKey;\n  withdrawAuthority: PublicKey;\n  poolMint: PublicKey;\n  payer: PublicKey;\n  name: string;\n  symbol: string;\n  uri: string;\n};\n\nexport type UpdateTokenMetadataParams = {\n  stakePool: PublicKey;\n  manager: PublicKey;\n  tokenMetadata: PublicKey;\n  withdrawAuthority: PublicKey;\n  name: string;\n  symbol: string;\n  uri: string;\n};\n\nexport type AddValidatorToPoolParams = {\n  stakePool: PublicKey;\n  staker: PublicKey;\n  reserveStake: PublicKey;\n  withdrawAuthority: PublicKey;\n  validatorList: PublicKey;\n  validatorStake: PublicKey;\n  validatorVote: PublicKey;\n  seed?: number;\n};\n\nexport type RemoveValidatorFromPoolParams = {\n  stakePool: PublicKey;\n  staker: PublicKey;\n  withdrawAuthority: PublicKey;\n  validatorList: PublicKey;\n  validatorStake: PublicKey;\n  transientStake: PublicKey;\n};\n\n/**\n * Stake Pool Instruction class\n */\nexport class StakePoolInstruction {\n  /**\n   * Creates instruction to add a validator into the stake pool.\n   */\n  static addValidatorToPool(params: AddValidatorToPoolParams): TransactionInstruction {\n    const {\n      stakePool,\n      staker,\n      reserveStake,\n      withdrawAuthority,\n      validatorList,\n      validatorStake,\n      validatorVote,\n      seed,\n    } = params;\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.AddValidatorToPool;\n    const data = encodeData(type, { seed: seed == undefined ? 0 : seed });\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: true },\n      { pubkey: staker, isSigner: true, isWritable: false },\n      { pubkey: reserveStake, isSigner: false, isWritable: true },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: validatorList, isSigner: false, isWritable: true },\n      { pubkey: validatorStake, isSigner: false, isWritable: true },\n      { pubkey: validatorVote, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_STAKE_HISTORY_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: StakeProgram.programId, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates instruction to remove a validator from the stake pool.\n   */\n  static removeValidatorFromPool(params: RemoveValidatorFromPoolParams): TransactionInstruction {\n    const { stakePool, staker, withdrawAuthority, validatorList, validatorStake, transientStake } =\n      params;\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.RemoveValidatorFromPool;\n    const data = encodeData(type);\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: true },\n      { pubkey: staker, isSigner: true, isWritable: false },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: validatorList, isSigner: false, isWritable: true },\n      { pubkey: validatorStake, isSigner: false, isWritable: true },\n      { pubkey: transientStake, isSigner: false, isWritable: true },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: StakeProgram.programId, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates instruction to update a set of validators in the stake pool.\n   */\n  static updateValidatorListBalance(\n    params: UpdateValidatorListBalanceParams,\n  ): TransactionInstruction {\n    const {\n      stakePool,\n      withdrawAuthority,\n      validatorList,\n      reserveStake,\n      startIndex,\n      noMerge,\n      validatorAndTransientStakePairs,\n    } = params;\n\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.UpdateValidatorListBalance;\n    const data = encodeData(type, { startIndex, noMerge: noMerge ? 1 : 0 });\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: false },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: validatorList, isSigner: false, isWritable: true },\n      { pubkey: reserveStake, isSigner: false, isWritable: true },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_STAKE_HISTORY_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: StakeProgram.programId, isSigner: false, isWritable: false },\n      ...validatorAndTransientStakePairs.map((pubkey) => ({\n        pubkey,\n        isSigner: false,\n        isWritable: true,\n      })),\n    ];\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates instruction to update the overall stake pool balance.\n   */\n  static updateStakePoolBalance(params: UpdateStakePoolBalanceParams): TransactionInstruction {\n    const {\n      stakePool,\n      withdrawAuthority,\n      validatorList,\n      reserveStake,\n      managerFeeAccount,\n      poolMint,\n    } = params;\n\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.UpdateStakePoolBalance;\n    const data = encodeData(type);\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: true },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: validatorList, isSigner: false, isWritable: true },\n      { pubkey: reserveStake, isSigner: false, isWritable: false },\n      { pubkey: managerFeeAccount, isSigner: false, isWritable: true },\n      { pubkey: poolMint, isSigner: false, isWritable: true },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates instruction to cleanup removed validator entries.\n   */\n  static cleanupRemovedValidatorEntries(\n    params: CleanupRemovedValidatorEntriesParams,\n  ): TransactionInstruction {\n    const { stakePool, validatorList } = params;\n\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.CleanupRemovedValidatorEntries;\n    const data = encodeData(type);\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: false },\n      { pubkey: validatorList, isSigner: false, isWritable: true },\n    ];\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates `IncreaseValidatorStake` instruction (rebalance from reserve account to\n   * transient account)\n   */\n  static increaseValidatorStake(params: IncreaseValidatorStakeParams): TransactionInstruction {\n    const {\n      stakePool,\n      staker,\n      withdrawAuthority,\n      validatorList,\n      reserveStake,\n      transientStake,\n      validatorStake,\n      validatorVote,\n      lamports,\n      transientStakeSeed,\n    } = params;\n\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.IncreaseValidatorStake;\n    const data = encodeData(type, { lamports, transientStakeSeed });\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: false },\n      { pubkey: staker, isSigner: true, isWritable: false },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: validatorList, isSigner: false, isWritable: true },\n      { pubkey: reserveStake, isSigner: false, isWritable: true },\n      { pubkey: transientStake, isSigner: false, isWritable: true },\n      { pubkey: validatorStake, isSigner: false, isWritable: false },\n      { pubkey: validatorVote, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_STAKE_HISTORY_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: StakeProgram.programId, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates `IncreaseAdditionalValidatorStake` instruction (rebalance from reserve account to\n   * transient account)\n   */\n  static increaseAdditionalValidatorStake(\n    params: IncreaseAdditionalValidatorStakeParams,\n  ): TransactionInstruction {\n    const {\n      stakePool,\n      staker,\n      withdrawAuthority,\n      validatorList,\n      reserveStake,\n      transientStake,\n      validatorStake,\n      validatorVote,\n      lamports,\n      transientStakeSeed,\n      ephemeralStake,\n      ephemeralStakeSeed,\n    } = params;\n\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.IncreaseAdditionalValidatorStake;\n    const data = encodeData(type, { lamports, transientStakeSeed, ephemeralStakeSeed });\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: false },\n      { pubkey: staker, isSigner: true, isWritable: false },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: validatorList, isSigner: false, isWritable: true },\n      { pubkey: reserveStake, isSigner: false, isWritable: true },\n      { pubkey: ephemeralStake, isSigner: false, isWritable: true },\n      { pubkey: transientStake, isSigner: false, isWritable: true },\n      { pubkey: validatorStake, isSigner: false, isWritable: false },\n      { pubkey: validatorVote, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_STAKE_HISTORY_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: StakeProgram.programId, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates `DecreaseValidatorStake` instruction (rebalance from validator account to\n   * transient account)\n   */\n  static decreaseValidatorStake(params: DecreaseValidatorStakeParams): TransactionInstruction {\n    const {\n      stakePool,\n      staker,\n      withdrawAuthority,\n      validatorList,\n      validatorStake,\n      transientStake,\n      lamports,\n      transientStakeSeed,\n    } = params;\n\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.DecreaseValidatorStake;\n    const data = encodeData(type, { lamports, transientStakeSeed });\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: false },\n      { pubkey: staker, isSigner: true, isWritable: false },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: validatorList, isSigner: false, isWritable: true },\n      { pubkey: validatorStake, isSigner: false, isWritable: true },\n      { pubkey: transientStake, isSigner: false, isWritable: true },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: StakeProgram.programId, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates `DecreaseValidatorStakeWithReserve` instruction (rebalance from\n   * validator account to transient account)\n   */\n  static decreaseValidatorStakeWithReserve(\n    params: DecreaseValidatorStakeWithReserveParams,\n  ): TransactionInstruction {\n    const {\n      stakePool,\n      staker,\n      withdrawAuthority,\n      validatorList,\n      reserveStake,\n      validatorStake,\n      transientStake,\n      lamports,\n      transientStakeSeed,\n    } = params;\n\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.DecreaseValidatorStakeWithReserve;\n    const data = encodeData(type, { lamports, transientStakeSeed });\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: false },\n      { pubkey: staker, isSigner: true, isWritable: false },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: validatorList, isSigner: false, isWritable: true },\n      { pubkey: reserveStake, isSigner: false, isWritable: true },\n      { pubkey: validatorStake, isSigner: false, isWritable: true },\n      { pubkey: transientStake, isSigner: false, isWritable: true },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_STAKE_HISTORY_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: StakeProgram.programId, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates `DecreaseAdditionalValidatorStake` instruction (rebalance from\n   * validator account to transient account)\n   */\n  static decreaseAdditionalValidatorStake(\n    params: DecreaseAdditionalValidatorStakeParams,\n  ): TransactionInstruction {\n    const {\n      stakePool,\n      staker,\n      withdrawAuthority,\n      validatorList,\n      reserveStake,\n      validatorStake,\n      transientStake,\n      lamports,\n      transientStakeSeed,\n      ephemeralStakeSeed,\n      ephemeralStake,\n    } = params;\n\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.DecreaseAdditionalValidatorStake;\n    const data = encodeData(type, { lamports, transientStakeSeed, ephemeralStakeSeed });\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: false },\n      { pubkey: staker, isSigner: true, isWritable: false },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: validatorList, isSigner: false, isWritable: true },\n      { pubkey: reserveStake, isSigner: false, isWritable: true },\n      { pubkey: validatorStake, isSigner: false, isWritable: true },\n      { pubkey: ephemeralStake, isSigner: false, isWritable: true },\n      { pubkey: transientStake, isSigner: false, isWritable: true },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_STAKE_HISTORY_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: StakeProgram.programId, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates a transaction instruction to deposit a stake account into a stake pool.\n   */\n  static depositStake(params: DepositStakeParams): TransactionInstruction {\n    const {\n      stakePool,\n      validatorList,\n      depositAuthority,\n      withdrawAuthority,\n      depositStake,\n      validatorStake,\n      reserveStake,\n      destinationPoolAccount,\n      managerFeeAccount,\n      referralPoolAccount,\n      poolMint,\n    } = params;\n\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.DepositStake;\n    const data = encodeData(type);\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: true },\n      { pubkey: validatorList, isSigner: false, isWritable: true },\n      { pubkey: depositAuthority, isSigner: false, isWritable: false },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: depositStake, isSigner: false, isWritable: true },\n      { pubkey: validatorStake, isSigner: false, isWritable: true },\n      { pubkey: reserveStake, isSigner: false, isWritable: true },\n      { pubkey: destinationPoolAccount, isSigner: false, isWritable: true },\n      { pubkey: managerFeeAccount, isSigner: false, isWritable: true },\n      { pubkey: referralPoolAccount, isSigner: false, isWritable: true },\n      { pubkey: poolMint, isSigner: false, isWritable: true },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_STAKE_HISTORY_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: StakeProgram.programId, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates a transaction instruction to deposit SOL into a stake pool.\n   */\n  static depositSol(params: DepositSolParams): TransactionInstruction {\n    const {\n      stakePool,\n      withdrawAuthority,\n      depositAuthority,\n      reserveStake,\n      fundingAccount,\n      destinationPoolAccount,\n      managerFeeAccount,\n      referralPoolAccount,\n      poolMint,\n      lamports,\n    } = params;\n\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.DepositSol;\n    const data = encodeData(type, { lamports });\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: true },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: reserveStake, isSigner: false, isWritable: true },\n      { pubkey: fundingAccount, isSigner: true, isWritable: true },\n      { pubkey: destinationPoolAccount, isSigner: false, isWritable: true },\n      { pubkey: managerFeeAccount, isSigner: false, isWritable: true },\n      { pubkey: referralPoolAccount, isSigner: false, isWritable: true },\n      { pubkey: poolMint, isSigner: false, isWritable: true },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    ];\n\n    if (depositAuthority) {\n      keys.push({\n        pubkey: depositAuthority,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates a transaction instruction to withdraw active stake from a stake pool.\n   */\n  static withdrawStake(params: WithdrawStakeParams): TransactionInstruction {\n    const {\n      stakePool,\n      validatorList,\n      withdrawAuthority,\n      validatorStake,\n      destinationStake,\n      destinationStakeAuthority,\n      sourceTransferAuthority,\n      sourcePoolAccount,\n      managerFeeAccount,\n      poolMint,\n      poolTokens,\n    } = params;\n\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.WithdrawStake;\n    const data = encodeData(type, { poolTokens });\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: true },\n      { pubkey: validatorList, isSigner: false, isWritable: true },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: validatorStake, isSigner: false, isWritable: true },\n      { pubkey: destinationStake, isSigner: false, isWritable: true },\n      { pubkey: destinationStakeAuthority, isSigner: false, isWritable: false },\n      { pubkey: sourceTransferAuthority, isSigner: true, isWritable: false },\n      { pubkey: sourcePoolAccount, isSigner: false, isWritable: true },\n      { pubkey: managerFeeAccount, isSigner: false, isWritable: true },\n      { pubkey: poolMint, isSigner: false, isWritable: true },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: StakeProgram.programId, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates a transaction instruction to withdraw SOL from a stake pool.\n   */\n  static withdrawSol(params: WithdrawSolParams): TransactionInstruction {\n    const {\n      stakePool,\n      withdrawAuthority,\n      sourceTransferAuthority,\n      sourcePoolAccount,\n      reserveStake,\n      destinationSystemAccount,\n      managerFeeAccount,\n      solWithdrawAuthority,\n      poolMint,\n      poolTokens,\n    } = params;\n\n    const type = STAKE_POOL_INSTRUCTION_LAYOUTS.WithdrawSol;\n    const data = encodeData(type, { poolTokens });\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: true },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: sourceTransferAuthority, isSigner: true, isWritable: false },\n      { pubkey: sourcePoolAccount, isSigner: false, isWritable: true },\n      { pubkey: reserveStake, isSigner: false, isWritable: true },\n      { pubkey: destinationSystemAccount, isSigner: false, isWritable: true },\n      { pubkey: managerFeeAccount, isSigner: false, isWritable: true },\n      { pubkey: poolMint, isSigner: false, isWritable: true },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_STAKE_HISTORY_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: StakeProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    ];\n\n    if (solWithdrawAuthority) {\n      keys.push({\n        pubkey: solWithdrawAuthority,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates an instruction to create metadata\n   * using the mpl token metadata program for the pool token\n   */\n  static createTokenMetadata(params: CreateTokenMetadataParams): TransactionInstruction {\n    const {\n      stakePool,\n      withdrawAuthority,\n      tokenMetadata,\n      manager,\n      payer,\n      poolMint,\n      name,\n      symbol,\n      uri,\n    } = params;\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: false },\n      { pubkey: manager, isSigner: true, isWritable: false },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: poolMint, isSigner: false, isWritable: false },\n      { pubkey: payer, isSigner: true, isWritable: true },\n      { pubkey: tokenMetadata, isSigner: false, isWritable: true },\n      { pubkey: METADATA_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    ];\n\n    const type = tokenMetadataLayout(17, name.length, symbol.length, uri.length);\n    const data = encodeData(type, {\n      nameLen: name.length,\n      name: Buffer.from(name),\n      symbolLen: symbol.length,\n      symbol: Buffer.from(symbol),\n      uriLen: uri.length,\n      uri: Buffer.from(uri),\n    });\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Creates an instruction to update metadata\n   * in the mpl token metadata program account for the pool token\n   */\n  static updateTokenMetadata(params: UpdateTokenMetadataParams): TransactionInstruction {\n    const { stakePool, withdrawAuthority, tokenMetadata, manager, name, symbol, uri } = params;\n\n    const keys = [\n      { pubkey: stakePool, isSigner: false, isWritable: false },\n      { pubkey: manager, isSigner: true, isWritable: false },\n      { pubkey: withdrawAuthority, isSigner: false, isWritable: false },\n      { pubkey: tokenMetadata, isSigner: false, isWritable: true },\n      { pubkey: METADATA_PROGRAM_ID, isSigner: false, isWritable: false },\n    ];\n\n    const type = tokenMetadataLayout(18, name.length, symbol.length, uri.length);\n    const data = encodeData(type, {\n      nameLen: name.length,\n      name: Buffer.from(name),\n      symbolLen: symbol.length,\n      symbol: Buffer.from(symbol),\n      uriLen: uri.length,\n      uri: Buffer.from(uri),\n    });\n\n    return new TransactionInstruction({\n      programId: STAKE_POOL_PROGRAM_ID,\n      keys,\n      data,\n    });\n  }\n\n  /**\n   * Decode a deposit stake pool instruction and retrieve the instruction params.\n   */\n  static decodeDepositStake(instruction: TransactionInstruction): DepositStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 11);\n\n    decodeData(STAKE_POOL_INSTRUCTION_LAYOUTS.DepositStake, instruction.data);\n\n    return {\n      stakePool: instruction.keys[0].pubkey,\n      validatorList: instruction.keys[1].pubkey,\n      depositAuthority: instruction.keys[2].pubkey,\n      withdrawAuthority: instruction.keys[3].pubkey,\n      depositStake: instruction.keys[4].pubkey,\n      validatorStake: instruction.keys[5].pubkey,\n      reserveStake: instruction.keys[6].pubkey,\n      destinationPoolAccount: instruction.keys[7].pubkey,\n      managerFeeAccount: instruction.keys[8].pubkey,\n      referralPoolAccount: instruction.keys[9].pubkey,\n      poolMint: instruction.keys[10].pubkey,\n    };\n  }\n\n  /**\n   * Decode a deposit sol instruction and retrieve the instruction params.\n   */\n  static decodeDepositSol(instruction: TransactionInstruction): DepositSolParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 9);\n\n    const { amount } = decodeData(STAKE_POOL_INSTRUCTION_LAYOUTS.DepositSol, instruction.data);\n\n    return {\n      stakePool: instruction.keys[0].pubkey,\n      depositAuthority: instruction.keys[1].pubkey,\n      withdrawAuthority: instruction.keys[2].pubkey,\n      reserveStake: instruction.keys[3].pubkey,\n      fundingAccount: instruction.keys[4].pubkey,\n      destinationPoolAccount: instruction.keys[5].pubkey,\n      managerFeeAccount: instruction.keys[6].pubkey,\n      referralPoolAccount: instruction.keys[7].pubkey,\n      poolMint: instruction.keys[8].pubkey,\n      lamports: amount,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  private static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('Invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `Invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n","import {\n  AccountInfo,\n  Connection,\n  Keypair,\n  PublicKey,\n  Signer,\n  StakeAuthorizationLayout,\n  StakeProgram,\n  SystemProgram,\n  TransactionInstruction,\n} from '@solana/web3.js';\nimport {\n  createApproveInstruction,\n  createAssociatedTokenAccountIdempotentInstruction,\n  getAccount,\n  getAssociatedTokenAddressSync,\n} from '@solana/spl-token';\nimport {\n  ValidatorAccount,\n  arrayChunk,\n  calcLamportsWithdrawAmount,\n  findStakeProgramAddress,\n  findTransientStakeProgramAddress,\n  findWithdrawAuthorityProgramAddress,\n  getValidatorListAccount,\n  newStakeAccount,\n  prepareWithdrawAccounts,\n  lamportsToSol,\n  solToLamports,\n  findEphemeralStakeProgramAddress,\n  findMetadataAddress,\n} from './utils';\nimport { StakePoolInstruction } from './instructions';\nimport {\n  StakeAccount,\n  StakePool,\n  StakePoolLayout,\n  ValidatorList,\n  ValidatorListLayout,\n  ValidatorStakeInfo,\n} from './layouts';\nimport { MAX_VALIDATORS_TO_UPDATE, MINIMUM_ACTIVE_STAKE, STAKE_POOL_PROGRAM_ID } from './constants';\nimport { create } from 'superstruct';\nimport BN from 'bn.js';\n\nexport type { StakePool, AccountType, ValidatorList, ValidatorStakeInfo } from './layouts';\nexport { STAKE_POOL_PROGRAM_ID } from './constants';\nexport * from './instructions';\nexport { StakePoolLayout, ValidatorListLayout, ValidatorStakeInfoLayout } from './layouts';\n\nexport interface ValidatorListAccount {\n  pubkey: PublicKey;\n  account: AccountInfo<ValidatorList>;\n}\n\nexport interface StakePoolAccount {\n  pubkey: PublicKey;\n  account: AccountInfo<StakePool>;\n}\n\nexport interface WithdrawAccount {\n  stakeAddress: PublicKey;\n  voteAddress?: PublicKey;\n  poolAmount: BN;\n}\n\n/**\n * Wrapper class for a stake pool.\n * Each stake pool has a stake pool account and a validator list account.\n */\nexport interface StakePoolAccounts {\n  stakePool: StakePoolAccount | undefined;\n  validatorList: ValidatorListAccount | undefined;\n}\n\n/**\n * Retrieves and deserializes a StakePool account using a web3js connection and the stake pool address.\n * @param connection: An active web3js connection.\n * @param stakePoolAddress: The public key (address) of the stake pool account.\n */\nexport async function getStakePoolAccount(\n  connection: Connection,\n  stakePoolAddress: PublicKey,\n): Promise<StakePoolAccount> {\n  const account = await connection.getAccountInfo(stakePoolAddress);\n\n  if (!account) {\n    throw new Error('Invalid stake pool account');\n  }\n\n  return {\n    pubkey: stakePoolAddress,\n    account: {\n      data: StakePoolLayout.decode(account.data),\n      executable: account.executable,\n      lamports: account.lamports,\n      owner: account.owner,\n    },\n  };\n}\n\n/**\n * Retrieves and deserializes a Stake account using a web3js connection and the stake address.\n * @param connection: An active web3js connection.\n * @param stakeAccount: The public key (address) of the stake account.\n */\nexport async function getStakeAccount(\n  connection: Connection,\n  stakeAccount: PublicKey,\n): Promise<StakeAccount> {\n  const result = (await connection.getParsedAccountInfo(stakeAccount)).value;\n  if (!result || !('parsed' in result.data)) {\n    throw new Error('Invalid stake account');\n  }\n  const program = result.data.program;\n  if (program != 'stake') {\n    throw new Error('Not a stake account');\n  }\n  const parsed = create(result.data.parsed, StakeAccount);\n\n  return parsed;\n}\n\n/**\n * Retrieves all StakePool and ValidatorList accounts that are running a particular StakePool program.\n * @param connection: An active web3js connection.\n * @param stakePoolProgramAddress: The public key (address) of the StakePool program.\n */\nexport async function getStakePoolAccounts(\n  connection: Connection,\n  stakePoolProgramAddress: PublicKey,\n): Promise<(StakePoolAccount | ValidatorListAccount | undefined)[] | undefined> {\n  const response = await connection.getProgramAccounts(stakePoolProgramAddress);\n\n  return response\n    .map((a) => {\n      try {\n        if (a.account.data.readUInt8() === 1) {\n          const data = StakePoolLayout.decode(a.account.data);\n          return {\n            pubkey: a.pubkey,\n            account: {\n              data,\n              executable: a.account.executable,\n              lamports: a.account.lamports,\n              owner: a.account.owner,\n            },\n          };\n        } else if (a.account.data.readUInt8() === 2) {\n          const data = ValidatorListLayout.decode(a.account.data);\n          return {\n            pubkey: a.pubkey,\n            account: {\n              data,\n              executable: a.account.executable,\n              lamports: a.account.lamports,\n              owner: a.account.owner,\n            },\n          };\n        } else {\n          console.error(\n            `Could not decode. StakePoolAccount Enum is ${a.account.data.readUInt8()}, expected 1 or 2!`,\n          );\n          return undefined;\n        }\n      } catch (error) {\n        console.error('Could not decode account. Error:', error);\n        return undefined;\n      }\n    })\n    .filter((a) => a !== undefined);\n}\n\n/**\n * Creates instructions required to deposit stake to stake pool.\n */\nexport async function depositStake(\n  connection: Connection,\n  stakePoolAddress: PublicKey,\n  authorizedPubkey: PublicKey,\n  validatorVote: PublicKey,\n  depositStake: PublicKey,\n  poolTokenReceiverAccount?: PublicKey,\n) {\n  const stakePool = await getStakePoolAccount(connection, stakePoolAddress);\n\n  const withdrawAuthority = await findWithdrawAuthorityProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    stakePoolAddress,\n  );\n\n  const validatorStake = await findStakeProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    validatorVote,\n    stakePoolAddress,\n  );\n\n  const instructions: TransactionInstruction[] = [];\n  const signers: Signer[] = [];\n\n  const poolMint = stakePool.account.data.poolMint;\n\n  // Create token account if not specified\n  if (!poolTokenReceiverAccount) {\n    const associatedAddress = getAssociatedTokenAddressSync(poolMint, authorizedPubkey);\n    instructions.push(\n      createAssociatedTokenAccountIdempotentInstruction(\n        authorizedPubkey,\n        associatedAddress,\n        authorizedPubkey,\n        poolMint,\n      ),\n    );\n    poolTokenReceiverAccount = associatedAddress;\n  }\n\n  instructions.push(\n    ...StakeProgram.authorize({\n      stakePubkey: depositStake,\n      authorizedPubkey,\n      newAuthorizedPubkey: stakePool.account.data.stakeDepositAuthority,\n      stakeAuthorizationType: StakeAuthorizationLayout.Staker,\n    }).instructions,\n  );\n\n  instructions.push(\n    ...StakeProgram.authorize({\n      stakePubkey: depositStake,\n      authorizedPubkey,\n      newAuthorizedPubkey: stakePool.account.data.stakeDepositAuthority,\n      stakeAuthorizationType: StakeAuthorizationLayout.Withdrawer,\n    }).instructions,\n  );\n\n  instructions.push(\n    StakePoolInstruction.depositStake({\n      stakePool: stakePoolAddress,\n      validatorList: stakePool.account.data.validatorList,\n      depositAuthority: stakePool.account.data.stakeDepositAuthority,\n      reserveStake: stakePool.account.data.reserveStake,\n      managerFeeAccount: stakePool.account.data.managerFeeAccount,\n      referralPoolAccount: poolTokenReceiverAccount,\n      destinationPoolAccount: poolTokenReceiverAccount,\n      withdrawAuthority,\n      depositStake,\n      validatorStake,\n      poolMint,\n    }),\n  );\n\n  return {\n    instructions,\n    signers,\n  };\n}\n\n/**\n * Creates instructions required to deposit sol to stake pool.\n */\nexport async function depositSol(\n  connection: Connection,\n  stakePoolAddress: PublicKey,\n  from: PublicKey,\n  lamports: number,\n  destinationTokenAccount?: PublicKey,\n  referrerTokenAccount?: PublicKey,\n  depositAuthority?: PublicKey,\n) {\n  const fromBalance = await connection.getBalance(from, 'confirmed');\n  if (fromBalance < lamports) {\n    throw new Error(\n      `Not enough SOL to deposit into pool. Maximum deposit amount is ${lamportsToSol(\n        fromBalance,\n      )} SOL.`,\n    );\n  }\n\n  const stakePoolAccount = await getStakePoolAccount(connection, stakePoolAddress);\n  const stakePool = stakePoolAccount.account.data;\n\n  // Ephemeral SOL account just to do the transfer\n  const userSolTransfer = new Keypair();\n  const signers: Signer[] = [userSolTransfer];\n  const instructions: TransactionInstruction[] = [];\n\n  // Create the ephemeral SOL account\n  instructions.push(\n    SystemProgram.transfer({\n      fromPubkey: from,\n      toPubkey: userSolTransfer.publicKey,\n      lamports,\n    }),\n  );\n\n  // Create token account if not specified\n  if (!destinationTokenAccount) {\n    const associatedAddress = getAssociatedTokenAddressSync(stakePool.poolMint, from);\n    instructions.push(\n      createAssociatedTokenAccountIdempotentInstruction(\n        from,\n        associatedAddress,\n        from,\n        stakePool.poolMint,\n      ),\n    );\n    destinationTokenAccount = associatedAddress;\n  }\n\n  const withdrawAuthority = await findWithdrawAuthorityProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    stakePoolAddress,\n  );\n\n  instructions.push(\n    StakePoolInstruction.depositSol({\n      stakePool: stakePoolAddress,\n      reserveStake: stakePool.reserveStake,\n      fundingAccount: userSolTransfer.publicKey,\n      destinationPoolAccount: destinationTokenAccount,\n      managerFeeAccount: stakePool.managerFeeAccount,\n      referralPoolAccount: referrerTokenAccount ?? destinationTokenAccount,\n      poolMint: stakePool.poolMint,\n      lamports,\n      withdrawAuthority,\n      depositAuthority,\n    }),\n  );\n\n  return {\n    instructions,\n    signers,\n  };\n}\n\n/**\n * Creates instructions required to withdraw stake from a stake pool.\n */\nexport async function withdrawStake(\n  connection: Connection,\n  stakePoolAddress: PublicKey,\n  tokenOwner: PublicKey,\n  amount: number,\n  useReserve = false,\n  voteAccountAddress?: PublicKey,\n  stakeReceiver?: PublicKey,\n  poolTokenAccount?: PublicKey,\n  validatorComparator?: (_a: ValidatorAccount, _b: ValidatorAccount) => number,\n) {\n  const stakePool = await getStakePoolAccount(connection, stakePoolAddress);\n  const poolAmount = new BN(solToLamports(amount));\n\n  if (!poolTokenAccount) {\n    poolTokenAccount = getAssociatedTokenAddressSync(stakePool.account.data.poolMint, tokenOwner);\n  }\n\n  const tokenAccount = await getAccount(connection, poolTokenAccount);\n\n  // Check withdrawFrom balance\n  if (tokenAccount.amount < poolAmount.toNumber()) {\n    throw new Error(\n      `Not enough token balance to withdraw ${lamportsToSol(poolAmount)} pool tokens.\n        Maximum withdraw amount is ${lamportsToSol(tokenAccount.amount)} pool tokens.`,\n    );\n  }\n\n  const stakeAccountRentExemption = await connection.getMinimumBalanceForRentExemption(\n    StakeProgram.space,\n  );\n\n  const withdrawAuthority = await findWithdrawAuthorityProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    stakePoolAddress,\n  );\n\n  let stakeReceiverAccount = null;\n  if (stakeReceiver) {\n    stakeReceiverAccount = await getStakeAccount(connection, stakeReceiver);\n  }\n\n  const withdrawAccounts: WithdrawAccount[] = [];\n\n  if (useReserve) {\n    withdrawAccounts.push({\n      stakeAddress: stakePool.account.data.reserveStake,\n      voteAddress: undefined,\n      poolAmount,\n    });\n  } else if (stakeReceiverAccount && stakeReceiverAccount?.type == 'delegated') {\n    const voteAccount = stakeReceiverAccount.info?.stake?.delegation.voter;\n    if (!voteAccount) throw new Error(`Invalid stake receiver ${stakeReceiver} delegation`);\n    const validatorListAccount = await connection.getAccountInfo(\n      stakePool.account.data.validatorList,\n    );\n    const validatorList = ValidatorListLayout.decode(validatorListAccount?.data) as ValidatorList;\n    const isValidVoter = validatorList.validators.find((val) =>\n      val.voteAccountAddress.equals(voteAccount),\n    );\n    if (voteAccountAddress && voteAccountAddress !== voteAccount) {\n      throw new Error(`Provided withdrawal vote account ${voteAccountAddress} does not match delegation on stake receiver account ${voteAccount},\n      remove this flag or provide a different stake account delegated to ${voteAccountAddress}`);\n    }\n    if (isValidVoter) {\n      const stakeAccountAddress = await findStakeProgramAddress(\n        STAKE_POOL_PROGRAM_ID,\n        voteAccount,\n        stakePoolAddress,\n      );\n\n      const stakeAccount = await connection.getAccountInfo(stakeAccountAddress);\n      if (!stakeAccount) {\n        throw new Error(`Preferred withdraw valdator's stake account is invalid`);\n      }\n\n      const availableForWithdrawal = calcLamportsWithdrawAmount(\n        stakePool.account.data,\n        new BN(stakeAccount.lamports - MINIMUM_ACTIVE_STAKE - stakeAccountRentExemption),\n      );\n\n      if (availableForWithdrawal.lt(poolAmount)) {\n        throw new Error(\n          `Not enough lamports available for withdrawal from ${stakeAccountAddress},\n            ${poolAmount} asked, ${availableForWithdrawal} available.`,\n        );\n      }\n      withdrawAccounts.push({\n        stakeAddress: stakeAccountAddress,\n        voteAddress: voteAccount,\n        poolAmount,\n      });\n    } else {\n      throw new Error(\n        `Provided stake account is delegated to a vote account ${voteAccount} which does not exist in the stake pool`,\n      );\n    }\n  } else if (voteAccountAddress) {\n    const stakeAccountAddress = await findStakeProgramAddress(\n      STAKE_POOL_PROGRAM_ID,\n      voteAccountAddress,\n      stakePoolAddress,\n    );\n    const stakeAccount = await connection.getAccountInfo(stakeAccountAddress);\n    if (!stakeAccount) {\n      throw new Error('Invalid Stake Account');\n    }\n\n    const availableLamports = new BN(\n      stakeAccount.lamports - MINIMUM_ACTIVE_STAKE - stakeAccountRentExemption,\n    );\n    if (availableLamports.lt(new BN(0))) {\n      throw new Error('Invalid Stake Account');\n    }\n    const availableForWithdrawal = calcLamportsWithdrawAmount(\n      stakePool.account.data,\n      availableLamports,\n    );\n\n    if (availableForWithdrawal.lt(poolAmount)) {\n      // noinspection ExceptionCaughtLocallyJS\n      throw new Error(\n        `Not enough lamports available for withdrawal from ${stakeAccountAddress},\n          ${poolAmount} asked, ${availableForWithdrawal} available.`,\n      );\n    }\n    withdrawAccounts.push({\n      stakeAddress: stakeAccountAddress,\n      voteAddress: voteAccountAddress,\n      poolAmount,\n    });\n  } else {\n    // Get the list of accounts to withdraw from\n    withdrawAccounts.push(\n      ...(await prepareWithdrawAccounts(\n        connection,\n        stakePool.account.data,\n        stakePoolAddress,\n        poolAmount,\n        validatorComparator,\n        poolTokenAccount.equals(stakePool.account.data.managerFeeAccount),\n      )),\n    );\n  }\n\n  // Construct transaction to withdraw from withdrawAccounts account list\n  const instructions: TransactionInstruction[] = [];\n  const userTransferAuthority = Keypair.generate();\n\n  const signers: Signer[] = [userTransferAuthority];\n\n  instructions.push(\n    createApproveInstruction(\n      poolTokenAccount,\n      userTransferAuthority.publicKey,\n      tokenOwner,\n      poolAmount.toNumber(),\n    ),\n  );\n\n  let totalRentFreeBalances = 0;\n\n  // Max 5 accounts to prevent an error: \"Transaction too large\"\n  const maxWithdrawAccounts = 5;\n  let i = 0;\n\n  // Go through prepared accounts and withdraw/claim them\n  for (const withdrawAccount of withdrawAccounts) {\n    if (i > maxWithdrawAccounts) {\n      break;\n    }\n    // Convert pool tokens amount to lamports\n    const solWithdrawAmount = calcLamportsWithdrawAmount(\n      stakePool.account.data,\n      withdrawAccount.poolAmount,\n    );\n\n    let infoMsg = `Withdrawing ◎${solWithdrawAmount},\n      from stake account ${withdrawAccount.stakeAddress?.toBase58()}`;\n\n    if (withdrawAccount.voteAddress) {\n      infoMsg = `${infoMsg}, delegated to ${withdrawAccount.voteAddress?.toBase58()}`;\n    }\n\n    console.info(infoMsg);\n    let stakeToReceive;\n\n    if (!stakeReceiver || (stakeReceiverAccount && stakeReceiverAccount.type === 'delegated')) {\n      const stakeKeypair = newStakeAccount(tokenOwner, instructions, stakeAccountRentExemption);\n      signers.push(stakeKeypair);\n      totalRentFreeBalances += stakeAccountRentExemption;\n      stakeToReceive = stakeKeypair.publicKey;\n    } else {\n      stakeToReceive = stakeReceiver;\n    }\n\n    instructions.push(\n      StakePoolInstruction.withdrawStake({\n        stakePool: stakePoolAddress,\n        validatorList: stakePool.account.data.validatorList,\n        validatorStake: withdrawAccount.stakeAddress,\n        destinationStake: stakeToReceive,\n        destinationStakeAuthority: tokenOwner,\n        sourceTransferAuthority: userTransferAuthority.publicKey,\n        sourcePoolAccount: poolTokenAccount,\n        managerFeeAccount: stakePool.account.data.managerFeeAccount,\n        poolMint: stakePool.account.data.poolMint,\n        poolTokens: withdrawAccount.poolAmount.toNumber(),\n        withdrawAuthority,\n      }),\n    );\n    i++;\n  }\n  if (stakeReceiver && stakeReceiverAccount && stakeReceiverAccount.type === 'delegated') {\n    signers.forEach((newStakeKeypair) => {\n      instructions.concat(\n        StakeProgram.merge({\n          stakePubkey: stakeReceiver,\n          sourceStakePubKey: newStakeKeypair.publicKey,\n          authorizedPubkey: tokenOwner,\n        }).instructions,\n      );\n    });\n  }\n\n  return {\n    instructions,\n    signers,\n    stakeReceiver,\n    totalRentFreeBalances,\n  };\n}\n\n/**\n * Creates instructions required to withdraw SOL directly from a stake pool.\n */\nexport async function withdrawSol(\n  connection: Connection,\n  stakePoolAddress: PublicKey,\n  tokenOwner: PublicKey,\n  solReceiver: PublicKey,\n  amount: number,\n  solWithdrawAuthority?: PublicKey,\n) {\n  const stakePool = await getStakePoolAccount(connection, stakePoolAddress);\n  const poolAmount = solToLamports(amount);\n\n  const poolTokenAccount = getAssociatedTokenAddressSync(\n    stakePool.account.data.poolMint,\n    tokenOwner,\n  );\n\n  const tokenAccount = await getAccount(connection, poolTokenAccount);\n\n  // Check withdrawFrom balance\n  if (tokenAccount.amount < poolAmount) {\n    throw new Error(\n      `Not enough token balance to withdraw ${lamportsToSol(poolAmount)} pool tokens.\n          Maximum withdraw amount is ${lamportsToSol(tokenAccount.amount)} pool tokens.`,\n    );\n  }\n\n  // Construct transaction to withdraw from withdrawAccounts account list\n  const instructions: TransactionInstruction[] = [];\n  const userTransferAuthority = Keypair.generate();\n  const signers: Signer[] = [userTransferAuthority];\n\n  instructions.push(\n    createApproveInstruction(\n      poolTokenAccount,\n      userTransferAuthority.publicKey,\n      tokenOwner,\n      poolAmount,\n    ),\n  );\n\n  const poolWithdrawAuthority = await findWithdrawAuthorityProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    stakePoolAddress,\n  );\n\n  if (solWithdrawAuthority) {\n    const expectedSolWithdrawAuthority = stakePool.account.data.solWithdrawAuthority;\n    if (!expectedSolWithdrawAuthority) {\n      throw new Error('SOL withdraw authority specified in arguments but stake pool has none');\n    }\n    if (solWithdrawAuthority.toBase58() != expectedSolWithdrawAuthority.toBase58()) {\n      throw new Error(\n        `Invalid deposit withdraw specified, expected ${expectedSolWithdrawAuthority.toBase58()}, received ${solWithdrawAuthority.toBase58()}`,\n      );\n    }\n  }\n\n  const withdrawTransaction = StakePoolInstruction.withdrawSol({\n    stakePool: stakePoolAddress,\n    withdrawAuthority: poolWithdrawAuthority,\n    reserveStake: stakePool.account.data.reserveStake,\n    sourcePoolAccount: poolTokenAccount,\n    sourceTransferAuthority: userTransferAuthority.publicKey,\n    destinationSystemAccount: solReceiver,\n    managerFeeAccount: stakePool.account.data.managerFeeAccount,\n    poolMint: stakePool.account.data.poolMint,\n    poolTokens: poolAmount,\n    solWithdrawAuthority,\n  });\n\n  instructions.push(withdrawTransaction);\n\n  return {\n    instructions,\n    signers,\n  };\n}\n\nexport async function addValidatorToPool(\n  connection: Connection,\n  stakePoolAddress: PublicKey,\n  validatorVote: PublicKey,\n  seed?: number,\n) {\n  const stakePoolAccount = await getStakePoolAccount(connection, stakePoolAddress);\n  const stakePool = stakePoolAccount.account.data;\n  const { reserveStake, staker, validatorList } = stakePool;\n\n  const validatorListAccount = await getValidatorListAccount(connection, validatorList);\n\n  const validatorInfo = validatorListAccount.account.data.validators.find(\n    (v) => v.voteAccountAddress.toBase58() == validatorVote.toBase58(),\n  );\n\n  if (validatorInfo) {\n    throw new Error('Vote account is already in validator list');\n  }\n\n  const withdrawAuthority = await findWithdrawAuthorityProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    stakePoolAddress,\n  );\n\n  const validatorStake = await findStakeProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    validatorVote,\n    stakePoolAddress,\n    seed,\n  );\n\n  const instructions: TransactionInstruction[] = [\n    StakePoolInstruction.addValidatorToPool({\n      stakePool: stakePoolAddress,\n      staker: staker,\n      reserveStake: reserveStake,\n      withdrawAuthority: withdrawAuthority,\n      validatorList: validatorList,\n      validatorStake: validatorStake,\n      validatorVote: validatorVote,\n    }),\n  ];\n\n  return {\n    instructions,\n  };\n}\n\nexport async function removeValidatorFromPool(\n  connection: Connection,\n  stakePoolAddress: PublicKey,\n  validatorVote: PublicKey,\n  seed?: number,\n) {\n  const stakePoolAccount = await getStakePoolAccount(connection, stakePoolAddress);\n  const stakePool = stakePoolAccount.account.data;\n  const { staker, validatorList } = stakePool;\n\n  const validatorListAccount = await getValidatorListAccount(connection, validatorList);\n\n  const validatorInfo = validatorListAccount.account.data.validators.find(\n    (v) => v.voteAccountAddress.toBase58() == validatorVote.toBase58(),\n  );\n\n  if (!validatorInfo) {\n    throw new Error('Vote account is not already in validator list');\n  }\n\n  const withdrawAuthority = await findWithdrawAuthorityProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    stakePoolAddress,\n  );\n\n  const validatorStake = await findStakeProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    validatorVote,\n    stakePoolAddress,\n    seed,\n  );\n\n  const transientStakeSeed = validatorInfo.transientSeedSuffixStart;\n\n  const transientStake = await findTransientStakeProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    validatorInfo.voteAccountAddress,\n    stakePoolAddress,\n    transientStakeSeed,\n  );\n\n  const instructions: TransactionInstruction[] = [\n    StakePoolInstruction.removeValidatorFromPool({\n      stakePool: stakePoolAddress,\n      staker: staker,\n      withdrawAuthority,\n      validatorList,\n      validatorStake,\n      transientStake,\n    }),\n  ];\n\n  return {\n    instructions,\n  };\n}\n\n/**\n * Creates instructions required to increase validator stake.\n */\nexport async function increaseValidatorStake(\n  connection: Connection,\n  stakePoolAddress: PublicKey,\n  validatorVote: PublicKey,\n  lamports: number,\n  ephemeralStakeSeed?: number,\n) {\n  const stakePool = await getStakePoolAccount(connection, stakePoolAddress);\n\n  const validatorList = await getValidatorListAccount(\n    connection,\n    stakePool.account.data.validatorList,\n  );\n\n  const validatorInfo = validatorList.account.data.validators.find(\n    (v) => v.voteAccountAddress.toBase58() == validatorVote.toBase58(),\n  );\n\n  if (!validatorInfo) {\n    throw new Error('Vote account not found in validator list');\n  }\n\n  const withdrawAuthority = await findWithdrawAuthorityProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    stakePoolAddress,\n  );\n\n  // Bump transient seed suffix by one to avoid reuse when not using the increaseAdditionalStake instruction\n  const transientStakeSeed =\n    ephemeralStakeSeed == undefined\n      ? validatorInfo.transientSeedSuffixStart.addn(1)\n      : validatorInfo.transientSeedSuffixStart;\n\n  const transientStake = await findTransientStakeProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    validatorInfo.voteAccountAddress,\n    stakePoolAddress,\n    transientStakeSeed,\n  );\n\n  const validatorStake = await findStakeProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    validatorInfo.voteAccountAddress,\n    stakePoolAddress,\n  );\n\n  const instructions: TransactionInstruction[] = [];\n\n  if (ephemeralStakeSeed != undefined) {\n    const ephemeralStake = await findEphemeralStakeProgramAddress(\n      STAKE_POOL_PROGRAM_ID,\n      stakePoolAddress,\n      new BN(ephemeralStakeSeed),\n    );\n    instructions.push(\n      StakePoolInstruction.increaseAdditionalValidatorStake({\n        stakePool: stakePoolAddress,\n        staker: stakePool.account.data.staker,\n        validatorList: stakePool.account.data.validatorList,\n        reserveStake: stakePool.account.data.reserveStake,\n        transientStakeSeed: transientStakeSeed.toNumber(),\n        withdrawAuthority,\n        transientStake,\n        validatorStake,\n        validatorVote,\n        lamports,\n        ephemeralStake,\n        ephemeralStakeSeed,\n      }),\n    );\n  } else {\n    instructions.push(\n      StakePoolInstruction.increaseValidatorStake({\n        stakePool: stakePoolAddress,\n        staker: stakePool.account.data.staker,\n        validatorList: stakePool.account.data.validatorList,\n        reserveStake: stakePool.account.data.reserveStake,\n        transientStakeSeed: transientStakeSeed.toNumber(),\n        withdrawAuthority,\n        transientStake,\n        validatorStake,\n        validatorVote,\n        lamports,\n      }),\n    );\n  }\n\n  return {\n    instructions,\n  };\n}\n\n/**\n * Creates instructions required to decrease validator stake.\n */\nexport async function decreaseValidatorStake(\n  connection: Connection,\n  stakePoolAddress: PublicKey,\n  validatorVote: PublicKey,\n  lamports: number,\n  ephemeralStakeSeed?: number,\n) {\n  const stakePool = await getStakePoolAccount(connection, stakePoolAddress);\n  const validatorList = await getValidatorListAccount(\n    connection,\n    stakePool.account.data.validatorList,\n  );\n\n  const validatorInfo = validatorList.account.data.validators.find(\n    (v) => v.voteAccountAddress.toBase58() == validatorVote.toBase58(),\n  );\n\n  if (!validatorInfo) {\n    throw new Error('Vote account not found in validator list');\n  }\n\n  const withdrawAuthority = await findWithdrawAuthorityProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    stakePoolAddress,\n  );\n\n  const validatorStake = await findStakeProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    validatorInfo.voteAccountAddress,\n    stakePoolAddress,\n  );\n\n  // Bump transient seed suffix by one to avoid reuse when not using the decreaseAdditionalStake instruction\n  const transientStakeSeed =\n    ephemeralStakeSeed == undefined\n      ? validatorInfo.transientSeedSuffixStart.addn(1)\n      : validatorInfo.transientSeedSuffixStart;\n\n  const transientStake = await findTransientStakeProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    validatorInfo.voteAccountAddress,\n    stakePoolAddress,\n    transientStakeSeed,\n  );\n\n  const instructions: TransactionInstruction[] = [];\n\n  if (ephemeralStakeSeed != undefined) {\n    const ephemeralStake = await findEphemeralStakeProgramAddress(\n      STAKE_POOL_PROGRAM_ID,\n      stakePoolAddress,\n      new BN(ephemeralStakeSeed),\n    );\n    instructions.push(\n      StakePoolInstruction.decreaseAdditionalValidatorStake({\n        stakePool: stakePoolAddress,\n        staker: stakePool.account.data.staker,\n        validatorList: stakePool.account.data.validatorList,\n        reserveStake: stakePool.account.data.reserveStake,\n        transientStakeSeed: transientStakeSeed.toNumber(),\n        withdrawAuthority,\n        validatorStake,\n        transientStake,\n        lamports,\n        ephemeralStake,\n        ephemeralStakeSeed,\n      }),\n    );\n  } else {\n    instructions.push(\n      StakePoolInstruction.decreaseValidatorStakeWithReserve({\n        stakePool: stakePoolAddress,\n        staker: stakePool.account.data.staker,\n        validatorList: stakePool.account.data.validatorList,\n        reserveStake: stakePool.account.data.reserveStake,\n        transientStakeSeed: transientStakeSeed.toNumber(),\n        withdrawAuthority,\n        validatorStake,\n        transientStake,\n        lamports,\n      }),\n    );\n  }\n\n  return {\n    instructions,\n  };\n}\n\n/**\n * Creates instructions required to completely update a stake pool after epoch change.\n */\nexport async function updateStakePool(\n  connection: Connection,\n  stakePool: StakePoolAccount,\n  noMerge = false,\n) {\n  const stakePoolAddress = stakePool.pubkey;\n\n  const validatorList = await getValidatorListAccount(\n    connection,\n    stakePool.account.data.validatorList,\n  );\n\n  const withdrawAuthority = await findWithdrawAuthorityProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    stakePoolAddress,\n  );\n\n  const updateListInstructions: TransactionInstruction[] = [];\n  const instructions: TransactionInstruction[] = [];\n\n  let startIndex = 0;\n  const validatorChunks: Array<ValidatorStakeInfo[]> = arrayChunk(\n    validatorList.account.data.validators,\n    MAX_VALIDATORS_TO_UPDATE,\n  );\n\n  for (const validatorChunk of validatorChunks) {\n    const validatorAndTransientStakePairs: PublicKey[] = [];\n\n    for (const validator of validatorChunk) {\n      const validatorStake = await findStakeProgramAddress(\n        STAKE_POOL_PROGRAM_ID,\n        validator.voteAccountAddress,\n        stakePoolAddress,\n      );\n      validatorAndTransientStakePairs.push(validatorStake);\n\n      const transientStake = await findTransientStakeProgramAddress(\n        STAKE_POOL_PROGRAM_ID,\n        validator.voteAccountAddress,\n        stakePoolAddress,\n        validator.transientSeedSuffixStart,\n      );\n      validatorAndTransientStakePairs.push(transientStake);\n    }\n\n    updateListInstructions.push(\n      StakePoolInstruction.updateValidatorListBalance({\n        stakePool: stakePoolAddress,\n        validatorList: stakePool.account.data.validatorList,\n        reserveStake: stakePool.account.data.reserveStake,\n        validatorAndTransientStakePairs,\n        withdrawAuthority,\n        startIndex,\n        noMerge,\n      }),\n    );\n    startIndex += MAX_VALIDATORS_TO_UPDATE;\n  }\n\n  instructions.push(\n    StakePoolInstruction.updateStakePoolBalance({\n      stakePool: stakePoolAddress,\n      validatorList: stakePool.account.data.validatorList,\n      reserveStake: stakePool.account.data.reserveStake,\n      managerFeeAccount: stakePool.account.data.managerFeeAccount,\n      poolMint: stakePool.account.data.poolMint,\n      withdrawAuthority,\n    }),\n  );\n\n  instructions.push(\n    StakePoolInstruction.cleanupRemovedValidatorEntries({\n      stakePool: stakePoolAddress,\n      validatorList: stakePool.account.data.validatorList,\n    }),\n  );\n\n  return {\n    updateListInstructions,\n    finalInstructions: instructions,\n  };\n}\n\n/**\n * Retrieves detailed information about the StakePool.\n */\nexport async function stakePoolInfo(connection: Connection, stakePoolAddress: PublicKey) {\n  const stakePool = await getStakePoolAccount(connection, stakePoolAddress);\n  const reserveAccountStakeAddress = stakePool.account.data.reserveStake;\n  const totalLamports = stakePool.account.data.totalLamports;\n  const lastUpdateEpoch = stakePool.account.data.lastUpdateEpoch;\n\n  const validatorList = await getValidatorListAccount(\n    connection,\n    stakePool.account.data.validatorList,\n  );\n\n  const maxNumberOfValidators = validatorList.account.data.maxValidators;\n  const currentNumberOfValidators = validatorList.account.data.validators.length;\n\n  const epochInfo = await connection.getEpochInfo();\n  const reserveStake = await connection.getAccountInfo(reserveAccountStakeAddress);\n  const withdrawAuthority = await findWithdrawAuthorityProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    stakePoolAddress,\n  );\n\n  const minimumReserveStakeBalance = await connection.getMinimumBalanceForRentExemption(\n    StakeProgram.space,\n  );\n\n  const stakeAccounts = await Promise.all(\n    validatorList.account.data.validators.map(async (validator) => {\n      const stakeAccountAddress = await findStakeProgramAddress(\n        STAKE_POOL_PROGRAM_ID,\n        validator.voteAccountAddress,\n        stakePoolAddress,\n      );\n      const transientStakeAccountAddress = await findTransientStakeProgramAddress(\n        STAKE_POOL_PROGRAM_ID,\n        validator.voteAccountAddress,\n        stakePoolAddress,\n        validator.transientSeedSuffixStart,\n      );\n      const updateRequired = !validator.lastUpdateEpoch.eqn(epochInfo.epoch);\n      return {\n        voteAccountAddress: validator.voteAccountAddress.toBase58(),\n        stakeAccountAddress: stakeAccountAddress.toBase58(),\n        validatorActiveStakeLamports: validator.activeStakeLamports.toString(),\n        validatorLastUpdateEpoch: validator.lastUpdateEpoch.toString(),\n        validatorLamports: validator.activeStakeLamports\n          .add(validator.transientStakeLamports)\n          .toString(),\n        validatorTransientStakeAccountAddress: transientStakeAccountAddress.toBase58(),\n        validatorTransientStakeLamports: validator.transientStakeLamports.toString(),\n        updateRequired,\n      };\n    }),\n  );\n\n  const totalPoolTokens = lamportsToSol(stakePool.account.data.poolTokenSupply);\n  const updateRequired = !lastUpdateEpoch.eqn(epochInfo.epoch);\n\n  return {\n    address: stakePoolAddress.toBase58(),\n    poolWithdrawAuthority: withdrawAuthority.toBase58(),\n    manager: stakePool.account.data.manager.toBase58(),\n    staker: stakePool.account.data.staker.toBase58(),\n    stakeDepositAuthority: stakePool.account.data.stakeDepositAuthority.toBase58(),\n    stakeWithdrawBumpSeed: stakePool.account.data.stakeWithdrawBumpSeed,\n    maxValidators: maxNumberOfValidators,\n    validatorList: validatorList.account.data.validators.map((validator) => {\n      return {\n        activeStakeLamports: validator.activeStakeLamports.toString(),\n        transientStakeLamports: validator.transientStakeLamports.toString(),\n        lastUpdateEpoch: validator.lastUpdateEpoch.toString(),\n        transientSeedSuffixStart: validator.transientSeedSuffixStart.toString(),\n        transientSeedSuffixEnd: validator.transientSeedSuffixEnd.toString(),\n        status: validator.status.toString(),\n        voteAccountAddress: validator.voteAccountAddress.toString(),\n      };\n    }), // CliStakePoolValidator\n    validatorListStorageAccount: stakePool.account.data.validatorList.toBase58(),\n    reserveStake: stakePool.account.data.reserveStake.toBase58(),\n    poolMint: stakePool.account.data.poolMint.toBase58(),\n    managerFeeAccount: stakePool.account.data.managerFeeAccount.toBase58(),\n    tokenProgramId: stakePool.account.data.tokenProgramId.toBase58(),\n    totalLamports: stakePool.account.data.totalLamports.toString(),\n    poolTokenSupply: stakePool.account.data.poolTokenSupply.toString(),\n    lastUpdateEpoch: stakePool.account.data.lastUpdateEpoch.toString(),\n    lockup: stakePool.account.data.lockup, // pub lockup: CliStakePoolLockup\n    epochFee: stakePool.account.data.epochFee,\n    nextEpochFee: stakePool.account.data.nextEpochFee,\n    preferredDepositValidatorVoteAddress:\n      stakePool.account.data.preferredDepositValidatorVoteAddress,\n    preferredWithdrawValidatorVoteAddress:\n      stakePool.account.data.preferredWithdrawValidatorVoteAddress,\n    stakeDepositFee: stakePool.account.data.stakeDepositFee,\n    stakeWithdrawalFee: stakePool.account.data.stakeWithdrawalFee,\n    // CliStakePool the same\n    nextStakeWithdrawalFee: stakePool.account.data.nextStakeWithdrawalFee,\n    stakeReferralFee: stakePool.account.data.stakeReferralFee,\n    solDepositAuthority: stakePool.account.data.solDepositAuthority?.toBase58(),\n    solDepositFee: stakePool.account.data.solDepositFee,\n    solReferralFee: stakePool.account.data.solReferralFee,\n    solWithdrawAuthority: stakePool.account.data.solWithdrawAuthority?.toBase58(),\n    solWithdrawalFee: stakePool.account.data.solWithdrawalFee,\n    nextSolWithdrawalFee: stakePool.account.data.nextSolWithdrawalFee,\n    lastEpochPoolTokenSupply: stakePool.account.data.lastEpochPoolTokenSupply.toString(),\n    lastEpochTotalLamports: stakePool.account.data.lastEpochTotalLamports.toString(),\n    details: {\n      reserveStakeLamports: reserveStake?.lamports,\n      reserveAccountStakeAddress: reserveAccountStakeAddress.toBase58(),\n      minimumReserveStakeBalance,\n      stakeAccounts,\n      totalLamports,\n      totalPoolTokens,\n      currentNumberOfValidators,\n      maxNumberOfValidators,\n      updateRequired,\n    }, // CliStakePoolDetails\n  };\n}\n\n/**\n * Creates instructions required to create pool token metadata.\n */\nexport async function createPoolTokenMetadata(\n  connection: Connection,\n  stakePoolAddress: PublicKey,\n  payer: PublicKey,\n  name: string,\n  symbol: string,\n  uri: string,\n) {\n  const stakePool = await getStakePoolAccount(connection, stakePoolAddress);\n\n  const withdrawAuthority = await findWithdrawAuthorityProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    stakePoolAddress,\n  );\n  const tokenMetadata = findMetadataAddress(stakePool.account.data.poolMint);\n  const manager = stakePool.account.data.manager;\n\n  const instructions: TransactionInstruction[] = [];\n  instructions.push(\n    StakePoolInstruction.createTokenMetadata({\n      stakePool: stakePoolAddress,\n      poolMint: stakePool.account.data.poolMint,\n      payer,\n      manager,\n      tokenMetadata,\n      withdrawAuthority,\n      name,\n      symbol,\n      uri,\n    }),\n  );\n\n  return {\n    instructions,\n  };\n}\n\n/**\n * Creates instructions required to update pool token metadata.\n */\nexport async function updatePoolTokenMetadata(\n  connection: Connection,\n  stakePoolAddress: PublicKey,\n  name: string,\n  symbol: string,\n  uri: string,\n) {\n  const stakePool = await getStakePoolAccount(connection, stakePoolAddress);\n\n  const withdrawAuthority = await findWithdrawAuthorityProgramAddress(\n    STAKE_POOL_PROGRAM_ID,\n    stakePoolAddress,\n  );\n\n  const tokenMetadata = findMetadataAddress(stakePool.account.data.poolMint);\n\n  const instructions: TransactionInstruction[] = [];\n  instructions.push(\n    StakePoolInstruction.updateTokenMetadata({\n      stakePool: stakePoolAddress,\n      manager: stakePool.account.data.manager,\n      tokenMetadata,\n      withdrawAuthority,\n      name,\n      symbol,\n      uri,\n    }),\n  );\n\n  return {\n    instructions,\n  };\n}\n"],"names":["base64Js","byteLength","toByteArray","fromByteArray","lookup","revLookup","Arr","Uint8Array","Array","code","i","len","length","charCodeAt","getLens","b64","Error","validLen","indexOf","placeHoldersLen","lens","_byteLength","tmp","arr","curByte","tripletToBase64","num","encodeChunk","uint8","start","end","output","push","join","extraBytes","parts","maxChunkLength","len2","ieee754","read","buffer","offset","isLE","mLen","nBytes","e","m","eLen","eMax","eBias","nBits","d","s","NaN","Infinity","Math","pow","write","value","c","rt","abs","isNaN","floor","log","LN2","base64","require$$0","require$$1","customInspectSymbol","Symbol","exports","Buffer","SlowBuffer","INSPECT_MAX_BYTES","K_MAX_LENGTH","kMaxLength","TYPED_ARRAY_SUPPORT","typedArraySupport","console","error","proto","foo","Object","setPrototypeOf","prototype","defineProperty","enumerable","get","isBuffer","this","undefined","byteOffset","createBuffer","RangeError","buf","arg","encodingOrOffset","TypeError","allocUnsafe","from","poolSize","fromString","ArrayBuffer","isView","fromArrayView","isInstance","fromArrayBuffer","SharedArrayBuffer","valueOf","b","fromObject","toPrimitive","assertSize","size","alloc","fill","encoding","checked","allocUnsafeSlow","string","isEncoding","actual","slice","fromArrayLike","array","arrayView","copy","obj","numberIsNaN","type","isArray","data","toString","_isBuffer","compare","a","x","y","min","String","toLowerCase","concat","list","pos","set","call","mustMatch","arguments","loweredCase","utf8ToBytes","base64ToBytes","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","n","swap16","swap32","swap64","apply","toLocaleString","equals","inspect","str","max","replace","trim","target","thisStart","thisEnd","thisCopy","targetCopy","bidirectionalIndexOf","val","dir","arrayIndexOf","lastIndexOf","indexSize","arrLength","valLength","readUInt16BE","foundIndex","found","j","includes","hexWrite","Number","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","asciiToBytes","base64Write","ucs2Write","utf16leToBytes","isFinite","toJSON","_arr","res","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","decodeCodePointsArray","MAX_ARGUMENTS_LENGTH","codePoints","fromCharCode","ret","out","hexSliceLookupTable","bytes","newBuf","subarray","checkOffset","ext","readUintLE","readUIntLE","noAssert","mul","readUintBE","readUIntBE","readUint8","readUInt8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUInt32LE","readUint32BE","readUInt32BE","readBigUInt64LE","defineBigIntMethod","validateNumber","first","last","boundsError","lo","hi","BigInt","readBigUInt64BE","readIntLE","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readBigInt64LE","readBigInt64BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","checkInt","writeUintLE","writeUIntLE","maxBytes","writeUintBE","writeUIntBE","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUInt32LE","writeUint32BE","writeUInt32BE","wrtBigUInt64LE","checkIntBI","wrtBigUInt64BE","writeBigUInt64LE","writeBigUInt64BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeBigInt64LE","writeBigInt64BE","checkIEEE754","writeFloat","littleEndian","writeFloatLE","writeFloatBE","writeDouble","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","errors","E","sym","getMessage","Base","NodeError","constructor","super","writable","configurable","name","stack","message","range","input","msg","received","isInteger","addNumericalSeparator","checkBounds","ERR_OUT_OF_RANGE","ERR_INVALID_ARG_TYPE","ERR_BUFFER_OUT_OF_BOUNDS","INVALID_BASE64_RE","base64clean","split","units","leadSurrogate","byteArray","src","dst","alphabet","table","i16","fn","BufferBigIntNotDefined","number","isSafeInteger","isBytes","lengths","hash","h","create","outputLen","blockLen","exists","instance","checkFinished","destroyed","finished","crypto","globalThis","createView","DataView","rotr","word","shift","Uint32Array","TextEncoder","encode","toBytes","abytes","concatBytes","arrays","sum","pad","Hash","clone","_cloneInto","wrapConstructor","hashCons","hashC","update","digest","randomBytes","bytesLength","getRandomValues","setBigUint64","view","_32n","_u32_max","wh","wl","l","setUint32","Chi","Maj","HashMD","padOffset","take","dataView","process","roundClean","digestInto","oview","outLen","state","destroy","to","U32_MASK64","fromBig","le","lst","Ah","Al","toBig","shrSH","_l","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","_h","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","add","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5L","El","add5H","Eh","u64","SHA512_Kh","SHA512_Kl","map","SHA512_W_H","SHA512_W_L","SHA512","Fh","Fl","Gh","Gl","Hh","Hl","getUint32","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","CHIl","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","sha512","_0n","_1n","_2n","item","hexes","_","padStart","bytesToHex","hex","numberToHexUnpadded","hexToNumber","asciis","_0","_9","_A","_F","_a","_f","asciiToBase16","char","hexToBytes","hl","al","ai","n1","n2","bytesToNumberBE","bytesToNumberLE","reverse","numberToBytesBE","numberToBytesLE","numberToVarBytesBE","ensureBytes","title","expectedLength","equalBytes","diff","bitLen","bitGet","bitSet","bitMask","u8n","u8fr","createHmacDrbg","hashLen","qByteLen","hmacFn","v","k","reset","reseed","seed","gen","sl","genUntil","pred","validatorFns","bigint","function","boolean","stringOrUint8Array","field","object","Fp","isValid","validateObject","validators","optValidators","checkField","fieldName","isOptional","checkVal","entries","_3n","_4n","_5n","_8n","mod","result","power","modulo","pow2","invert","u","q","r","gcd","tonelliShanks","P","legendreC","Q","S","Z","p1div4","tonelliFast","root","eql","sqr","Q1div2","tonelliSlow","neg","ONE","g","ZERO","t2","ge","FpSqrt","sqrt3mod4","c1","sqrt5mod8","nv","isNegativeLE","FIELD_FIELDS","validateField","initial","ORDER","MASK","BYTES","BITS","opts","reduce","FpPow","f","p","FpInvertBatch","nums","lastMultiplied","acc","is0","inverted","inv","reduceRight","nLength","nBitLength","_nBitLength","nByteLength","ceil","Field","redef","sqrtP","freeze","isOdd","lhs","rhs","div","sqrN","addN","subN","mulN","sqrt","invertBatch","cmov","fromBytes","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","mapHashToField","key","fieldLen","minLen","reduced","wNAF","bits","constTimeNegate","condition","negate","W","windows","windowSize","unsafeLadder","elm","double","precomputeWindow","points","base","window","precomputes","BASE","mask","maxNumber","shiftBy","wbits","offset1","offset2","cond1","cond2","wNAFCached","precomputesMap","transform","_WINDOW_SIZE","comp","validateBasic","curve","Gx","Gy","VERIFY_DEFAULT","zip215","validateOpts","ut.validateObject","adjustScalarBytes","domain","uvRatio","mapToCurve","twistedEdwards","curveDef","CURVE","CURVE_ORDER","prehash","cHash","cofactor","modP","ctx","phflag","inBig","inRange","in0MaskRange","assertInRange","assertGE0","pointPrecomputes","Map","isPoint","other","Point","ex","ey","ez","et","toAffine","fromAffine","normalizeZ","toInv","_setWindowSize","delete","assertValidity","X","Y","T","X2","Y2","Z2","Z4","aX2","left","right","XY","ZT","X1","Y1","Z1","X1Z2","X2Z1","Y1Z2","Y2Z1","A","B","C","D","x1y1","G","F","H","X3","Y3","T3","Z3","T1","T2","subtract","wnaf","multiply","scalar","multiplyUnsafe","I","isSmallOrder","isTorsionFree","iz","z","ax","ay","zz","clearCofactor","fromHex","normed","lastByte","ut.bytesToNumberLE","y2","isXOdd","isLastByteOdd","fromPrivateKey","privKey","getExtendedPublicKey","point","toRawBytes","ut.numberToBytesLE","toHex","ut.bytesToHex","modN","modN_LE","hashed","head","prefix","pointBytes","getPublicKey","hashDomainToScalar","context","msgs","ut.concatBytes","sign","options","R","verifyOpts","verify","sig","publicKey","SB","RkA","utils","randomPrivateKey","precompute","ExtendedPoint","ED25519_P","ED25519_SQRT_M1","ed25519_pow_2_252_3","_10n","_20n","_40n","_80n","x2","b2","b4","b5","b10","b20","b40","b80","b160","b240","b250","pow_p_5_8","v3","v7","vx2","root1","root2","useRoot1","useRoot2","noRoot","ed25519Defaults","ed25519","module","assert","inherits","ctor","superCtor","super_","TempCtor","BN","endian","isBN","negative","words","red","_init","wordSize","cmp","init","_initNumber","_initArray","_parseHex","_parseBase","toArray","w","off","_strip","parseHex4Bits","index","parseHexByte","lowerBound","parseLength","parseBase","limbLen","limbPow","total","imuln","_iaddn","dest","move","_move","_expand","strip","_normSign","for","zeros","groupSizes","groupBases","padding","carry","groupSize","groupBase","isZero","modrn","idivn","toNumber","toBuffer","toArrayLike","allocate","ArrayType","reqLength","postfix","_toArrayLikeLE","position","_toArrayLikeBE","clz32","_countBits","t","_zeroBits","toBitArray","bit","wbit","zeroBits","toTwos","width","inotn","iaddn","fromTwos","testn","notn","ineg","isNeg","iuor","ior","or","uor","iuand","iand","and","uand","iuxor","ixor","xor","uxor","bytesNeeded","bitsLeft","setn","iadd","isub","smallMulTo","self","ncarry","rword","maxJ","comb10MulTo","o","mid","a0","al0","ah0","a1","al1","ah1","a2","al2","ah2","a3","al3","ah3","a4","al4","ah4","a5","al5","ah5","a6","al6","ah6","a7","al7","ah7","a8","al8","ah8","a9","al9","ah9","b0","bl0","bh0","b1","bl1","bh1","bl2","bh2","b3","bl3","bh3","bl4","bh4","bl5","bh5","b6","bl6","bh6","b7","bl7","bh7","b8","bl8","bh8","b9","bl9","bh9","imul","w0","w1","w2","w3","w4","w5","w6","w7","w8","w9","w10","w11","w12","w13","w14","w15","w16","w17","w18","bigMulTo","hncarry","jumboMulTo","mulTo","mulf","isNegNum","muln","isqr","iushln","carryMask","newCarry","ishln","iushrn","hint","extended","maskedWords","ishrn","shln","ushln","shrn","ushrn","imaskn","maskn","isubn","addn","subn","iabs","_ishlnsubmul","_wordDiv","mode","bhi","bhiBits","qj","divmod","positive","divn","umod","divRound","dm","half","r2","andln","modn","egcd","isEven","yp","xp","im","jm","_invmp","x1","delta","cmpn","invm","bincn","ucmp","gtn","gt","gten","gte","ltn","lt","lten","lte","eqn","eq","Red","toRed","convertTo","_forceRed","fromRed","convertFrom","forceRed","redAdd","redIAdd","redSub","redISub","redShl","shl","redMul","_verify2","redIMul","redSqr","_verify1","redISqr","redSqrt","redInvm","redNeg","redPow","primes","k256","p224","p192","p25519","MPrime","_tmp","ireduce","rlen","imulK","K256","prev","next","P224","P192","P25519","_prime","prime","imod","mod3","one","nOne","lpow","wnd","current","currentLen","mont","Mont","rinv","minv","copyProps","SafeBuffer","_Buffer","ALPHABET","BASE_MAP","charAt","xc","LEADER","FACTOR","iFACTOR","source","zeroes","pbegin","pend","b58","it1","it2","repeat","decodeUnsafe","psz","b256","it3","it4","vch","decode","basex","bs58","SHA256_K","SHA256_IV","SHA256_W","SHA256","W15","W2","s0","s1","sigma1","sigma0","sha256","ToDictionary","stringToCodePoints","codePointsToString","code_points","cp","end_of_stream","Stream","tokens","endOfStream","prepend","token","unshift","pop","decoderError","fatal","opt_code_point","DEFAULT_ENCODING","TextDecoder","_streaming","_BOMseen","_decoder","_fatal","Boolean","_ignoreBOM","UTF8Decoder","input_stream","handler","_encoder","_options","opt_string","UTF8Encoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","stream","bite","code_point","count","temp","encoding_lib","__createBinding","k2","__setModuleDefault","__decorate","decorators","desc","getOwnPropertyDescriptor","Reflect","decorate","__importStar","__esModule","hasOwnProperty","__importDefault","default","lib","deserializeUnchecked","deserialize","serialize","BinaryWriter","BorshError","baseDecode","bn_js_1","bs58_1","require$$2","ResolvedTextDecoder","textDecoder","baseEncode","INITIAL_LENGTH","fieldPath","originalMessage","addToFieldPath","splice","maybeResize","writeU8","writeU16","writeU32","writeU64","writeBuffer","writeU128","writeU256","writeU512","writeString","writeFixedArray","writeArray","elem","handlingRangeError","propertyKey","propertyDescriptor","originalMethod","args","BinaryReader","readU8","readU16","readU32","readU64","readBuffer","readU128","readU256","readU512","readString","readFixedArray","readArray","capitalizeFirstLetter","toUpperCase","serializeField","schema","fieldType","writer","kind","forEach","serializeStruct","borshSerialize","structSchema","fields","idx","values","Writer","deserializeField","reader","option","deserializeStruct","classType","borshDeserialize","fieldValue","Reader","Layout_1","s16","nu64be","u48be","u40be","u32be","u16be","nu64","u40","u32","u24","u16","greedy","Constant","UTF8","Blob","BitStructure","VariantLayout","Union","UnionLayoutDiscriminator","Structure","Sequence","DoubleBE","Double","Float","NearInt64BE","NearUInt64BE","NearUInt64","IntBE","Int","UInt","OffsetLayout","GreedyCount","ExternalLayout","nameWithProperty","Layout","uint8ArrayToBuffer","checkUint8Array","constant","cstr","blob","unionLayoutDiscriminator","union","struct","f64","f32be","f32","ns64be","s40be","s32be","s24be","s16be","s48","s40","s32","s24","buffer_1","span","property","makeDestinationObject","getSpan","replicate","rv","assign","fromArray","bindConstructorLayout","Class","layout","layout_","boundConstructor_","isCount","elementSpan","rem","UIntBE","V2E32","divmodInt64","hi32","lo32","roundedInt64","NearInt64","FloatBE","elementLayout","elo","decodePrefixes","fd","fsp","firstOffset","lastOffset","lastWrote","fv","layoutFor","offsetOf","UnionDiscriminator","discr","defaultLayout","discriminator","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","bind","getSourceVariant","configGetSourceVariant","gsv","vlo","getVariant","tag","dlo","clo","contentOffset","addVariant","variant","vb","fixBitwiseResult","msb","_packedSetValue","_packedGetValue","addField","bf","BitField","addBoolean","fieldFor","container","totalBits","usedBits","valueMask","wordMask","wordValue","srcBuffer","CString","srcb","maxSpan","u8","u48","u24be","s8","ns64","s48be","f64be","seq","utf8","browser","toBigIntLE","reversed","toBigIntBE","toBufferLE","toBufferBE","StructError","failure","failures","cached","explanation","rest","path","cause","isIterable","isObject","iterator","isNonArrayObject","print","JSON","stringify","shiftIterator","done","toFailure","branch","refinement","toFailures","run","coerce","coercer","status","validator","ts","Set","refiner","Struct$1","Struct","props","is","validate","tuples","tuple","define","any","Element","enums","description","literal","never","nullable","optional","record","Key","Value","Structs","Never","keys","coerced","unknown","HMAC","_key","assertHash","iHash","oHash","assertExists","assertBytes","getPrototypeOf","hmac","validatePointOpts","allowedPrivateKeyLengths","wrapPrivateKey","allowInfinityPoint","endo","beta","splitScalar","b2n","h2b","ut","DER","Err","DERErr","_parseInt","toSig","ut.abytes","sBytes","rBytesLeft","hexFromSig","rhl","rl","weierstrassPoints","_c","_isCompressed","tail","weierstrassEquation","x3","isWithinCurveOrder","assertGE","normPrivateKeyToScalar","ut.isBytes","ut.bytesToNumberBE","mod.mod","assertPrjPoint","px","py","pz","privateKey","hasEvenY","U1","U2","t0","t1","t3","t4","t5","k1neg","k1","k2neg","k1p","k2p","fake","f1p","f2p","multiplyAndAddUnsafe","isCompressed","_bits","ProjectivePoint","bits2int","bits2int_modN","lowS","weierstrass","compressedLen","uncompressedLen","isValidFieldElement","invN","mod.invert","cat","sqrtError","suffix","isYOdd","isHeadOdd","numToNByteStr","ut.numberToBytesBE","isBiggerThanHalfOrder","HALF","normalizeS","slcNum","Signature","recovery","fromCompact","fromDER","addRecoveryBit","recoverPublicKey","msgHash","rec","radj","ir","u1","u2","hasHighS","toDERRawBytes","ut.hexToBytes","toDERHex","toCompactRawBytes","toCompactHex","isValidPrivateKey","mod.getMinHashLength","mod.mapHashToField","isProbPub","getSharedSecret","privateA","publicB","ORDER_MASK","ut.bitMask","int2octets","prepSig","defaultSigOpts","some","extraEntropy","ent","h1int","seedArgs","k2sig","kBytes","ik","normS","defaultVerOpts","drbg","ut.createHmacDrbg","signature","sg","_sig","derError","getHash","createCurve","defHash","secp256k1P","secp256k1N","divNearest","sqrtMod","_6n","_11n","_22n","_23n","_44n","_88n","b11","b22","b44","b88","b176","b220","b223","secp256k1","POW_2_128","c2","generateKeypair","privateScalar","secretKey","isOnCurve","properties","SOLANA_SCHEMA","decodeUnchecked","_PublicKey","MAX_SEED_LENGTH","PUBLIC_KEY_LENGTH","isPublicKeyData","_bn","uniquePublicKeyCounter","PublicKey","decoded","unique","toBase58","zeroPad","toStringTag","createWithSeed","fromPublicKey","programId","publicKeyBytes","createProgramAddressSync","seeds","createProgramAddress","findProgramAddressSync","nonce","address","seedsWithNonce","err","findProgramAddress","pubkeyData","pubkey","PACKET_DATA_SIZE","VERSION_PREFIX_MASK","SIGNATURE_LENGTH_IN_BYTES","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","readonly","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","BufferLayout.blob","rustString","rsl","BufferLayout.struct","BufferLayout.u32","BufferLayout.offset","_decode","_encode","rslShim","chars","authorized","lockup","BufferLayout.ns64","voteInit","BufferLayout.u8","voteAuthorizeWithSeedArgs","getAlloc","getItemAlloc","decodeLength","encodeLength","rem_len","CompiledKeys","payer","keyMetaMap","compile","getOrInsertDefault","keyMeta","isSigner","isWritable","isInvoked","payerKeyMeta","ix","accountMeta","getMessageComponents","mapEntries","writableSigners","filter","readonlySigners","writableNonSigners","readonlyNonSigners","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","payerAddress","extractTableLookup","lookupTable","writableIndexes","drainedWritableKeys","drainKeysFoundInLookupTable","addresses","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","END_OF_BUFFER_ERROR_MESSAGE","guardedShift","guardedSplice","Message","accountKeys","recentBlockhash","indexToProgramIds","account","version","compiledInstructions","accounts","addressTableLookups","getAccountKeys","compiledKeys","payerKey","isAccountSigner","isAccountWritable","numSignedAccounts","unsignedAccountIndex","numUnsignedAccounts","numWritableUnsignedAccounts","numWritableSignedAccounts","isProgramId","has","programIds","nonProgramIds","numKeys","keyCount","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","BufferLayout.seq","signDataLayout","transaction","signData","accountCount","dataSlice","messageArgs","DEFAULT_SIGNATURE","TransactionInstruction","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","minContextSlot","blockhash","nonceInstruction","signers","items","compileMessage","warn","accountMetas","uniqueMetas","pubkeyString","uniqueIndex","sort","localeMatcher","usage","sensitivity","ignorePunctuation","numeric","caseFirst","localeCompare","feePayerIndex","payerMeta","signedKeys","unsignedKeys","_compile","valid","every","pair","serializeMessage","getEstimatedFee","connection","getFeeForMessage","setSigners","seen","uniqueSigners","signer","_partialSign","partialSign","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","signatureErrors","_getMessageSignednessErrors","missing","invalid","config","sigErrors","errorMessage","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","encodeData","allocLength","layoutFields","FeeCalculatorLayout","BufferLayout.nu64","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","encodeDecode","bigInt","bigIntLayout","SYSTEM_INSTRUCTION_LAYOUTS","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","UpgradeNonceAccount","SystemProgram","createAccount","params","lamports","space","fromPubkey","newAccountPubkey","transfer","basePubkey","toPubkey","accountPubkey","createAccountWithSeed","createNonceAccount","noncePubkey","initParams","authorizedPubkey","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","newAuthorizedPubkey","PublicKeyFromString","RawAccountDataResult","BufferFromRawAccountData","createRpcResult","jsonrpc","id","UnknownRpcResult","jsonRpcResult","jsonRpcResultAndContext","slot","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","taper","terminal","epoch","effectiveSlot","amount","postBalance","commission","GetRecentPrioritizationFeesResult","prioritizationFee","GetInflationRateResult","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","GetLeaderScheduleResult","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","ParsedInstructionStruct","program","PartiallyDecodedInstructionStruct","logs","executable","owner","rentEpoch","unitsConsumed","returnData","innerInstructions","byIdentity","firstSlot","lastSlot","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","ParsedAccountDataResult","AccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","active","inactive","memo","blockTime","subscription","ProgramAccountInfoResult","SlotInfoResult","parent","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","gossip","tpu","rpc","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","lastVote","rootSlot","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","previousBlockhash","parentSlot","transactions","rewards","feeCalculator","lamportsPerSignature","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","LogsResult","Keypair","keypair","_keypair","generate","fromSecretKey","skipValidation","computedPublicKey","ii","fromSeed","CreateLookupTable","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","SetComputeUnitPrice","LayoutExports$1","BufferLayout.u16","_Lockup","STAKE_CONFIG_ID","Lockup","unixTimestamp","custodian","STAKE_INSTRUCTION_LAYOUTS","Initialize","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","StakeAuthorizationLayout","Staker","Withdrawer","StakeProgram","initialize","stakePubkey","maybeLockup","staker","withdrawer","delegate","authorize","stakeAuthorizationType","custodianPubkey","newAuthorized","authorizeWithSeed","authorityBase","authoritySeed","authorityOwner","splitInstruction","splitStakePubkey","rentExemptReserve","splitWithSeed","merge","sourceStakePubKey","withdraw","deactivate","InitializeAccount","UpdateValidatorIdentity","website","details","iconUrl","keybaseUsername","LAMPORTS_PER_SOL","TOKEN_PROGRAM_ID","ASSOCIATED_TOKEN_PROGRAM_ID","bool","boolLayout","publicKeyLayout","TokenError","TokenAccountNotFoundError","TokenInvalidAccountError","TokenInvalidAccountOwnerError","TokenInvalidAccountSizeError","TokenOwnerOffCurveError","TokenInstruction","addSigners","ownerOrAuthority","multiSigners","approveInstructionData","createApproveInstruction","Approve","AccountType","ACCOUNT_TYPE_SIZE","MultisigLayout","MULTISIG_SIZE","AccountState","AccountLayout","ACCOUNT_SIZE","async","getAccount","commitment","info","getAccountInfo","unpackAccount","rawAccount","tlvData","Account","delegateOption","delegatedAmount","isInitialized","Uninitialized","isFrozen","Frozen","isNative","isNativeOption","closeAuthority","closeAuthorityOption","MintLayout","getAssociatedTokenAddressSync","allowOwnerOffCurve","associatedTokenProgramId","createAssociatedTokenAccountIdempotentInstruction","associatedToken","buildAssociatedTokenAccountInstruction","solToLamports","lamportsToSol","signMultiplier","absLamports","lamportsString","splitIndex","solString","parseFloat","METADATA_PROGRAM_ID","METADATA_MAX_NAME_LENGTH","METADATA_MAX_SYMBOL_LENGTH","METADATA_MAX_URI_LENGTH","STAKE_POOL_PROGRAM_ID","MAX_VALIDATORS_TO_UPDATE","EPHEMERAL_STAKE_SEED_PREFIX","TRANSIENT_STAKE_SEED_PREFIX","MINIMUM_ACTIVE_STAKE","findWithdrawAuthorityProgramAddress","stakePoolAddress","findStakeProgramAddress","voteAccountAddress","findTransientStakeProgramAddress","findEphemeralStakeProgramAddress","findMetadataAddress","stakePoolMintAddress","Layout$1","upv","const","BNLayout","LayoutCls","signed","WrappedLayout","decoder","encoder","OptionLayout","vec","feeFields","BigNumFromString","FutureEpochLayout","futureEpoch","StakeAccountType","StakeMeta","StakeAccountInfo","stake","delegation","voter","activationEpoch","deactivationEpoch","warmupCooldownRate","creditsObserved","StakeAccount","StakePoolLayout","ValidatorStakeInfoStatus","ValidatorStakeInfoLayout","ValidatorListLayout","getValidatorListAccount","prepareWithdrawAccounts","stakePool","compareFn","skipFee","validatorListAcc","validatorList","minBalanceForRentExemption","getMinimumBalanceForRentExemption","minBalance","Active","stakeAccountAddress","activeStakeLamports","isPreferred","preferredWithdrawValidatorVoteAddress","voteAddress","stakeAddress","transientStakeLamports","transientStakeAccountAddress","transientSeedSuffixStart","reserveStake","reserveStakeBalance","_b","withdrawFrom","remainingAmount","stakeWithdrawalFee","inverseFee","numerator","denominator","filteredAccounts","availableForWithdrawal","calcPoolTokensForDeposit","poolAmount","stakeLamports","poolTokenSupply","totalLamports","calcLamportsWithdrawAmount","poolTokens","newStakeAccount","stakeReceiverKeypair","decodeData","arrayChunk","MOVE_STAKE_LAYOUT","UPDATE_VALIDATOR_LIST_BALANCE_LAYOUT","tokenMetadataLayout","nameLength","symbolLength","uriLength","STAKE_POOL_INSTRUCTION_LAYOUTS","AddValidatorToPool","RemoveValidatorFromPool","DecreaseValidatorStake","IncreaseValidatorStake","UpdateValidatorListBalance","UpdateStakePoolBalance","CleanupRemovedValidatorEntries","DepositStake","WithdrawStake","DepositSol","WithdrawSol","IncreaseAdditionalValidatorStake","DecreaseAdditionalValidatorStake","DecreaseValidatorStakeWithReserve","Redelegate","StakePoolInstruction","addValidatorToPool","withdrawAuthority","validatorStake","validatorVote","removeValidatorFromPool","transientStake","updateValidatorListBalance","startIndex","noMerge","validatorAndTransientStakePairs","updateStakePoolBalance","managerFeeAccount","poolMint","cleanupRemovedValidatorEntries","increaseValidatorStake","transientStakeSeed","increaseAdditionalValidatorStake","ephemeralStake","ephemeralStakeSeed","decreaseValidatorStake","decreaseValidatorStakeWithReserve","decreaseAdditionalValidatorStake","depositStake","depositAuthority","destinationPoolAccount","referralPoolAccount","depositSol","fundingAccount","withdrawStake","destinationStake","destinationStakeAuthority","sourceTransferAuthority","sourcePoolAccount","withdrawSol","destinationSystemAccount","solWithdrawAuthority","createTokenMetadata","tokenMetadata","manager","symbol","uri","nameLen","symbolLen","uriLen","updateTokenMetadata","decodeDepositStake","checkProgramId","checkKeyLength","decodeDepositSol","getStakePoolAccount","getStakeAccount","stakeAccount","getParsedAccountInfo","getStakePoolAccounts","stakePoolProgramAddress","response","getProgramAccounts","poolTokenReceiverAccount","associatedAddress","stakeDepositAuthority","destinationTokenAccount","referrerTokenAccount","fromBalance","getBalance","stakePoolAccount","userSolTransfer","tokenOwner","useReserve","stakeReceiver","poolTokenAccount","validatorComparator","tokenAccount","stakeAccountRentExemption","stakeReceiverAccount","withdrawAccounts","voteAccount","_d","validatorListAccount","isValidVoter","find","availableLamports","userTransferAuthority","totalRentFreeBalances","maxWithdrawAccounts","withdrawAccount","solWithdrawAmount","infoMsg","_e","stakeToReceive","stakeKeypair","newStakeKeypair","solReceiver","poolWithdrawAuthority","expectedSolWithdrawAuthority","withdrawTransaction","validatorInfo","updateStakePool","updateListInstructions","validatorChunks","validatorChunk","finalInstructions","stakePoolInfo","reserveAccountStakeAddress","lastUpdateEpoch","maxNumberOfValidators","maxValidators","currentNumberOfValidators","epochInfo","getEpochInfo","minimumReserveStakeBalance","stakeAccounts","Promise","all","updateRequired","validatorActiveStakeLamports","validatorLastUpdateEpoch","validatorLamports","validatorTransientStakeAccountAddress","validatorTransientStakeLamports","totalPoolTokens","stakeWithdrawBumpSeed","transientSeedSuffixEnd","validatorListStorageAccount","tokenProgramId","epochFee","nextEpochFee","preferredDepositValidatorVoteAddress","stakeDepositFee","nextStakeWithdrawalFee","stakeReferralFee","solDepositAuthority","solDepositFee","solReferralFee","solWithdrawalFee","nextSolWithdrawalFee","lastEpochPoolTokenSupply","lastEpochTotalLamports","reserveStakeLamports","createPoolTokenMetadata","updatePoolTokenMetadata"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,33,46]}