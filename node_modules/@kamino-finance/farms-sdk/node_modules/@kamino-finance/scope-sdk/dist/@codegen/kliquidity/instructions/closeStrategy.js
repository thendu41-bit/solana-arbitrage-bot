"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.closeStrategy = closeStrategy;
/* eslint-disable @typescript-eslint/no-unused-vars */
const kit_1 = require("@solana/kit");
const programId_1 = require("../programId");
function closeStrategy(accounts, programAddress = programId_1.PROGRAM_ID) {
    const keys = [
        {
            address: accounts.adminAuthority.address,
            role: 3,
            signer: accounts.adminAuthority,
        },
        { address: accounts.strategy, role: 1 },
        { address: accounts.oldPositionOrBaseVaultAuthority, role: 1 },
        { address: accounts.oldPositionMintOrBaseVaultAuthority, role: 1 },
        { address: accounts.oldPositionTokenAccountOrBaseVaultAuthority, role: 1 },
        { address: accounts.oldTickArrayLowerOrBaseVaultAuthority, role: 1 },
        { address: accounts.oldTickArrayUpperOrBaseVaultAuthority, role: 1 },
        { address: accounts.pool, role: 0 },
        { address: accounts.tokenAVault, role: 1 },
        { address: accounts.tokenBVault, role: 1 },
        { address: accounts.userTokenAAta, role: 1 },
        { address: accounts.userTokenBAta, role: 1 },
        { address: accounts.tokenAMint, role: 1 },
        { address: accounts.tokenBMint, role: 1 },
        { address: accounts.reward0Vault, role: 1 },
        { address: accounts.reward1Vault, role: 1 },
        { address: accounts.reward2Vault, role: 1 },
        { address: accounts.kaminoReward0Vault, role: 1 },
        { address: accounts.kaminoReward1Vault, role: 1 },
        { address: accounts.kaminoReward2Vault, role: 1 },
        { address: accounts.userReward0Ata, role: 1 },
        { address: accounts.userReward1Ata, role: 1 },
        { address: accounts.userReward2Ata, role: 1 },
        { address: accounts.userKaminoReward0Ata, role: 1 },
        { address: accounts.userKaminoReward1Ata, role: 1 },
        { address: accounts.userKaminoReward2Ata, role: 1 },
        { address: accounts.baseVaultAuthority, role: 1 },
        { address: accounts.poolProgram, role: 0 },
        { address: accounts.tokenProgram, role: 0 },
        { address: accounts.tokenATokenProgram, role: 0 },
        { address: accounts.tokenBTokenProgram, role: 0 },
        { address: accounts.system, role: 0 },
        (0, kit_1.isSome)(accounts.eventAuthority)
            ? { address: accounts.eventAuthority.value, role: 0 }
            : { address: programAddress, role: 0 },
    ];
    const identifier = Buffer.from([56, 247, 170, 246, 89, 221, 134, 200]);
    const data = identifier;
    const ix = { accounts: keys, programAddress, data };
    return ix;
}
//# sourceMappingURL=closeStrategy.js.map