"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StakeSystem = void 0;
const bn_js_1 = __importDefault(require("bn.js")); // eslint-disable-line @typescript-eslint/no-unused-vars
const types = __importStar(require("../types")); // eslint-disable-line @typescript-eslint/no-unused-vars
const borsh = __importStar(require("@coral-xyz/borsh"));
class StakeSystem {
    stakeList;
    delayedUnstakeCoolingDown;
    stakeDepositBumpSeed;
    stakeWithdrawBumpSeed;
    /** set by admin, how much slots before the end of the epoch, stake-delta can start */
    slotsForStakeDelta;
    /**
     * Marks the start of stake-delta operations, meaning that if somebody starts a delayed-unstake ticket
     * after this var is set with epoch_num the ticket will have epoch_created = current_epoch+1
     * (the user must wait one more epoch, because their unstake-delta will be execute in this epoch)
     */
    lastStakeDeltaEpoch;
    minStake;
    /**
     * can be set by validator-manager-auth to allow a second run of stake-delta to stake late stakers in the last minute of the epoch
     * so we maximize user's rewards
     */
    extraStakeDeltaRuns;
    constructor(fields) {
        this.stakeList = new types.List({ ...fields.stakeList });
        this.delayedUnstakeCoolingDown = fields.delayedUnstakeCoolingDown;
        this.stakeDepositBumpSeed = fields.stakeDepositBumpSeed;
        this.stakeWithdrawBumpSeed = fields.stakeWithdrawBumpSeed;
        this.slotsForStakeDelta = fields.slotsForStakeDelta;
        this.lastStakeDeltaEpoch = fields.lastStakeDeltaEpoch;
        this.minStake = fields.minStake;
        this.extraStakeDeltaRuns = fields.extraStakeDeltaRuns;
    }
    static layout(property) {
        return borsh.struct([
            types.List.layout("stakeList"),
            borsh.u64("delayedUnstakeCoolingDown"),
            borsh.u8("stakeDepositBumpSeed"),
            borsh.u8("stakeWithdrawBumpSeed"),
            borsh.u64("slotsForStakeDelta"),
            borsh.u64("lastStakeDeltaEpoch"),
            borsh.u64("minStake"),
            borsh.u32("extraStakeDeltaRuns"),
        ], property);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    static fromDecoded(obj) {
        return new StakeSystem({
            stakeList: types.List.fromDecoded(obj.stakeList),
            delayedUnstakeCoolingDown: obj.delayedUnstakeCoolingDown,
            stakeDepositBumpSeed: obj.stakeDepositBumpSeed,
            stakeWithdrawBumpSeed: obj.stakeWithdrawBumpSeed,
            slotsForStakeDelta: obj.slotsForStakeDelta,
            lastStakeDeltaEpoch: obj.lastStakeDeltaEpoch,
            minStake: obj.minStake,
            extraStakeDeltaRuns: obj.extraStakeDeltaRuns,
        });
    }
    static toEncodable(fields) {
        return {
            stakeList: types.List.toEncodable(fields.stakeList),
            delayedUnstakeCoolingDown: fields.delayedUnstakeCoolingDown,
            stakeDepositBumpSeed: fields.stakeDepositBumpSeed,
            stakeWithdrawBumpSeed: fields.stakeWithdrawBumpSeed,
            slotsForStakeDelta: fields.slotsForStakeDelta,
            lastStakeDeltaEpoch: fields.lastStakeDeltaEpoch,
            minStake: fields.minStake,
            extraStakeDeltaRuns: fields.extraStakeDeltaRuns,
        };
    }
    toJSON() {
        return {
            stakeList: this.stakeList.toJSON(),
            delayedUnstakeCoolingDown: this.delayedUnstakeCoolingDown.toString(),
            stakeDepositBumpSeed: this.stakeDepositBumpSeed,
            stakeWithdrawBumpSeed: this.stakeWithdrawBumpSeed,
            slotsForStakeDelta: this.slotsForStakeDelta.toString(),
            lastStakeDeltaEpoch: this.lastStakeDeltaEpoch.toString(),
            minStake: this.minStake.toString(),
            extraStakeDeltaRuns: this.extraStakeDeltaRuns,
        };
    }
    static fromJSON(obj) {
        return new StakeSystem({
            stakeList: types.List.fromJSON(obj.stakeList),
            delayedUnstakeCoolingDown: new bn_js_1.default(obj.delayedUnstakeCoolingDown),
            stakeDepositBumpSeed: obj.stakeDepositBumpSeed,
            stakeWithdrawBumpSeed: obj.stakeWithdrawBumpSeed,
            slotsForStakeDelta: new bn_js_1.default(obj.slotsForStakeDelta),
            lastStakeDeltaEpoch: new bn_js_1.default(obj.lastStakeDeltaEpoch),
            minStake: new bn_js_1.default(obj.minStake),
            extraStakeDeltaRuns: obj.extraStakeDeltaRuns,
        });
    }
    toEncodable() {
        return StakeSystem.toEncodable(this);
    }
}
exports.StakeSystem = StakeSystem;
//# sourceMappingURL=StakeSystem.js.map