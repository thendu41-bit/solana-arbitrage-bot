import { Address, GetAccountInfoApi, GetMultipleAccountsApi, Rpc } from "@solana/kit";
export interface TermsSignatureFields {
    signature: Array<number>;
}
export interface TermsSignatureJSON {
    signature: Array<number>;
}
export declare class TermsSignature {
    readonly signature: Array<number>;
    static readonly discriminator: Buffer<ArrayBuffer>;
    static readonly layout: import("buffer-layout").Layout<TermsSignature>;
    constructor(fields: TermsSignatureFields);
    static fetch(rpc: Rpc<GetAccountInfoApi>, address: Address, programId?: Address): Promise<TermsSignature | null>;
    static fetchMultiple(rpc: Rpc<GetMultipleAccountsApi>, addresses: Address[], programId?: Address): Promise<Array<TermsSignature | null>>;
    static decode(data: Buffer): TermsSignature;
    toJSON(): TermsSignatureJSON;
    static fromJSON(obj: TermsSignatureJSON): TermsSignature;
}
//# sourceMappingURL=TermsSignature.d.ts.map