import * as types from "../types";
import * as borsh from "@coral-xyz/borsh";
export interface ManualJSON {
    kind: "Manual";
}
export declare class Manual {
    static readonly discriminator = 0;
    static readonly kind = "Manual";
    readonly discriminator = 0;
    readonly kind = "Manual";
    toJSON(): ManualJSON;
    toEncodable(): {
        Manual: {};
    };
}
export interface PricePercentageJSON {
    kind: "PricePercentage";
}
export declare class PricePercentage {
    static readonly discriminator = 1;
    static readonly kind = "PricePercentage";
    readonly discriminator = 1;
    readonly kind = "PricePercentage";
    toJSON(): PricePercentageJSON;
    toEncodable(): {
        PricePercentage: {};
    };
}
export interface PricePercentageWithResetJSON {
    kind: "PricePercentageWithReset";
}
export declare class PricePercentageWithReset {
    static readonly discriminator = 2;
    static readonly kind = "PricePercentageWithReset";
    readonly discriminator = 2;
    readonly kind = "PricePercentageWithReset";
    toJSON(): PricePercentageWithResetJSON;
    toEncodable(): {
        PricePercentageWithReset: {};
    };
}
export interface DriftJSON {
    kind: "Drift";
}
export declare class Drift {
    static readonly discriminator = 3;
    static readonly kind = "Drift";
    readonly discriminator = 3;
    readonly kind = "Drift";
    toJSON(): DriftJSON;
    toEncodable(): {
        Drift: {};
    };
}
export interface TakeProfitJSON {
    kind: "TakeProfit";
}
export declare class TakeProfit {
    static readonly discriminator = 4;
    static readonly kind = "TakeProfit";
    readonly discriminator = 4;
    readonly kind = "TakeProfit";
    toJSON(): TakeProfitJSON;
    toEncodable(): {
        TakeProfit: {};
    };
}
export interface PeriodicRebalanceJSON {
    kind: "PeriodicRebalance";
}
export declare class PeriodicRebalance {
    static readonly discriminator = 5;
    static readonly kind = "PeriodicRebalance";
    readonly discriminator = 5;
    readonly kind = "PeriodicRebalance";
    toJSON(): PeriodicRebalanceJSON;
    toEncodable(): {
        PeriodicRebalance: {};
    };
}
export interface ExpanderJSON {
    kind: "Expander";
}
export declare class Expander {
    static readonly discriminator = 6;
    static readonly kind = "Expander";
    readonly discriminator = 6;
    readonly kind = "Expander";
    toJSON(): ExpanderJSON;
    toEncodable(): {
        Expander: {};
    };
}
export interface AutodriftJSON {
    kind: "Autodrift";
}
export declare class Autodrift {
    static readonly discriminator = 7;
    static readonly kind = "Autodrift";
    readonly discriminator = 7;
    readonly kind = "Autodrift";
    toJSON(): AutodriftJSON;
    toEncodable(): {
        Autodrift: {};
    };
}
export declare function fromDecoded(obj: any): types.RebalanceTypeKind;
export declare function fromJSON(obj: types.RebalanceTypeJSON): types.RebalanceTypeKind;
export declare function layout(property?: string): borsh.EnumLayout<unknown>;
//# sourceMappingURL=RebalanceType.d.ts.map