"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KaminoRewardInfo = void 0;
const kit_1 = require("@solana/kit"); // eslint-disable-line @typescript-eslint/no-unused-vars
const bn_js_1 = __importDefault(require("bn.js")); // eslint-disable-line @typescript-eslint/no-unused-vars
const borsh = __importStar(require("@coral-xyz/borsh"));
const utils_1 = require("../utils");
class KaminoRewardInfo {
    decimals;
    rewardVault;
    rewardMint;
    rewardCollateralId;
    lastIssuanceTs;
    rewardPerSecond;
    amountUncollected;
    amountIssuedCumulative;
    amountAvailable;
    constructor(fields) {
        this.decimals = fields.decimals;
        this.rewardVault = fields.rewardVault;
        this.rewardMint = fields.rewardMint;
        this.rewardCollateralId = fields.rewardCollateralId;
        this.lastIssuanceTs = fields.lastIssuanceTs;
        this.rewardPerSecond = fields.rewardPerSecond;
        this.amountUncollected = fields.amountUncollected;
        this.amountIssuedCumulative = fields.amountIssuedCumulative;
        this.amountAvailable = fields.amountAvailable;
    }
    static layout(property) {
        return borsh.struct([
            borsh.u64("decimals"),
            (0, utils_1.borshAddress)("rewardVault"),
            (0, utils_1.borshAddress)("rewardMint"),
            borsh.u64("rewardCollateralId"),
            borsh.u64("lastIssuanceTs"),
            borsh.u64("rewardPerSecond"),
            borsh.u64("amountUncollected"),
            borsh.u64("amountIssuedCumulative"),
            borsh.u64("amountAvailable"),
        ], property);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    static fromDecoded(obj) {
        return new KaminoRewardInfo({
            decimals: obj.decimals,
            rewardVault: obj.rewardVault,
            rewardMint: obj.rewardMint,
            rewardCollateralId: obj.rewardCollateralId,
            lastIssuanceTs: obj.lastIssuanceTs,
            rewardPerSecond: obj.rewardPerSecond,
            amountUncollected: obj.amountUncollected,
            amountIssuedCumulative: obj.amountIssuedCumulative,
            amountAvailable: obj.amountAvailable,
        });
    }
    static toEncodable(fields) {
        return {
            decimals: fields.decimals,
            rewardVault: fields.rewardVault,
            rewardMint: fields.rewardMint,
            rewardCollateralId: fields.rewardCollateralId,
            lastIssuanceTs: fields.lastIssuanceTs,
            rewardPerSecond: fields.rewardPerSecond,
            amountUncollected: fields.amountUncollected,
            amountIssuedCumulative: fields.amountIssuedCumulative,
            amountAvailable: fields.amountAvailable,
        };
    }
    toJSON() {
        return {
            decimals: this.decimals.toString(),
            rewardVault: this.rewardVault,
            rewardMint: this.rewardMint,
            rewardCollateralId: this.rewardCollateralId.toString(),
            lastIssuanceTs: this.lastIssuanceTs.toString(),
            rewardPerSecond: this.rewardPerSecond.toString(),
            amountUncollected: this.amountUncollected.toString(),
            amountIssuedCumulative: this.amountIssuedCumulative.toString(),
            amountAvailable: this.amountAvailable.toString(),
        };
    }
    static fromJSON(obj) {
        return new KaminoRewardInfo({
            decimals: new bn_js_1.default(obj.decimals),
            rewardVault: (0, kit_1.address)(obj.rewardVault),
            rewardMint: (0, kit_1.address)(obj.rewardMint),
            rewardCollateralId: new bn_js_1.default(obj.rewardCollateralId),
            lastIssuanceTs: new bn_js_1.default(obj.lastIssuanceTs),
            rewardPerSecond: new bn_js_1.default(obj.rewardPerSecond),
            amountUncollected: new bn_js_1.default(obj.amountUncollected),
            amountIssuedCumulative: new bn_js_1.default(obj.amountIssuedCumulative),
            amountAvailable: new bn_js_1.default(obj.amountAvailable),
        });
    }
    toEncodable() {
        return KaminoRewardInfo.toEncodable(this);
    }
}
exports.KaminoRewardInfo = KaminoRewardInfo;
//# sourceMappingURL=KaminoRewardInfo.js.map