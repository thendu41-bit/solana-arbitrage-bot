import * as types from "../types";
import * as borsh from "@coral-xyz/borsh";
export interface USDCJSON {
    kind: "USDC";
}
export declare class USDC {
    static readonly discriminator = 0;
    static readonly kind = "USDC";
    readonly discriminator = 0;
    readonly kind = "USDC";
    toJSON(): USDCJSON;
    toEncodable(): {
        USDC: {};
    };
}
export interface USDHJSON {
    kind: "USDH";
}
export declare class USDH {
    static readonly discriminator = 1;
    static readonly kind = "USDH";
    readonly discriminator = 1;
    readonly kind = "USDH";
    toJSON(): USDHJSON;
    toEncodable(): {
        USDH: {};
    };
}
export interface SOLJSON {
    kind: "SOL";
}
export declare class SOL {
    static readonly discriminator = 2;
    static readonly kind = "SOL";
    readonly discriminator = 2;
    readonly kind = "SOL";
    toJSON(): SOLJSON;
    toEncodable(): {
        SOL: {};
    };
}
export interface ETHJSON {
    kind: "ETH";
}
export declare class ETH {
    static readonly discriminator = 3;
    static readonly kind = "ETH";
    readonly discriminator = 3;
    readonly kind = "ETH";
    toJSON(): ETHJSON;
    toEncodable(): {
        ETH: {};
    };
}
export interface BTCJSON {
    kind: "BTC";
}
export declare class BTC {
    static readonly discriminator = 4;
    static readonly kind = "BTC";
    readonly discriminator = 4;
    readonly kind = "BTC";
    toJSON(): BTCJSON;
    toEncodable(): {
        BTC: {};
    };
}
export interface MSOLJSON {
    kind: "MSOL";
}
export declare class MSOL {
    static readonly discriminator = 5;
    static readonly kind = "MSOL";
    readonly discriminator = 5;
    readonly kind = "MSOL";
    toJSON(): MSOLJSON;
    toEncodable(): {
        MSOL: {};
    };
}
export interface STSOLJSON {
    kind: "STSOL";
}
export declare class STSOL {
    static readonly discriminator = 6;
    static readonly kind = "STSOL";
    readonly discriminator = 6;
    readonly kind = "STSOL";
    toJSON(): STSOLJSON;
    toEncodable(): {
        STSOL: {};
    };
}
export interface USDTJSON {
    kind: "USDT";
}
export declare class USDT {
    static readonly discriminator = 7;
    static readonly kind = "USDT";
    readonly discriminator = 7;
    readonly kind = "USDT";
    toJSON(): USDTJSON;
    toEncodable(): {
        USDT: {};
    };
}
export interface ORCAJSON {
    kind: "ORCA";
}
export declare class ORCA {
    static readonly discriminator = 8;
    static readonly kind = "ORCA";
    readonly discriminator = 8;
    readonly kind = "ORCA";
    toJSON(): ORCAJSON;
    toEncodable(): {
        ORCA: {};
    };
}
export interface MNDEJSON {
    kind: "MNDE";
}
export declare class MNDE {
    static readonly discriminator = 9;
    static readonly kind = "MNDE";
    readonly discriminator = 9;
    readonly kind = "MNDE";
    toJSON(): MNDEJSON;
    toEncodable(): {
        MNDE: {};
    };
}
export interface HBBJSON {
    kind: "HBB";
}
export declare class HBB {
    static readonly discriminator = 10;
    static readonly kind = "HBB";
    readonly discriminator = 10;
    readonly kind = "HBB";
    toJSON(): HBBJSON;
    toEncodable(): {
        HBB: {};
    };
}
export interface JSOLJSON {
    kind: "JSOL";
}
export declare class JSOL {
    static readonly discriminator = 11;
    static readonly kind = "JSOL";
    readonly discriminator = 11;
    readonly kind = "JSOL";
    toJSON(): JSOLJSON;
    toEncodable(): {
        JSOL: {};
    };
}
export interface USHJSON {
    kind: "USH";
}
export declare class USH {
    static readonly discriminator = 12;
    static readonly kind = "USH";
    readonly discriminator = 12;
    readonly kind = "USH";
    toJSON(): USHJSON;
    toEncodable(): {
        USH: {};
    };
}
export interface DAIJSON {
    kind: "DAI";
}
export declare class DAI {
    static readonly discriminator = 13;
    static readonly kind = "DAI";
    readonly discriminator = 13;
    readonly kind = "DAI";
    toJSON(): DAIJSON;
    toEncodable(): {
        DAI: {};
    };
}
export interface LDOJSON {
    kind: "LDO";
}
export declare class LDO {
    static readonly discriminator = 14;
    static readonly kind = "LDO";
    readonly discriminator = 14;
    readonly kind = "LDO";
    toJSON(): LDOJSON;
    toEncodable(): {
        LDO: {};
    };
}
export interface SCNSOLJSON {
    kind: "SCNSOL";
}
export declare class SCNSOL {
    static readonly discriminator = 15;
    static readonly kind = "SCNSOL";
    readonly discriminator = 15;
    readonly kind = "SCNSOL";
    toJSON(): SCNSOLJSON;
    toEncodable(): {
        SCNSOL: {};
    };
}
export interface UXDJSON {
    kind: "UXD";
}
export declare class UXD {
    static readonly discriminator = 16;
    static readonly kind = "UXD";
    readonly discriminator = 16;
    readonly kind = "UXD";
    toJSON(): UXDJSON;
    toEncodable(): {
        UXD: {};
    };
}
export interface HDGJSON {
    kind: "HDG";
}
export declare class HDG {
    static readonly discriminator = 17;
    static readonly kind = "HDG";
    readonly discriminator = 17;
    readonly kind = "HDG";
    toJSON(): HDGJSON;
    toEncodable(): {
        HDG: {};
    };
}
export interface DUSTJSON {
    kind: "DUST";
}
export declare class DUST {
    static readonly discriminator = 18;
    static readonly kind = "DUST";
    readonly discriminator = 18;
    readonly kind = "DUST";
    toJSON(): DUSTJSON;
    toEncodable(): {
        DUST: {};
    };
}
export interface USDRJSON {
    kind: "USDR";
}
export declare class USDR {
    static readonly discriminator = 19;
    static readonly kind = "USDR";
    readonly discriminator = 19;
    readonly kind = "USDR";
    toJSON(): USDRJSON;
    toEncodable(): {
        USDR: {};
    };
}
export interface RATIOJSON {
    kind: "RATIO";
}
export declare class RATIO {
    static readonly discriminator = 20;
    static readonly kind = "RATIO";
    readonly discriminator = 20;
    readonly kind = "RATIO";
    toJSON(): RATIOJSON;
    toEncodable(): {
        RATIO: {};
    };
}
export interface UXPJSON {
    kind: "UXP";
}
export declare class UXP {
    static readonly discriminator = 21;
    static readonly kind = "UXP";
    readonly discriminator = 21;
    readonly kind = "UXP";
    toJSON(): UXPJSON;
    toEncodable(): {
        UXP: {};
    };
}
export interface JITOSOLJSON {
    kind: "JITOSOL";
}
export declare class JITOSOL {
    static readonly discriminator = 22;
    static readonly kind = "JITOSOL";
    readonly discriminator = 22;
    readonly kind = "JITOSOL";
    toJSON(): JITOSOLJSON;
    toEncodable(): {
        JITOSOL: {};
    };
}
export interface RAYJSON {
    kind: "RAY";
}
export declare class RAY {
    static readonly discriminator = 23;
    static readonly kind = "RAY";
    readonly discriminator = 23;
    readonly kind = "RAY";
    toJSON(): RAYJSON;
    toEncodable(): {
        RAY: {};
    };
}
export interface BONKJSON {
    kind: "BONK";
}
export declare class BONK {
    static readonly discriminator = 24;
    static readonly kind = "BONK";
    readonly discriminator = 24;
    readonly kind = "BONK";
    toJSON(): BONKJSON;
    toEncodable(): {
        BONK: {};
    };
}
export interface SAMOJSON {
    kind: "SAMO";
}
export declare class SAMO {
    static readonly discriminator = 25;
    static readonly kind = "SAMO";
    readonly discriminator = 25;
    readonly kind = "SAMO";
    toJSON(): SAMOJSON;
    toEncodable(): {
        SAMO: {};
    };
}
export interface LaineSOLJSON {
    kind: "LaineSOL";
}
export declare class LaineSOL {
    static readonly discriminator = 26;
    static readonly kind = "LaineSOL";
    readonly discriminator = 26;
    readonly kind = "LaineSOL";
    toJSON(): LaineSOLJSON;
    toEncodable(): {
        LaineSOL: {};
    };
}
export interface BSOLJSON {
    kind: "BSOL";
}
export declare class BSOL {
    static readonly discriminator = 27;
    static readonly kind = "BSOL";
    readonly discriminator = 27;
    readonly kind = "BSOL";
    toJSON(): BSOLJSON;
    toEncodable(): {
        BSOL: {};
    };
}
export declare function fromDecoded(obj: any): types.CollateralTestTokenKind;
export declare function fromJSON(obj: types.CollateralTestTokenJSON): types.CollateralTestTokenKind;
export declare function layout(property?: string): borsh.EnumLayout<unknown>;
//# sourceMappingURL=CollateralTestToken.d.ts.map