import * as types from "../types";
import * as borsh from "@coral-xyz/borsh";
export interface SOLJSON {
    kind: "SOL";
}
export declare class SOL {
    static readonly discriminator = 0;
    static readonly kind = "SOL";
    readonly discriminator = 0;
    readonly kind = "SOL";
    toJSON(): SOLJSON;
    toEncodable(): {
        SOL: {};
    };
}
export interface ETHJSON {
    kind: "ETH";
}
export declare class ETH {
    static readonly discriminator = 1;
    static readonly kind = "ETH";
    readonly discriminator = 1;
    readonly kind = "ETH";
    toJSON(): ETHJSON;
    toEncodable(): {
        ETH: {};
    };
}
export interface BTCJSON {
    kind: "BTC";
}
export declare class BTC {
    static readonly discriminator = 2;
    static readonly kind = "BTC";
    readonly discriminator = 2;
    readonly kind = "BTC";
    toJSON(): BTCJSON;
    toEncodable(): {
        BTC: {};
    };
}
export interface SRMJSON {
    kind: "SRM";
}
export declare class SRM {
    static readonly discriminator = 3;
    static readonly kind = "SRM";
    readonly discriminator = 3;
    readonly kind = "SRM";
    toJSON(): SRMJSON;
    toEncodable(): {
        SRM: {};
    };
}
export interface RAYJSON {
    kind: "RAY";
}
export declare class RAY {
    static readonly discriminator = 4;
    static readonly kind = "RAY";
    readonly discriminator = 4;
    readonly kind = "RAY";
    toJSON(): RAYJSON;
    toEncodable(): {
        RAY: {};
    };
}
export interface FTTJSON {
    kind: "FTT";
}
export declare class FTT {
    static readonly discriminator = 5;
    static readonly kind = "FTT";
    readonly discriminator = 5;
    readonly kind = "FTT";
    toJSON(): FTTJSON;
    toEncodable(): {
        FTT: {};
    };
}
export interface MSOLJSON {
    kind: "MSOL";
}
export declare class MSOL {
    static readonly discriminator = 6;
    static readonly kind = "MSOL";
    readonly discriminator = 6;
    readonly kind = "MSOL";
    toJSON(): MSOLJSON;
    toEncodable(): {
        MSOL: {};
    };
}
export interface scnSOL_SOLJSON {
    kind: "scnSOL_SOL";
}
export declare class scnSOL_SOL {
    static readonly discriminator = 7;
    static readonly kind = "scnSOL_SOL";
    readonly discriminator = 7;
    readonly kind = "scnSOL_SOL";
    toJSON(): scnSOL_SOLJSON;
    toEncodable(): {
        scnSOL_SOL: {};
    };
}
export interface BNBJSON {
    kind: "BNB";
}
export declare class BNB {
    static readonly discriminator = 8;
    static readonly kind = "BNB";
    readonly discriminator = 8;
    readonly kind = "BNB";
    toJSON(): BNBJSON;
    toEncodable(): {
        BNB: {};
    };
}
export interface AVAXJSON {
    kind: "AVAX";
}
export declare class AVAX {
    static readonly discriminator = 9;
    static readonly kind = "AVAX";
    readonly discriminator = 9;
    readonly kind = "AVAX";
    toJSON(): AVAXJSON;
    toEncodable(): {
        AVAX: {};
    };
}
export interface DaoSOL_SOLJSON {
    kind: "DaoSOL_SOL";
}
export declare class DaoSOL_SOL {
    static readonly discriminator = 10;
    static readonly kind = "DaoSOL_SOL";
    readonly discriminator = 10;
    readonly kind = "DaoSOL_SOL";
    toJSON(): DaoSOL_SOLJSON;
    toEncodable(): {
        DaoSOL_SOL: {};
    };
}
export interface SaberMSOL_SOLJSON {
    kind: "SaberMSOL_SOL";
}
export declare class SaberMSOL_SOL {
    static readonly discriminator = 11;
    static readonly kind = "SaberMSOL_SOL";
    readonly discriminator = 11;
    readonly kind = "SaberMSOL_SOL";
    toJSON(): SaberMSOL_SOLJSON;
    toEncodable(): {
        SaberMSOL_SOL: {};
    };
}
export interface USDHJSON {
    kind: "USDH";
}
export declare class USDH {
    static readonly discriminator = 12;
    static readonly kind = "USDH";
    readonly discriminator = 12;
    readonly kind = "USDH";
    toJSON(): USDHJSON;
    toEncodable(): {
        USDH: {};
    };
}
export interface StSOLJSON {
    kind: "StSOL";
}
export declare class StSOL {
    static readonly discriminator = 13;
    static readonly kind = "StSOL";
    readonly discriminator = 13;
    readonly kind = "StSOL";
    toJSON(): StSOLJSON;
    toEncodable(): {
        StSOL: {};
    };
}
export interface CSOL_SOLJSON {
    kind: "CSOL_SOL";
}
export declare class CSOL_SOL {
    static readonly discriminator = 14;
    static readonly kind = "CSOL_SOL";
    readonly discriminator = 14;
    readonly kind = "CSOL_SOL";
    toJSON(): CSOL_SOLJSON;
    toEncodable(): {
        CSOL_SOL: {};
    };
}
export interface CETH_ETHJSON {
    kind: "CETH_ETH";
}
export declare class CETH_ETH {
    static readonly discriminator = 15;
    static readonly kind = "CETH_ETH";
    readonly discriminator = 15;
    readonly kind = "CETH_ETH";
    toJSON(): CETH_ETHJSON;
    toEncodable(): {
        CETH_ETH: {};
    };
}
export interface CBTC_BTCJSON {
    kind: "CBTC_BTC";
}
export declare class CBTC_BTC {
    static readonly discriminator = 16;
    static readonly kind = "CBTC_BTC";
    readonly discriminator = 16;
    readonly kind = "CBTC_BTC";
    toJSON(): CBTC_BTCJSON;
    toEncodable(): {
        CBTC_BTC: {};
    };
}
export interface CMSOL_SOLJSON {
    kind: "CMSOL_SOL";
}
export declare class CMSOL_SOL {
    static readonly discriminator = 17;
    static readonly kind = "CMSOL_SOL";
    readonly discriminator = 17;
    readonly kind = "CMSOL_SOL";
    toJSON(): CMSOL_SOLJSON;
    toEncodable(): {
        CMSOL_SOL: {};
    };
}
export interface wstETHJSON {
    kind: "wstETH";
}
export declare class wstETH {
    static readonly discriminator = 18;
    static readonly kind = "wstETH";
    readonly discriminator = 18;
    readonly kind = "wstETH";
    toJSON(): wstETHJSON;
    toEncodable(): {
        wstETH: {};
    };
}
export interface LDOJSON {
    kind: "LDO";
}
export declare class LDO {
    static readonly discriminator = 19;
    static readonly kind = "LDO";
    readonly discriminator = 19;
    readonly kind = "LDO";
    toJSON(): LDOJSON;
    toEncodable(): {
        LDO: {};
    };
}
export interface USDCJSON {
    kind: "USDC";
}
export declare class USDC {
    static readonly discriminator = 20;
    static readonly kind = "USDC";
    readonly discriminator = 20;
    readonly kind = "USDC";
    toJSON(): USDCJSON;
    toEncodable(): {
        USDC: {};
    };
}
export interface CUSDC_USDCJSON {
    kind: "CUSDC_USDC";
}
export declare class CUSDC_USDC {
    static readonly discriminator = 21;
    static readonly kind = "CUSDC_USDC";
    readonly discriminator = 21;
    readonly kind = "CUSDC_USDC";
    toJSON(): CUSDC_USDCJSON;
    toEncodable(): {
        CUSDC_USDC: {};
    };
}
export interface USDTJSON {
    kind: "USDT";
}
export declare class USDT {
    static readonly discriminator = 22;
    static readonly kind = "USDT";
    readonly discriminator = 22;
    readonly kind = "USDT";
    toJSON(): USDTJSON;
    toEncodable(): {
        USDT: {};
    };
}
export interface ORCAJSON {
    kind: "ORCA";
}
export declare class ORCA {
    static readonly discriminator = 23;
    static readonly kind = "ORCA";
    readonly discriminator = 23;
    readonly kind = "ORCA";
    toJSON(): ORCAJSON;
    toEncodable(): {
        ORCA: {};
    };
}
export interface MNDEJSON {
    kind: "MNDE";
}
export declare class MNDE {
    static readonly discriminator = 24;
    static readonly kind = "MNDE";
    readonly discriminator = 24;
    readonly kind = "MNDE";
    toJSON(): MNDEJSON;
    toEncodable(): {
        MNDE: {};
    };
}
export interface HBBJSON {
    kind: "HBB";
}
export declare class HBB {
    static readonly discriminator = 25;
    static readonly kind = "HBB";
    readonly discriminator = 25;
    readonly kind = "HBB";
    toJSON(): HBBJSON;
    toEncodable(): {
        HBB: {};
    };
}
export interface CORCA_ORCAJSON {
    kind: "CORCA_ORCA";
}
export declare class CORCA_ORCA {
    static readonly discriminator = 26;
    static readonly kind = "CORCA_ORCA";
    readonly discriminator = 26;
    readonly kind = "CORCA_ORCA";
    toJSON(): CORCA_ORCAJSON;
    toEncodable(): {
        CORCA_ORCA: {};
    };
}
export interface CSLND_SLNDJSON {
    kind: "CSLND_SLND";
}
export declare class CSLND_SLND {
    static readonly discriminator = 27;
    static readonly kind = "CSLND_SLND";
    readonly discriminator = 27;
    readonly kind = "CSLND_SLND";
    toJSON(): CSLND_SLNDJSON;
    toEncodable(): {
        CSLND_SLND: {};
    };
}
export interface CSRM_SRMJSON {
    kind: "CSRM_SRM";
}
export declare class CSRM_SRM {
    static readonly discriminator = 28;
    static readonly kind = "CSRM_SRM";
    readonly discriminator = 28;
    readonly kind = "CSRM_SRM";
    toJSON(): CSRM_SRMJSON;
    toEncodable(): {
        CSRM_SRM: {};
    };
}
export interface CRAY_RAYJSON {
    kind: "CRAY_RAY";
}
export declare class CRAY_RAY {
    static readonly discriminator = 29;
    static readonly kind = "CRAY_RAY";
    readonly discriminator = 29;
    readonly kind = "CRAY_RAY";
    toJSON(): CRAY_RAYJSON;
    toEncodable(): {
        CRAY_RAY: {};
    };
}
export interface CFTT_FTTJSON {
    kind: "CFTT_FTT";
}
export declare class CFTT_FTT {
    static readonly discriminator = 30;
    static readonly kind = "CFTT_FTT";
    readonly discriminator = 30;
    readonly kind = "CFTT_FTT";
    toJSON(): CFTT_FTTJSON;
    toEncodable(): {
        CFTT_FTT: {};
    };
}
export interface CSTSOL_STSOLJSON {
    kind: "CSTSOL_STSOL";
}
export declare class CSTSOL_STSOL {
    static readonly discriminator = 31;
    static readonly kind = "CSTSOL_STSOL";
    readonly discriminator = 31;
    readonly kind = "CSTSOL_STSOL";
    toJSON(): CSTSOL_STSOLJSON;
    toEncodable(): {
        CSTSOL_STSOL: {};
    };
}
export interface SLNDJSON {
    kind: "SLND";
}
export declare class SLND {
    static readonly discriminator = 32;
    static readonly kind = "SLND";
    readonly discriminator = 32;
    readonly kind = "SLND";
    toJSON(): SLNDJSON;
    toEncodable(): {
        SLND: {};
    };
}
export interface DAIJSON {
    kind: "DAI";
}
export declare class DAI {
    static readonly discriminator = 33;
    static readonly kind = "DAI";
    readonly discriminator = 33;
    readonly kind = "DAI";
    toJSON(): DAIJSON;
    toEncodable(): {
        DAI: {};
    };
}
export interface JSOL_SOLJSON {
    kind: "JSOL_SOL";
}
export declare class JSOL_SOL {
    static readonly discriminator = 34;
    static readonly kind = "JSOL_SOL";
    readonly discriminator = 34;
    readonly kind = "JSOL_SOL";
    toJSON(): JSOL_SOLJSON;
    toEncodable(): {
        JSOL_SOL: {};
    };
}
export interface USHJSON {
    kind: "USH";
}
export declare class USH {
    static readonly discriminator = 35;
    static readonly kind = "USH";
    readonly discriminator = 35;
    readonly kind = "USH";
    toJSON(): USHJSON;
    toEncodable(): {
        USH: {};
    };
}
export interface UXDJSON {
    kind: "UXD";
}
export declare class UXD {
    static readonly discriminator = 36;
    static readonly kind = "UXD";
    readonly discriminator = 36;
    readonly kind = "UXD";
    toJSON(): UXDJSON;
    toEncodable(): {
        UXD: {};
    };
}
export interface USDH_TWAPJSON {
    kind: "USDH_TWAP";
}
export declare class USDH_TWAP {
    static readonly discriminator = 37;
    static readonly kind = "USDH_TWAP";
    readonly discriminator = 37;
    readonly kind = "USDH_TWAP";
    toJSON(): USDH_TWAPJSON;
    toEncodable(): {
        USDH_TWAP: {};
    };
}
export interface USH_TWAPJSON {
    kind: "USH_TWAP";
}
export declare class USH_TWAP {
    static readonly discriminator = 38;
    static readonly kind = "USH_TWAP";
    readonly discriminator = 38;
    readonly kind = "USH_TWAP";
    toJSON(): USH_TWAPJSON;
    toEncodable(): {
        USH_TWAP: {};
    };
}
export interface UXD_TWAPJSON {
    kind: "UXD_TWAP";
}
export declare class UXD_TWAP {
    static readonly discriminator = 39;
    static readonly kind = "UXD_TWAP";
    readonly discriminator = 39;
    readonly kind = "UXD_TWAP";
    toJSON(): UXD_TWAPJSON;
    toEncodable(): {
        UXD_TWAP: {};
    };
}
export interface HDGJSON {
    kind: "HDG";
}
export declare class HDG {
    static readonly discriminator = 40;
    static readonly kind = "HDG";
    readonly discriminator = 40;
    readonly kind = "HDG";
    toJSON(): HDGJSON;
    toEncodable(): {
        HDG: {};
    };
}
export interface DUSTJSON {
    kind: "DUST";
}
export declare class DUST {
    static readonly discriminator = 41;
    static readonly kind = "DUST";
    readonly discriminator = 41;
    readonly kind = "DUST";
    toJSON(): DUSTJSON;
    toEncodable(): {
        DUST: {};
    };
}
export interface USDRJSON {
    kind: "USDR";
}
export declare class USDR {
    static readonly discriminator = 42;
    static readonly kind = "USDR";
    readonly discriminator = 42;
    readonly kind = "USDR";
    toJSON(): USDRJSON;
    toEncodable(): {
        USDR: {};
    };
}
export interface USDR_TWAPJSON {
    kind: "USDR_TWAP";
}
export declare class USDR_TWAP {
    static readonly discriminator = 43;
    static readonly kind = "USDR_TWAP";
    readonly discriminator = 43;
    readonly kind = "USDR_TWAP";
    toJSON(): USDR_TWAPJSON;
    toEncodable(): {
        USDR_TWAP: {};
    };
}
export interface RATIOJSON {
    kind: "RATIO";
}
export declare class RATIO {
    static readonly discriminator = 44;
    static readonly kind = "RATIO";
    readonly discriminator = 44;
    readonly kind = "RATIO";
    toJSON(): RATIOJSON;
    toEncodable(): {
        RATIO: {};
    };
}
export interface UXPJSON {
    kind: "UXP";
}
export declare class UXP {
    static readonly discriminator = 45;
    static readonly kind = "UXP";
    readonly discriminator = 45;
    readonly kind = "UXP";
    toJSON(): UXPJSON;
    toEncodable(): {
        UXP: {};
    };
}
export interface KUXDUSDCORCAJSON {
    kind: "KUXDUSDCORCA";
}
export declare class KUXDUSDCORCA {
    static readonly discriminator = 46;
    static readonly kind = "KUXDUSDCORCA";
    readonly discriminator = 46;
    readonly kind = "KUXDUSDCORCA";
    toJSON(): KUXDUSDCORCAJSON;
    toEncodable(): {
        KUXDUSDCORCA: {};
    };
}
export interface JITOSOL_SOLJSON {
    kind: "JITOSOL_SOL";
}
export declare class JITOSOL_SOL {
    static readonly discriminator = 47;
    static readonly kind = "JITOSOL_SOL";
    readonly discriminator = 47;
    readonly kind = "JITOSOL_SOL";
    toJSON(): JITOSOL_SOLJSON;
    toEncodable(): {
        JITOSOL_SOL: {};
    };
}
export interface SOL_EMAJSON {
    kind: "SOL_EMA";
}
export declare class SOL_EMA {
    static readonly discriminator = 48;
    static readonly kind = "SOL_EMA";
    readonly discriminator = 48;
    readonly kind = "SOL_EMA";
    toJSON(): SOL_EMAJSON;
    toEncodable(): {
        SOL_EMA: {};
    };
}
export interface ETH_EMAJSON {
    kind: "ETH_EMA";
}
export declare class ETH_EMA {
    static readonly discriminator = 49;
    static readonly kind = "ETH_EMA";
    readonly discriminator = 49;
    readonly kind = "ETH_EMA";
    toJSON(): ETH_EMAJSON;
    toEncodable(): {
        ETH_EMA: {};
    };
}
export interface BTC_EMAJSON {
    kind: "BTC_EMA";
}
export declare class BTC_EMA {
    static readonly discriminator = 50;
    static readonly kind = "BTC_EMA";
    readonly discriminator = 50;
    readonly kind = "BTC_EMA";
    toJSON(): BTC_EMAJSON;
    toEncodable(): {
        BTC_EMA: {};
    };
}
export interface SRM_EMAJSON {
    kind: "SRM_EMA";
}
export declare class SRM_EMA {
    static readonly discriminator = 51;
    static readonly kind = "SRM_EMA";
    readonly discriminator = 51;
    readonly kind = "SRM_EMA";
    toJSON(): SRM_EMAJSON;
    toEncodable(): {
        SRM_EMA: {};
    };
}
export interface RAY_EMAJSON {
    kind: "RAY_EMA";
}
export declare class RAY_EMA {
    static readonly discriminator = 52;
    static readonly kind = "RAY_EMA";
    readonly discriminator = 52;
    readonly kind = "RAY_EMA";
    toJSON(): RAY_EMAJSON;
    toEncodable(): {
        RAY_EMA: {};
    };
}
export interface FTT_EMAJSON {
    kind: "FTT_EMA";
}
export declare class FTT_EMA {
    static readonly discriminator = 53;
    static readonly kind = "FTT_EMA";
    readonly discriminator = 53;
    readonly kind = "FTT_EMA";
    toJSON(): FTT_EMAJSON;
    toEncodable(): {
        FTT_EMA: {};
    };
}
export interface MSOL_EMAJSON {
    kind: "MSOL_EMA";
}
export declare class MSOL_EMA {
    static readonly discriminator = 54;
    static readonly kind = "MSOL_EMA";
    readonly discriminator = 54;
    readonly kind = "MSOL_EMA";
    toJSON(): MSOL_EMAJSON;
    toEncodable(): {
        MSOL_EMA: {};
    };
}
export interface BNB_EMAJSON {
    kind: "BNB_EMA";
}
export declare class BNB_EMA {
    static readonly discriminator = 55;
    static readonly kind = "BNB_EMA";
    readonly discriminator = 55;
    readonly kind = "BNB_EMA";
    toJSON(): BNB_EMAJSON;
    toEncodable(): {
        BNB_EMA: {};
    };
}
export interface AVAX_EMAJSON {
    kind: "AVAX_EMA";
}
export declare class AVAX_EMA {
    static readonly discriminator = 56;
    static readonly kind = "AVAX_EMA";
    readonly discriminator = 56;
    readonly kind = "AVAX_EMA";
    toJSON(): AVAX_EMAJSON;
    toEncodable(): {
        AVAX_EMA: {};
    };
}
export interface STSOL_EMAJSON {
    kind: "STSOL_EMA";
}
export declare class STSOL_EMA {
    static readonly discriminator = 57;
    static readonly kind = "STSOL_EMA";
    readonly discriminator = 57;
    readonly kind = "STSOL_EMA";
    toJSON(): STSOL_EMAJSON;
    toEncodable(): {
        STSOL_EMA: {};
    };
}
export interface USDC_EMAJSON {
    kind: "USDC_EMA";
}
export declare class USDC_EMA {
    static readonly discriminator = 58;
    static readonly kind = "USDC_EMA";
    readonly discriminator = 58;
    readonly kind = "USDC_EMA";
    toJSON(): USDC_EMAJSON;
    toEncodable(): {
        USDC_EMA: {};
    };
}
export interface USDT_EMAJSON {
    kind: "USDT_EMA";
}
export declare class USDT_EMA {
    static readonly discriminator = 59;
    static readonly kind = "USDT_EMA";
    readonly discriminator = 59;
    readonly kind = "USDT_EMA";
    toJSON(): USDT_EMAJSON;
    toEncodable(): {
        USDT_EMA: {};
    };
}
export interface SLND_EMAJSON {
    kind: "SLND_EMA";
}
export declare class SLND_EMA {
    static readonly discriminator = 60;
    static readonly kind = "SLND_EMA";
    readonly discriminator = 60;
    readonly kind = "SLND_EMA";
    toJSON(): SLND_EMAJSON;
    toEncodable(): {
        SLND_EMA: {};
    };
}
export interface DAI_EMAJSON {
    kind: "DAI_EMA";
}
export declare class DAI_EMA {
    static readonly discriminator = 61;
    static readonly kind = "DAI_EMA";
    readonly discriminator = 61;
    readonly kind = "DAI_EMA";
    toJSON(): DAI_EMAJSON;
    toEncodable(): {
        DAI_EMA: {};
    };
}
export interface wstETH_TWAPJSON {
    kind: "wstETH_TWAP";
}
export declare class wstETH_TWAP {
    static readonly discriminator = 62;
    static readonly kind = "wstETH_TWAP";
    readonly discriminator = 62;
    readonly kind = "wstETH_TWAP";
    toJSON(): wstETH_TWAPJSON;
    toEncodable(): {
        wstETH_TWAP: {};
    };
}
export interface DUST_TWAPJSON {
    kind: "DUST_TWAP";
}
export declare class DUST_TWAP {
    static readonly discriminator = 63;
    static readonly kind = "DUST_TWAP";
    readonly discriminator = 63;
    readonly kind = "DUST_TWAP";
    toJSON(): DUST_TWAPJSON;
    toEncodable(): {
        DUST_TWAP: {};
    };
}
export interface BONKJSON {
    kind: "BONK";
}
export declare class BONK {
    static readonly discriminator = 64;
    static readonly kind = "BONK";
    readonly discriminator = 64;
    readonly kind = "BONK";
    toJSON(): BONKJSON;
    toEncodable(): {
        BONK: {};
    };
}
export interface BONK_TWAPJSON {
    kind: "BONK_TWAP";
}
export declare class BONK_TWAP {
    static readonly discriminator = 65;
    static readonly kind = "BONK_TWAP";
    readonly discriminator = 65;
    readonly kind = "BONK_TWAP";
    toJSON(): BONK_TWAPJSON;
    toEncodable(): {
        BONK_TWAP: {};
    };
}
export interface SAMOJSON {
    kind: "SAMO";
}
export declare class SAMO {
    static readonly discriminator = 66;
    static readonly kind = "SAMO";
    readonly discriminator = 66;
    readonly kind = "SAMO";
    toJSON(): SAMOJSON;
    toEncodable(): {
        SAMO: {};
    };
}
export interface SAMO_TWAPJSON {
    kind: "SAMO_TWAP";
}
export declare class SAMO_TWAP {
    static readonly discriminator = 67;
    static readonly kind = "SAMO_TWAP";
    readonly discriminator = 67;
    readonly kind = "SAMO_TWAP";
    toJSON(): SAMO_TWAPJSON;
    toEncodable(): {
        SAMO_TWAP: {};
    };
}
export interface BSOLJSON {
    kind: "BSOL";
}
export declare class BSOL {
    static readonly discriminator = 68;
    static readonly kind = "BSOL";
    readonly discriminator = 68;
    readonly kind = "BSOL";
    toJSON(): BSOLJSON;
    toEncodable(): {
        BSOL: {};
    };
}
export interface LaineSOLJSON {
    kind: "LaineSOL";
}
export declare class LaineSOL {
    static readonly discriminator = 69;
    static readonly kind = "LaineSOL";
    readonly discriminator = 69;
    readonly kind = "LaineSOL";
    toJSON(): LaineSOLJSON;
    toEncodable(): {
        LaineSOL: {};
    };
}
export declare function fromDecoded(obj: any): types.ScopePriceIdTestKind;
export declare function fromJSON(obj: types.ScopePriceIdTestJSON): types.ScopePriceIdTestKind;
export declare function layout(property?: string): borsh.EnumLayout<unknown>;
//# sourceMappingURL=ScopePriceIdTest.d.ts.map