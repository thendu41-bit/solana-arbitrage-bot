import * as types from "../types";
import * as borsh from "@coral-xyz/borsh";
export type NewRangeFields = [number, number];
export type NewRangeValue = [number, number];
export interface NewRangeJSON {
    kind: "NewRange";
    value: [number, number];
}
export declare class NewRange {
    static readonly discriminator = 0;
    static readonly kind = "NewRange";
    readonly discriminator = 0;
    readonly kind = "NewRange";
    readonly value: NewRangeValue;
    constructor(value: NewRangeFields);
    toJSON(): NewRangeJSON;
    toEncodable(): {
        NewRange: {
            _0: number;
            _1: number;
        };
    };
}
export interface WithdrawAndFreezeJSON {
    kind: "WithdrawAndFreeze";
}
export declare class WithdrawAndFreeze {
    static readonly discriminator = 1;
    static readonly kind = "WithdrawAndFreeze";
    readonly discriminator = 1;
    readonly kind = "WithdrawAndFreeze";
    toJSON(): WithdrawAndFreezeJSON;
    toEncodable(): {
        WithdrawAndFreeze: {};
    };
}
export declare function fromDecoded(obj: any): types.RebalanceEffectsKind;
export declare function fromJSON(obj: types.RebalanceEffectsJSON): types.RebalanceEffectsKind;
export declare function layout(property?: string): borsh.EnumLayout<unknown>;
//# sourceMappingURL=RebalanceEffects.d.ts.map