import BN from "bn.js";
import * as types from "../types";
import * as borsh from "@coral-xyz/borsh";
export interface PoolPriceJSON {
    kind: "PoolPrice";
}
export declare class PoolPrice {
    static readonly discriminator = 0;
    static readonly kind = "PoolPrice";
    readonly discriminator = 0;
    readonly kind = "PoolPrice";
    toJSON(): PoolPriceJSON;
    toEncodable(): {
        PoolPrice: {};
    };
}
export type SqrtPriceFields = [BN];
export type SqrtPriceValue = [BN];
export interface SqrtPriceJSON {
    kind: "SqrtPrice";
    value: [string];
}
export declare class SqrtPrice {
    static readonly discriminator = 1;
    static readonly kind = "SqrtPrice";
    readonly discriminator = 1;
    readonly kind = "SqrtPrice";
    readonly value: SqrtPriceValue;
    constructor(value: SqrtPriceFields);
    toJSON(): SqrtPriceJSON;
    toEncodable(): {
        SqrtPrice: {
            _0: BN;
        };
    };
}
export type TickIndexFields = [number];
export type TickIndexValue = [number];
export interface TickIndexJSON {
    kind: "TickIndex";
    value: [number];
}
export declare class TickIndex {
    static readonly discriminator = 2;
    static readonly kind = "TickIndex";
    readonly discriminator = 2;
    readonly kind = "TickIndex";
    readonly value: TickIndexValue;
    constructor(value: TickIndexFields);
    toJSON(): TickIndexJSON;
    toEncodable(): {
        TickIndex: {
            _0: number;
        };
    };
}
export declare function fromDecoded(obj: any): types.SimulationPriceKind;
export declare function fromJSON(obj: types.SimulationPriceJSON): types.SimulationPriceKind;
export declare function layout(property?: string): borsh.EnumLayout<unknown>;
//# sourceMappingURL=SimulationPrice.d.ts.map