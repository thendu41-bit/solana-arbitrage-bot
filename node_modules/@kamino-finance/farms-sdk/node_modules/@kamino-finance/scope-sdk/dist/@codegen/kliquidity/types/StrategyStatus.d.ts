import * as types from "../types";
import * as borsh from "@coral-xyz/borsh";
export interface UninitializedJSON {
    kind: "Uninitialized";
}
export declare class Uninitialized {
    static readonly discriminator = 0;
    static readonly kind = "Uninitialized";
    readonly discriminator = 0;
    readonly kind = "Uninitialized";
    toJSON(): UninitializedJSON;
    toEncodable(): {
        Uninitialized: {};
    };
}
export interface ActiveJSON {
    kind: "Active";
}
export declare class Active {
    static readonly discriminator = 1;
    static readonly kind = "Active";
    readonly discriminator = 1;
    readonly kind = "Active";
    toJSON(): ActiveJSON;
    toEncodable(): {
        Active: {};
    };
}
export interface FrozenJSON {
    kind: "Frozen";
}
export declare class Frozen {
    static readonly discriminator = 2;
    static readonly kind = "Frozen";
    readonly discriminator = 2;
    readonly kind = "Frozen";
    toJSON(): FrozenJSON;
    toEncodable(): {
        Frozen: {};
    };
}
export interface RebalancingJSON {
    kind: "Rebalancing";
}
export declare class Rebalancing {
    static readonly discriminator = 3;
    static readonly kind = "Rebalancing";
    readonly discriminator = 3;
    readonly kind = "Rebalancing";
    toJSON(): RebalancingJSON;
    toEncodable(): {
        Rebalancing: {};
    };
}
export interface NoPositionJSON {
    kind: "NoPosition";
}
export declare class NoPosition {
    static readonly discriminator = 4;
    static readonly kind = "NoPosition";
    readonly discriminator = 4;
    readonly kind = "NoPosition";
    toJSON(): NoPositionJSON;
    toEncodable(): {
        NoPosition: {};
    };
}
export declare function fromDecoded(obj: any): types.StrategyStatusKind;
export declare function fromJSON(obj: types.StrategyStatusJSON): types.StrategyStatusKind;
export declare function layout(property?: string): borsh.EnumLayout<unknown>;
//# sourceMappingURL=StrategyStatus.d.ts.map