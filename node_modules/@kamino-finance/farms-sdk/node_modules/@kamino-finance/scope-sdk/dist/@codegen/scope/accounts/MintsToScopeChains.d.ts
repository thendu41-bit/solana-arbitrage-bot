import { Address, GetAccountInfoApi, GetMultipleAccountsApi, Rpc } from "@solana/kit";
import BN from "bn.js";
import * as types from "../types";
export interface MintsToScopeChainsFields {
    oraclePrices: Address;
    seedPk: Address;
    seedId: BN;
    bump: number;
    mapping: Array<types.MintToScopeChainFields>;
}
export interface MintsToScopeChainsJSON {
    oraclePrices: string;
    seedPk: string;
    seedId: string;
    bump: number;
    mapping: Array<types.MintToScopeChainJSON>;
}
/** Map of mints to scope chain only valid for a given price feed */
export declare class MintsToScopeChains {
    readonly oraclePrices: Address;
    readonly seedPk: Address;
    readonly seedId: BN;
    readonly bump: number;
    readonly mapping: Array<types.MintToScopeChain>;
    static readonly discriminator: Buffer<ArrayBuffer>;
    static readonly layout: import("buffer-layout").Layout<MintsToScopeChains>;
    constructor(fields: MintsToScopeChainsFields);
    static fetch(rpc: Rpc<GetAccountInfoApi>, address: Address, programId?: Address): Promise<MintsToScopeChains | null>;
    static fetchMultiple(rpc: Rpc<GetMultipleAccountsApi>, addresses: Address[], programId?: Address): Promise<Array<MintsToScopeChains | null>>;
    static decode(data: Buffer): MintsToScopeChains;
    toJSON(): MintsToScopeChainsJSON;
    static fromJSON(obj: MintsToScopeChainsJSON): MintsToScopeChains;
}
//# sourceMappingURL=MintsToScopeChains.d.ts.map