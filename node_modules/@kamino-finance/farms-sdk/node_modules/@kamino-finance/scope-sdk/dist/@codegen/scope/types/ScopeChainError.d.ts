import * as types from "../types";
import * as borsh from "@coral-xyz/borsh";
export interface PriceChainTooLongJSON {
    kind: "PriceChainTooLong";
}
export declare class PriceChainTooLong {
    static readonly discriminator = 0;
    static readonly kind = "PriceChainTooLong";
    readonly discriminator = 0;
    readonly kind = "PriceChainTooLong";
    toJSON(): PriceChainTooLongJSON;
    toEncodable(): {
        PriceChainTooLong: {};
    };
}
export interface PriceChainConversionFailureJSON {
    kind: "PriceChainConversionFailure";
}
export declare class PriceChainConversionFailure {
    static readonly discriminator = 1;
    static readonly kind = "PriceChainConversionFailure";
    readonly discriminator = 1;
    readonly kind = "PriceChainConversionFailure";
    toJSON(): PriceChainConversionFailureJSON;
    toEncodable(): {
        PriceChainConversionFailure: {};
    };
}
export interface NoChainForTokenJSON {
    kind: "NoChainForToken";
}
export declare class NoChainForToken {
    static readonly discriminator = 2;
    static readonly kind = "NoChainForToken";
    readonly discriminator = 2;
    readonly kind = "NoChainForToken";
    toJSON(): NoChainForTokenJSON;
    toEncodable(): {
        NoChainForToken: {};
    };
}
export interface InvalidPricesInChainJSON {
    kind: "InvalidPricesInChain";
}
export declare class InvalidPricesInChain {
    static readonly discriminator = 3;
    static readonly kind = "InvalidPricesInChain";
    readonly discriminator = 3;
    readonly kind = "InvalidPricesInChain";
    toJSON(): InvalidPricesInChainJSON;
    toEncodable(): {
        InvalidPricesInChain: {};
    };
}
export interface MathOverflowJSON {
    kind: "MathOverflow";
}
export declare class MathOverflow {
    static readonly discriminator = 4;
    static readonly kind = "MathOverflow";
    readonly discriminator = 4;
    readonly kind = "MathOverflow";
    toJSON(): MathOverflowJSON;
    toEncodable(): {
        MathOverflow: {};
    };
}
export interface IntegerConversionOverflowJSON {
    kind: "IntegerConversionOverflow";
}
export declare class IntegerConversionOverflow {
    static readonly discriminator = 5;
    static readonly kind = "IntegerConversionOverflow";
    readonly discriminator = 5;
    readonly kind = "IntegerConversionOverflow";
    toJSON(): IntegerConversionOverflowJSON;
    toEncodable(): {
        IntegerConversionOverflow: {};
    };
}
export declare function fromDecoded(obj: any): types.ScopeChainErrorKind;
export declare function fromJSON(obj: types.ScopeChainErrorJSON): types.ScopeChainErrorKind;
export declare function layout(property?: string): borsh.EnumLayout<unknown>;
//# sourceMappingURL=ScopeChainError.d.ts.map