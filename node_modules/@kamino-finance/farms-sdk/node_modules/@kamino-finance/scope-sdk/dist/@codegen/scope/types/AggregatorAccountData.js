"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AggregatorAccountData = void 0;
const kit_1 = require("@solana/kit"); // eslint-disable-line @typescript-eslint/no-unused-vars
const bn_js_1 = __importDefault(require("bn.js")); // eslint-disable-line @typescript-eslint/no-unused-vars
const types = __importStar(require("../types")); // eslint-disable-line @typescript-eslint/no-unused-vars
const borsh = __importStar(require("@coral-xyz/borsh"));
const utils_1 = require("../utils");
class AggregatorAccountData {
    name;
    metadata;
    authorWallet;
    queuePubkey;
    oracleRequestBatchSize;
    minOracleResults;
    minJobResults;
    minUpdateDelaySeconds;
    startAfter;
    varianceThreshold;
    forceReportPeriod;
    expiration;
    consecutiveFailureCount;
    nextAllowedUpdateTime;
    isLocked;
    schedule;
    latestConfirmedRound;
    currentRound;
    jobPubkeysData;
    jobHashes;
    jobPubkeysSize;
    jobsChecksum;
    authority;
    ebuf;
    constructor(fields) {
        this.name = fields.name;
        this.metadata = fields.metadata;
        this.authorWallet = fields.authorWallet;
        this.queuePubkey = fields.queuePubkey;
        this.oracleRequestBatchSize = fields.oracleRequestBatchSize;
        this.minOracleResults = fields.minOracleResults;
        this.minJobResults = fields.minJobResults;
        this.minUpdateDelaySeconds = fields.minUpdateDelaySeconds;
        this.startAfter = fields.startAfter;
        this.varianceThreshold = new types.SwitchboardDecimal({
            ...fields.varianceThreshold,
        });
        this.forceReportPeriod = fields.forceReportPeriod;
        this.expiration = fields.expiration;
        this.consecutiveFailureCount = fields.consecutiveFailureCount;
        this.nextAllowedUpdateTime = fields.nextAllowedUpdateTime;
        this.isLocked = fields.isLocked;
        this.schedule = fields.schedule;
        this.latestConfirmedRound = new types.AggregatorRound({
            ...fields.latestConfirmedRound,
        });
        this.currentRound = new types.AggregatorRound({ ...fields.currentRound });
        this.jobPubkeysData = fields.jobPubkeysData;
        this.jobHashes = fields.jobHashes.map((item) => new types.Hash({ ...item }));
        this.jobPubkeysSize = fields.jobPubkeysSize;
        this.jobsChecksum = fields.jobsChecksum;
        this.authority = fields.authority;
        this.ebuf = fields.ebuf;
    }
    static layout(property) {
        return borsh.struct([
            borsh.array(borsh.u8(), 32, "name"),
            borsh.array(borsh.u8(), 128, "metadata"),
            (0, utils_1.borshAddress)("authorWallet"),
            (0, utils_1.borshAddress)("queuePubkey"),
            borsh.u32("oracleRequestBatchSize"),
            borsh.u32("minOracleResults"),
            borsh.u32("minJobResults"),
            borsh.u32("minUpdateDelaySeconds"),
            borsh.i64("startAfter"),
            types.SwitchboardDecimal.layout("varianceThreshold"),
            borsh.i64("forceReportPeriod"),
            borsh.i64("expiration"),
            borsh.u64("consecutiveFailureCount"),
            borsh.i64("nextAllowedUpdateTime"),
            borsh.bool("isLocked"),
            borsh.array(borsh.u8(), 32, "schedule"),
            types.AggregatorRound.layout("latestConfirmedRound"),
            types.AggregatorRound.layout("currentRound"),
            borsh.array((0, utils_1.borshAddress)(), 16, "jobPubkeysData"),
            borsh.array(types.Hash.layout(), 16, "jobHashes"),
            borsh.u32("jobPubkeysSize"),
            borsh.array(borsh.u8(), 32, "jobsChecksum"),
            (0, utils_1.borshAddress)("authority"),
            borsh.array(borsh.u8(), 224, "ebuf"),
        ], property);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    static fromDecoded(obj) {
        return new AggregatorAccountData({
            name: obj.name,
            metadata: obj.metadata,
            authorWallet: obj.authorWallet,
            queuePubkey: obj.queuePubkey,
            oracleRequestBatchSize: obj.oracleRequestBatchSize,
            minOracleResults: obj.minOracleResults,
            minJobResults: obj.minJobResults,
            minUpdateDelaySeconds: obj.minUpdateDelaySeconds,
            startAfter: obj.startAfter,
            varianceThreshold: types.SwitchboardDecimal.fromDecoded(obj.varianceThreshold),
            forceReportPeriod: obj.forceReportPeriod,
            expiration: obj.expiration,
            consecutiveFailureCount: obj.consecutiveFailureCount,
            nextAllowedUpdateTime: obj.nextAllowedUpdateTime,
            isLocked: obj.isLocked,
            schedule: obj.schedule,
            latestConfirmedRound: types.AggregatorRound.fromDecoded(obj.latestConfirmedRound),
            currentRound: types.AggregatorRound.fromDecoded(obj.currentRound),
            jobPubkeysData: obj.jobPubkeysData,
            jobHashes: obj.jobHashes.map((item /* eslint-disable-line @typescript-eslint/no-explicit-any */) => types.Hash.fromDecoded(item)),
            jobPubkeysSize: obj.jobPubkeysSize,
            jobsChecksum: obj.jobsChecksum,
            authority: obj.authority,
            ebuf: obj.ebuf,
        });
    }
    static toEncodable(fields) {
        return {
            name: fields.name,
            metadata: fields.metadata,
            authorWallet: fields.authorWallet,
            queuePubkey: fields.queuePubkey,
            oracleRequestBatchSize: fields.oracleRequestBatchSize,
            minOracleResults: fields.minOracleResults,
            minJobResults: fields.minJobResults,
            minUpdateDelaySeconds: fields.minUpdateDelaySeconds,
            startAfter: fields.startAfter,
            varianceThreshold: types.SwitchboardDecimal.toEncodable(fields.varianceThreshold),
            forceReportPeriod: fields.forceReportPeriod,
            expiration: fields.expiration,
            consecutiveFailureCount: fields.consecutiveFailureCount,
            nextAllowedUpdateTime: fields.nextAllowedUpdateTime,
            isLocked: fields.isLocked,
            schedule: fields.schedule,
            latestConfirmedRound: types.AggregatorRound.toEncodable(fields.latestConfirmedRound),
            currentRound: types.AggregatorRound.toEncodable(fields.currentRound),
            jobPubkeysData: fields.jobPubkeysData,
            jobHashes: fields.jobHashes.map((item) => types.Hash.toEncodable(item)),
            jobPubkeysSize: fields.jobPubkeysSize,
            jobsChecksum: fields.jobsChecksum,
            authority: fields.authority,
            ebuf: fields.ebuf,
        };
    }
    toJSON() {
        return {
            name: this.name,
            metadata: this.metadata,
            authorWallet: this.authorWallet,
            queuePubkey: this.queuePubkey,
            oracleRequestBatchSize: this.oracleRequestBatchSize,
            minOracleResults: this.minOracleResults,
            minJobResults: this.minJobResults,
            minUpdateDelaySeconds: this.minUpdateDelaySeconds,
            startAfter: this.startAfter.toString(),
            varianceThreshold: this.varianceThreshold.toJSON(),
            forceReportPeriod: this.forceReportPeriod.toString(),
            expiration: this.expiration.toString(),
            consecutiveFailureCount: this.consecutiveFailureCount.toString(),
            nextAllowedUpdateTime: this.nextAllowedUpdateTime.toString(),
            isLocked: this.isLocked,
            schedule: this.schedule,
            latestConfirmedRound: this.latestConfirmedRound.toJSON(),
            currentRound: this.currentRound.toJSON(),
            jobPubkeysData: this.jobPubkeysData,
            jobHashes: this.jobHashes.map((item) => item.toJSON()),
            jobPubkeysSize: this.jobPubkeysSize,
            jobsChecksum: this.jobsChecksum,
            authority: this.authority,
            ebuf: this.ebuf,
        };
    }
    static fromJSON(obj) {
        return new AggregatorAccountData({
            name: obj.name,
            metadata: obj.metadata,
            authorWallet: (0, kit_1.address)(obj.authorWallet),
            queuePubkey: (0, kit_1.address)(obj.queuePubkey),
            oracleRequestBatchSize: obj.oracleRequestBatchSize,
            minOracleResults: obj.minOracleResults,
            minJobResults: obj.minJobResults,
            minUpdateDelaySeconds: obj.minUpdateDelaySeconds,
            startAfter: new bn_js_1.default(obj.startAfter),
            varianceThreshold: types.SwitchboardDecimal.fromJSON(obj.varianceThreshold),
            forceReportPeriod: new bn_js_1.default(obj.forceReportPeriod),
            expiration: new bn_js_1.default(obj.expiration),
            consecutiveFailureCount: new bn_js_1.default(obj.consecutiveFailureCount),
            nextAllowedUpdateTime: new bn_js_1.default(obj.nextAllowedUpdateTime),
            isLocked: obj.isLocked,
            schedule: obj.schedule,
            latestConfirmedRound: types.AggregatorRound.fromJSON(obj.latestConfirmedRound),
            currentRound: types.AggregatorRound.fromJSON(obj.currentRound),
            jobPubkeysData: obj.jobPubkeysData.map((item) => (0, kit_1.address)(item)),
            jobHashes: obj.jobHashes.map((item) => types.Hash.fromJSON(item)),
            jobPubkeysSize: obj.jobPubkeysSize,
            jobsChecksum: obj.jobsChecksum,
            authority: (0, kit_1.address)(obj.authority),
            ebuf: obj.ebuf,
        });
    }
    toEncodable() {
        return AggregatorAccountData.toEncodable(this);
    }
}
exports.AggregatorAccountData = AggregatorAccountData;
//# sourceMappingURL=AggregatorAccountData.js.map