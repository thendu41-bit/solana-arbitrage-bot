import { Address, GetAccountInfoApi, GetMultipleAccountsApi, Rpc } from "@solana/kit";
import * as types from "../types";
export interface TokenMetadatasFields {
    metadatasArray: Array<types.TokenMetadataFields>;
}
export interface TokenMetadatasJSON {
    metadatasArray: Array<types.TokenMetadataJSON>;
}
export declare class TokenMetadatas {
    readonly metadatasArray: Array<types.TokenMetadata>;
    static readonly discriminator: Buffer<ArrayBuffer>;
    static readonly layout: import("buffer-layout").Layout<TokenMetadatas>;
    constructor(fields: TokenMetadatasFields);
    static fetch(rpc: Rpc<GetAccountInfoApi>, address: Address, programId?: Address): Promise<TokenMetadatas | null>;
    static fetchMultiple(rpc: Rpc<GetMultipleAccountsApi>, addresses: Address[], programId?: Address): Promise<Array<TokenMetadatas | null>>;
    static decode(data: Buffer): TokenMetadatas;
    toJSON(): TokenMetadatasJSON;
    static fromJSON(obj: TokenMetadatasJSON): TokenMetadatas;
}
//# sourceMappingURL=TokenMetadatas.d.ts.map