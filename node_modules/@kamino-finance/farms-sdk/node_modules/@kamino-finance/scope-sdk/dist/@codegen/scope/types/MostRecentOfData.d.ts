import * as types from "../types";
export interface MostRecentOfDataFields {
    sourceEntries: Array<number>;
    maxDivergenceBps: number;
    sourcesMaxAgeS: number;
}
export interface MostRecentOfDataJSON {
    sourceEntries: Array<number>;
    maxDivergenceBps: number;
    sourcesMaxAgeS: number;
}
export declare class MostRecentOfData {
    readonly sourceEntries: Array<number>;
    readonly maxDivergenceBps: number;
    readonly sourcesMaxAgeS: number;
    constructor(fields: MostRecentOfDataFields);
    static layout(property?: string): import("buffer-layout").Layout<unknown>;
    static fromDecoded(obj: any): types.MostRecentOfData;
    static toEncodable(fields: MostRecentOfDataFields): {
        sourceEntries: number[];
        maxDivergenceBps: number;
        sourcesMaxAgeS: number;
    };
    toJSON(): MostRecentOfDataJSON;
    static fromJSON(obj: MostRecentOfDataJSON): MostRecentOfData;
    toEncodable(): {
        sourceEntries: number[];
        maxDivergenceBps: number;
        sourcesMaxAgeS: number;
    };
}
//# sourceMappingURL=MostRecentOfData.d.ts.map