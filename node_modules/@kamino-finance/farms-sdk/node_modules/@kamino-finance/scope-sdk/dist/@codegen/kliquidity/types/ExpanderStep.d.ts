import * as types from "../types";
import * as borsh from "@coral-xyz/borsh";
export type ExpandOrContractFields = [number];
export type ExpandOrContractValue = [number];
export interface ExpandOrContractJSON {
    kind: "ExpandOrContract";
    value: [number];
}
export declare class ExpandOrContract {
    static readonly discriminator = 0;
    static readonly kind = "ExpandOrContract";
    readonly discriminator = 0;
    readonly kind = "ExpandOrContract";
    readonly value: ExpandOrContractValue;
    constructor(value: ExpandOrContractFields);
    toJSON(): ExpandOrContractJSON;
    toEncodable(): {
        ExpandOrContract: {
            _0: number;
        };
    };
}
export interface RecenterJSON {
    kind: "Recenter";
}
export declare class Recenter {
    static readonly discriminator = 1;
    static readonly kind = "Recenter";
    readonly discriminator = 1;
    readonly kind = "Recenter";
    toJSON(): RecenterJSON;
    toEncodable(): {
        Recenter: {};
    };
}
export declare function fromDecoded(obj: any): types.ExpanderStepKind;
export declare function fromJSON(obj: types.ExpanderStepJSON): types.ExpanderStepKind;
export declare function layout(property?: string): borsh.EnumLayout<unknown>;
//# sourceMappingURL=ExpanderStep.d.ts.map