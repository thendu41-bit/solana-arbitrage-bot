"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CouldNotDeserializeScope = exports.InvalidOracleConfig = exports.ScopeOraclePriceTooOld = exports.MissingScopePrices = exports.DepositCapReached = exports.InvalidTimestamp = exports.InvalidRpsCurvePoint = exports.InvalidLockingTimestamps = exports.EarlyWithdrawalNotAllowed = exports.InvalidPenaltyPercentage = exports.InvalidConfigValue = exports.DepositZero = exports.PendingWithdrawalNotWithdrawnYet = exports.UnstakeNotElapsed = exports.FarmDelegated = exports.FarmNotDelegated = exports.AuthorityFarmDelegateMissmatch = exports.UserDelegatedFarmNonDelegatedMissmatch = exports.NothingToWithdraw = exports.RewardIndexOutOfRange = exports.InvalidGlobalConfigMode = exports.RewardAtaOwnerNotPayer = exports.RewardAtaRewardMintMissmatch = exports.TokenFarmTokenMintMissmatch = exports.UserAtaFarmTokenMintMissmatch = exports.UserAtaRewardVaultMintMissmatch = exports.RewardsTreasuryVaultHasCloseAuthority = exports.RewardsTreasuryVaultHasDelegate = exports.FarmVaultHasCloseAuthority = exports.FarmVaultHasDelegate = exports.RewardsVaultHasCloseAuthority = exports.RewardsVaultHasDelegate = exports.MinClaimDurationNotReached = exports.MathOverflow = exports.OperationForbidden = exports.UnexpectedAccount = exports.ConversionFailure = exports.IntegerOverflow = exports.NothingStaked = exports.RewardVaultAuthorityMismatch = exports.RewardVaultMismatch = exports.WrongRewardVaultAccount = exports.RewardDoesNotExist = exports.MaxRewardNumberReached = exports.RewardAlreadyInitialized = exports.NoRewardInList = exports.NoRewardToHarvest = exports.NothingToUnstake = exports.UnstakeZero = exports.StakeZero = void 0;
exports.InvalidTransferOwnershipNewOwner = exports.InvalidTransferOwnershipStakeAmount = exports.InvalidTransferOwnershipFarmStateWithdrawCooldownPeriod = exports.InvalidTransferOwnershipFarmStateLockingMode = exports.InvalidTransferOwnershipUserStateOwnerDelegatee = exports.InvalidTransferOwnershipFarmState = exports.InvalidTransferOwnershipOldOwner = exports.InvalidFarmConfigUpdateAuthority = exports.UnsupportedTokenExtension = exports.RewardScheduleCurveSet = exports.WithdrawRewardZeroAvailable = exports.RewardAtaOwnerNotAdmin = void 0;
exports.fromCode = fromCode;
class StakeZero extends Error {
    logs;
    static code = 6000;
    code = 6000;
    name = "StakeZero";
    msg = "Cannot stake 0 amount";
    constructor(logs) {
        super("6000: Cannot stake 0 amount");
        this.logs = logs;
    }
}
exports.StakeZero = StakeZero;
class UnstakeZero extends Error {
    logs;
    static code = 6001;
    code = 6001;
    name = "UnstakeZero";
    msg = "Cannot unstake 0 amount";
    constructor(logs) {
        super("6001: Cannot unstake 0 amount");
        this.logs = logs;
    }
}
exports.UnstakeZero = UnstakeZero;
class NothingToUnstake extends Error {
    logs;
    static code = 6002;
    code = 6002;
    name = "NothingToUnstake";
    msg = "Nothing to unstake";
    constructor(logs) {
        super("6002: Nothing to unstake");
        this.logs = logs;
    }
}
exports.NothingToUnstake = NothingToUnstake;
class NoRewardToHarvest extends Error {
    logs;
    static code = 6003;
    code = 6003;
    name = "NoRewardToHarvest";
    msg = "No reward to harvest";
    constructor(logs) {
        super("6003: No reward to harvest");
        this.logs = logs;
    }
}
exports.NoRewardToHarvest = NoRewardToHarvest;
class NoRewardInList extends Error {
    logs;
    static code = 6004;
    code = 6004;
    name = "NoRewardInList";
    msg = "Reward not present in reward list";
    constructor(logs) {
        super("6004: Reward not present in reward list");
        this.logs = logs;
    }
}
exports.NoRewardInList = NoRewardInList;
class RewardAlreadyInitialized extends Error {
    logs;
    static code = 6005;
    code = 6005;
    name = "RewardAlreadyInitialized";
    msg = "Reward already initialized";
    constructor(logs) {
        super("6005: Reward already initialized");
        this.logs = logs;
    }
}
exports.RewardAlreadyInitialized = RewardAlreadyInitialized;
class MaxRewardNumberReached extends Error {
    logs;
    static code = 6006;
    code = 6006;
    name = "MaxRewardNumberReached";
    msg = "Max number of reward tokens reached";
    constructor(logs) {
        super("6006: Max number of reward tokens reached");
        this.logs = logs;
    }
}
exports.MaxRewardNumberReached = MaxRewardNumberReached;
class RewardDoesNotExist extends Error {
    logs;
    static code = 6007;
    code = 6007;
    name = "RewardDoesNotExist";
    msg = "Reward does not exist";
    constructor(logs) {
        super("6007: Reward does not exist");
        this.logs = logs;
    }
}
exports.RewardDoesNotExist = RewardDoesNotExist;
class WrongRewardVaultAccount extends Error {
    logs;
    static code = 6008;
    code = 6008;
    name = "WrongRewardVaultAccount";
    msg = "Reward vault exists but the account is wrong";
    constructor(logs) {
        super("6008: Reward vault exists but the account is wrong");
        this.logs = logs;
    }
}
exports.WrongRewardVaultAccount = WrongRewardVaultAccount;
class RewardVaultMismatch extends Error {
    logs;
    static code = 6009;
    code = 6009;
    name = "RewardVaultMismatch";
    msg = "Reward vault pubkey does not match staking pool vault";
    constructor(logs) {
        super("6009: Reward vault pubkey does not match staking pool vault");
        this.logs = logs;
    }
}
exports.RewardVaultMismatch = RewardVaultMismatch;
class RewardVaultAuthorityMismatch extends Error {
    logs;
    static code = 6010;
    code = 6010;
    name = "RewardVaultAuthorityMismatch";
    msg = "Reward vault authority pubkey does not match staking pool vault";
    constructor(logs) {
        super("6010: Reward vault authority pubkey does not match staking pool vault");
        this.logs = logs;
    }
}
exports.RewardVaultAuthorityMismatch = RewardVaultAuthorityMismatch;
class NothingStaked extends Error {
    logs;
    static code = 6011;
    code = 6011;
    name = "NothingStaked";
    msg = "Nothing staked, cannot collect any rewards";
    constructor(logs) {
        super("6011: Nothing staked, cannot collect any rewards");
        this.logs = logs;
    }
}
exports.NothingStaked = NothingStaked;
class IntegerOverflow extends Error {
    logs;
    static code = 6012;
    code = 6012;
    name = "IntegerOverflow";
    msg = "Integer overflow";
    constructor(logs) {
        super("6012: Integer overflow");
        this.logs = logs;
    }
}
exports.IntegerOverflow = IntegerOverflow;
class ConversionFailure extends Error {
    logs;
    static code = 6013;
    code = 6013;
    name = "ConversionFailure";
    msg = "Conversion failure";
    constructor(logs) {
        super("6013: Conversion failure");
        this.logs = logs;
    }
}
exports.ConversionFailure = ConversionFailure;
class UnexpectedAccount extends Error {
    logs;
    static code = 6014;
    code = 6014;
    name = "UnexpectedAccount";
    msg = "Unexpected account in instruction";
    constructor(logs) {
        super("6014: Unexpected account in instruction");
        this.logs = logs;
    }
}
exports.UnexpectedAccount = UnexpectedAccount;
class OperationForbidden extends Error {
    logs;
    static code = 6015;
    code = 6015;
    name = "OperationForbidden";
    msg = "Operation forbidden";
    constructor(logs) {
        super("6015: Operation forbidden");
        this.logs = logs;
    }
}
exports.OperationForbidden = OperationForbidden;
class MathOverflow extends Error {
    logs;
    static code = 6016;
    code = 6016;
    name = "MathOverflow";
    msg = "Mathematical operation with overflow";
    constructor(logs) {
        super("6016: Mathematical operation with overflow");
        this.logs = logs;
    }
}
exports.MathOverflow = MathOverflow;
class MinClaimDurationNotReached extends Error {
    logs;
    static code = 6017;
    code = 6017;
    name = "MinClaimDurationNotReached";
    msg = "Minimum claim duration has not been reached";
    constructor(logs) {
        super("6017: Minimum claim duration has not been reached");
        this.logs = logs;
    }
}
exports.MinClaimDurationNotReached = MinClaimDurationNotReached;
class RewardsVaultHasDelegate extends Error {
    logs;
    static code = 6018;
    code = 6018;
    name = "RewardsVaultHasDelegate";
    msg = "Reward vault has a delegate";
    constructor(logs) {
        super("6018: Reward vault has a delegate");
        this.logs = logs;
    }
}
exports.RewardsVaultHasDelegate = RewardsVaultHasDelegate;
class RewardsVaultHasCloseAuthority extends Error {
    logs;
    static code = 6019;
    code = 6019;
    name = "RewardsVaultHasCloseAuthority";
    msg = "Reward vault has a close authority";
    constructor(logs) {
        super("6019: Reward vault has a close authority");
        this.logs = logs;
    }
}
exports.RewardsVaultHasCloseAuthority = RewardsVaultHasCloseAuthority;
class FarmVaultHasDelegate extends Error {
    logs;
    static code = 6020;
    code = 6020;
    name = "FarmVaultHasDelegate";
    msg = "Farm vault has a delegate";
    constructor(logs) {
        super("6020: Farm vault has a delegate");
        this.logs = logs;
    }
}
exports.FarmVaultHasDelegate = FarmVaultHasDelegate;
class FarmVaultHasCloseAuthority extends Error {
    logs;
    static code = 6021;
    code = 6021;
    name = "FarmVaultHasCloseAuthority";
    msg = "Farm vault has a close authority";
    constructor(logs) {
        super("6021: Farm vault has a close authority");
        this.logs = logs;
    }
}
exports.FarmVaultHasCloseAuthority = FarmVaultHasCloseAuthority;
class RewardsTreasuryVaultHasDelegate extends Error {
    logs;
    static code = 6022;
    code = 6022;
    name = "RewardsTreasuryVaultHasDelegate";
    msg = "Reward vault has a delegate";
    constructor(logs) {
        super("6022: Reward vault has a delegate");
        this.logs = logs;
    }
}
exports.RewardsTreasuryVaultHasDelegate = RewardsTreasuryVaultHasDelegate;
class RewardsTreasuryVaultHasCloseAuthority extends Error {
    logs;
    static code = 6023;
    code = 6023;
    name = "RewardsTreasuryVaultHasCloseAuthority";
    msg = "Reward vault has a close authority";
    constructor(logs) {
        super("6023: Reward vault has a close authority");
        this.logs = logs;
    }
}
exports.RewardsTreasuryVaultHasCloseAuthority = RewardsTreasuryVaultHasCloseAuthority;
class UserAtaRewardVaultMintMissmatch extends Error {
    logs;
    static code = 6024;
    code = 6024;
    name = "UserAtaRewardVaultMintMissmatch";
    msg = "User ata and reward vault have different mints";
    constructor(logs) {
        super("6024: User ata and reward vault have different mints");
        this.logs = logs;
    }
}
exports.UserAtaRewardVaultMintMissmatch = UserAtaRewardVaultMintMissmatch;
class UserAtaFarmTokenMintMissmatch extends Error {
    logs;
    static code = 6025;
    code = 6025;
    name = "UserAtaFarmTokenMintMissmatch";
    msg = "User ata and farm token have different mints";
    constructor(logs) {
        super("6025: User ata and farm token have different mints");
        this.logs = logs;
    }
}
exports.UserAtaFarmTokenMintMissmatch = UserAtaFarmTokenMintMissmatch;
class TokenFarmTokenMintMissmatch extends Error {
    logs;
    static code = 6026;
    code = 6026;
    name = "TokenFarmTokenMintMissmatch";
    msg = "Token mint and farm token have different mints";
    constructor(logs) {
        super("6026: Token mint and farm token have different mints");
        this.logs = logs;
    }
}
exports.TokenFarmTokenMintMissmatch = TokenFarmTokenMintMissmatch;
class RewardAtaRewardMintMissmatch extends Error {
    logs;
    static code = 6027;
    code = 6027;
    name = "RewardAtaRewardMintMissmatch";
    msg = "Reward ata mint is different than reward mint";
    constructor(logs) {
        super("6027: Reward ata mint is different than reward mint");
        this.logs = logs;
    }
}
exports.RewardAtaRewardMintMissmatch = RewardAtaRewardMintMissmatch;
class RewardAtaOwnerNotPayer extends Error {
    logs;
    static code = 6028;
    code = 6028;
    name = "RewardAtaOwnerNotPayer";
    msg = "Reward ata owner is different than payer";
    constructor(logs) {
        super("6028: Reward ata owner is different than payer");
        this.logs = logs;
    }
}
exports.RewardAtaOwnerNotPayer = RewardAtaOwnerNotPayer;
class InvalidGlobalConfigMode extends Error {
    logs;
    static code = 6029;
    code = 6029;
    name = "InvalidGlobalConfigMode";
    msg = "Mode to update global_config is invalid";
    constructor(logs) {
        super("6029: Mode to update global_config is invalid");
        this.logs = logs;
    }
}
exports.InvalidGlobalConfigMode = InvalidGlobalConfigMode;
class RewardIndexOutOfRange extends Error {
    logs;
    static code = 6030;
    code = 6030;
    name = "RewardIndexOutOfRange";
    msg = "Reward Index is higher than number of rewards";
    constructor(logs) {
        super("6030: Reward Index is higher than number of rewards");
        this.logs = logs;
    }
}
exports.RewardIndexOutOfRange = RewardIndexOutOfRange;
class NothingToWithdraw extends Error {
    logs;
    static code = 6031;
    code = 6031;
    name = "NothingToWithdraw";
    msg = "No tokens available to withdraw";
    constructor(logs) {
        super("6031: No tokens available to withdraw");
        this.logs = logs;
    }
}
exports.NothingToWithdraw = NothingToWithdraw;
class UserDelegatedFarmNonDelegatedMissmatch extends Error {
    logs;
    static code = 6032;
    code = 6032;
    name = "UserDelegatedFarmNonDelegatedMissmatch";
    msg = "user, user_ref, authority and payer must match for non-delegated farm";
    constructor(logs) {
        super("6032: user, user_ref, authority and payer must match for non-delegated farm");
        this.logs = logs;
    }
}
exports.UserDelegatedFarmNonDelegatedMissmatch = UserDelegatedFarmNonDelegatedMissmatch;
class AuthorityFarmDelegateMissmatch extends Error {
    logs;
    static code = 6033;
    code = 6033;
    name = "AuthorityFarmDelegateMissmatch";
    msg = "Authority must match farm delegate authority";
    constructor(logs) {
        super("6033: Authority must match farm delegate authority");
        this.logs = logs;
    }
}
exports.AuthorityFarmDelegateMissmatch = AuthorityFarmDelegateMissmatch;
class FarmNotDelegated extends Error {
    logs;
    static code = 6034;
    code = 6034;
    name = "FarmNotDelegated";
    msg = "Farm not delegated, can not set stake";
    constructor(logs) {
        super("6034: Farm not delegated, can not set stake");
        this.logs = logs;
    }
}
exports.FarmNotDelegated = FarmNotDelegated;
class FarmDelegated extends Error {
    logs;
    static code = 6035;
    code = 6035;
    name = "FarmDelegated";
    msg = "Operation not allowed for delegated farm";
    constructor(logs) {
        super("6035: Operation not allowed for delegated farm");
        this.logs = logs;
    }
}
exports.FarmDelegated = FarmDelegated;
class UnstakeNotElapsed extends Error {
    logs;
    static code = 6036;
    code = 6036;
    name = "UnstakeNotElapsed";
    msg = "Unstake lockup period is not elapsed. Deposit is locked until end of unstake period";
    constructor(logs) {
        super("6036: Unstake lockup period is not elapsed. Deposit is locked until end of unstake period");
        this.logs = logs;
    }
}
exports.UnstakeNotElapsed = UnstakeNotElapsed;
class PendingWithdrawalNotWithdrawnYet extends Error {
    logs;
    static code = 6037;
    code = 6037;
    name = "PendingWithdrawalNotWithdrawnYet";
    msg = "Pending withdrawal already exist and not withdrawn yet";
    constructor(logs) {
        super("6037: Pending withdrawal already exist and not withdrawn yet");
        this.logs = logs;
    }
}
exports.PendingWithdrawalNotWithdrawnYet = PendingWithdrawalNotWithdrawnYet;
class DepositZero extends Error {
    logs;
    static code = 6038;
    code = 6038;
    name = "DepositZero";
    msg = "Cannot deposit zero amount directly to farm vault";
    constructor(logs) {
        super("6038: Cannot deposit zero amount directly to farm vault");
        this.logs = logs;
    }
}
exports.DepositZero = DepositZero;
class InvalidConfigValue extends Error {
    logs;
    static code = 6039;
    code = 6039;
    name = "InvalidConfigValue";
    msg = "Invalid config value";
    constructor(logs) {
        super("6039: Invalid config value");
        this.logs = logs;
    }
}
exports.InvalidConfigValue = InvalidConfigValue;
class InvalidPenaltyPercentage extends Error {
    logs;
    static code = 6040;
    code = 6040;
    name = "InvalidPenaltyPercentage";
    msg = "Invalid penalty percentage";
    constructor(logs) {
        super("6040: Invalid penalty percentage");
        this.logs = logs;
    }
}
exports.InvalidPenaltyPercentage = InvalidPenaltyPercentage;
class EarlyWithdrawalNotAllowed extends Error {
    logs;
    static code = 6041;
    code = 6041;
    name = "EarlyWithdrawalNotAllowed";
    msg = "Early withdrawal not allowed";
    constructor(logs) {
        super("6041: Early withdrawal not allowed");
        this.logs = logs;
    }
}
exports.EarlyWithdrawalNotAllowed = EarlyWithdrawalNotAllowed;
class InvalidLockingTimestamps extends Error {
    logs;
    static code = 6042;
    code = 6042;
    name = "InvalidLockingTimestamps";
    msg = "Invalid locking timestamps";
    constructor(logs) {
        super("6042: Invalid locking timestamps");
        this.logs = logs;
    }
}
exports.InvalidLockingTimestamps = InvalidLockingTimestamps;
class InvalidRpsCurvePoint extends Error {
    logs;
    static code = 6043;
    code = 6043;
    name = "InvalidRpsCurvePoint";
    msg = "Invalid reward rate curve point";
    constructor(logs) {
        super("6043: Invalid reward rate curve point");
        this.logs = logs;
    }
}
exports.InvalidRpsCurvePoint = InvalidRpsCurvePoint;
class InvalidTimestamp extends Error {
    logs;
    static code = 6044;
    code = 6044;
    name = "InvalidTimestamp";
    msg = "Invalid timestamp";
    constructor(logs) {
        super("6044: Invalid timestamp");
        this.logs = logs;
    }
}
exports.InvalidTimestamp = InvalidTimestamp;
class DepositCapReached extends Error {
    logs;
    static code = 6045;
    code = 6045;
    name = "DepositCapReached";
    msg = "Deposit cap reached";
    constructor(logs) {
        super("6045: Deposit cap reached");
        this.logs = logs;
    }
}
exports.DepositCapReached = DepositCapReached;
class MissingScopePrices extends Error {
    logs;
    static code = 6046;
    code = 6046;
    name = "MissingScopePrices";
    msg = "Missing Scope Prices";
    constructor(logs) {
        super("6046: Missing Scope Prices");
        this.logs = logs;
    }
}
exports.MissingScopePrices = MissingScopePrices;
class ScopeOraclePriceTooOld extends Error {
    logs;
    static code = 6047;
    code = 6047;
    name = "ScopeOraclePriceTooOld";
    msg = "Scope Oracle Price Too Old";
    constructor(logs) {
        super("6047: Scope Oracle Price Too Old");
        this.logs = logs;
    }
}
exports.ScopeOraclePriceTooOld = ScopeOraclePriceTooOld;
class InvalidOracleConfig extends Error {
    logs;
    static code = 6048;
    code = 6048;
    name = "InvalidOracleConfig";
    msg = "Invalid Oracle Config";
    constructor(logs) {
        super("6048: Invalid Oracle Config");
        this.logs = logs;
    }
}
exports.InvalidOracleConfig = InvalidOracleConfig;
class CouldNotDeserializeScope extends Error {
    logs;
    static code = 6049;
    code = 6049;
    name = "CouldNotDeserializeScope";
    msg = "Could not deserialize scope";
    constructor(logs) {
        super("6049: Could not deserialize scope");
        this.logs = logs;
    }
}
exports.CouldNotDeserializeScope = CouldNotDeserializeScope;
class RewardAtaOwnerNotAdmin extends Error {
    logs;
    static code = 6050;
    code = 6050;
    name = "RewardAtaOwnerNotAdmin";
    msg = "Reward ata owner is different than farm admin";
    constructor(logs) {
        super("6050: Reward ata owner is different than farm admin");
        this.logs = logs;
    }
}
exports.RewardAtaOwnerNotAdmin = RewardAtaOwnerNotAdmin;
class WithdrawRewardZeroAvailable extends Error {
    logs;
    static code = 6051;
    code = 6051;
    name = "WithdrawRewardZeroAvailable";
    msg = "Cannot withdraw reward as available amount is zero";
    constructor(logs) {
        super("6051: Cannot withdraw reward as available amount is zero");
        this.logs = logs;
    }
}
exports.WithdrawRewardZeroAvailable = WithdrawRewardZeroAvailable;
class RewardScheduleCurveSet extends Error {
    logs;
    static code = 6052;
    code = 6052;
    name = "RewardScheduleCurveSet";
    msg = "Cannot withdraw reward as reward schedule is set";
    constructor(logs) {
        super("6052: Cannot withdraw reward as reward schedule is set");
        this.logs = logs;
    }
}
exports.RewardScheduleCurveSet = RewardScheduleCurveSet;
class UnsupportedTokenExtension extends Error {
    logs;
    static code = 6053;
    code = 6053;
    name = "UnsupportedTokenExtension";
    msg = "Cannot initialize farm while having a mint with token22 and requested extensions";
    constructor(logs) {
        super("6053: Cannot initialize farm while having a mint with token22 and requested extensions");
        this.logs = logs;
    }
}
exports.UnsupportedTokenExtension = UnsupportedTokenExtension;
class InvalidFarmConfigUpdateAuthority extends Error {
    logs;
    static code = 6054;
    code = 6054;
    name = "InvalidFarmConfigUpdateAuthority";
    msg = "Invalid authority for updating farm config";
    constructor(logs) {
        super("6054: Invalid authority for updating farm config");
        this.logs = logs;
    }
}
exports.InvalidFarmConfigUpdateAuthority = InvalidFarmConfigUpdateAuthority;
class InvalidTransferOwnershipOldOwner extends Error {
    logs;
    static code = 6055;
    code = 6055;
    name = "InvalidTransferOwnershipOldOwner";
    msg = "Invalid authority for transfer ownersip new user state initialization";
    constructor(logs) {
        super("6055: Invalid authority for transfer ownersip new user state initialization");
        this.logs = logs;
    }
}
exports.InvalidTransferOwnershipOldOwner = InvalidTransferOwnershipOldOwner;
class InvalidTransferOwnershipFarmState extends Error {
    logs;
    static code = 6056;
    code = 6056;
    name = "InvalidTransferOwnershipFarmState";
    msg = "Invalid farm state for transfer ownership new user state initialization";
    constructor(logs) {
        super("6056: Invalid farm state for transfer ownership new user state initialization");
        this.logs = logs;
    }
}
exports.InvalidTransferOwnershipFarmState = InvalidTransferOwnershipFarmState;
class InvalidTransferOwnershipUserStateOwnerDelegatee extends Error {
    logs;
    static code = 6057;
    code = 6057;
    name = "InvalidTransferOwnershipUserStateOwnerDelegatee";
    msg = "Invalid user state for transfer ownership, owner must match delegatee";
    constructor(logs) {
        super("6057: Invalid user state for transfer ownership, owner must match delegatee");
        this.logs = logs;
    }
}
exports.InvalidTransferOwnershipUserStateOwnerDelegatee = InvalidTransferOwnershipUserStateOwnerDelegatee;
class InvalidTransferOwnershipFarmStateLockingMode extends Error {
    logs;
    static code = 6058;
    code = 6058;
    name = "InvalidTransferOwnershipFarmStateLockingMode";
    msg = "Invalid farm state locking mode for transfer ownership, must be 0";
    constructor(logs) {
        super("6058: Invalid farm state locking mode for transfer ownership, must be 0");
        this.logs = logs;
    }
}
exports.InvalidTransferOwnershipFarmStateLockingMode = InvalidTransferOwnershipFarmStateLockingMode;
class InvalidTransferOwnershipFarmStateWithdrawCooldownPeriod extends Error {
    logs;
    static code = 6059;
    code = 6059;
    name = "InvalidTransferOwnershipFarmStateWithdrawCooldownPeriod";
    msg = "Invalid farm state withdrawal cooldown period for transfer ownership, must be 0";
    constructor(logs) {
        super("6059: Invalid farm state withdrawal cooldown period for transfer ownership, must be 0");
        this.logs = logs;
    }
}
exports.InvalidTransferOwnershipFarmStateWithdrawCooldownPeriod = InvalidTransferOwnershipFarmStateWithdrawCooldownPeriod;
class InvalidTransferOwnershipStakeAmount extends Error {
    logs;
    static code = 6060;
    code = 6060;
    name = "InvalidTransferOwnershipStakeAmount";
    msg = "Invalid transfer ownership stake amount, must be equal to unstaked deposits";
    constructor(logs) {
        super("6060: Invalid transfer ownership stake amount, must be equal to unstaked deposits");
        this.logs = logs;
    }
}
exports.InvalidTransferOwnershipStakeAmount = InvalidTransferOwnershipStakeAmount;
class InvalidTransferOwnershipNewOwner extends Error {
    logs;
    static code = 6061;
    code = 6061;
    name = "InvalidTransferOwnershipNewOwner";
    msg = "Invalid authority for transfer ownersip new user state initialization";
    constructor(logs) {
        super("6061: Invalid authority for transfer ownersip new user state initialization");
        this.logs = logs;
    }
}
exports.InvalidTransferOwnershipNewOwner = InvalidTransferOwnershipNewOwner;
function fromCode(code, logs) {
    switch (code) {
        case 6000:
            return new StakeZero(logs);
        case 6001:
            return new UnstakeZero(logs);
        case 6002:
            return new NothingToUnstake(logs);
        case 6003:
            return new NoRewardToHarvest(logs);
        case 6004:
            return new NoRewardInList(logs);
        case 6005:
            return new RewardAlreadyInitialized(logs);
        case 6006:
            return new MaxRewardNumberReached(logs);
        case 6007:
            return new RewardDoesNotExist(logs);
        case 6008:
            return new WrongRewardVaultAccount(logs);
        case 6009:
            return new RewardVaultMismatch(logs);
        case 6010:
            return new RewardVaultAuthorityMismatch(logs);
        case 6011:
            return new NothingStaked(logs);
        case 6012:
            return new IntegerOverflow(logs);
        case 6013:
            return new ConversionFailure(logs);
        case 6014:
            return new UnexpectedAccount(logs);
        case 6015:
            return new OperationForbidden(logs);
        case 6016:
            return new MathOverflow(logs);
        case 6017:
            return new MinClaimDurationNotReached(logs);
        case 6018:
            return new RewardsVaultHasDelegate(logs);
        case 6019:
            return new RewardsVaultHasCloseAuthority(logs);
        case 6020:
            return new FarmVaultHasDelegate(logs);
        case 6021:
            return new FarmVaultHasCloseAuthority(logs);
        case 6022:
            return new RewardsTreasuryVaultHasDelegate(logs);
        case 6023:
            return new RewardsTreasuryVaultHasCloseAuthority(logs);
        case 6024:
            return new UserAtaRewardVaultMintMissmatch(logs);
        case 6025:
            return new UserAtaFarmTokenMintMissmatch(logs);
        case 6026:
            return new TokenFarmTokenMintMissmatch(logs);
        case 6027:
            return new RewardAtaRewardMintMissmatch(logs);
        case 6028:
            return new RewardAtaOwnerNotPayer(logs);
        case 6029:
            return new InvalidGlobalConfigMode(logs);
        case 6030:
            return new RewardIndexOutOfRange(logs);
        case 6031:
            return new NothingToWithdraw(logs);
        case 6032:
            return new UserDelegatedFarmNonDelegatedMissmatch(logs);
        case 6033:
            return new AuthorityFarmDelegateMissmatch(logs);
        case 6034:
            return new FarmNotDelegated(logs);
        case 6035:
            return new FarmDelegated(logs);
        case 6036:
            return new UnstakeNotElapsed(logs);
        case 6037:
            return new PendingWithdrawalNotWithdrawnYet(logs);
        case 6038:
            return new DepositZero(logs);
        case 6039:
            return new InvalidConfigValue(logs);
        case 6040:
            return new InvalidPenaltyPercentage(logs);
        case 6041:
            return new EarlyWithdrawalNotAllowed(logs);
        case 6042:
            return new InvalidLockingTimestamps(logs);
        case 6043:
            return new InvalidRpsCurvePoint(logs);
        case 6044:
            return new InvalidTimestamp(logs);
        case 6045:
            return new DepositCapReached(logs);
        case 6046:
            return new MissingScopePrices(logs);
        case 6047:
            return new ScopeOraclePriceTooOld(logs);
        case 6048:
            return new InvalidOracleConfig(logs);
        case 6049:
            return new CouldNotDeserializeScope(logs);
        case 6050:
            return new RewardAtaOwnerNotAdmin(logs);
        case 6051:
            return new WithdrawRewardZeroAvailable(logs);
        case 6052:
            return new RewardScheduleCurveSet(logs);
        case 6053:
            return new UnsupportedTokenExtension(logs);
        case 6054:
            return new InvalidFarmConfigUpdateAuthority(logs);
        case 6055:
            return new InvalidTransferOwnershipOldOwner(logs);
        case 6056:
            return new InvalidTransferOwnershipFarmState(logs);
        case 6057:
            return new InvalidTransferOwnershipUserStateOwnerDelegatee(logs);
        case 6058:
            return new InvalidTransferOwnershipFarmStateLockingMode(logs);
        case 6059:
            return new InvalidTransferOwnershipFarmStateWithdrawCooldownPeriod(logs);
        case 6060:
            return new InvalidTransferOwnershipStakeAmount(logs);
        case 6061:
            return new InvalidTransferOwnershipNewOwner(logs);
    }
    return null;
}
//# sourceMappingURL=custom.js.map