import { Address, GetAccountInfoApi, GetMultipleAccountsApi, Rpc } from "@solana/kit";
import BN from "bn.js";
export interface GlobalConfigFields {
    globalAdmin: Address;
    treasuryFeeBps: BN;
    treasuryVaultsAuthority: Address;
    treasuryVaultsAuthorityBump: BN;
    pendingGlobalAdmin: Address;
    padding1: Array<BN>;
}
export interface GlobalConfigJSON {
    globalAdmin: string;
    treasuryFeeBps: string;
    treasuryVaultsAuthority: string;
    treasuryVaultsAuthorityBump: string;
    pendingGlobalAdmin: string;
    padding1: Array<string>;
}
export declare class GlobalConfig {
    readonly globalAdmin: Address;
    readonly treasuryFeeBps: BN;
    readonly treasuryVaultsAuthority: Address;
    readonly treasuryVaultsAuthorityBump: BN;
    readonly pendingGlobalAdmin: Address;
    readonly padding1: Array<BN>;
    static readonly discriminator: Buffer<ArrayBuffer>;
    static readonly layout: import("buffer-layout").Layout<GlobalConfig>;
    constructor(fields: GlobalConfigFields);
    static fetch(rpc: Rpc<GetAccountInfoApi>, address: Address, programId?: Address): Promise<GlobalConfig | null>;
    static fetchMultiple(rpc: Rpc<GetMultipleAccountsApi>, addresses: Address[], programId?: Address): Promise<Array<GlobalConfig | null>>;
    static decode(data: Buffer): GlobalConfig;
    toJSON(): GlobalConfigJSON;
    static fromJSON(obj: GlobalConfigJSON): GlobalConfig;
}
//# sourceMappingURL=GlobalConfig.d.ts.map