"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FarmState = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
const kit_1 = require("@solana/kit");
/* eslint-enable @typescript-eslint/no-unused-vars */
const bn_js_1 = __importDefault(require("bn.js")); // eslint-disable-line @typescript-eslint/no-unused-vars
const borsh = __importStar(require("@coral-xyz/borsh")); // eslint-disable-line @typescript-eslint/no-unused-vars
const utils_1 = require("../utils"); // eslint-disable-line @typescript-eslint/no-unused-vars
const types = __importStar(require("../types")); // eslint-disable-line @typescript-eslint/no-unused-vars
const programId_1 = require("../programId");
class FarmState {
    farmAdmin;
    globalConfig;
    token;
    rewardInfos;
    numRewardTokens;
    /** Data used to calculate the rewards of the user */
    numUsers;
    /**
     * The number of token in the `farm_vault` staked (getting rewards and fees)
     * Set such as `farm_vault.amount = total_staked_amount + total_pending_amount`
     */
    totalStakedAmount;
    farmVault;
    farmVaultsAuthority;
    farmVaultsAuthorityBump;
    /**
     * Only used for delegate farms
     * Set to `default()` otherwise
     */
    delegateAuthority;
    /**
     * Raw representation of a `TimeUnit`
     * Seconds = 0, Slots = 1
     */
    timeUnit;
    /**
     * Automatically set to true in case of a full authority withdrawal
     * If true, the farm is frozen and no more deposits are allowed
     */
    isFarmFrozen;
    /**
     * Indicates if the farm is a delegate farm
     * If true, the farm is a delegate farm and the `delegate_authority` is set*
     */
    isFarmDelegated;
    padding0;
    /**
     * Withdraw authority for the farm, allowed to lock deposited funds and withdraw them
     * Set to `default()` if unused (only the depositors can withdraw their funds)
     */
    withdrawAuthority;
    /**
     * Delay between a user deposit and the moment it is considered as staked
     * 0 if unused
     */
    depositWarmupPeriod;
    /** Delay between a user unstake and the ability to withdraw his deposit. */
    withdrawalCooldownPeriod;
    /** Total active stake of tokens in the farm (scaled from `Decimal` representation). */
    totalActiveStakeScaled;
    /**
     * Total pending stake of tokens in the farm (scaled from `Decimal` representation).
     * (can be used by `withdraw_authority` but don't get rewards or fees)
     */
    totalPendingStakeScaled;
    /** Total pending amount of tokens in the farm */
    totalPendingAmount;
    /** Slashed amounts from early withdrawal */
    slashedAmountCurrent;
    slashedAmountCumulative;
    slashedAmountSpillAddress;
    /** Locking stake */
    lockingMode;
    lockingStartTimestamp;
    lockingDuration;
    lockingEarlyWithdrawalPenaltyBps;
    depositCapAmount;
    scopePrices;
    scopeOraclePriceId;
    scopeOracleMaxAge;
    pendingFarmAdmin;
    strategyId;
    delegatedRpsAdmin;
    vaultId;
    secondDelegatedAuthority;
    padding;
    static discriminator = Buffer.from([
        198, 102, 216, 74, 63, 66, 163, 190,
    ]);
    static layout = borsh.struct([
        (0, utils_1.borshAddress)("farmAdmin"),
        (0, utils_1.borshAddress)("globalConfig"),
        types.TokenInfo.layout("token"),
        borsh.array(types.RewardInfo.layout(), 10, "rewardInfos"),
        borsh.u64("numRewardTokens"),
        borsh.u64("numUsers"),
        borsh.u64("totalStakedAmount"),
        (0, utils_1.borshAddress)("farmVault"),
        (0, utils_1.borshAddress)("farmVaultsAuthority"),
        borsh.u64("farmVaultsAuthorityBump"),
        (0, utils_1.borshAddress)("delegateAuthority"),
        borsh.u8("timeUnit"),
        borsh.u8("isFarmFrozen"),
        borsh.u8("isFarmDelegated"),
        borsh.array(borsh.u8(), 5, "padding0"),
        (0, utils_1.borshAddress)("withdrawAuthority"),
        borsh.u32("depositWarmupPeriod"),
        borsh.u32("withdrawalCooldownPeriod"),
        borsh.u128("totalActiveStakeScaled"),
        borsh.u128("totalPendingStakeScaled"),
        borsh.u64("totalPendingAmount"),
        borsh.u64("slashedAmountCurrent"),
        borsh.u64("slashedAmountCumulative"),
        (0, utils_1.borshAddress)("slashedAmountSpillAddress"),
        borsh.u64("lockingMode"),
        borsh.u64("lockingStartTimestamp"),
        borsh.u64("lockingDuration"),
        borsh.u64("lockingEarlyWithdrawalPenaltyBps"),
        borsh.u64("depositCapAmount"),
        (0, utils_1.borshAddress)("scopePrices"),
        borsh.u64("scopeOraclePriceId"),
        borsh.u64("scopeOracleMaxAge"),
        (0, utils_1.borshAddress)("pendingFarmAdmin"),
        (0, utils_1.borshAddress)("strategyId"),
        (0, utils_1.borshAddress)("delegatedRpsAdmin"),
        (0, utils_1.borshAddress)("vaultId"),
        (0, utils_1.borshAddress)("secondDelegatedAuthority"),
        borsh.array(borsh.u64(), 74, "padding"),
    ]);
    constructor(fields) {
        this.farmAdmin = fields.farmAdmin;
        this.globalConfig = fields.globalConfig;
        this.token = new types.TokenInfo({ ...fields.token });
        this.rewardInfos = fields.rewardInfos.map((item) => new types.RewardInfo({ ...item }));
        this.numRewardTokens = fields.numRewardTokens;
        this.numUsers = fields.numUsers;
        this.totalStakedAmount = fields.totalStakedAmount;
        this.farmVault = fields.farmVault;
        this.farmVaultsAuthority = fields.farmVaultsAuthority;
        this.farmVaultsAuthorityBump = fields.farmVaultsAuthorityBump;
        this.delegateAuthority = fields.delegateAuthority;
        this.timeUnit = fields.timeUnit;
        this.isFarmFrozen = fields.isFarmFrozen;
        this.isFarmDelegated = fields.isFarmDelegated;
        this.padding0 = fields.padding0;
        this.withdrawAuthority = fields.withdrawAuthority;
        this.depositWarmupPeriod = fields.depositWarmupPeriod;
        this.withdrawalCooldownPeriod = fields.withdrawalCooldownPeriod;
        this.totalActiveStakeScaled = fields.totalActiveStakeScaled;
        this.totalPendingStakeScaled = fields.totalPendingStakeScaled;
        this.totalPendingAmount = fields.totalPendingAmount;
        this.slashedAmountCurrent = fields.slashedAmountCurrent;
        this.slashedAmountCumulative = fields.slashedAmountCumulative;
        this.slashedAmountSpillAddress = fields.slashedAmountSpillAddress;
        this.lockingMode = fields.lockingMode;
        this.lockingStartTimestamp = fields.lockingStartTimestamp;
        this.lockingDuration = fields.lockingDuration;
        this.lockingEarlyWithdrawalPenaltyBps =
            fields.lockingEarlyWithdrawalPenaltyBps;
        this.depositCapAmount = fields.depositCapAmount;
        this.scopePrices = fields.scopePrices;
        this.scopeOraclePriceId = fields.scopeOraclePriceId;
        this.scopeOracleMaxAge = fields.scopeOracleMaxAge;
        this.pendingFarmAdmin = fields.pendingFarmAdmin;
        this.strategyId = fields.strategyId;
        this.delegatedRpsAdmin = fields.delegatedRpsAdmin;
        this.vaultId = fields.vaultId;
        this.secondDelegatedAuthority = fields.secondDelegatedAuthority;
        this.padding = fields.padding;
    }
    static async fetch(rpc, address, programId = programId_1.PROGRAM_ID) {
        const info = await (0, kit_1.fetchEncodedAccount)(rpc, address);
        if (!info.exists) {
            return null;
        }
        if (info.programAddress !== programId) {
            throw new Error(`FarmStateFields account ${address} belongs to wrong program ${info.programAddress}, expected ${programId}`);
        }
        return this.decode(Buffer.from(info.data));
    }
    static async fetchMultiple(rpc, addresses, programId = programId_1.PROGRAM_ID) {
        const infos = await (0, kit_1.fetchEncodedAccounts)(rpc, addresses);
        return infos.map((info) => {
            if (!info.exists) {
                return null;
            }
            if (info.programAddress !== programId) {
                throw new Error(`FarmStateFields account ${info.address} belongs to wrong program ${info.programAddress}, expected ${programId}`);
            }
            return this.decode(Buffer.from(info.data));
        });
    }
    static decode(data) {
        if (!data.slice(0, 8).equals(FarmState.discriminator)) {
            throw new Error("invalid account discriminator");
        }
        const dec = FarmState.layout.decode(data.slice(8));
        return new FarmState({
            farmAdmin: dec.farmAdmin,
            globalConfig: dec.globalConfig,
            token: types.TokenInfo.fromDecoded(dec.token),
            rewardInfos: dec.rewardInfos.map((item /* eslint-disable-line @typescript-eslint/no-explicit-any */) => types.RewardInfo.fromDecoded(item)),
            numRewardTokens: dec.numRewardTokens,
            numUsers: dec.numUsers,
            totalStakedAmount: dec.totalStakedAmount,
            farmVault: dec.farmVault,
            farmVaultsAuthority: dec.farmVaultsAuthority,
            farmVaultsAuthorityBump: dec.farmVaultsAuthorityBump,
            delegateAuthority: dec.delegateAuthority,
            timeUnit: dec.timeUnit,
            isFarmFrozen: dec.isFarmFrozen,
            isFarmDelegated: dec.isFarmDelegated,
            padding0: dec.padding0,
            withdrawAuthority: dec.withdrawAuthority,
            depositWarmupPeriod: dec.depositWarmupPeriod,
            withdrawalCooldownPeriod: dec.withdrawalCooldownPeriod,
            totalActiveStakeScaled: dec.totalActiveStakeScaled,
            totalPendingStakeScaled: dec.totalPendingStakeScaled,
            totalPendingAmount: dec.totalPendingAmount,
            slashedAmountCurrent: dec.slashedAmountCurrent,
            slashedAmountCumulative: dec.slashedAmountCumulative,
            slashedAmountSpillAddress: dec.slashedAmountSpillAddress,
            lockingMode: dec.lockingMode,
            lockingStartTimestamp: dec.lockingStartTimestamp,
            lockingDuration: dec.lockingDuration,
            lockingEarlyWithdrawalPenaltyBps: dec.lockingEarlyWithdrawalPenaltyBps,
            depositCapAmount: dec.depositCapAmount,
            scopePrices: dec.scopePrices,
            scopeOraclePriceId: dec.scopeOraclePriceId,
            scopeOracleMaxAge: dec.scopeOracleMaxAge,
            pendingFarmAdmin: dec.pendingFarmAdmin,
            strategyId: dec.strategyId,
            delegatedRpsAdmin: dec.delegatedRpsAdmin,
            vaultId: dec.vaultId,
            secondDelegatedAuthority: dec.secondDelegatedAuthority,
            padding: dec.padding,
        });
    }
    toJSON() {
        return {
            farmAdmin: this.farmAdmin,
            globalConfig: this.globalConfig,
            token: this.token.toJSON(),
            rewardInfos: this.rewardInfos.map((item) => item.toJSON()),
            numRewardTokens: this.numRewardTokens.toString(),
            numUsers: this.numUsers.toString(),
            totalStakedAmount: this.totalStakedAmount.toString(),
            farmVault: this.farmVault,
            farmVaultsAuthority: this.farmVaultsAuthority,
            farmVaultsAuthorityBump: this.farmVaultsAuthorityBump.toString(),
            delegateAuthority: this.delegateAuthority,
            timeUnit: this.timeUnit,
            isFarmFrozen: this.isFarmFrozen,
            isFarmDelegated: this.isFarmDelegated,
            padding0: this.padding0,
            withdrawAuthority: this.withdrawAuthority,
            depositWarmupPeriod: this.depositWarmupPeriod,
            withdrawalCooldownPeriod: this.withdrawalCooldownPeriod,
            totalActiveStakeScaled: this.totalActiveStakeScaled.toString(),
            totalPendingStakeScaled: this.totalPendingStakeScaled.toString(),
            totalPendingAmount: this.totalPendingAmount.toString(),
            slashedAmountCurrent: this.slashedAmountCurrent.toString(),
            slashedAmountCumulative: this.slashedAmountCumulative.toString(),
            slashedAmountSpillAddress: this.slashedAmountSpillAddress,
            lockingMode: this.lockingMode.toString(),
            lockingStartTimestamp: this.lockingStartTimestamp.toString(),
            lockingDuration: this.lockingDuration.toString(),
            lockingEarlyWithdrawalPenaltyBps: this.lockingEarlyWithdrawalPenaltyBps.toString(),
            depositCapAmount: this.depositCapAmount.toString(),
            scopePrices: this.scopePrices,
            scopeOraclePriceId: this.scopeOraclePriceId.toString(),
            scopeOracleMaxAge: this.scopeOracleMaxAge.toString(),
            pendingFarmAdmin: this.pendingFarmAdmin,
            strategyId: this.strategyId,
            delegatedRpsAdmin: this.delegatedRpsAdmin,
            vaultId: this.vaultId,
            secondDelegatedAuthority: this.secondDelegatedAuthority,
            padding: this.padding.map((item) => item.toString()),
        };
    }
    static fromJSON(obj) {
        return new FarmState({
            farmAdmin: (0, kit_1.address)(obj.farmAdmin),
            globalConfig: (0, kit_1.address)(obj.globalConfig),
            token: types.TokenInfo.fromJSON(obj.token),
            rewardInfos: obj.rewardInfos.map((item) => types.RewardInfo.fromJSON(item)),
            numRewardTokens: new bn_js_1.default(obj.numRewardTokens),
            numUsers: new bn_js_1.default(obj.numUsers),
            totalStakedAmount: new bn_js_1.default(obj.totalStakedAmount),
            farmVault: (0, kit_1.address)(obj.farmVault),
            farmVaultsAuthority: (0, kit_1.address)(obj.farmVaultsAuthority),
            farmVaultsAuthorityBump: new bn_js_1.default(obj.farmVaultsAuthorityBump),
            delegateAuthority: (0, kit_1.address)(obj.delegateAuthority),
            timeUnit: obj.timeUnit,
            isFarmFrozen: obj.isFarmFrozen,
            isFarmDelegated: obj.isFarmDelegated,
            padding0: obj.padding0,
            withdrawAuthority: (0, kit_1.address)(obj.withdrawAuthority),
            depositWarmupPeriod: obj.depositWarmupPeriod,
            withdrawalCooldownPeriod: obj.withdrawalCooldownPeriod,
            totalActiveStakeScaled: new bn_js_1.default(obj.totalActiveStakeScaled),
            totalPendingStakeScaled: new bn_js_1.default(obj.totalPendingStakeScaled),
            totalPendingAmount: new bn_js_1.default(obj.totalPendingAmount),
            slashedAmountCurrent: new bn_js_1.default(obj.slashedAmountCurrent),
            slashedAmountCumulative: new bn_js_1.default(obj.slashedAmountCumulative),
            slashedAmountSpillAddress: (0, kit_1.address)(obj.slashedAmountSpillAddress),
            lockingMode: new bn_js_1.default(obj.lockingMode),
            lockingStartTimestamp: new bn_js_1.default(obj.lockingStartTimestamp),
            lockingDuration: new bn_js_1.default(obj.lockingDuration),
            lockingEarlyWithdrawalPenaltyBps: new bn_js_1.default(obj.lockingEarlyWithdrawalPenaltyBps),
            depositCapAmount: new bn_js_1.default(obj.depositCapAmount),
            scopePrices: (0, kit_1.address)(obj.scopePrices),
            scopeOraclePriceId: new bn_js_1.default(obj.scopeOraclePriceId),
            scopeOracleMaxAge: new bn_js_1.default(obj.scopeOracleMaxAge),
            pendingFarmAdmin: (0, kit_1.address)(obj.pendingFarmAdmin),
            strategyId: (0, kit_1.address)(obj.strategyId),
            delegatedRpsAdmin: (0, kit_1.address)(obj.delegatedRpsAdmin),
            vaultId: (0, kit_1.address)(obj.vaultId),
            secondDelegatedAuthority: (0, kit_1.address)(obj.secondDelegatedAuthority),
            padding: obj.padding.map((item) => new bn_js_1.default(item)),
        });
    }
}
exports.FarmState = FarmState;
//# sourceMappingURL=FarmState.js.map