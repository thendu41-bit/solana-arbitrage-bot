import { Address } from "@solana/kit";
import BN from "bn.js";
import * as types from "../types";
export interface TokenInfoFields {
    mint: Address;
    decimals: BN;
    tokenProgram: Address;
    padding: Array<BN>;
}
export interface TokenInfoJSON {
    mint: string;
    decimals: string;
    tokenProgram: string;
    padding: Array<string>;
}
export declare class TokenInfo {
    readonly mint: Address;
    readonly decimals: BN;
    readonly tokenProgram: Address;
    readonly padding: Array<BN>;
    constructor(fields: TokenInfoFields);
    static layout(property?: string): import("buffer-layout").Layout<unknown>;
    static fromDecoded(obj: any): types.TokenInfo;
    static toEncodable(fields: TokenInfoFields): {
        mint: Address;
        decimals: BN;
        tokenProgram: Address;
        padding: BN[];
    };
    toJSON(): TokenInfoJSON;
    static fromJSON(obj: TokenInfoJSON): TokenInfo;
    toEncodable(): {
        mint: Address;
        decimals: BN;
        tokenProgram: Address;
        padding: BN[];
    };
}
//# sourceMappingURL=TokenInfo.d.ts.map