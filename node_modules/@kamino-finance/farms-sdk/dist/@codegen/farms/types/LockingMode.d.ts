import * as types from "../types";
import * as borsh from "@coral-xyz/borsh";
export interface NoneJSON {
    kind: "None";
}
export declare class None {
    static readonly discriminator = 0;
    static readonly kind = "None";
    readonly discriminator = 0;
    readonly kind = "None";
    toJSON(): NoneJSON;
    toEncodable(): {
        None: {};
    };
}
export interface ContinuousJSON {
    kind: "Continuous";
}
export declare class Continuous {
    static readonly discriminator = 1;
    static readonly kind = "Continuous";
    readonly discriminator = 1;
    readonly kind = "Continuous";
    toJSON(): ContinuousJSON;
    toEncodable(): {
        Continuous: {};
    };
}
export interface WithExpiryJSON {
    kind: "WithExpiry";
}
export declare class WithExpiry {
    static readonly discriminator = 2;
    static readonly kind = "WithExpiry";
    readonly discriminator = 2;
    readonly kind = "WithExpiry";
    toJSON(): WithExpiryJSON;
    toEncodable(): {
        WithExpiry: {};
    };
}
export declare function fromDecoded(obj: any): types.LockingModeKind;
export declare function fromJSON(obj: types.LockingModeJSON): types.LockingModeKind;
export declare function layout(property?: string): borsh.EnumLayout<unknown>;
//# sourceMappingURL=LockingMode.d.ts.map