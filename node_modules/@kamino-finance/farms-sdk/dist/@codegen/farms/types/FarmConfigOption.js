"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateExtraDelegatedAuthority = exports.UpdateVaultId = exports.UpdateDelegatedRpsAdmin = exports.UpdateStrategyId = exports.UpdatePendingFarmAdmin = exports.UpdateRewardScheduleCurvePoints = exports.ScopeOracleMaxAge = exports.ScopeOraclePriceId = exports.ScopePricesAccount = exports.SlashedAmountSpillAddress = exports.DepositCapAmount = exports.LockingEarlyWithdrawalPenaltyBps = exports.LockingDuration = exports.LockingStartTimestamp = exports.LockingMode = exports.RpsDecimals = exports.RewardType = exports.WithdrawCooldownPeriod = exports.DepositWarmupPeriod = exports.WithdrawAuthority = exports.UpdateRewardMinClaimDuration = exports.UpdateRewardRps = void 0;
exports.fromDecoded = fromDecoded;
exports.fromJSON = fromJSON;
exports.layout = layout;
const borsh = __importStar(require("@coral-xyz/borsh"));
class UpdateRewardRps {
    static discriminator = 0;
    static kind = "UpdateRewardRps";
    discriminator = 0;
    kind = "UpdateRewardRps";
    toJSON() {
        return {
            kind: "UpdateRewardRps",
        };
    }
    toEncodable() {
        return {
            UpdateRewardRps: {},
        };
    }
}
exports.UpdateRewardRps = UpdateRewardRps;
class UpdateRewardMinClaimDuration {
    static discriminator = 1;
    static kind = "UpdateRewardMinClaimDuration";
    discriminator = 1;
    kind = "UpdateRewardMinClaimDuration";
    toJSON() {
        return {
            kind: "UpdateRewardMinClaimDuration",
        };
    }
    toEncodable() {
        return {
            UpdateRewardMinClaimDuration: {},
        };
    }
}
exports.UpdateRewardMinClaimDuration = UpdateRewardMinClaimDuration;
class WithdrawAuthority {
    static discriminator = 2;
    static kind = "WithdrawAuthority";
    discriminator = 2;
    kind = "WithdrawAuthority";
    toJSON() {
        return {
            kind: "WithdrawAuthority",
        };
    }
    toEncodable() {
        return {
            WithdrawAuthority: {},
        };
    }
}
exports.WithdrawAuthority = WithdrawAuthority;
class DepositWarmupPeriod {
    static discriminator = 3;
    static kind = "DepositWarmupPeriod";
    discriminator = 3;
    kind = "DepositWarmupPeriod";
    toJSON() {
        return {
            kind: "DepositWarmupPeriod",
        };
    }
    toEncodable() {
        return {
            DepositWarmupPeriod: {},
        };
    }
}
exports.DepositWarmupPeriod = DepositWarmupPeriod;
class WithdrawCooldownPeriod {
    static discriminator = 4;
    static kind = "WithdrawCooldownPeriod";
    discriminator = 4;
    kind = "WithdrawCooldownPeriod";
    toJSON() {
        return {
            kind: "WithdrawCooldownPeriod",
        };
    }
    toEncodable() {
        return {
            WithdrawCooldownPeriod: {},
        };
    }
}
exports.WithdrawCooldownPeriod = WithdrawCooldownPeriod;
class RewardType {
    static discriminator = 5;
    static kind = "RewardType";
    discriminator = 5;
    kind = "RewardType";
    toJSON() {
        return {
            kind: "RewardType",
        };
    }
    toEncodable() {
        return {
            RewardType: {},
        };
    }
}
exports.RewardType = RewardType;
class RpsDecimals {
    static discriminator = 6;
    static kind = "RpsDecimals";
    discriminator = 6;
    kind = "RpsDecimals";
    toJSON() {
        return {
            kind: "RpsDecimals",
        };
    }
    toEncodable() {
        return {
            RpsDecimals: {},
        };
    }
}
exports.RpsDecimals = RpsDecimals;
class LockingMode {
    static discriminator = 7;
    static kind = "LockingMode";
    discriminator = 7;
    kind = "LockingMode";
    toJSON() {
        return {
            kind: "LockingMode",
        };
    }
    toEncodable() {
        return {
            LockingMode: {},
        };
    }
}
exports.LockingMode = LockingMode;
class LockingStartTimestamp {
    static discriminator = 8;
    static kind = "LockingStartTimestamp";
    discriminator = 8;
    kind = "LockingStartTimestamp";
    toJSON() {
        return {
            kind: "LockingStartTimestamp",
        };
    }
    toEncodable() {
        return {
            LockingStartTimestamp: {},
        };
    }
}
exports.LockingStartTimestamp = LockingStartTimestamp;
class LockingDuration {
    static discriminator = 9;
    static kind = "LockingDuration";
    discriminator = 9;
    kind = "LockingDuration";
    toJSON() {
        return {
            kind: "LockingDuration",
        };
    }
    toEncodable() {
        return {
            LockingDuration: {},
        };
    }
}
exports.LockingDuration = LockingDuration;
class LockingEarlyWithdrawalPenaltyBps {
    static discriminator = 10;
    static kind = "LockingEarlyWithdrawalPenaltyBps";
    discriminator = 10;
    kind = "LockingEarlyWithdrawalPenaltyBps";
    toJSON() {
        return {
            kind: "LockingEarlyWithdrawalPenaltyBps",
        };
    }
    toEncodable() {
        return {
            LockingEarlyWithdrawalPenaltyBps: {},
        };
    }
}
exports.LockingEarlyWithdrawalPenaltyBps = LockingEarlyWithdrawalPenaltyBps;
class DepositCapAmount {
    static discriminator = 11;
    static kind = "DepositCapAmount";
    discriminator = 11;
    kind = "DepositCapAmount";
    toJSON() {
        return {
            kind: "DepositCapAmount",
        };
    }
    toEncodable() {
        return {
            DepositCapAmount: {},
        };
    }
}
exports.DepositCapAmount = DepositCapAmount;
class SlashedAmountSpillAddress {
    static discriminator = 12;
    static kind = "SlashedAmountSpillAddress";
    discriminator = 12;
    kind = "SlashedAmountSpillAddress";
    toJSON() {
        return {
            kind: "SlashedAmountSpillAddress",
        };
    }
    toEncodable() {
        return {
            SlashedAmountSpillAddress: {},
        };
    }
}
exports.SlashedAmountSpillAddress = SlashedAmountSpillAddress;
class ScopePricesAccount {
    static discriminator = 13;
    static kind = "ScopePricesAccount";
    discriminator = 13;
    kind = "ScopePricesAccount";
    toJSON() {
        return {
            kind: "ScopePricesAccount",
        };
    }
    toEncodable() {
        return {
            ScopePricesAccount: {},
        };
    }
}
exports.ScopePricesAccount = ScopePricesAccount;
class ScopeOraclePriceId {
    static discriminator = 14;
    static kind = "ScopeOraclePriceId";
    discriminator = 14;
    kind = "ScopeOraclePriceId";
    toJSON() {
        return {
            kind: "ScopeOraclePriceId",
        };
    }
    toEncodable() {
        return {
            ScopeOraclePriceId: {},
        };
    }
}
exports.ScopeOraclePriceId = ScopeOraclePriceId;
class ScopeOracleMaxAge {
    static discriminator = 15;
    static kind = "ScopeOracleMaxAge";
    discriminator = 15;
    kind = "ScopeOracleMaxAge";
    toJSON() {
        return {
            kind: "ScopeOracleMaxAge",
        };
    }
    toEncodable() {
        return {
            ScopeOracleMaxAge: {},
        };
    }
}
exports.ScopeOracleMaxAge = ScopeOracleMaxAge;
class UpdateRewardScheduleCurvePoints {
    static discriminator = 16;
    static kind = "UpdateRewardScheduleCurvePoints";
    discriminator = 16;
    kind = "UpdateRewardScheduleCurvePoints";
    toJSON() {
        return {
            kind: "UpdateRewardScheduleCurvePoints",
        };
    }
    toEncodable() {
        return {
            UpdateRewardScheduleCurvePoints: {},
        };
    }
}
exports.UpdateRewardScheduleCurvePoints = UpdateRewardScheduleCurvePoints;
class UpdatePendingFarmAdmin {
    static discriminator = 17;
    static kind = "UpdatePendingFarmAdmin";
    discriminator = 17;
    kind = "UpdatePendingFarmAdmin";
    toJSON() {
        return {
            kind: "UpdatePendingFarmAdmin",
        };
    }
    toEncodable() {
        return {
            UpdatePendingFarmAdmin: {},
        };
    }
}
exports.UpdatePendingFarmAdmin = UpdatePendingFarmAdmin;
class UpdateStrategyId {
    static discriminator = 18;
    static kind = "UpdateStrategyId";
    discriminator = 18;
    kind = "UpdateStrategyId";
    toJSON() {
        return {
            kind: "UpdateStrategyId",
        };
    }
    toEncodable() {
        return {
            UpdateStrategyId: {},
        };
    }
}
exports.UpdateStrategyId = UpdateStrategyId;
class UpdateDelegatedRpsAdmin {
    static discriminator = 19;
    static kind = "UpdateDelegatedRpsAdmin";
    discriminator = 19;
    kind = "UpdateDelegatedRpsAdmin";
    toJSON() {
        return {
            kind: "UpdateDelegatedRpsAdmin",
        };
    }
    toEncodable() {
        return {
            UpdateDelegatedRpsAdmin: {},
        };
    }
}
exports.UpdateDelegatedRpsAdmin = UpdateDelegatedRpsAdmin;
class UpdateVaultId {
    static discriminator = 20;
    static kind = "UpdateVaultId";
    discriminator = 20;
    kind = "UpdateVaultId";
    toJSON() {
        return {
            kind: "UpdateVaultId",
        };
    }
    toEncodable() {
        return {
            UpdateVaultId: {},
        };
    }
}
exports.UpdateVaultId = UpdateVaultId;
class UpdateExtraDelegatedAuthority {
    static discriminator = 21;
    static kind = "UpdateExtraDelegatedAuthority";
    discriminator = 21;
    kind = "UpdateExtraDelegatedAuthority";
    toJSON() {
        return {
            kind: "UpdateExtraDelegatedAuthority",
        };
    }
    toEncodable() {
        return {
            UpdateExtraDelegatedAuthority: {},
        };
    }
}
exports.UpdateExtraDelegatedAuthority = UpdateExtraDelegatedAuthority;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function fromDecoded(obj) {
    if (typeof obj !== "object") {
        throw new Error("Invalid enum object");
    }
    if ("UpdateRewardRps" in obj) {
        return new UpdateRewardRps();
    }
    if ("UpdateRewardMinClaimDuration" in obj) {
        return new UpdateRewardMinClaimDuration();
    }
    if ("WithdrawAuthority" in obj) {
        return new WithdrawAuthority();
    }
    if ("DepositWarmupPeriod" in obj) {
        return new DepositWarmupPeriod();
    }
    if ("WithdrawCooldownPeriod" in obj) {
        return new WithdrawCooldownPeriod();
    }
    if ("RewardType" in obj) {
        return new RewardType();
    }
    if ("RpsDecimals" in obj) {
        return new RpsDecimals();
    }
    if ("LockingMode" in obj) {
        return new LockingMode();
    }
    if ("LockingStartTimestamp" in obj) {
        return new LockingStartTimestamp();
    }
    if ("LockingDuration" in obj) {
        return new LockingDuration();
    }
    if ("LockingEarlyWithdrawalPenaltyBps" in obj) {
        return new LockingEarlyWithdrawalPenaltyBps();
    }
    if ("DepositCapAmount" in obj) {
        return new DepositCapAmount();
    }
    if ("SlashedAmountSpillAddress" in obj) {
        return new SlashedAmountSpillAddress();
    }
    if ("ScopePricesAccount" in obj) {
        return new ScopePricesAccount();
    }
    if ("ScopeOraclePriceId" in obj) {
        return new ScopeOraclePriceId();
    }
    if ("ScopeOracleMaxAge" in obj) {
        return new ScopeOracleMaxAge();
    }
    if ("UpdateRewardScheduleCurvePoints" in obj) {
        return new UpdateRewardScheduleCurvePoints();
    }
    if ("UpdatePendingFarmAdmin" in obj) {
        return new UpdatePendingFarmAdmin();
    }
    if ("UpdateStrategyId" in obj) {
        return new UpdateStrategyId();
    }
    if ("UpdateDelegatedRpsAdmin" in obj) {
        return new UpdateDelegatedRpsAdmin();
    }
    if ("UpdateVaultId" in obj) {
        return new UpdateVaultId();
    }
    if ("UpdateExtraDelegatedAuthority" in obj) {
        return new UpdateExtraDelegatedAuthority();
    }
    throw new Error("Invalid enum object");
}
function fromJSON(obj) {
    switch (obj.kind) {
        case "UpdateRewardRps": {
            return new UpdateRewardRps();
        }
        case "UpdateRewardMinClaimDuration": {
            return new UpdateRewardMinClaimDuration();
        }
        case "WithdrawAuthority": {
            return new WithdrawAuthority();
        }
        case "DepositWarmupPeriod": {
            return new DepositWarmupPeriod();
        }
        case "WithdrawCooldownPeriod": {
            return new WithdrawCooldownPeriod();
        }
        case "RewardType": {
            return new RewardType();
        }
        case "RpsDecimals": {
            return new RpsDecimals();
        }
        case "LockingMode": {
            return new LockingMode();
        }
        case "LockingStartTimestamp": {
            return new LockingStartTimestamp();
        }
        case "LockingDuration": {
            return new LockingDuration();
        }
        case "LockingEarlyWithdrawalPenaltyBps": {
            return new LockingEarlyWithdrawalPenaltyBps();
        }
        case "DepositCapAmount": {
            return new DepositCapAmount();
        }
        case "SlashedAmountSpillAddress": {
            return new SlashedAmountSpillAddress();
        }
        case "ScopePricesAccount": {
            return new ScopePricesAccount();
        }
        case "ScopeOraclePriceId": {
            return new ScopeOraclePriceId();
        }
        case "ScopeOracleMaxAge": {
            return new ScopeOracleMaxAge();
        }
        case "UpdateRewardScheduleCurvePoints": {
            return new UpdateRewardScheduleCurvePoints();
        }
        case "UpdatePendingFarmAdmin": {
            return new UpdatePendingFarmAdmin();
        }
        case "UpdateStrategyId": {
            return new UpdateStrategyId();
        }
        case "UpdateDelegatedRpsAdmin": {
            return new UpdateDelegatedRpsAdmin();
        }
        case "UpdateVaultId": {
            return new UpdateVaultId();
        }
        case "UpdateExtraDelegatedAuthority": {
            return new UpdateExtraDelegatedAuthority();
        }
    }
}
function layout(property) {
    const ret = borsh.rustEnum([
        borsh.struct([], "UpdateRewardRps"),
        borsh.struct([], "UpdateRewardMinClaimDuration"),
        borsh.struct([], "WithdrawAuthority"),
        borsh.struct([], "DepositWarmupPeriod"),
        borsh.struct([], "WithdrawCooldownPeriod"),
        borsh.struct([], "RewardType"),
        borsh.struct([], "RpsDecimals"),
        borsh.struct([], "LockingMode"),
        borsh.struct([], "LockingStartTimestamp"),
        borsh.struct([], "LockingDuration"),
        borsh.struct([], "LockingEarlyWithdrawalPenaltyBps"),
        borsh.struct([], "DepositCapAmount"),
        borsh.struct([], "SlashedAmountSpillAddress"),
        borsh.struct([], "ScopePricesAccount"),
        borsh.struct([], "ScopeOraclePriceId"),
        borsh.struct([], "ScopeOracleMaxAge"),
        borsh.struct([], "UpdateRewardScheduleCurvePoints"),
        borsh.struct([], "UpdatePendingFarmAdmin"),
        borsh.struct([], "UpdateStrategyId"),
        borsh.struct([], "UpdateDelegatedRpsAdmin"),
        borsh.struct([], "UpdateVaultId"),
        borsh.struct([], "UpdateExtraDelegatedAuthority"),
    ]);
    if (property !== undefined) {
        return ret.replicate(property);
    }
    return ret;
}
//# sourceMappingURL=FarmConfigOption.js.map