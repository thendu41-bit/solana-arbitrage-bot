"use strict";
/**
 * Post-codegen patch for idlMissingTypes.ts
 * This file applies type fixes to the generated idlMissingTypes instruction
 * Run this after codegen to fix compilation errors
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.patchIdlMissingTypes = patchIdlMissingTypes;
const fs_1 = require("fs");
const path_1 = require("path");
const filePath = (0, path_1.join)(__dirname, "../@codegen/farms/instructions/idlMissingTypes.ts");
function patchIdlMissingTypes() {
    let content = (0, fs_1.readFileSync)(filePath, "utf8");
    // Add type assertions to fix the compilation errors
    content = content.replace("globalConfigOptionKind: args.globalConfigOptionKind.toEncodable(),", "globalConfigOptionKind: args.globalConfigOptionKind.toEncodable() as any,");
    content = content.replace("farmConfigOptionKind: args.farmConfigOptionKind.toEncodable(),", "farmConfigOptionKind: args.farmConfigOptionKind.toEncodable() as any,");
    content = content.replace("timeUnit: args.timeUnit.toEncodable(),", "timeUnit: args.timeUnit.toEncodable() as any,");
    content = content.replace("lockingMode: args.lockingMode.toEncodable(),", "lockingMode: args.lockingMode.toEncodable() as any,");
    content = content.replace("rewardType: args.rewardType.toEncodable(),", "rewardType: args.rewardType.toEncodable() as any,");
    (0, fs_1.writeFileSync)(filePath, content);
    console.log("Successfully patched idlMissingTypes.ts");
}
// Auto-run if this file is executed directly
if (require.main === module) {
    patchIdlMissingTypes();
}
//# sourceMappingURL=idlMissingTypes.patch.js.map