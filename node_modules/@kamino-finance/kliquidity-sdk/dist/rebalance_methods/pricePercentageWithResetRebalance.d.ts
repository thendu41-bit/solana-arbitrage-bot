import Decimal from 'decimal.js';
import { PositionRange, RebalanceFieldInfo } from '../utils/types';
import { RebalanceRaw } from '../@codegen/kliquidity/types';
import { Dex } from '../utils';
export declare const PricePercentageWithResetRebalanceTypeName = "pricePercentageWithReset";
export declare function getPricePercentageWithResetRebalanceFieldInfos(price: Decimal, lowerPercentageBPS: Decimal, upperPercentageBPS: Decimal, resetLowerPercentageBPS: Decimal, resetUpperPercentageBPS: Decimal, enabled?: boolean): RebalanceFieldInfo[];
export declare function getPositionRangeFromPricePercentageWithResetParams(price: Decimal, lowerPercentageBPS: Decimal, upperPercentageBPS: Decimal): PositionRange;
export declare function getPositionResetRangeFromPricePercentageWithResetParams(price: Decimal, lowerPercentageBPS: Decimal, upperPercentageBPS: Decimal, resetLowerPercentageBPS: Decimal, resetUpperPercentageBPS: Decimal): PositionRange;
export declare function getDefaultPricePercentageWithResetRebalanceFieldInfos(price: Decimal): RebalanceFieldInfo[];
export declare function readPricePercentageWithResetRebalanceParamsFromStrategy(rebalanceRaw: RebalanceRaw): RebalanceFieldInfo[];
export declare function readRawPricePercentageWithResetRebalanceStateFromStrategy(rebalanceRaw: RebalanceRaw): RebalanceFieldInfo[];
export declare function readPricePercentageWithResetRebalanceStateFromStrategy(dex: Dex, tokenADecimals: number, tokenBDecimals: number, rebalanceRaw: RebalanceRaw): RebalanceFieldInfo[];
export declare function deserializePricePercentageWithResetRebalanceFromOnchainParams(price: Decimal, rebalanceRaw: RebalanceRaw): RebalanceFieldInfo[];
export declare function deserializePricePercentageWithResetRebalanceWithStateOverride(dex: Dex, tokenADecimals: number, tokenBDecimals: number, price: Decimal, rebalanceRaw: RebalanceRaw): RebalanceFieldInfo[];
//# sourceMappingURL=pricePercentageWithResetRebalance.d.ts.map