export type CustomError = InvalidEnum | InvalidStartTick | TickArrayExistInPool | TickArrayIndexOutofBounds | InvalidTickSpacing | ClosePositionNotEmpty | DivideByZero | NumberCastError | NumberDownCastError | TickNotFound | InvalidTickIndex | SqrtPriceOutOfBounds | LiquidityZero | LiquidityTooHigh | LiquidityOverflow | LiquidityUnderflow | LiquidityNetError | TokenMaxExceeded | TokenMinSubceeded | MissingOrInvalidDelegate | InvalidPositionTokenAmount | InvalidTimestampConversion | InvalidTimestamp | InvalidTickArraySequence | InvalidTokenMintOrder | RewardNotInitialized | InvalidRewardIndex | RewardVaultAmountInsufficient | FeeRateMaxExceeded | ProtocolFeeRateMaxExceeded | MultiplicationShiftRightOverflow | MulDivOverflow | MulDivInvalidInput | MultiplicationOverflow | InvalidSqrtPriceLimitDirection | ZeroTradableAmount | AmountOutBelowMinimum | AmountInAboveMaximum | TickArraySequenceInvalidIndex | AmountCalcOverflow | AmountRemainingOverflow | InvalidIntermediaryMint | DuplicateTwoHopPool | InvalidBundleIndex | BundledPositionAlreadyOpened | BundledPositionAlreadyClosed | PositionBundleNotDeletable | UnsupportedTokenMint | RemainingAccountsInvalidSlice | RemainingAccountsInsufficient | NoExtraAccountsForTransferHook | IntermediateTokenAmountMismatch | TransferFeeCalculationError | RemainingAccountsDuplicatedAccountsType;
export declare class InvalidEnum extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6000;
    readonly code = 6000;
    readonly name = "InvalidEnum";
    readonly msg = "Enum value could not be converted";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidStartTick extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6001;
    readonly code = 6001;
    readonly name = "InvalidStartTick";
    readonly msg = "Invalid start tick index provided.";
    constructor(logs?: string[] | undefined);
}
export declare class TickArrayExistInPool extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6002;
    readonly code = 6002;
    readonly name = "TickArrayExistInPool";
    readonly msg = "Tick-array already exists in this whirlpool";
    constructor(logs?: string[] | undefined);
}
export declare class TickArrayIndexOutofBounds extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6003;
    readonly code = 6003;
    readonly name = "TickArrayIndexOutofBounds";
    readonly msg = "Attempt to search for a tick-array failed";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidTickSpacing extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6004;
    readonly code = 6004;
    readonly name = "InvalidTickSpacing";
    readonly msg = "Tick-spacing is not supported";
    constructor(logs?: string[] | undefined);
}
export declare class ClosePositionNotEmpty extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6005;
    readonly code = 6005;
    readonly name = "ClosePositionNotEmpty";
    readonly msg = "Position is not empty It cannot be closed";
    constructor(logs?: string[] | undefined);
}
export declare class DivideByZero extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6006;
    readonly code = 6006;
    readonly name = "DivideByZero";
    readonly msg = "Unable to divide by zero";
    constructor(logs?: string[] | undefined);
}
export declare class NumberCastError extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6007;
    readonly code = 6007;
    readonly name = "NumberCastError";
    readonly msg = "Unable to cast number into BigInt";
    constructor(logs?: string[] | undefined);
}
export declare class NumberDownCastError extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6008;
    readonly code = 6008;
    readonly name = "NumberDownCastError";
    readonly msg = "Unable to down cast number";
    constructor(logs?: string[] | undefined);
}
export declare class TickNotFound extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6009;
    readonly code = 6009;
    readonly name = "TickNotFound";
    readonly msg = "Tick not found within tick array";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidTickIndex extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6010;
    readonly code = 6010;
    readonly name = "InvalidTickIndex";
    readonly msg = "Provided tick index is either out of bounds or uninitializable";
    constructor(logs?: string[] | undefined);
}
export declare class SqrtPriceOutOfBounds extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6011;
    readonly code = 6011;
    readonly name = "SqrtPriceOutOfBounds";
    readonly msg = "Provided sqrt price out of bounds";
    constructor(logs?: string[] | undefined);
}
export declare class LiquidityZero extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6012;
    readonly code = 6012;
    readonly name = "LiquidityZero";
    readonly msg = "Liquidity amount must be greater than zero";
    constructor(logs?: string[] | undefined);
}
export declare class LiquidityTooHigh extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6013;
    readonly code = 6013;
    readonly name = "LiquidityTooHigh";
    readonly msg = "Liquidity amount must be less than i64::MAX";
    constructor(logs?: string[] | undefined);
}
export declare class LiquidityOverflow extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6014;
    readonly code = 6014;
    readonly name = "LiquidityOverflow";
    readonly msg = "Liquidity overflow";
    constructor(logs?: string[] | undefined);
}
export declare class LiquidityUnderflow extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6015;
    readonly code = 6015;
    readonly name = "LiquidityUnderflow";
    readonly msg = "Liquidity underflow";
    constructor(logs?: string[] | undefined);
}
export declare class LiquidityNetError extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6016;
    readonly code = 6016;
    readonly name = "LiquidityNetError";
    readonly msg = "Tick liquidity net underflowed or overflowed";
    constructor(logs?: string[] | undefined);
}
export declare class TokenMaxExceeded extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6017;
    readonly code = 6017;
    readonly name = "TokenMaxExceeded";
    readonly msg = "Exceeded token max";
    constructor(logs?: string[] | undefined);
}
export declare class TokenMinSubceeded extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6018;
    readonly code = 6018;
    readonly name = "TokenMinSubceeded";
    readonly msg = "Did not meet token min";
    constructor(logs?: string[] | undefined);
}
export declare class MissingOrInvalidDelegate extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6019;
    readonly code = 6019;
    readonly name = "MissingOrInvalidDelegate";
    readonly msg = "Position token account has a missing or invalid delegate";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidPositionTokenAmount extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6020;
    readonly code = 6020;
    readonly name = "InvalidPositionTokenAmount";
    readonly msg = "Position token amount must be 1";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidTimestampConversion extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6021;
    readonly code = 6021;
    readonly name = "InvalidTimestampConversion";
    readonly msg = "Timestamp should be convertible from i64 to u64";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidTimestamp extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6022;
    readonly code = 6022;
    readonly name = "InvalidTimestamp";
    readonly msg = "Timestamp should be greater than the last updated timestamp";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidTickArraySequence extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6023;
    readonly code = 6023;
    readonly name = "InvalidTickArraySequence";
    readonly msg = "Invalid tick array sequence provided for instruction.";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidTokenMintOrder extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6024;
    readonly code = 6024;
    readonly name = "InvalidTokenMintOrder";
    readonly msg = "Token Mint in wrong order";
    constructor(logs?: string[] | undefined);
}
export declare class RewardNotInitialized extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6025;
    readonly code = 6025;
    readonly name = "RewardNotInitialized";
    readonly msg = "Reward not initialized";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidRewardIndex extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6026;
    readonly code = 6026;
    readonly name = "InvalidRewardIndex";
    readonly msg = "Invalid reward index";
    constructor(logs?: string[] | undefined);
}
export declare class RewardVaultAmountInsufficient extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6027;
    readonly code = 6027;
    readonly name = "RewardVaultAmountInsufficient";
    readonly msg = "Reward vault requires amount to support emissions for at least one day";
    constructor(logs?: string[] | undefined);
}
export declare class FeeRateMaxExceeded extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6028;
    readonly code = 6028;
    readonly name = "FeeRateMaxExceeded";
    readonly msg = "Exceeded max fee rate";
    constructor(logs?: string[] | undefined);
}
export declare class ProtocolFeeRateMaxExceeded extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6029;
    readonly code = 6029;
    readonly name = "ProtocolFeeRateMaxExceeded";
    readonly msg = "Exceeded max protocol fee rate";
    constructor(logs?: string[] | undefined);
}
export declare class MultiplicationShiftRightOverflow extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6030;
    readonly code = 6030;
    readonly name = "MultiplicationShiftRightOverflow";
    readonly msg = "Multiplication with shift right overflow";
    constructor(logs?: string[] | undefined);
}
export declare class MulDivOverflow extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6031;
    readonly code = 6031;
    readonly name = "MulDivOverflow";
    readonly msg = "Muldiv overflow";
    constructor(logs?: string[] | undefined);
}
export declare class MulDivInvalidInput extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6032;
    readonly code = 6032;
    readonly name = "MulDivInvalidInput";
    readonly msg = "Invalid div_u256 input";
    constructor(logs?: string[] | undefined);
}
export declare class MultiplicationOverflow extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6033;
    readonly code = 6033;
    readonly name = "MultiplicationOverflow";
    readonly msg = "Multiplication overflow";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidSqrtPriceLimitDirection extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6034;
    readonly code = 6034;
    readonly name = "InvalidSqrtPriceLimitDirection";
    readonly msg = "Provided SqrtPriceLimit not in the same direction as the swap.";
    constructor(logs?: string[] | undefined);
}
export declare class ZeroTradableAmount extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6035;
    readonly code = 6035;
    readonly name = "ZeroTradableAmount";
    readonly msg = "There are no tradable amount to swap.";
    constructor(logs?: string[] | undefined);
}
export declare class AmountOutBelowMinimum extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6036;
    readonly code = 6036;
    readonly name = "AmountOutBelowMinimum";
    readonly msg = "Amount out below minimum threshold";
    constructor(logs?: string[] | undefined);
}
export declare class AmountInAboveMaximum extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6037;
    readonly code = 6037;
    readonly name = "AmountInAboveMaximum";
    readonly msg = "Amount in above maximum threshold";
    constructor(logs?: string[] | undefined);
}
export declare class TickArraySequenceInvalidIndex extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6038;
    readonly code = 6038;
    readonly name = "TickArraySequenceInvalidIndex";
    readonly msg = "Invalid index for tick array sequence";
    constructor(logs?: string[] | undefined);
}
export declare class AmountCalcOverflow extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6039;
    readonly code = 6039;
    readonly name = "AmountCalcOverflow";
    readonly msg = "Amount calculated overflows";
    constructor(logs?: string[] | undefined);
}
export declare class AmountRemainingOverflow extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6040;
    readonly code = 6040;
    readonly name = "AmountRemainingOverflow";
    readonly msg = "Amount remaining overflows";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidIntermediaryMint extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6041;
    readonly code = 6041;
    readonly name = "InvalidIntermediaryMint";
    readonly msg = "Invalid intermediary mint";
    constructor(logs?: string[] | undefined);
}
export declare class DuplicateTwoHopPool extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6042;
    readonly code = 6042;
    readonly name = "DuplicateTwoHopPool";
    readonly msg = "Duplicate two hop pool";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidBundleIndex extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6043;
    readonly code = 6043;
    readonly name = "InvalidBundleIndex";
    readonly msg = "Bundle index is out of bounds";
    constructor(logs?: string[] | undefined);
}
export declare class BundledPositionAlreadyOpened extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6044;
    readonly code = 6044;
    readonly name = "BundledPositionAlreadyOpened";
    readonly msg = "Position has already been opened";
    constructor(logs?: string[] | undefined);
}
export declare class BundledPositionAlreadyClosed extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6045;
    readonly code = 6045;
    readonly name = "BundledPositionAlreadyClosed";
    readonly msg = "Position has already been closed";
    constructor(logs?: string[] | undefined);
}
export declare class PositionBundleNotDeletable extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6046;
    readonly code = 6046;
    readonly name = "PositionBundleNotDeletable";
    readonly msg = "Unable to delete PositionBundle with open positions";
    constructor(logs?: string[] | undefined);
}
export declare class UnsupportedTokenMint extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6047;
    readonly code = 6047;
    readonly name = "UnsupportedTokenMint";
    readonly msg = "Token mint has unsupported attributes";
    constructor(logs?: string[] | undefined);
}
export declare class RemainingAccountsInvalidSlice extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6048;
    readonly code = 6048;
    readonly name = "RemainingAccountsInvalidSlice";
    readonly msg = "Invalid remaining accounts";
    constructor(logs?: string[] | undefined);
}
export declare class RemainingAccountsInsufficient extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6049;
    readonly code = 6049;
    readonly name = "RemainingAccountsInsufficient";
    readonly msg = "Insufficient remaining accounts";
    constructor(logs?: string[] | undefined);
}
export declare class NoExtraAccountsForTransferHook extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6050;
    readonly code = 6050;
    readonly name = "NoExtraAccountsForTransferHook";
    readonly msg = "Unable to call transfer hook without extra accounts";
    constructor(logs?: string[] | undefined);
}
export declare class IntermediateTokenAmountMismatch extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6051;
    readonly code = 6051;
    readonly name = "IntermediateTokenAmountMismatch";
    readonly msg = "Output and input amount mismatch";
    constructor(logs?: string[] | undefined);
}
export declare class TransferFeeCalculationError extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6052;
    readonly code = 6052;
    readonly name = "TransferFeeCalculationError";
    readonly msg = "Transfer fee calculation failed";
    constructor(logs?: string[] | undefined);
}
export declare class RemainingAccountsDuplicatedAccountsType extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6053;
    readonly code = 6053;
    readonly name = "RemainingAccountsDuplicatedAccountsType";
    readonly msg = "Same accounts type is provided more than once";
    constructor(logs?: string[] | undefined);
}
export declare function fromCode(code: number, logs?: string[]): CustomError | null;
//# sourceMappingURL=custom.d.ts.map