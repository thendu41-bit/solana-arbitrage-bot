import { Address, GetAccountInfoApi, GetMultipleAccountsApi, Rpc } from "@solana/kit";
import * as types from "../types";
export interface TickArrayFields {
    startTickIndex: number;
    ticks: Array<types.TickFields>;
    whirlpool: Address;
}
export interface TickArrayJSON {
    startTickIndex: number;
    ticks: Array<types.TickJSON>;
    whirlpool: string;
}
export declare class TickArray {
    readonly startTickIndex: number;
    readonly ticks: Array<types.Tick>;
    readonly whirlpool: Address;
    static readonly discriminator: Buffer<ArrayBuffer>;
    static readonly layout: import("buffer-layout").Layout<TickArray>;
    constructor(fields: TickArrayFields);
    static fetch(rpc: Rpc<GetAccountInfoApi>, address: Address, programId?: Address): Promise<TickArray | null>;
    static fetchMultiple(rpc: Rpc<GetMultipleAccountsApi>, addresses: Address[], programId?: Address): Promise<Array<TickArray | null>>;
    static decode(data: Buffer): TickArray;
    toJSON(): TickArrayJSON;
    static fromJSON(obj: TickArrayJSON): TickArray;
}
//# sourceMappingURL=TickArray.d.ts.map