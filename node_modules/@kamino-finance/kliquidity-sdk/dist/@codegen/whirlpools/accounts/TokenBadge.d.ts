import { Address, GetAccountInfoApi, GetMultipleAccountsApi, Rpc } from "@solana/kit";
export interface TokenBadgeFields {
    whirlpoolsConfig: Address;
    tokenMint: Address;
}
export interface TokenBadgeJSON {
    whirlpoolsConfig: string;
    tokenMint: string;
}
export declare class TokenBadge {
    readonly whirlpoolsConfig: Address;
    readonly tokenMint: Address;
    static readonly discriminator: Buffer<ArrayBuffer>;
    static readonly layout: import("buffer-layout").Layout<TokenBadge>;
    constructor(fields: TokenBadgeFields);
    static fetch(rpc: Rpc<GetAccountInfoApi>, address: Address, programId?: Address): Promise<TokenBadge | null>;
    static fetchMultiple(rpc: Rpc<GetMultipleAccountsApi>, addresses: Address[], programId?: Address): Promise<Array<TokenBadge | null>>;
    static decode(data: Buffer): TokenBadge;
    toJSON(): TokenBadgeJSON;
    static fromJSON(obj: TokenBadgeJSON): TokenBadge;
}
//# sourceMappingURL=TokenBadge.d.ts.map