import { Address, GetAccountInfoApi, GetMultipleAccountsApi, Rpc } from "@solana/kit";
export interface FeeTierFields {
    whirlpoolsConfig: Address;
    tickSpacing: number;
    defaultFeeRate: number;
}
export interface FeeTierJSON {
    whirlpoolsConfig: string;
    tickSpacing: number;
    defaultFeeRate: number;
}
export declare class FeeTier {
    readonly whirlpoolsConfig: Address;
    readonly tickSpacing: number;
    readonly defaultFeeRate: number;
    static readonly discriminator: Buffer<ArrayBuffer>;
    static readonly layout: import("buffer-layout").Layout<FeeTier>;
    constructor(fields: FeeTierFields);
    static fetch(rpc: Rpc<GetAccountInfoApi>, address: Address, programId?: Address): Promise<FeeTier | null>;
    static fetchMultiple(rpc: Rpc<GetMultipleAccountsApi>, addresses: Address[], programId?: Address): Promise<Array<FeeTier | null>>;
    static decode(data: Buffer): FeeTier;
    toJSON(): FeeTierJSON;
    static fromJSON(obj: FeeTierJSON): FeeTier;
}
//# sourceMappingURL=FeeTier.d.ts.map