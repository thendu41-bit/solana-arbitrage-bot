import * as types from "../types";
export interface RemainingAccountsSliceFields {
    accountsType: types.AccountsTypeKind;
    length: number;
}
export interface RemainingAccountsSliceJSON {
    accountsType: types.AccountsTypeJSON;
    length: number;
}
export declare class RemainingAccountsSlice {
    readonly accountsType: types.AccountsTypeKind;
    readonly length: number;
    constructor(fields: RemainingAccountsSliceFields);
    static layout(property?: string): import("buffer-layout").Layout<unknown>;
    static fromDecoded(obj: any): types.RemainingAccountsSlice;
    static toEncodable(fields: RemainingAccountsSliceFields): {
        accountsType: {
            TransferHookA: {};
        } | {
            TransferHookB: {};
        } | {
            TransferHookReward: {};
        } | {
            TransferHookInput: {};
        } | {
            TransferHookIntermediate: {};
        } | {
            TransferHookOutput: {};
        };
        length: number;
    };
    toJSON(): RemainingAccountsSliceJSON;
    static fromJSON(obj: RemainingAccountsSliceJSON): RemainingAccountsSlice;
    toEncodable(): {
        accountsType: {
            TransferHookA: {};
        } | {
            TransferHookB: {};
        } | {
            TransferHookReward: {};
        } | {
            TransferHookInput: {};
        } | {
            TransferHookIntermediate: {};
        } | {
            TransferHookOutput: {};
        };
        length: number;
    };
}
//# sourceMappingURL=RemainingAccountsSlice.d.ts.map