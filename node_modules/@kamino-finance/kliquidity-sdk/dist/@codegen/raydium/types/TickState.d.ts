import BN from "bn.js";
import * as types from "../types";
export interface TickStateFields {
    tick: number;
    liquidityNet: BN;
    liquidityGross: BN;
    feeGrowthOutside0X64: BN;
    feeGrowthOutside1X64: BN;
    rewardGrowthsOutsideX64: Array<BN>;
    padding: Array<number>;
}
export interface TickStateJSON {
    tick: number;
    liquidityNet: string;
    liquidityGross: string;
    feeGrowthOutside0X64: string;
    feeGrowthOutside1X64: string;
    rewardGrowthsOutsideX64: Array<string>;
    padding: Array<number>;
}
export declare class TickState {
    readonly tick: number;
    readonly liquidityNet: BN;
    readonly liquidityGross: BN;
    readonly feeGrowthOutside0X64: BN;
    readonly feeGrowthOutside1X64: BN;
    readonly rewardGrowthsOutsideX64: Array<BN>;
    readonly padding: Array<number>;
    constructor(fields: TickStateFields);
    static layout(property?: string): import("buffer-layout").Layout<unknown>;
    static fromDecoded(obj: any): types.TickState;
    static toEncodable(fields: TickStateFields): {
        tick: number;
        liquidityNet: BN;
        liquidityGross: BN;
        feeGrowthOutside0X64: BN;
        feeGrowthOutside1X64: BN;
        rewardGrowthsOutsideX64: BN[];
        padding: number[];
    };
    toJSON(): TickStateJSON;
    static fromJSON(obj: TickStateJSON): TickState;
    toEncodable(): {
        tick: number;
        liquidityNet: BN;
        liquidityGross: BN;
        feeGrowthOutside0X64: BN;
        feeGrowthOutside1X64: BN;
        rewardGrowthsOutsideX64: BN[];
        padding: number[];
    };
}
//# sourceMappingURL=TickState.d.ts.map