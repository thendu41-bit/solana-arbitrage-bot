import BN from "bn.js";
import * as types from "../types";
export interface InitializeRewardParamFields {
    openTime: BN;
    endTime: BN;
    emissionsPerSecondX64: BN;
}
export interface InitializeRewardParamJSON {
    openTime: string;
    endTime: string;
    emissionsPerSecondX64: string;
}
export declare class InitializeRewardParam {
    readonly openTime: BN;
    readonly endTime: BN;
    readonly emissionsPerSecondX64: BN;
    constructor(fields: InitializeRewardParamFields);
    static layout(property?: string): import("buffer-layout").Layout<unknown>;
    static fromDecoded(obj: any): types.InitializeRewardParam;
    static toEncodable(fields: InitializeRewardParamFields): {
        openTime: BN;
        endTime: BN;
        emissionsPerSecondX64: BN;
    };
    toJSON(): InitializeRewardParamJSON;
    static fromJSON(obj: InitializeRewardParamJSON): InitializeRewardParam;
    toEncodable(): {
        openTime: BN;
        endTime: BN;
        emissionsPerSecondX64: BN;
    };
}
//# sourceMappingURL=InitializeRewardParam.d.ts.map