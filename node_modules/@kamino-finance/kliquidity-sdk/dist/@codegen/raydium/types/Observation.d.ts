import BN from "bn.js";
import * as types from "../types";
export interface ObservationFields {
    blockTimestamp: number;
    sqrtPriceX64: BN;
    cumulativeTimePriceX64: BN;
    padding: BN;
}
export interface ObservationJSON {
    blockTimestamp: number;
    sqrtPriceX64: string;
    cumulativeTimePriceX64: string;
    padding: string;
}
export declare class Observation {
    readonly blockTimestamp: number;
    readonly sqrtPriceX64: BN;
    readonly cumulativeTimePriceX64: BN;
    readonly padding: BN;
    constructor(fields: ObservationFields);
    static layout(property?: string): import("buffer-layout").Layout<unknown>;
    static fromDecoded(obj: any): types.Observation;
    static toEncodable(fields: ObservationFields): {
        blockTimestamp: number;
        sqrtPriceX64: BN;
        cumulativeTimePriceX64: BN;
        padding: BN;
    };
    toJSON(): ObservationJSON;
    static fromJSON(obj: ObservationJSON): Observation;
    toEncodable(): {
        blockTimestamp: number;
        sqrtPriceX64: BN;
        cumulativeTimePriceX64: BN;
        padding: BN;
    };
}
//# sourceMappingURL=Observation.d.ts.map