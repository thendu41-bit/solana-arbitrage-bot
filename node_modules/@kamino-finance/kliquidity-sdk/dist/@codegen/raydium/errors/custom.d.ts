export type CustomError = LOK | NotApproved | InvalidUpdateConfigFlag | AccountLack | ClosePositionErr | ZeroMintAmount | InvaildTickIndex | TickInvaildOrder | TickLowerOverflow | TickUpperOverflow | TickAndSpacingNotMatch | InvalidTickArray | InvalidTickArrayBoundary | SqrtPriceLimitOverflow | SqrtPriceX64 | LiquiditySubValueErr | LiquidityAddValueErr | InvaildLiquidity | ForbidBothZeroForSupplyLiquidity | LiquidityInsufficient | TransactionTooOld | PriceSlippageCheck | TooLittleOutputReceived | TooMuchInputPaid | InvaildSwapAmountSpecified | InvalidInputPoolVault | TooSmallInputOrOutputAmount | NotEnoughTickArrayAccount | InvalidFirstTickArrayAccount | InvalidRewardIndex | FullRewardInfo | RewardTokenAlreadyInUse | ExceptPoolVaultMint | InvalidRewardInitParam | InvalidRewardDesiredAmount | InvalidRewardInputAccountNumber | InvalidRewardPeriod | NotApproveUpdateRewardEmissiones | UnInitializedRewardInfo | NotSupportMint | MissingTickArrayBitmapExtensionAccount | InsufficientLiquidityForDirection;
export declare class LOK extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6000;
    readonly code = 6000;
    readonly name = "LOK";
    readonly msg = "LOK";
    constructor(logs?: string[] | undefined);
}
export declare class NotApproved extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6001;
    readonly code = 6001;
    readonly name = "NotApproved";
    readonly msg = "Not approved";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidUpdateConfigFlag extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6002;
    readonly code = 6002;
    readonly name = "InvalidUpdateConfigFlag";
    readonly msg = "invalid update amm config flag";
    constructor(logs?: string[] | undefined);
}
export declare class AccountLack extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6003;
    readonly code = 6003;
    readonly name = "AccountLack";
    readonly msg = "Account lack";
    constructor(logs?: string[] | undefined);
}
export declare class ClosePositionErr extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6004;
    readonly code = 6004;
    readonly name = "ClosePositionErr";
    readonly msg = "Remove liquitity, collect fees owed and reward then you can close position account";
    constructor(logs?: string[] | undefined);
}
export declare class ZeroMintAmount extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6005;
    readonly code = 6005;
    readonly name = "ZeroMintAmount";
    readonly msg = "Minting amount should be greater than 0";
    constructor(logs?: string[] | undefined);
}
export declare class InvaildTickIndex extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6006;
    readonly code = 6006;
    readonly name = "InvaildTickIndex";
    readonly msg = "Tick out of range";
    constructor(logs?: string[] | undefined);
}
export declare class TickInvaildOrder extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6007;
    readonly code = 6007;
    readonly name = "TickInvaildOrder";
    readonly msg = "The lower tick must be below the upper tick";
    constructor(logs?: string[] | undefined);
}
export declare class TickLowerOverflow extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6008;
    readonly code = 6008;
    readonly name = "TickLowerOverflow";
    readonly msg = "The tick must be greater, or equal to the minimum tick(-221818)";
    constructor(logs?: string[] | undefined);
}
export declare class TickUpperOverflow extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6009;
    readonly code = 6009;
    readonly name = "TickUpperOverflow";
    readonly msg = "The tick must be lesser than, or equal to the maximum tick(221818)";
    constructor(logs?: string[] | undefined);
}
export declare class TickAndSpacingNotMatch extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6010;
    readonly code = 6010;
    readonly name = "TickAndSpacingNotMatch";
    readonly msg = "tick % tick_spacing must be zero";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidTickArray extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6011;
    readonly code = 6011;
    readonly name = "InvalidTickArray";
    readonly msg = "Invaild tick array account";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidTickArrayBoundary extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6012;
    readonly code = 6012;
    readonly name = "InvalidTickArrayBoundary";
    readonly msg = "Invaild tick array boundary";
    constructor(logs?: string[] | undefined);
}
export declare class SqrtPriceLimitOverflow extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6013;
    readonly code = 6013;
    readonly name = "SqrtPriceLimitOverflow";
    readonly msg = "Square root price limit overflow";
    constructor(logs?: string[] | undefined);
}
export declare class SqrtPriceX64 extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6014;
    readonly code = 6014;
    readonly name = "SqrtPriceX64";
    readonly msg = "sqrt_price_x64 out of range";
    constructor(logs?: string[] | undefined);
}
export declare class LiquiditySubValueErr extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6015;
    readonly code = 6015;
    readonly name = "LiquiditySubValueErr";
    readonly msg = "Liquidity sub delta L must be smaller than before";
    constructor(logs?: string[] | undefined);
}
export declare class LiquidityAddValueErr extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6016;
    readonly code = 6016;
    readonly name = "LiquidityAddValueErr";
    readonly msg = "Liquidity add delta L must be greater, or equal to before";
    constructor(logs?: string[] | undefined);
}
export declare class InvaildLiquidity extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6017;
    readonly code = 6017;
    readonly name = "InvaildLiquidity";
    readonly msg = "Invaild liquidity when update position";
    constructor(logs?: string[] | undefined);
}
export declare class ForbidBothZeroForSupplyLiquidity extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6018;
    readonly code = 6018;
    readonly name = "ForbidBothZeroForSupplyLiquidity";
    readonly msg = "Both token amount must not be zero while supply liquidity";
    constructor(logs?: string[] | undefined);
}
export declare class LiquidityInsufficient extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6019;
    readonly code = 6019;
    readonly name = "LiquidityInsufficient";
    readonly msg = "Liquidity insufficient";
    constructor(logs?: string[] | undefined);
}
export declare class TransactionTooOld extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6020;
    readonly code = 6020;
    readonly name = "TransactionTooOld";
    readonly msg = "Transaction too old";
    constructor(logs?: string[] | undefined);
}
export declare class PriceSlippageCheck extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6021;
    readonly code = 6021;
    readonly name = "PriceSlippageCheck";
    readonly msg = "Price slippage check";
    constructor(logs?: string[] | undefined);
}
export declare class TooLittleOutputReceived extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6022;
    readonly code = 6022;
    readonly name = "TooLittleOutputReceived";
    readonly msg = "Too little output received";
    constructor(logs?: string[] | undefined);
}
export declare class TooMuchInputPaid extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6023;
    readonly code = 6023;
    readonly name = "TooMuchInputPaid";
    readonly msg = "Too much input paid";
    constructor(logs?: string[] | undefined);
}
export declare class InvaildSwapAmountSpecified extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6024;
    readonly code = 6024;
    readonly name = "InvaildSwapAmountSpecified";
    readonly msg = "Swap special amount can not be zero";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidInputPoolVault extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6025;
    readonly code = 6025;
    readonly name = "InvalidInputPoolVault";
    readonly msg = "Input pool vault is invalid";
    constructor(logs?: string[] | undefined);
}
export declare class TooSmallInputOrOutputAmount extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6026;
    readonly code = 6026;
    readonly name = "TooSmallInputOrOutputAmount";
    readonly msg = "Swap input or output amount is too small";
    constructor(logs?: string[] | undefined);
}
export declare class NotEnoughTickArrayAccount extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6027;
    readonly code = 6027;
    readonly name = "NotEnoughTickArrayAccount";
    readonly msg = "Not enought tick array account";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidFirstTickArrayAccount extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6028;
    readonly code = 6028;
    readonly name = "InvalidFirstTickArrayAccount";
    readonly msg = "Invaild first tick array account";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidRewardIndex extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6029;
    readonly code = 6029;
    readonly name = "InvalidRewardIndex";
    readonly msg = "Invalid reward index";
    constructor(logs?: string[] | undefined);
}
export declare class FullRewardInfo extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6030;
    readonly code = 6030;
    readonly name = "FullRewardInfo";
    readonly msg = "The init reward token reach to the max";
    constructor(logs?: string[] | undefined);
}
export declare class RewardTokenAlreadyInUse extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6031;
    readonly code = 6031;
    readonly name = "RewardTokenAlreadyInUse";
    readonly msg = "The init reward token already in use";
    constructor(logs?: string[] | undefined);
}
export declare class ExceptPoolVaultMint extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6032;
    readonly code = 6032;
    readonly name = "ExceptPoolVaultMint";
    readonly msg = "The reward tokens must contain one of pool vault mint except the last reward";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidRewardInitParam extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6033;
    readonly code = 6033;
    readonly name = "InvalidRewardInitParam";
    readonly msg = "Invalid reward init param";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidRewardDesiredAmount extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6034;
    readonly code = 6034;
    readonly name = "InvalidRewardDesiredAmount";
    readonly msg = "Invalid collect reward desired amount";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidRewardInputAccountNumber extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6035;
    readonly code = 6035;
    readonly name = "InvalidRewardInputAccountNumber";
    readonly msg = "Invalid collect reward input account number";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidRewardPeriod extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6036;
    readonly code = 6036;
    readonly name = "InvalidRewardPeriod";
    readonly msg = "Invalid reward period";
    constructor(logs?: string[] | undefined);
}
export declare class NotApproveUpdateRewardEmissiones extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6037;
    readonly code = 6037;
    readonly name = "NotApproveUpdateRewardEmissiones";
    readonly msg = "Modification of emissiones is allowed within 72 hours from the end of the previous cycle";
    constructor(logs?: string[] | undefined);
}
export declare class UnInitializedRewardInfo extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6038;
    readonly code = 6038;
    readonly name = "UnInitializedRewardInfo";
    readonly msg = "uninitialized reward info";
    constructor(logs?: string[] | undefined);
}
export declare class NotSupportMint extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6039;
    readonly code = 6039;
    readonly name = "NotSupportMint";
    readonly msg = "Not support token_2022 mint extension";
    constructor(logs?: string[] | undefined);
}
export declare class MissingTickArrayBitmapExtensionAccount extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6040;
    readonly code = 6040;
    readonly name = "MissingTickArrayBitmapExtensionAccount";
    readonly msg = "Missing tickarray bitmap extension account";
    constructor(logs?: string[] | undefined);
}
export declare class InsufficientLiquidityForDirection extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6041;
    readonly code = 6041;
    readonly name = "InsufficientLiquidityForDirection";
    readonly msg = "Insufficient liquidity for this direction";
    constructor(logs?: string[] | undefined);
}
export declare function fromCode(code: number, logs?: string[]): CustomError | null;
//# sourceMappingURL=custom.d.ts.map