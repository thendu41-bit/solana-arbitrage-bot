import { Address, GetAccountInfoApi, GetMultipleAccountsApi, Rpc } from "@solana/kit";
import BN from "bn.js";
export interface TickArrayBitmapExtensionFields {
    poolId: Address;
    positiveTickArrayBitmap: Array<Array<BN>>;
    negativeTickArrayBitmap: Array<Array<BN>>;
}
export interface TickArrayBitmapExtensionJSON {
    poolId: string;
    positiveTickArrayBitmap: Array<Array<string>>;
    negativeTickArrayBitmap: Array<Array<string>>;
}
export declare class TickArrayBitmapExtension {
    readonly poolId: Address;
    readonly positiveTickArrayBitmap: Array<Array<BN>>;
    readonly negativeTickArrayBitmap: Array<Array<BN>>;
    static readonly discriminator: Buffer<ArrayBuffer>;
    static readonly layout: import("buffer-layout").Layout<TickArrayBitmapExtension>;
    constructor(fields: TickArrayBitmapExtensionFields);
    static fetch(rpc: Rpc<GetAccountInfoApi>, address: Address, programId?: Address): Promise<TickArrayBitmapExtension | null>;
    static fetchMultiple(rpc: Rpc<GetMultipleAccountsApi>, addresses: Address[], programId?: Address): Promise<Array<TickArrayBitmapExtension | null>>;
    static decode(data: Buffer): TickArrayBitmapExtension;
    toJSON(): TickArrayBitmapExtensionJSON;
    static fromJSON(obj: TickArrayBitmapExtensionJSON): TickArrayBitmapExtension;
}
//# sourceMappingURL=TickArrayBitmapExtension.d.ts.map