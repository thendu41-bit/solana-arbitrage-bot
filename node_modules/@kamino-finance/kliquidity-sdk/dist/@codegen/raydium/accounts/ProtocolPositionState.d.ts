import { Address, GetAccountInfoApi, GetMultipleAccountsApi, Rpc } from "@solana/kit";
import BN from "bn.js";
export interface ProtocolPositionStateFields {
    bump: number;
    poolId: Address;
    tickLowerIndex: number;
    tickUpperIndex: number;
    liquidity: BN;
    feeGrowthInside0LastX64: BN;
    feeGrowthInside1LastX64: BN;
    tokenFeesOwed0: BN;
    tokenFeesOwed1: BN;
    rewardGrowthInside: Array<BN>;
    padding: Array<BN>;
}
export interface ProtocolPositionStateJSON {
    bump: number;
    poolId: string;
    tickLowerIndex: number;
    tickUpperIndex: number;
    liquidity: string;
    feeGrowthInside0LastX64: string;
    feeGrowthInside1LastX64: string;
    tokenFeesOwed0: string;
    tokenFeesOwed1: string;
    rewardGrowthInside: Array<string>;
    padding: Array<string>;
}
export declare class ProtocolPositionState {
    readonly bump: number;
    readonly poolId: Address;
    readonly tickLowerIndex: number;
    readonly tickUpperIndex: number;
    readonly liquidity: BN;
    readonly feeGrowthInside0LastX64: BN;
    readonly feeGrowthInside1LastX64: BN;
    readonly tokenFeesOwed0: BN;
    readonly tokenFeesOwed1: BN;
    readonly rewardGrowthInside: Array<BN>;
    readonly padding: Array<BN>;
    static readonly discriminator: Buffer<ArrayBuffer>;
    static readonly layout: import("buffer-layout").Layout<ProtocolPositionState>;
    constructor(fields: ProtocolPositionStateFields);
    static fetch(rpc: Rpc<GetAccountInfoApi>, address: Address, programId?: Address): Promise<ProtocolPositionState | null>;
    static fetchMultiple(rpc: Rpc<GetMultipleAccountsApi>, addresses: Address[], programId?: Address): Promise<Array<ProtocolPositionState | null>>;
    static decode(data: Buffer): ProtocolPositionState;
    toJSON(): ProtocolPositionStateJSON;
    static fromJSON(obj: ProtocolPositionStateJSON): ProtocolPositionState;
}
//# sourceMappingURL=ProtocolPositionState.d.ts.map