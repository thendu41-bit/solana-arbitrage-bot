"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PersonalPositionState = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
const kit_1 = require("@solana/kit");
/* eslint-enable @typescript-eslint/no-unused-vars */
const bn_js_1 = __importDefault(require("bn.js")); // eslint-disable-line @typescript-eslint/no-unused-vars
const borsh = __importStar(require("@coral-xyz/borsh")); // eslint-disable-line @typescript-eslint/no-unused-vars
const utils_1 = require("../utils"); // eslint-disable-line @typescript-eslint/no-unused-vars
const types = __importStar(require("../types")); // eslint-disable-line @typescript-eslint/no-unused-vars
const programId_1 = require("../programId");
class PersonalPositionState {
    bump;
    nftMint;
    poolId;
    tickLowerIndex;
    tickUpperIndex;
    liquidity;
    feeGrowthInside0LastX64;
    feeGrowthInside1LastX64;
    tokenFeesOwed0;
    tokenFeesOwed1;
    rewardInfos;
    padding;
    static discriminator = Buffer.from([
        70, 111, 150, 126, 230, 15, 25, 117,
    ]);
    static layout = borsh.struct([
        borsh.u8("bump"),
        (0, utils_1.borshAddress)("nftMint"),
        (0, utils_1.borshAddress)("poolId"),
        borsh.i32("tickLowerIndex"),
        borsh.i32("tickUpperIndex"),
        borsh.u128("liquidity"),
        borsh.u128("feeGrowthInside0LastX64"),
        borsh.u128("feeGrowthInside1LastX64"),
        borsh.u64("tokenFeesOwed0"),
        borsh.u64("tokenFeesOwed1"),
        borsh.array(types.PositionRewardInfo.layout(), 3, "rewardInfos"),
        borsh.array(borsh.u64(), 8, "padding"),
    ]);
    constructor(fields) {
        this.bump = fields.bump;
        this.nftMint = fields.nftMint;
        this.poolId = fields.poolId;
        this.tickLowerIndex = fields.tickLowerIndex;
        this.tickUpperIndex = fields.tickUpperIndex;
        this.liquidity = fields.liquidity;
        this.feeGrowthInside0LastX64 = fields.feeGrowthInside0LastX64;
        this.feeGrowthInside1LastX64 = fields.feeGrowthInside1LastX64;
        this.tokenFeesOwed0 = fields.tokenFeesOwed0;
        this.tokenFeesOwed1 = fields.tokenFeesOwed1;
        this.rewardInfos = fields.rewardInfos.map((item) => new types.PositionRewardInfo({ ...item }));
        this.padding = fields.padding;
    }
    static async fetch(rpc, address, programId = programId_1.PROGRAM_ID) {
        const info = await (0, kit_1.fetchEncodedAccount)(rpc, address);
        if (!info.exists) {
            return null;
        }
        if (info.programAddress !== programId) {
            throw new Error(`PersonalPositionStateFields account ${address} belongs to wrong program ${info.programAddress}, expected ${programId}`);
        }
        return this.decode(Buffer.from(info.data));
    }
    static async fetchMultiple(rpc, addresses, programId = programId_1.PROGRAM_ID) {
        const infos = await (0, kit_1.fetchEncodedAccounts)(rpc, addresses);
        return infos.map((info) => {
            if (!info.exists) {
                return null;
            }
            if (info.programAddress !== programId) {
                throw new Error(`PersonalPositionStateFields account ${info.address} belongs to wrong program ${info.programAddress}, expected ${programId}`);
            }
            return this.decode(Buffer.from(info.data));
        });
    }
    static decode(data) {
        if (!data.slice(0, 8).equals(PersonalPositionState.discriminator)) {
            throw new Error("invalid account discriminator");
        }
        const dec = PersonalPositionState.layout.decode(data.slice(8));
        return new PersonalPositionState({
            bump: dec.bump,
            nftMint: dec.nftMint,
            poolId: dec.poolId,
            tickLowerIndex: dec.tickLowerIndex,
            tickUpperIndex: dec.tickUpperIndex,
            liquidity: dec.liquidity,
            feeGrowthInside0LastX64: dec.feeGrowthInside0LastX64,
            feeGrowthInside1LastX64: dec.feeGrowthInside1LastX64,
            tokenFeesOwed0: dec.tokenFeesOwed0,
            tokenFeesOwed1: dec.tokenFeesOwed1,
            rewardInfos: dec.rewardInfos.map((item /* eslint-disable-line @typescript-eslint/no-explicit-any */) => types.PositionRewardInfo.fromDecoded(item)),
            padding: dec.padding,
        });
    }
    toJSON() {
        return {
            bump: this.bump,
            nftMint: this.nftMint,
            poolId: this.poolId,
            tickLowerIndex: this.tickLowerIndex,
            tickUpperIndex: this.tickUpperIndex,
            liquidity: this.liquidity.toString(),
            feeGrowthInside0LastX64: this.feeGrowthInside0LastX64.toString(),
            feeGrowthInside1LastX64: this.feeGrowthInside1LastX64.toString(),
            tokenFeesOwed0: this.tokenFeesOwed0.toString(),
            tokenFeesOwed1: this.tokenFeesOwed1.toString(),
            rewardInfos: this.rewardInfos.map((item) => item.toJSON()),
            padding: this.padding.map((item) => item.toString()),
        };
    }
    static fromJSON(obj) {
        return new PersonalPositionState({
            bump: obj.bump,
            nftMint: (0, kit_1.address)(obj.nftMint),
            poolId: (0, kit_1.address)(obj.poolId),
            tickLowerIndex: obj.tickLowerIndex,
            tickUpperIndex: obj.tickUpperIndex,
            liquidity: new bn_js_1.default(obj.liquidity),
            feeGrowthInside0LastX64: new bn_js_1.default(obj.feeGrowthInside0LastX64),
            feeGrowthInside1LastX64: new bn_js_1.default(obj.feeGrowthInside1LastX64),
            tokenFeesOwed0: new bn_js_1.default(obj.tokenFeesOwed0),
            tokenFeesOwed1: new bn_js_1.default(obj.tokenFeesOwed1),
            rewardInfos: obj.rewardInfos.map((item) => types.PositionRewardInfo.fromJSON(item)),
            padding: obj.padding.map((item) => new bn_js_1.default(item)),
        });
    }
}
exports.PersonalPositionState = PersonalPositionState;
//# sourceMappingURL=PersonalPositionState.js.map