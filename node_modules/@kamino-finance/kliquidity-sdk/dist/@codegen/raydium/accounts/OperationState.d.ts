import { Address, GetAccountInfoApi, GetMultipleAccountsApi, Rpc } from "@solana/kit";
export interface OperationStateFields {
    bump: number;
    operationOwners: Array<Address>;
    whitelistMints: Array<Address>;
}
export interface OperationStateJSON {
    bump: number;
    operationOwners: Array<string>;
    whitelistMints: Array<string>;
}
export declare class OperationState {
    readonly bump: number;
    readonly operationOwners: Array<Address>;
    readonly whitelistMints: Array<Address>;
    static readonly discriminator: Buffer<ArrayBuffer>;
    static readonly layout: import("buffer-layout").Layout<OperationState>;
    constructor(fields: OperationStateFields);
    static fetch(rpc: Rpc<GetAccountInfoApi>, address: Address, programId?: Address): Promise<OperationState | null>;
    static fetchMultiple(rpc: Rpc<GetMultipleAccountsApi>, addresses: Address[], programId?: Address): Promise<Array<OperationState | null>>;
    static decode(data: Buffer): OperationState;
    toJSON(): OperationStateJSON;
    static fromJSON(obj: OperationStateJSON): OperationState;
}
//# sourceMappingURL=OperationState.d.ts.map