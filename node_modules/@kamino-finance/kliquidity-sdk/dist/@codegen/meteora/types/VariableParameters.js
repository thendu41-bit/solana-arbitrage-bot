"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VariableParameters = void 0;
const bn_js_1 = __importDefault(require("bn.js")); // eslint-disable-line @typescript-eslint/no-unused-vars
const borsh = __importStar(require("@coral-xyz/borsh"));
/** Parameters that changes based on dynamic of the market */
class VariableParameters {
    /**
     * Volatility accumulator measure the number of bin crossed since reference bin ID. Normally (without filter period taken into consideration), reference bin ID is the active bin of last swap.
     * It affects the variable fee rate
     */
    volatilityAccumulator;
    /** Volatility reference is decayed volatility accumulator. It is always <= volatility_accumulator */
    volatilityReference;
    /** Active bin id of last swap. */
    indexReference;
    /** Padding for bytemuck safe alignment */
    padding;
    /** Last timestamp the variable parameters was updated */
    lastUpdateTimestamp;
    /** Padding for bytemuck safe alignment */
    padding1;
    constructor(fields) {
        this.volatilityAccumulator = fields.volatilityAccumulator;
        this.volatilityReference = fields.volatilityReference;
        this.indexReference = fields.indexReference;
        this.padding = fields.padding;
        this.lastUpdateTimestamp = fields.lastUpdateTimestamp;
        this.padding1 = fields.padding1;
    }
    static layout(property) {
        return borsh.struct([
            borsh.u32("volatilityAccumulator"),
            borsh.u32("volatilityReference"),
            borsh.i32("indexReference"),
            borsh.array(borsh.u8(), 4, "padding"),
            borsh.i64("lastUpdateTimestamp"),
            borsh.array(borsh.u8(), 8, "padding1"),
        ], property);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    static fromDecoded(obj) {
        return new VariableParameters({
            volatilityAccumulator: obj.volatilityAccumulator,
            volatilityReference: obj.volatilityReference,
            indexReference: obj.indexReference,
            padding: obj.padding,
            lastUpdateTimestamp: obj.lastUpdateTimestamp,
            padding1: obj.padding1,
        });
    }
    static toEncodable(fields) {
        return {
            volatilityAccumulator: fields.volatilityAccumulator,
            volatilityReference: fields.volatilityReference,
            indexReference: fields.indexReference,
            padding: fields.padding,
            lastUpdateTimestamp: fields.lastUpdateTimestamp,
            padding1: fields.padding1,
        };
    }
    toJSON() {
        return {
            volatilityAccumulator: this.volatilityAccumulator,
            volatilityReference: this.volatilityReference,
            indexReference: this.indexReference,
            padding: this.padding,
            lastUpdateTimestamp: this.lastUpdateTimestamp.toString(),
            padding1: this.padding1,
        };
    }
    static fromJSON(obj) {
        return new VariableParameters({
            volatilityAccumulator: obj.volatilityAccumulator,
            volatilityReference: obj.volatilityReference,
            indexReference: obj.indexReference,
            padding: obj.padding,
            lastUpdateTimestamp: new bn_js_1.default(obj.lastUpdateTimestamp),
            padding1: obj.padding1,
        });
    }
    toEncodable() {
        return VariableParameters.toEncodable(this);
    }
}
exports.VariableParameters = VariableParameters;
//# sourceMappingURL=VariableParameters.js.map