import * as types from "../types";
export interface StrategyParametersFields {
    /** min bin id */
    minBinId: number;
    /** max bin id */
    maxBinId: number;
    /** strategy type */
    strategyType: types.StrategyTypeKind;
    /** parameters */
    parameteres: Array<number>;
}
export interface StrategyParametersJSON {
    /** min bin id */
    minBinId: number;
    /** max bin id */
    maxBinId: number;
    /** strategy type */
    strategyType: types.StrategyTypeJSON;
    /** parameters */
    parameteres: Array<number>;
}
export declare class StrategyParameters {
    /** min bin id */
    readonly minBinId: number;
    /** max bin id */
    readonly maxBinId: number;
    /** strategy type */
    readonly strategyType: types.StrategyTypeKind;
    /** parameters */
    readonly parameteres: Array<number>;
    constructor(fields: StrategyParametersFields);
    static layout(property?: string): import("buffer-layout").Layout<unknown>;
    static fromDecoded(obj: any): types.StrategyParameters;
    static toEncodable(fields: StrategyParametersFields): {
        minBinId: number;
        maxBinId: number;
        strategyType: {
            SpotOneSide: {};
        } | {
            CurveOneSide: {};
        } | {
            BidAskOneSide: {};
        } | {
            SpotBalanced: {};
        } | {
            CurveBalanced: {};
        } | {
            BidAskBalanced: {};
        } | {
            SpotImBalanced: {};
        } | {
            CurveImBalanced: {};
        } | {
            BidAskImBalanced: {};
        };
        parameteres: number[];
    };
    toJSON(): StrategyParametersJSON;
    static fromJSON(obj: StrategyParametersJSON): StrategyParameters;
    toEncodable(): {
        minBinId: number;
        maxBinId: number;
        strategyType: {
            SpotOneSide: {};
        } | {
            CurveOneSide: {};
        } | {
            BidAskOneSide: {};
        } | {
            SpotBalanced: {};
        } | {
            CurveBalanced: {};
        } | {
            BidAskBalanced: {};
        } | {
            SpotImBalanced: {};
        } | {
            CurveImBalanced: {};
        } | {
            BidAskImBalanced: {};
        };
        parameteres: number[];
    };
}
//# sourceMappingURL=StrategyParameters.d.ts.map