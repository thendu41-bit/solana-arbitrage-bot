import * as types from "../types";
export interface BinLiquidityDistributionFields {
    /** Define the bin ID wish to deposit to. */
    binId: number;
    /** DistributionX (or distributionY) is the percentages of amountX (or amountY) you want to add to each bin. */
    distributionX: number;
    /** DistributionX (or distributionY) is the percentages of amountX (or amountY) you want to add to each bin. */
    distributionY: number;
}
export interface BinLiquidityDistributionJSON {
    /** Define the bin ID wish to deposit to. */
    binId: number;
    /** DistributionX (or distributionY) is the percentages of amountX (or amountY) you want to add to each bin. */
    distributionX: number;
    /** DistributionX (or distributionY) is the percentages of amountX (or amountY) you want to add to each bin. */
    distributionY: number;
}
export declare class BinLiquidityDistribution {
    /** Define the bin ID wish to deposit to. */
    readonly binId: number;
    /** DistributionX (or distributionY) is the percentages of amountX (or amountY) you want to add to each bin. */
    readonly distributionX: number;
    /** DistributionX (or distributionY) is the percentages of amountX (or amountY) you want to add to each bin. */
    readonly distributionY: number;
    constructor(fields: BinLiquidityDistributionFields);
    static layout(property?: string): import("buffer-layout").Layout<unknown>;
    static fromDecoded(obj: any): types.BinLiquidityDistribution;
    static toEncodable(fields: BinLiquidityDistributionFields): {
        binId: number;
        distributionX: number;
        distributionY: number;
    };
    toJSON(): BinLiquidityDistributionJSON;
    static fromJSON(obj: BinLiquidityDistributionJSON): BinLiquidityDistribution;
    toEncodable(): {
        binId: number;
        distributionX: number;
        distributionY: number;
    };
}
//# sourceMappingURL=BinLiquidityDistribution.d.ts.map