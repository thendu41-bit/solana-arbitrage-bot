import * as types from "../types";
export interface FeeParameterFields {
    /** Portion of swap fees retained by the protocol by controlling protocol_share parameter. protocol_swap_fee = protocol_share * total_swap_fee */
    protocolShare: number;
    /** Base factor for base fee rate */
    baseFactor: number;
}
export interface FeeParameterJSON {
    /** Portion of swap fees retained by the protocol by controlling protocol_share parameter. protocol_swap_fee = protocol_share * total_swap_fee */
    protocolShare: number;
    /** Base factor for base fee rate */
    baseFactor: number;
}
export declare class FeeParameter {
    /** Portion of swap fees retained by the protocol by controlling protocol_share parameter. protocol_swap_fee = protocol_share * total_swap_fee */
    readonly protocolShare: number;
    /** Base factor for base fee rate */
    readonly baseFactor: number;
    constructor(fields: FeeParameterFields);
    static layout(property?: string): import("buffer-layout").Layout<unknown>;
    static fromDecoded(obj: any): types.FeeParameter;
    static toEncodable(fields: FeeParameterFields): {
        protocolShare: number;
        baseFactor: number;
    };
    toJSON(): FeeParameterJSON;
    static fromJSON(obj: FeeParameterJSON): FeeParameter;
    toEncodable(): {
        protocolShare: number;
        baseFactor: number;
    };
}
//# sourceMappingURL=FeeParameter.d.ts.map