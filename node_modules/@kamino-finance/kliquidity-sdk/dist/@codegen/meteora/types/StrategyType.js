"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.BidAskImBalanced = exports.CurveImBalanced = exports.SpotImBalanced = exports.BidAskBalanced = exports.CurveBalanced = exports.SpotBalanced = exports.BidAskOneSide = exports.CurveOneSide = exports.SpotOneSide = void 0;
exports.fromDecoded = fromDecoded;
exports.fromJSON = fromJSON;
exports.layout = layout;
const borsh = __importStar(require("@coral-xyz/borsh"));
class SpotOneSide {
    static discriminator = 0;
    static kind = "SpotOneSide";
    discriminator = 0;
    kind = "SpotOneSide";
    toJSON() {
        return {
            kind: "SpotOneSide",
        };
    }
    toEncodable() {
        return {
            SpotOneSide: {},
        };
    }
}
exports.SpotOneSide = SpotOneSide;
class CurveOneSide {
    static discriminator = 1;
    static kind = "CurveOneSide";
    discriminator = 1;
    kind = "CurveOneSide";
    toJSON() {
        return {
            kind: "CurveOneSide",
        };
    }
    toEncodable() {
        return {
            CurveOneSide: {},
        };
    }
}
exports.CurveOneSide = CurveOneSide;
class BidAskOneSide {
    static discriminator = 2;
    static kind = "BidAskOneSide";
    discriminator = 2;
    kind = "BidAskOneSide";
    toJSON() {
        return {
            kind: "BidAskOneSide",
        };
    }
    toEncodable() {
        return {
            BidAskOneSide: {},
        };
    }
}
exports.BidAskOneSide = BidAskOneSide;
class SpotBalanced {
    static discriminator = 3;
    static kind = "SpotBalanced";
    discriminator = 3;
    kind = "SpotBalanced";
    toJSON() {
        return {
            kind: "SpotBalanced",
        };
    }
    toEncodable() {
        return {
            SpotBalanced: {},
        };
    }
}
exports.SpotBalanced = SpotBalanced;
class CurveBalanced {
    static discriminator = 4;
    static kind = "CurveBalanced";
    discriminator = 4;
    kind = "CurveBalanced";
    toJSON() {
        return {
            kind: "CurveBalanced",
        };
    }
    toEncodable() {
        return {
            CurveBalanced: {},
        };
    }
}
exports.CurveBalanced = CurveBalanced;
class BidAskBalanced {
    static discriminator = 5;
    static kind = "BidAskBalanced";
    discriminator = 5;
    kind = "BidAskBalanced";
    toJSON() {
        return {
            kind: "BidAskBalanced",
        };
    }
    toEncodable() {
        return {
            BidAskBalanced: {},
        };
    }
}
exports.BidAskBalanced = BidAskBalanced;
class SpotImBalanced {
    static discriminator = 6;
    static kind = "SpotImBalanced";
    discriminator = 6;
    kind = "SpotImBalanced";
    toJSON() {
        return {
            kind: "SpotImBalanced",
        };
    }
    toEncodable() {
        return {
            SpotImBalanced: {},
        };
    }
}
exports.SpotImBalanced = SpotImBalanced;
class CurveImBalanced {
    static discriminator = 7;
    static kind = "CurveImBalanced";
    discriminator = 7;
    kind = "CurveImBalanced";
    toJSON() {
        return {
            kind: "CurveImBalanced",
        };
    }
    toEncodable() {
        return {
            CurveImBalanced: {},
        };
    }
}
exports.CurveImBalanced = CurveImBalanced;
class BidAskImBalanced {
    static discriminator = 8;
    static kind = "BidAskImBalanced";
    discriminator = 8;
    kind = "BidAskImBalanced";
    toJSON() {
        return {
            kind: "BidAskImBalanced",
        };
    }
    toEncodable() {
        return {
            BidAskImBalanced: {},
        };
    }
}
exports.BidAskImBalanced = BidAskImBalanced;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function fromDecoded(obj) {
    if (typeof obj !== "object") {
        throw new Error("Invalid enum object");
    }
    if ("SpotOneSide" in obj) {
        return new SpotOneSide();
    }
    if ("CurveOneSide" in obj) {
        return new CurveOneSide();
    }
    if ("BidAskOneSide" in obj) {
        return new BidAskOneSide();
    }
    if ("SpotBalanced" in obj) {
        return new SpotBalanced();
    }
    if ("CurveBalanced" in obj) {
        return new CurveBalanced();
    }
    if ("BidAskBalanced" in obj) {
        return new BidAskBalanced();
    }
    if ("SpotImBalanced" in obj) {
        return new SpotImBalanced();
    }
    if ("CurveImBalanced" in obj) {
        return new CurveImBalanced();
    }
    if ("BidAskImBalanced" in obj) {
        return new BidAskImBalanced();
    }
    throw new Error("Invalid enum object");
}
function fromJSON(obj) {
    switch (obj.kind) {
        case "SpotOneSide": {
            return new SpotOneSide();
        }
        case "CurveOneSide": {
            return new CurveOneSide();
        }
        case "BidAskOneSide": {
            return new BidAskOneSide();
        }
        case "SpotBalanced": {
            return new SpotBalanced();
        }
        case "CurveBalanced": {
            return new CurveBalanced();
        }
        case "BidAskBalanced": {
            return new BidAskBalanced();
        }
        case "SpotImBalanced": {
            return new SpotImBalanced();
        }
        case "CurveImBalanced": {
            return new CurveImBalanced();
        }
        case "BidAskImBalanced": {
            return new BidAskImBalanced();
        }
    }
}
function layout(property) {
    const ret = borsh.rustEnum([
        borsh.struct([], "SpotOneSide"),
        borsh.struct([], "CurveOneSide"),
        borsh.struct([], "BidAskOneSide"),
        borsh.struct([], "SpotBalanced"),
        borsh.struct([], "CurveBalanced"),
        borsh.struct([], "BidAskBalanced"),
        borsh.struct([], "SpotImBalanced"),
        borsh.struct([], "CurveImBalanced"),
        borsh.struct([], "BidAskImBalanced"),
    ]);
    if (property !== undefined) {
        return ret.replicate(property);
    }
    return ret;
}
//# sourceMappingURL=StrategyType.js.map