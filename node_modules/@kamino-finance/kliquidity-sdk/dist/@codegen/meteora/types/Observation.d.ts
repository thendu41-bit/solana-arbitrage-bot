import BN from "bn.js";
import * as types from "../types";
export interface ObservationFields {
    /** Cumulative active bin ID */
    cumulativeActiveBinId: BN;
    /** Observation sample created timestamp */
    createdAt: BN;
    /** Observation sample last updated timestamp */
    lastUpdatedAt: BN;
}
export interface ObservationJSON {
    /** Cumulative active bin ID */
    cumulativeActiveBinId: string;
    /** Observation sample created timestamp */
    createdAt: string;
    /** Observation sample last updated timestamp */
    lastUpdatedAt: string;
}
export declare class Observation {
    /** Cumulative active bin ID */
    readonly cumulativeActiveBinId: BN;
    /** Observation sample created timestamp */
    readonly createdAt: BN;
    /** Observation sample last updated timestamp */
    readonly lastUpdatedAt: BN;
    constructor(fields: ObservationFields);
    static layout(property?: string): import("buffer-layout").Layout<unknown>;
    static fromDecoded(obj: any): types.Observation;
    static toEncodable(fields: ObservationFields): {
        cumulativeActiveBinId: BN;
        createdAt: BN;
        lastUpdatedAt: BN;
    };
    toJSON(): ObservationJSON;
    static fromJSON(obj: ObservationJSON): Observation;
    toEncodable(): {
        cumulativeActiveBinId: BN;
        createdAt: BN;
        lastUpdatedAt: BN;
    };
}
//# sourceMappingURL=Observation.d.ts.map