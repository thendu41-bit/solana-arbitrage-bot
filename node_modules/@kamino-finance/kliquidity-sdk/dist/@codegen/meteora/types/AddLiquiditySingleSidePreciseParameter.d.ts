import BN from "bn.js";
import * as types from "../types";
export interface AddLiquiditySingleSidePreciseParameterFields {
    bins: Array<types.CompressedBinDepositAmountFields>;
    decompressMultiplier: BN;
}
export interface AddLiquiditySingleSidePreciseParameterJSON {
    bins: Array<types.CompressedBinDepositAmountJSON>;
    decompressMultiplier: string;
}
export declare class AddLiquiditySingleSidePreciseParameter {
    readonly bins: Array<types.CompressedBinDepositAmount>;
    readonly decompressMultiplier: BN;
    constructor(fields: AddLiquiditySingleSidePreciseParameterFields);
    static layout(property?: string): import("buffer-layout").Layout<unknown>;
    static fromDecoded(obj: any): types.AddLiquiditySingleSidePreciseParameter;
    static toEncodable(fields: AddLiquiditySingleSidePreciseParameterFields): {
        bins: {
            binId: number;
            amount: number;
        }[];
        decompressMultiplier: BN;
    };
    toJSON(): AddLiquiditySingleSidePreciseParameterJSON;
    static fromJSON(obj: AddLiquiditySingleSidePreciseParameterJSON): AddLiquiditySingleSidePreciseParameter;
    toEncodable(): {
        bins: {
            binId: number;
            amount: number;
        }[];
        decompressMultiplier: BN;
    };
}
//# sourceMappingURL=AddLiquiditySingleSidePreciseParameter.d.ts.map