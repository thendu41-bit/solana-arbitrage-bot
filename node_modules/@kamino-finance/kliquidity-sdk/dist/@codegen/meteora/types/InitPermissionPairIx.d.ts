import BN from "bn.js";
import * as types from "../types";
export interface InitPermissionPairIxFields {
    activeId: number;
    binStep: number;
    baseFactor: number;
    minBinId: number;
    maxBinId: number;
    lockDurationInSlot: BN;
}
export interface InitPermissionPairIxJSON {
    activeId: number;
    binStep: number;
    baseFactor: number;
    minBinId: number;
    maxBinId: number;
    lockDurationInSlot: string;
}
export declare class InitPermissionPairIx {
    readonly activeId: number;
    readonly binStep: number;
    readonly baseFactor: number;
    readonly minBinId: number;
    readonly maxBinId: number;
    readonly lockDurationInSlot: BN;
    constructor(fields: InitPermissionPairIxFields);
    static layout(property?: string): import("buffer-layout").Layout<unknown>;
    static fromDecoded(obj: any): types.InitPermissionPairIx;
    static toEncodable(fields: InitPermissionPairIxFields): {
        activeId: number;
        binStep: number;
        baseFactor: number;
        minBinId: number;
        maxBinId: number;
        lockDurationInSlot: BN;
    };
    toJSON(): InitPermissionPairIxJSON;
    static fromJSON(obj: InitPermissionPairIxJSON): InitPermissionPairIx;
    toEncodable(): {
        activeId: number;
        binStep: number;
        baseFactor: number;
        minBinId: number;
        maxBinId: number;
        lockDurationInSlot: BN;
    };
}
//# sourceMappingURL=InitPermissionPairIx.d.ts.map