import BN from "bn.js";
import * as types from "../types";
export interface FeeInfoFields {
    feeXPerTokenComplete: BN;
    feeYPerTokenComplete: BN;
    feeXPending: BN;
    feeYPending: BN;
}
export interface FeeInfoJSON {
    feeXPerTokenComplete: string;
    feeYPerTokenComplete: string;
    feeXPending: string;
    feeYPending: string;
}
export declare class FeeInfo {
    readonly feeXPerTokenComplete: BN;
    readonly feeYPerTokenComplete: BN;
    readonly feeXPending: BN;
    readonly feeYPending: BN;
    constructor(fields: FeeInfoFields);
    static layout(property?: string): import("buffer-layout").Layout<unknown>;
    static fromDecoded(obj: any): types.FeeInfo;
    static toEncodable(fields: FeeInfoFields): {
        feeXPerTokenComplete: BN;
        feeYPerTokenComplete: BN;
        feeXPending: BN;
        feeYPending: BN;
    };
    toJSON(): FeeInfoJSON;
    static fromJSON(obj: FeeInfoJSON): FeeInfo;
    toEncodable(): {
        feeXPerTokenComplete: BN;
        feeYPerTokenComplete: BN;
        feeXPending: BN;
        feeYPending: BN;
    };
}
//# sourceMappingURL=FeeInfo.d.ts.map