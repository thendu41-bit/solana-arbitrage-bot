import BN from "bn.js";
import * as types from "../types";
export interface LiquidityParameterFields {
    /** Amount of X token to deposit */
    amountX: BN;
    /** Amount of Y token to deposit */
    amountY: BN;
    /** Liquidity distribution to each bins */
    binLiquidityDist: Array<types.BinLiquidityDistributionFields>;
}
export interface LiquidityParameterJSON {
    /** Amount of X token to deposit */
    amountX: string;
    /** Amount of Y token to deposit */
    amountY: string;
    /** Liquidity distribution to each bins */
    binLiquidityDist: Array<types.BinLiquidityDistributionJSON>;
}
export declare class LiquidityParameter {
    /** Amount of X token to deposit */
    readonly amountX: BN;
    /** Amount of Y token to deposit */
    readonly amountY: BN;
    /** Liquidity distribution to each bins */
    readonly binLiquidityDist: Array<types.BinLiquidityDistribution>;
    constructor(fields: LiquidityParameterFields);
    static layout(property?: string): import("buffer-layout").Layout<unknown>;
    static fromDecoded(obj: any): types.LiquidityParameter;
    static toEncodable(fields: LiquidityParameterFields): {
        amountX: BN;
        amountY: BN;
        binLiquidityDist: {
            binId: number;
            distributionX: number;
            distributionY: number;
        }[];
    };
    toJSON(): LiquidityParameterJSON;
    static fromJSON(obj: LiquidityParameterJSON): LiquidityParameter;
    toEncodable(): {
        amountX: BN;
        amountY: BN;
        binLiquidityDist: {
            binId: number;
            distributionX: number;
            distributionY: number;
        }[];
    };
}
//# sourceMappingURL=LiquidityParameter.d.ts.map