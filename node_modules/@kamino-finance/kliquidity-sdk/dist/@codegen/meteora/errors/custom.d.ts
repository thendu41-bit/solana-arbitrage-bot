export type CustomError = InvalidStartBinIndex | InvalidBinId | InvalidInput | ExceededAmountSlippageTolerance | ExceededBinSlippageTolerance | CompositionFactorFlawed | NonPresetBinStep | ZeroLiquidity | InvalidPosition | BinArrayNotFound | InvalidTokenMint | InvalidAccountForSingleDeposit | PairInsufficientLiquidity | InvalidFeeOwner | InvalidFeeWithdrawAmount | InvalidAdmin | IdenticalFeeOwner | InvalidBps | MathOverflow | TypeCastFailed | InvalidRewardIndex | InvalidRewardDuration | RewardInitialized | RewardUninitialized | IdenticalFunder | RewardCampaignInProgress | IdenticalRewardDuration | InvalidBinArray | NonContinuousBinArrays | InvalidRewardVault | NonEmptyPosition | UnauthorizedAccess | InvalidFeeParameter | MissingOracle | InsufficientSample | InvalidLookupTimestamp | BitmapExtensionAccountIsNotProvided | CannotFindNonZeroLiquidityBinArrayId | BinIdOutOfBound | InsufficientOutAmount | InvalidPositionWidth | ExcessiveFeeUpdate | PoolDisabled | InvalidPoolType | ExceedMaxWhitelist | InvalidIndex | RewardNotEnded | MustWithdrawnIneligibleReward | UnauthorizedAddress | OperatorsAreTheSame | WithdrawToWrongTokenAccount | WrongRentReceiver | AlreadyPassActivationSlot | LastSlotCannotBeSmallerThanActivateSlot | ExceedMaxSwappedAmount | InvalidStrategyParameters | LiquidityLocked | InvalidLockReleaseSlot | BinRangeIsNotEmpty;
export declare class InvalidStartBinIndex extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6000;
    readonly code = 6000;
    readonly name = "InvalidStartBinIndex";
    readonly msg = "Invalid start bin index";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidBinId extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6001;
    readonly code = 6001;
    readonly name = "InvalidBinId";
    readonly msg = "Invalid bin id";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidInput extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6002;
    readonly code = 6002;
    readonly name = "InvalidInput";
    readonly msg = "Invalid input data";
    constructor(logs?: string[] | undefined);
}
export declare class ExceededAmountSlippageTolerance extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6003;
    readonly code = 6003;
    readonly name = "ExceededAmountSlippageTolerance";
    readonly msg = "Exceeded amount slippage tolerance";
    constructor(logs?: string[] | undefined);
}
export declare class ExceededBinSlippageTolerance extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6004;
    readonly code = 6004;
    readonly name = "ExceededBinSlippageTolerance";
    readonly msg = "Exceeded bin slippage tolerance";
    constructor(logs?: string[] | undefined);
}
export declare class CompositionFactorFlawed extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6005;
    readonly code = 6005;
    readonly name = "CompositionFactorFlawed";
    readonly msg = "Composition factor flawed";
    constructor(logs?: string[] | undefined);
}
export declare class NonPresetBinStep extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6006;
    readonly code = 6006;
    readonly name = "NonPresetBinStep";
    readonly msg = "Non preset bin step";
    constructor(logs?: string[] | undefined);
}
export declare class ZeroLiquidity extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6007;
    readonly code = 6007;
    readonly name = "ZeroLiquidity";
    readonly msg = "Zero liquidity";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidPosition extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6008;
    readonly code = 6008;
    readonly name = "InvalidPosition";
    readonly msg = "Invalid position";
    constructor(logs?: string[] | undefined);
}
export declare class BinArrayNotFound extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6009;
    readonly code = 6009;
    readonly name = "BinArrayNotFound";
    readonly msg = "Bin array not found";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidTokenMint extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6010;
    readonly code = 6010;
    readonly name = "InvalidTokenMint";
    readonly msg = "Invalid token mint";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidAccountForSingleDeposit extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6011;
    readonly code = 6011;
    readonly name = "InvalidAccountForSingleDeposit";
    readonly msg = "Invalid account for single deposit";
    constructor(logs?: string[] | undefined);
}
export declare class PairInsufficientLiquidity extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6012;
    readonly code = 6012;
    readonly name = "PairInsufficientLiquidity";
    readonly msg = "Pair insufficient liquidity";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidFeeOwner extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6013;
    readonly code = 6013;
    readonly name = "InvalidFeeOwner";
    readonly msg = "Invalid fee owner";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidFeeWithdrawAmount extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6014;
    readonly code = 6014;
    readonly name = "InvalidFeeWithdrawAmount";
    readonly msg = "Invalid fee withdraw amount";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidAdmin extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6015;
    readonly code = 6015;
    readonly name = "InvalidAdmin";
    readonly msg = "Invalid admin";
    constructor(logs?: string[] | undefined);
}
export declare class IdenticalFeeOwner extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6016;
    readonly code = 6016;
    readonly name = "IdenticalFeeOwner";
    readonly msg = "Identical fee owner";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidBps extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6017;
    readonly code = 6017;
    readonly name = "InvalidBps";
    readonly msg = "Invalid basis point";
    constructor(logs?: string[] | undefined);
}
export declare class MathOverflow extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6018;
    readonly code = 6018;
    readonly name = "MathOverflow";
    readonly msg = "Math operation overflow";
    constructor(logs?: string[] | undefined);
}
export declare class TypeCastFailed extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6019;
    readonly code = 6019;
    readonly name = "TypeCastFailed";
    readonly msg = "Type cast error";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidRewardIndex extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6020;
    readonly code = 6020;
    readonly name = "InvalidRewardIndex";
    readonly msg = "Invalid reward index";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidRewardDuration extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6021;
    readonly code = 6021;
    readonly name = "InvalidRewardDuration";
    readonly msg = "Invalid reward duration";
    constructor(logs?: string[] | undefined);
}
export declare class RewardInitialized extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6022;
    readonly code = 6022;
    readonly name = "RewardInitialized";
    readonly msg = "Reward already initialized";
    constructor(logs?: string[] | undefined);
}
export declare class RewardUninitialized extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6023;
    readonly code = 6023;
    readonly name = "RewardUninitialized";
    readonly msg = "Reward not initialized";
    constructor(logs?: string[] | undefined);
}
export declare class IdenticalFunder extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6024;
    readonly code = 6024;
    readonly name = "IdenticalFunder";
    readonly msg = "Identical funder";
    constructor(logs?: string[] | undefined);
}
export declare class RewardCampaignInProgress extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6025;
    readonly code = 6025;
    readonly name = "RewardCampaignInProgress";
    readonly msg = "Reward campaign in progress";
    constructor(logs?: string[] | undefined);
}
export declare class IdenticalRewardDuration extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6026;
    readonly code = 6026;
    readonly name = "IdenticalRewardDuration";
    readonly msg = "Reward duration is the same";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidBinArray extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6027;
    readonly code = 6027;
    readonly name = "InvalidBinArray";
    readonly msg = "Invalid bin array";
    constructor(logs?: string[] | undefined);
}
export declare class NonContinuousBinArrays extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6028;
    readonly code = 6028;
    readonly name = "NonContinuousBinArrays";
    readonly msg = "Bin arrays must be continuous";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidRewardVault extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6029;
    readonly code = 6029;
    readonly name = "InvalidRewardVault";
    readonly msg = "Invalid reward vault";
    constructor(logs?: string[] | undefined);
}
export declare class NonEmptyPosition extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6030;
    readonly code = 6030;
    readonly name = "NonEmptyPosition";
    readonly msg = "Position is not empty";
    constructor(logs?: string[] | undefined);
}
export declare class UnauthorizedAccess extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6031;
    readonly code = 6031;
    readonly name = "UnauthorizedAccess";
    readonly msg = "Unauthorized access";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidFeeParameter extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6032;
    readonly code = 6032;
    readonly name = "InvalidFeeParameter";
    readonly msg = "Invalid fee parameter";
    constructor(logs?: string[] | undefined);
}
export declare class MissingOracle extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6033;
    readonly code = 6033;
    readonly name = "MissingOracle";
    readonly msg = "Missing oracle account";
    constructor(logs?: string[] | undefined);
}
export declare class InsufficientSample extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6034;
    readonly code = 6034;
    readonly name = "InsufficientSample";
    readonly msg = "Insufficient observation sample";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidLookupTimestamp extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6035;
    readonly code = 6035;
    readonly name = "InvalidLookupTimestamp";
    readonly msg = "Invalid lookup timestamp";
    constructor(logs?: string[] | undefined);
}
export declare class BitmapExtensionAccountIsNotProvided extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6036;
    readonly code = 6036;
    readonly name = "BitmapExtensionAccountIsNotProvided";
    readonly msg = "Bitmap extension account is not provided";
    constructor(logs?: string[] | undefined);
}
export declare class CannotFindNonZeroLiquidityBinArrayId extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6037;
    readonly code = 6037;
    readonly name = "CannotFindNonZeroLiquidityBinArrayId";
    readonly msg = "Cannot find non-zero liquidity binArrayId";
    constructor(logs?: string[] | undefined);
}
export declare class BinIdOutOfBound extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6038;
    readonly code = 6038;
    readonly name = "BinIdOutOfBound";
    readonly msg = "Bin id out of bound";
    constructor(logs?: string[] | undefined);
}
export declare class InsufficientOutAmount extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6039;
    readonly code = 6039;
    readonly name = "InsufficientOutAmount";
    readonly msg = "Insufficient amount in for minimum out";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidPositionWidth extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6040;
    readonly code = 6040;
    readonly name = "InvalidPositionWidth";
    readonly msg = "Invalid position width";
    constructor(logs?: string[] | undefined);
}
export declare class ExcessiveFeeUpdate extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6041;
    readonly code = 6041;
    readonly name = "ExcessiveFeeUpdate";
    readonly msg = "Excessive fee update";
    constructor(logs?: string[] | undefined);
}
export declare class PoolDisabled extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6042;
    readonly code = 6042;
    readonly name = "PoolDisabled";
    readonly msg = "Pool disabled";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidPoolType extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6043;
    readonly code = 6043;
    readonly name = "InvalidPoolType";
    readonly msg = "Invalid pool type";
    constructor(logs?: string[] | undefined);
}
export declare class ExceedMaxWhitelist extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6044;
    readonly code = 6044;
    readonly name = "ExceedMaxWhitelist";
    readonly msg = "Whitelist for wallet is full";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidIndex extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6045;
    readonly code = 6045;
    readonly name = "InvalidIndex";
    readonly msg = "Invalid index";
    constructor(logs?: string[] | undefined);
}
export declare class RewardNotEnded extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6046;
    readonly code = 6046;
    readonly name = "RewardNotEnded";
    readonly msg = "Reward not ended";
    constructor(logs?: string[] | undefined);
}
export declare class MustWithdrawnIneligibleReward extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6047;
    readonly code = 6047;
    readonly name = "MustWithdrawnIneligibleReward";
    readonly msg = "Must withdraw ineligible reward";
    constructor(logs?: string[] | undefined);
}
export declare class UnauthorizedAddress extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6048;
    readonly code = 6048;
    readonly name = "UnauthorizedAddress";
    readonly msg = "Unauthorized address";
    constructor(logs?: string[] | undefined);
}
export declare class OperatorsAreTheSame extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6049;
    readonly code = 6049;
    readonly name = "OperatorsAreTheSame";
    readonly msg = "Cannot update because operators are the same";
    constructor(logs?: string[] | undefined);
}
export declare class WithdrawToWrongTokenAccount extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6050;
    readonly code = 6050;
    readonly name = "WithdrawToWrongTokenAccount";
    readonly msg = "Withdraw to wrong token account";
    constructor(logs?: string[] | undefined);
}
export declare class WrongRentReceiver extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6051;
    readonly code = 6051;
    readonly name = "WrongRentReceiver";
    readonly msg = "Wrong rent receiver";
    constructor(logs?: string[] | undefined);
}
export declare class AlreadyPassActivationSlot extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6052;
    readonly code = 6052;
    readonly name = "AlreadyPassActivationSlot";
    readonly msg = "Already activated";
    constructor(logs?: string[] | undefined);
}
export declare class LastSlotCannotBeSmallerThanActivateSlot extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6053;
    readonly code = 6053;
    readonly name = "LastSlotCannotBeSmallerThanActivateSlot";
    readonly msg = "Last slot cannot be smaller than activate slot";
    constructor(logs?: string[] | undefined);
}
export declare class ExceedMaxSwappedAmount extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6054;
    readonly code = 6054;
    readonly name = "ExceedMaxSwappedAmount";
    readonly msg = "Swapped amount is exceeded max swapped amount";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidStrategyParameters extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6055;
    readonly code = 6055;
    readonly name = "InvalidStrategyParameters";
    readonly msg = "Invalid strategy parameters";
    constructor(logs?: string[] | undefined);
}
export declare class LiquidityLocked extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6056;
    readonly code = 6056;
    readonly name = "LiquidityLocked";
    readonly msg = "Liquidity locked";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidLockReleaseSlot extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6057;
    readonly code = 6057;
    readonly name = "InvalidLockReleaseSlot";
    readonly msg = "Invalid lock release slot";
    constructor(logs?: string[] | undefined);
}
export declare class BinRangeIsNotEmpty extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6058;
    readonly code = 6058;
    readonly name = "BinRangeIsNotEmpty";
    readonly msg = "Bin range is not empty";
    constructor(logs?: string[] | undefined);
}
export declare function fromCode(code: number, logs?: string[]): CustomError | null;
//# sourceMappingURL=custom.d.ts.map