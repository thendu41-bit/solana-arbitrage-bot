"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.PresetParameter = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
const kit_1 = require("@solana/kit");
const borsh = __importStar(require("@coral-xyz/borsh")); // eslint-disable-line @typescript-eslint/no-unused-vars
const programId_1 = require("../programId");
class PresetParameter {
    /** Bin step. Represent the price increment / decrement. */
    binStep;
    /** Used for base fee calculation. base_fee_rate = base_factor * bin_step */
    baseFactor;
    /** Filter period determine high frequency trading time window. */
    filterPeriod;
    /** Decay period determine when the volatile fee start decay / decrease. */
    decayPeriod;
    /** Reduction factor controls the volatile fee rate decrement rate. */
    reductionFactor;
    /** Used to scale the variable fee component depending on the dynamic of the market */
    variableFeeControl;
    /** Maximum number of bin crossed can be accumulated. Used to cap volatile fee rate. */
    maxVolatilityAccumulator;
    /** Min bin id supported by the pool based on the configured bin step. */
    minBinId;
    /** Max bin id supported by the pool based on the configured bin step. */
    maxBinId;
    /** Portion of swap fees retained by the protocol by controlling protocol_share parameter. protocol_swap_fee = protocol_share * total_swap_fee */
    protocolShare;
    static discriminator = Buffer.from([
        242, 62, 244, 34, 181, 112, 58, 170,
    ]);
    static layout = borsh.struct([
        borsh.u16("binStep"),
        borsh.u16("baseFactor"),
        borsh.u16("filterPeriod"),
        borsh.u16("decayPeriod"),
        borsh.u16("reductionFactor"),
        borsh.u32("variableFeeControl"),
        borsh.u32("maxVolatilityAccumulator"),
        borsh.i32("minBinId"),
        borsh.i32("maxBinId"),
        borsh.u16("protocolShare"),
    ]);
    constructor(fields) {
        this.binStep = fields.binStep;
        this.baseFactor = fields.baseFactor;
        this.filterPeriod = fields.filterPeriod;
        this.decayPeriod = fields.decayPeriod;
        this.reductionFactor = fields.reductionFactor;
        this.variableFeeControl = fields.variableFeeControl;
        this.maxVolatilityAccumulator = fields.maxVolatilityAccumulator;
        this.minBinId = fields.minBinId;
        this.maxBinId = fields.maxBinId;
        this.protocolShare = fields.protocolShare;
    }
    static async fetch(rpc, address, programId = programId_1.PROGRAM_ID) {
        const info = await (0, kit_1.fetchEncodedAccount)(rpc, address);
        if (!info.exists) {
            return null;
        }
        if (info.programAddress !== programId) {
            throw new Error(`PresetParameterFields account ${address} belongs to wrong program ${info.programAddress}, expected ${programId}`);
        }
        return this.decode(Buffer.from(info.data));
    }
    static async fetchMultiple(rpc, addresses, programId = programId_1.PROGRAM_ID) {
        const infos = await (0, kit_1.fetchEncodedAccounts)(rpc, addresses);
        return infos.map((info) => {
            if (!info.exists) {
                return null;
            }
            if (info.programAddress !== programId) {
                throw new Error(`PresetParameterFields account ${info.address} belongs to wrong program ${info.programAddress}, expected ${programId}`);
            }
            return this.decode(Buffer.from(info.data));
        });
    }
    static decode(data) {
        if (!data.slice(0, 8).equals(PresetParameter.discriminator)) {
            throw new Error("invalid account discriminator");
        }
        const dec = PresetParameter.layout.decode(data.slice(8));
        return new PresetParameter({
            binStep: dec.binStep,
            baseFactor: dec.baseFactor,
            filterPeriod: dec.filterPeriod,
            decayPeriod: dec.decayPeriod,
            reductionFactor: dec.reductionFactor,
            variableFeeControl: dec.variableFeeControl,
            maxVolatilityAccumulator: dec.maxVolatilityAccumulator,
            minBinId: dec.minBinId,
            maxBinId: dec.maxBinId,
            protocolShare: dec.protocolShare,
        });
    }
    toJSON() {
        return {
            binStep: this.binStep,
            baseFactor: this.baseFactor,
            filterPeriod: this.filterPeriod,
            decayPeriod: this.decayPeriod,
            reductionFactor: this.reductionFactor,
            variableFeeControl: this.variableFeeControl,
            maxVolatilityAccumulator: this.maxVolatilityAccumulator,
            minBinId: this.minBinId,
            maxBinId: this.maxBinId,
            protocolShare: this.protocolShare,
        };
    }
    static fromJSON(obj) {
        return new PresetParameter({
            binStep: obj.binStep,
            baseFactor: obj.baseFactor,
            filterPeriod: obj.filterPeriod,
            decayPeriod: obj.decayPeriod,
            reductionFactor: obj.reductionFactor,
            variableFeeControl: obj.variableFeeControl,
            maxVolatilityAccumulator: obj.maxVolatilityAccumulator,
            minBinId: obj.minBinId,
            maxBinId: obj.maxBinId,
            protocolShare: obj.protocolShare,
        });
    }
}
exports.PresetParameter = PresetParameter;
//# sourceMappingURL=PresetParameter.js.map