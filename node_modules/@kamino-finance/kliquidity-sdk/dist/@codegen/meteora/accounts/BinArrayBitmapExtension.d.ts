import { Address, GetAccountInfoApi, GetMultipleAccountsApi, Rpc } from "@solana/kit";
import BN from "bn.js";
export interface BinArrayBitmapExtensionFields {
    lbPair: Address;
    /** Packed initialized bin array state for start_bin_index is positive */
    positiveBinArrayBitmap: Array<Array<BN>>;
    /** Packed initialized bin array state for start_bin_index is negative */
    negativeBinArrayBitmap: Array<Array<BN>>;
}
export interface BinArrayBitmapExtensionJSON {
    lbPair: string;
    /** Packed initialized bin array state for start_bin_index is positive */
    positiveBinArrayBitmap: Array<Array<string>>;
    /** Packed initialized bin array state for start_bin_index is negative */
    negativeBinArrayBitmap: Array<Array<string>>;
}
export declare class BinArrayBitmapExtension {
    readonly lbPair: Address;
    /** Packed initialized bin array state for start_bin_index is positive */
    readonly positiveBinArrayBitmap: Array<Array<BN>>;
    /** Packed initialized bin array state for start_bin_index is negative */
    readonly negativeBinArrayBitmap: Array<Array<BN>>;
    static readonly discriminator: Buffer<ArrayBuffer>;
    static readonly layout: import("buffer-layout").Layout<BinArrayBitmapExtension>;
    constructor(fields: BinArrayBitmapExtensionFields);
    static fetch(rpc: Rpc<GetAccountInfoApi>, address: Address, programId?: Address): Promise<BinArrayBitmapExtension | null>;
    static fetchMultiple(rpc: Rpc<GetMultipleAccountsApi>, addresses: Address[], programId?: Address): Promise<Array<BinArrayBitmapExtension | null>>;
    static decode(data: Buffer): BinArrayBitmapExtension;
    toJSON(): BinArrayBitmapExtensionJSON;
    static fromJSON(obj: BinArrayBitmapExtensionJSON): BinArrayBitmapExtension;
}
//# sourceMappingURL=BinArrayBitmapExtension.d.ts.map