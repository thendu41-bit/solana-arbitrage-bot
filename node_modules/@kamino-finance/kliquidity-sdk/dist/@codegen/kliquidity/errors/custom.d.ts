export type CustomError = IntegerOverflow | OperationForbidden | ZeroAmount | UnableToDeserializeAccount | VaultBalanceDoesNotMatchTokenA | VaultBalanceDoesNotMatchTokenB | SharesIssuedAmountDoesNotMatch | GlobalConfigKeyError | SystemInEmergencyMode | GlobalDepositBlocked | GlobalWithdrawBlocked | GlobalInvestBlocked | OutOfRangeIntegralConversion | MathOverflow | TooMuchLiquidityToWithdraw | DepositAmountsZero | SharesZero | StrategyNotActive | UnharvestedAmounts | InvalidRewardMapping | InvalidRewardIndex | OwnRewardUninitialized | PriceNotValid | SwapRewardImbalanced | SwapRewardTooSmall | SwapRewardLessThanRequested | SwapRewardLessThanMinimum | WrongDiscriminator | WrongMint | WrongVault | SwapAmountsZero | PriceTooOld | CannotInvestZeroAmount | MaxInvestableZero | CollectFeesBlocked | CollectRewardsBlocked | SwapRewardsBlocked | WrongRewardCollateralID | InvalidPositionAccount | CouldNotDeserializeScope | WrongCollateralID | CollateralTokensExceedDepositCap | SwapUnevenVaultsBlocked | VaultsAreAlreadyBalanced | CannotSwapUnevenOutOfRange | DivideByZero | DeltaATooLarge | DeltaBTooLarge | CannotExecutiveWithdrawZeroAmount | CannotWithdrawZeroAmount | CannotCollectFeesOnZeroLiquidityPosition | StrategyNotActiveWhenDepositing | StrategyNotActiveWhenOpeningPosition | CollateralTokensExceedDepositCapPerIxn | CannotDepositOutOfRange | CannotInvestOutOfRange | WithdrawalCapReached | TimestampDecrease | CPINotAllowed | OrcaPriceTooDifferentFromScope | LowerTickLargerThanUpperTick | LowerTickTooLow | UpperTickTooLarge | LowerTickNotMultipleOfTickSpacing | UpperTickNotMultipleOfTickSpacing | CannotChangeAdminAuthority | CannotResizeAccount | ScopeChainUpdateFailed | PriceTooDivergentFromTwap | ExistingRewardOverride | WrongKaminoRewardId | KaminoRewardNotExist | KaminoRewardAlreadyExists | KaminoCollateralNotValid | KaminoRewardExceedsAvailableAmount | SwapUnevenVaultsOvershoot | BpsNotInRange | EmergencySwapBlocked | StrategyNotFrozen | UnexpectedTokenAmountsPostSwap | AccountNotBelongToDEX | WrongDEXProgramID | OrcaRewardUninitialized | InvalidAdminAuthority | PriceIsBiggerThanHeuristic | PriceIsLowerThanHeuristic | AccountDifferentThanExpected | SwapAmountsTooSmall | InvalidDexProgramId | StrategyDepositBlocked | StrategyInvestBlocked | StrategyWithdrawBlocked | WrongSwapVaultDirection | SwapVaultsTooBig | SwapVaultsCashOutputBelowMinimum | FlashIxsNotEnded | FlashTxWithUnexpectedIxs | FlashIxsAccountMismatch | FlashIxsIncludeScope | FlashVaultSwapBlocked | FlashVaultSwapWrongAmountToLeave | DepositLessThanMinimum | DepositWithoutInvestDisallowed | InvalidScopeChain | InvalidScopeTWAPChain | PositionHasRemainingLiquidity | PoolRebalancing | PermissionlessRebalancingDisabled | ManualRebalanceInvalidOwner | InvalidRebalanceType | NoRebalanceNecessary | TickArraysDoNotMatchRebalance | StrategyPositionNotValid | CouldNotDeserializeRebalanceState | CouldNotSerializeRebalanceState | CouldNotDeserializeRebalanceParams | NotEnoughTokensForRatio | AmountsRepresentZeroShares | MaxLossExceeded | RewardNotStrategyToken | DecimalToU64ConversionFailed | DecimalOperationFailed | VaultBalancesCausesWrongSharesIssuance | TokenDisabled | InvalidReferencePriceType | TokenToSwapNotEnough | TokenAccountBalanceMismatch | UnexpectedProgramIdForPrerequisiteIx | ComputeFeesAndRewardsUpdateError | SharesNotZero | InvalidScopeStakingRateChain | StakingRateNotValid | DecimalToU128ConversionFailed | DecimalNegativeSqrtRoot | DriftingOppositeDirection | WrongRewardCollateralId | CollateralInfoAlreadyExists | InvestTooEarly | SwapUnevenTooEarly | FlashSwapTooEarly | RebalancesCapReached | SwapUnevenInvalidAuthority | InvalidTick | MeteoraMathOverflow | StrategyTickArrayNotValid | WrongEventAuthority | StrategyFieldUpdateNotAllowed | UnsupportedDex | InvalidBPSValue | RewardVaultOverrideNotAllowed | ComputeFeesAndRewardsInvalidReward | EmptyTreasury | ChangingPoolRewardMintMismatch | ProvidedRewardVaultMismatch | RepeatedMint | UnsupportedTokenExtension | UnsupportedDexForToken22;
export declare class IntegerOverflow extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6000;
    readonly code = 6000;
    readonly name = "IntegerOverflow";
    readonly msg = "Integer overflow";
    constructor(logs?: string[] | undefined);
}
export declare class OperationForbidden extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6001;
    readonly code = 6001;
    readonly name = "OperationForbidden";
    readonly msg = "Operation Forbidden";
    constructor(logs?: string[] | undefined);
}
export declare class ZeroAmount extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6002;
    readonly code = 6002;
    readonly name = "ZeroAmount";
    readonly msg = "[DEPRECATED] Zero amount";
    constructor(logs?: string[] | undefined);
}
export declare class UnableToDeserializeAccount extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6003;
    readonly code = 6003;
    readonly name = "UnableToDeserializeAccount";
    readonly msg = "Unable to deserialize account";
    constructor(logs?: string[] | undefined);
}
export declare class VaultBalanceDoesNotMatchTokenA extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6004;
    readonly code = 6004;
    readonly name = "VaultBalanceDoesNotMatchTokenA";
    readonly msg = "[DEPRECATED] Vault balance does not match for token A";
    constructor(logs?: string[] | undefined);
}
export declare class VaultBalanceDoesNotMatchTokenB extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6005;
    readonly code = 6005;
    readonly name = "VaultBalanceDoesNotMatchTokenB";
    readonly msg = "[DEPRECATED] Vault balance does not match for token B";
    constructor(logs?: string[] | undefined);
}
export declare class SharesIssuedAmountDoesNotMatch extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6006;
    readonly code = 6006;
    readonly name = "SharesIssuedAmountDoesNotMatch";
    readonly msg = "[DEPRECATED] Shares issued amount does not match";
    constructor(logs?: string[] | undefined);
}
export declare class GlobalConfigKeyError extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6007;
    readonly code = 6007;
    readonly name = "GlobalConfigKeyError";
    readonly msg = "Key is not present in global config";
    constructor(logs?: string[] | undefined);
}
export declare class SystemInEmergencyMode extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6008;
    readonly code = 6008;
    readonly name = "SystemInEmergencyMode";
    readonly msg = "[DEPRECATED] System is in emergency mode";
    constructor(logs?: string[] | undefined);
}
export declare class GlobalDepositBlocked extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6009;
    readonly code = 6009;
    readonly name = "GlobalDepositBlocked";
    readonly msg = "Global deposit is currently blocked";
    constructor(logs?: string[] | undefined);
}
export declare class GlobalWithdrawBlocked extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6010;
    readonly code = 6010;
    readonly name = "GlobalWithdrawBlocked";
    readonly msg = "Global withdraw is currently blocked";
    constructor(logs?: string[] | undefined);
}
export declare class GlobalInvestBlocked extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6011;
    readonly code = 6011;
    readonly name = "GlobalInvestBlocked";
    readonly msg = "Global invest is currently blocked";
    constructor(logs?: string[] | undefined);
}
export declare class OutOfRangeIntegralConversion extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6012;
    readonly code = 6012;
    readonly name = "OutOfRangeIntegralConversion";
    readonly msg = "Out of range integral conversion attempted";
    constructor(logs?: string[] | undefined);
}
export declare class MathOverflow extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6013;
    readonly code = 6013;
    readonly name = "MathOverflow";
    readonly msg = "[DEPRECATED] Mathematical operation with overflow";
    constructor(logs?: string[] | undefined);
}
export declare class TooMuchLiquidityToWithdraw extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6014;
    readonly code = 6014;
    readonly name = "TooMuchLiquidityToWithdraw";
    readonly msg = "Unable to withdraw more liquidity than available in position";
    constructor(logs?: string[] | undefined);
}
export declare class DepositAmountsZero extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6015;
    readonly code = 6015;
    readonly name = "DepositAmountsZero";
    readonly msg = "Deposit amounts must be greater than zero";
    constructor(logs?: string[] | undefined);
}
export declare class SharesZero extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6016;
    readonly code = 6016;
    readonly name = "SharesZero";
    readonly msg = "Number of shares to withdraw must be greater than zero";
    constructor(logs?: string[] | undefined);
}
export declare class StrategyNotActive extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6017;
    readonly code = 6017;
    readonly name = "StrategyNotActive";
    readonly msg = "Strategy not active";
    constructor(logs?: string[] | undefined);
}
export declare class UnharvestedAmounts extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6018;
    readonly code = 6018;
    readonly name = "UnharvestedAmounts";
    readonly msg = "There are unharvested gains";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidRewardMapping extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6019;
    readonly code = 6019;
    readonly name = "InvalidRewardMapping";
    readonly msg = "Reward mapping incorrect";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidRewardIndex extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6020;
    readonly code = 6020;
    readonly name = "InvalidRewardIndex";
    readonly msg = "Reward index incorrect";
    constructor(logs?: string[] | undefined);
}
export declare class OwnRewardUninitialized extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6021;
    readonly code = 6021;
    readonly name = "OwnRewardUninitialized";
    readonly msg = "Cannot use uninitialized reward vault";
    constructor(logs?: string[] | undefined);
}
export declare class PriceNotValid extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6022;
    readonly code = 6022;
    readonly name = "PriceNotValid";
    readonly msg = "Price is not valid";
    constructor(logs?: string[] | undefined);
}
export declare class SwapRewardImbalanced extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6023;
    readonly code = 6023;
    readonly name = "SwapRewardImbalanced";
    readonly msg = "Must provide almost equal amounts of tokens";
    constructor(logs?: string[] | undefined);
}
export declare class SwapRewardTooSmall extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6024;
    readonly code = 6024;
    readonly name = "SwapRewardTooSmall";
    readonly msg = "Swap reward is zero or less than requested";
    constructor(logs?: string[] | undefined);
}
export declare class SwapRewardLessThanRequested extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6025;
    readonly code = 6025;
    readonly name = "SwapRewardLessThanRequested";
    readonly msg = "Swap reward is less than what user requested as minimum";
    constructor(logs?: string[] | undefined);
}
export declare class SwapRewardLessThanMinimum extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6026;
    readonly code = 6026;
    readonly name = "SwapRewardLessThanMinimum";
    readonly msg = "Swap reward is less than minimum acceptable";
    constructor(logs?: string[] | undefined);
}
export declare class WrongDiscriminator extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6027;
    readonly code = 6027;
    readonly name = "WrongDiscriminator";
    readonly msg = "Wrong discriminator";
    constructor(logs?: string[] | undefined);
}
export declare class WrongMint extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6028;
    readonly code = 6028;
    readonly name = "WrongMint";
    readonly msg = "Wrong mint";
    constructor(logs?: string[] | undefined);
}
export declare class WrongVault extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6029;
    readonly code = 6029;
    readonly name = "WrongVault";
    readonly msg = "Wrong vault";
    constructor(logs?: string[] | undefined);
}
export declare class SwapAmountsZero extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6030;
    readonly code = 6030;
    readonly name = "SwapAmountsZero";
    readonly msg = "Swap amounts must be greater than zero";
    constructor(logs?: string[] | undefined);
}
export declare class PriceTooOld extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6031;
    readonly code = 6031;
    readonly name = "PriceTooOld";
    readonly msg = "Price too old";
    constructor(logs?: string[] | undefined);
}
export declare class CannotInvestZeroAmount extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6032;
    readonly code = 6032;
    readonly name = "CannotInvestZeroAmount";
    readonly msg = "Cannot invest zero amount";
    constructor(logs?: string[] | undefined);
}
export declare class MaxInvestableZero extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6033;
    readonly code = 6033;
    readonly name = "MaxInvestableZero";
    readonly msg = "Cannot have zero investable amount";
    constructor(logs?: string[] | undefined);
}
export declare class CollectFeesBlocked extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6034;
    readonly code = 6034;
    readonly name = "CollectFeesBlocked";
    readonly msg = "Collect fees is blocked";
    constructor(logs?: string[] | undefined);
}
export declare class CollectRewardsBlocked extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6035;
    readonly code = 6035;
    readonly name = "CollectRewardsBlocked";
    readonly msg = "Collect rewards is blocked";
    constructor(logs?: string[] | undefined);
}
export declare class SwapRewardsBlocked extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6036;
    readonly code = 6036;
    readonly name = "SwapRewardsBlocked";
    readonly msg = "Swap rewards is blocked";
    constructor(logs?: string[] | undefined);
}
export declare class WrongRewardCollateralID extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6037;
    readonly code = 6037;
    readonly name = "WrongRewardCollateralID";
    readonly msg = "Reward collateral ID is incorrect for strategy";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidPositionAccount extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6038;
    readonly code = 6038;
    readonly name = "InvalidPositionAccount";
    readonly msg = "Position account doesn't match internal records";
    constructor(logs?: string[] | undefined);
}
export declare class CouldNotDeserializeScope extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6039;
    readonly code = 6039;
    readonly name = "CouldNotDeserializeScope";
    readonly msg = "Scope account could not be deserialized";
    constructor(logs?: string[] | undefined);
}
export declare class WrongCollateralID extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6040;
    readonly code = 6040;
    readonly name = "WrongCollateralID";
    readonly msg = "[DEPRECATED] Collateral ID invalid for strategy";
    constructor(logs?: string[] | undefined);
}
export declare class CollateralTokensExceedDepositCap extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6041;
    readonly code = 6041;
    readonly name = "CollateralTokensExceedDepositCap";
    readonly msg = "Collaterals exceed deposit cap";
    constructor(logs?: string[] | undefined);
}
export declare class SwapUnevenVaultsBlocked extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6042;
    readonly code = 6042;
    readonly name = "SwapUnevenVaultsBlocked";
    readonly msg = "Swap uneven vaults is blocked";
    constructor(logs?: string[] | undefined);
}
export declare class VaultsAreAlreadyBalanced extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6043;
    readonly code = 6043;
    readonly name = "VaultsAreAlreadyBalanced";
    readonly msg = "Cannot swap as vaults are already balanced";
    constructor(logs?: string[] | undefined);
}
export declare class CannotSwapUnevenOutOfRange extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6044;
    readonly code = 6044;
    readonly name = "CannotSwapUnevenOutOfRange";
    readonly msg = "Cannot swap uneven vaults when position is out of range";
    constructor(logs?: string[] | undefined);
}
export declare class DivideByZero extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6045;
    readonly code = 6045;
    readonly name = "DivideByZero";
    readonly msg = "Cannot divide by zero";
    constructor(logs?: string[] | undefined);
}
export declare class DeltaATooLarge extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6046;
    readonly code = 6046;
    readonly name = "DeltaATooLarge";
    readonly msg = "[DEPRECATED] Delta A too large";
    constructor(logs?: string[] | undefined);
}
export declare class DeltaBTooLarge extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6047;
    readonly code = 6047;
    readonly name = "DeltaBTooLarge";
    readonly msg = "[DEPRECATED] Delta B too large";
    constructor(logs?: string[] | undefined);
}
export declare class CannotExecutiveWithdrawZeroAmount extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6048;
    readonly code = 6048;
    readonly name = "CannotExecutiveWithdrawZeroAmount";
    readonly msg = "[DEPRECATED] Cannot executive withdraw zero amount";
    constructor(logs?: string[] | undefined);
}
export declare class CannotWithdrawZeroAmount extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6049;
    readonly code = 6049;
    readonly name = "CannotWithdrawZeroAmount";
    readonly msg = "Cannot withdraw zero amount";
    constructor(logs?: string[] | undefined);
}
export declare class CannotCollectFeesOnZeroLiquidityPosition extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6050;
    readonly code = 6050;
    readonly name = "CannotCollectFeesOnZeroLiquidityPosition";
    readonly msg = "[DEPRECATED] Cannot collect fees on zero liquidity position";
    constructor(logs?: string[] | undefined);
}
export declare class StrategyNotActiveWhenDepositing extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6051;
    readonly code = 6051;
    readonly name = "StrategyNotActiveWhenDepositing";
    readonly msg = "Cannot deposit inactive position";
    constructor(logs?: string[] | undefined);
}
export declare class StrategyNotActiveWhenOpeningPosition extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6052;
    readonly code = 6052;
    readonly name = "StrategyNotActiveWhenOpeningPosition";
    readonly msg = "Cannot open position with existing opened position";
    constructor(logs?: string[] | undefined);
}
export declare class CollateralTokensExceedDepositCapPerIxn extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6053;
    readonly code = 6053;
    readonly name = "CollateralTokensExceedDepositCapPerIxn";
    readonly msg = "Collaterals exceed deposit ixn cap";
    constructor(logs?: string[] | undefined);
}
export declare class CannotDepositOutOfRange extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6054;
    readonly code = 6054;
    readonly name = "CannotDepositOutOfRange";
    readonly msg = "Cannot deposit when strategy out of range";
    constructor(logs?: string[] | undefined);
}
export declare class CannotInvestOutOfRange extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6055;
    readonly code = 6055;
    readonly name = "CannotInvestOutOfRange";
    readonly msg = "Cannot invest when strategy out of range";
    constructor(logs?: string[] | undefined);
}
export declare class WithdrawalCapReached extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6056;
    readonly code = 6056;
    readonly name = "WithdrawalCapReached";
    readonly msg = "Withdrawal cap is reached";
    constructor(logs?: string[] | undefined);
}
export declare class TimestampDecrease extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6057;
    readonly code = 6057;
    readonly name = "TimestampDecrease";
    readonly msg = "Timestamp decrease";
    constructor(logs?: string[] | undefined);
}
export declare class CPINotAllowed extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6058;
    readonly code = 6058;
    readonly name = "CPINotAllowed";
    readonly msg = "CPI not allowed";
    constructor(logs?: string[] | undefined);
}
export declare class OrcaPriceTooDifferentFromScope extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6059;
    readonly code = 6059;
    readonly name = "OrcaPriceTooDifferentFromScope";
    readonly msg = "Cannot use orca price as it is too different from scope price";
    constructor(logs?: string[] | undefined);
}
export declare class LowerTickLargerThanUpperTick extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6060;
    readonly code = 6060;
    readonly name = "LowerTickLargerThanUpperTick";
    readonly msg = "Lower tick larger than upper tick";
    constructor(logs?: string[] | undefined);
}
export declare class LowerTickTooLow extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6061;
    readonly code = 6061;
    readonly name = "LowerTickTooLow";
    readonly msg = "Lower tick is lower than the minimal supported low tick";
    constructor(logs?: string[] | undefined);
}
export declare class UpperTickTooLarge extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6062;
    readonly code = 6062;
    readonly name = "UpperTickTooLarge";
    readonly msg = "Upper tick is larger than the maximum supported tick";
    constructor(logs?: string[] | undefined);
}
export declare class LowerTickNotMultipleOfTickSpacing extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6063;
    readonly code = 6063;
    readonly name = "LowerTickNotMultipleOfTickSpacing";
    readonly msg = "Lower tick is not a multiple of tick spacing";
    constructor(logs?: string[] | undefined);
}
export declare class UpperTickNotMultipleOfTickSpacing extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6064;
    readonly code = 6064;
    readonly name = "UpperTickNotMultipleOfTickSpacing";
    readonly msg = "Upper tick is not a multiple of tick spacing";
    constructor(logs?: string[] | undefined);
}
export declare class CannotChangeAdminAuthority extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6065;
    readonly code = 6065;
    readonly name = "CannotChangeAdminAuthority";
    readonly msg = "Cannot change admin authority";
    constructor(logs?: string[] | undefined);
}
export declare class CannotResizeAccount extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6066;
    readonly code = 6066;
    readonly name = "CannotResizeAccount";
    readonly msg = "Cannot resize with smaller new size";
    constructor(logs?: string[] | undefined);
}
export declare class ScopeChainUpdateFailed extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6067;
    readonly code = 6067;
    readonly name = "ScopeChainUpdateFailed";
    readonly msg = "Scope chain update failed";
    constructor(logs?: string[] | undefined);
}
export declare class PriceTooDivergentFromTwap extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6068;
    readonly code = 6068;
    readonly name = "PriceTooDivergentFromTwap";
    readonly msg = "Price too divergent from twap";
    constructor(logs?: string[] | undefined);
}
export declare class ExistingRewardOverride extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6069;
    readonly code = 6069;
    readonly name = "ExistingRewardOverride";
    readonly msg = "[DEPRECATED] Can not override the existing reward";
    constructor(logs?: string[] | undefined);
}
export declare class WrongKaminoRewardId extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6070;
    readonly code = 6070;
    readonly name = "WrongKaminoRewardId";
    readonly msg = "Kamino reward id exceeds the available slots";
    constructor(logs?: string[] | undefined);
}
export declare class KaminoRewardNotExist extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6071;
    readonly code = 6071;
    readonly name = "KaminoRewardNotExist";
    readonly msg = "Kamino reward is not initialized";
    constructor(logs?: string[] | undefined);
}
export declare class KaminoRewardAlreadyExists extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6072;
    readonly code = 6072;
    readonly name = "KaminoRewardAlreadyExists";
    readonly msg = "Kamino reward is already initialized";
    constructor(logs?: string[] | undefined);
}
export declare class KaminoCollateralNotValid extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6073;
    readonly code = 6073;
    readonly name = "KaminoCollateralNotValid";
    readonly msg = "Kamino collateral is not valid";
    constructor(logs?: string[] | undefined);
}
export declare class KaminoRewardExceedsAvailableAmount extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6074;
    readonly code = 6074;
    readonly name = "KaminoRewardExceedsAvailableAmount";
    readonly msg = "[DEPRECATED] Expected kamino reward is bigger then the available amount within the vault";
    constructor(logs?: string[] | undefined);
}
export declare class SwapUnevenVaultsOvershoot extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6075;
    readonly code = 6075;
    readonly name = "SwapUnevenVaultsOvershoot";
    readonly msg = "Swap uneven vaults result in the opposite unbalance of the vaults";
    constructor(logs?: string[] | undefined);
}
export declare class BpsNotInRange extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6076;
    readonly code = 6076;
    readonly name = "BpsNotInRange";
    readonly msg = "Bps parameter passed to instruction is not in range";
    constructor(logs?: string[] | undefined);
}
export declare class EmergencySwapBlocked extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6077;
    readonly code = 6077;
    readonly name = "EmergencySwapBlocked";
    readonly msg = "Emergency Swap is blocked";
    constructor(logs?: string[] | undefined);
}
export declare class StrategyNotFrozen extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6078;
    readonly code = 6078;
    readonly name = "StrategyNotFrozen";
    readonly msg = "Strategy is expected to be frozen for this operation";
    constructor(logs?: string[] | undefined);
}
export declare class UnexpectedTokenAmountsPostSwap extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6079;
    readonly code = 6079;
    readonly name = "UnexpectedTokenAmountsPostSwap";
    readonly msg = "Token left in vault post swap are lower than expected";
    constructor(logs?: string[] | undefined);
}
export declare class AccountNotBelongToDEX extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6080;
    readonly code = 6080;
    readonly name = "AccountNotBelongToDEX";
    readonly msg = "Account doesn't belong to the DEX";
    constructor(logs?: string[] | undefined);
}
export declare class WrongDEXProgramID extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6081;
    readonly code = 6081;
    readonly name = "WrongDEXProgramID";
    readonly msg = "Wrong DEX program ID";
    constructor(logs?: string[] | undefined);
}
export declare class OrcaRewardUninitialized extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6082;
    readonly code = 6082;
    readonly name = "OrcaRewardUninitialized";
    readonly msg = "Cannot use uninitialized orca reward vault";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidAdminAuthority extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6083;
    readonly code = 6083;
    readonly name = "InvalidAdminAuthority";
    readonly msg = "Invalid admin authority";
    constructor(logs?: string[] | undefined);
}
export declare class PriceIsBiggerThanHeuristic extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6084;
    readonly code = 6084;
    readonly name = "PriceIsBiggerThanHeuristic";
    readonly msg = "Token price is bigger than heuristic";
    constructor(logs?: string[] | undefined);
}
export declare class PriceIsLowerThanHeuristic extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6085;
    readonly code = 6085;
    readonly name = "PriceIsLowerThanHeuristic";
    readonly msg = "Token price is lower than heuristic";
    constructor(logs?: string[] | undefined);
}
export declare class AccountDifferentThanExpected extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6086;
    readonly code = 6086;
    readonly name = "AccountDifferentThanExpected";
    readonly msg = "Account different than expected";
    constructor(logs?: string[] | undefined);
}
export declare class SwapAmountsTooSmall extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6087;
    readonly code = 6087;
    readonly name = "SwapAmountsTooSmall";
    readonly msg = "Swap amount below the minimum value";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidDexProgramId extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6088;
    readonly code = 6088;
    readonly name = "InvalidDexProgramId";
    readonly msg = "Invalid dex program id";
    constructor(logs?: string[] | undefined);
}
export declare class StrategyDepositBlocked extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6089;
    readonly code = 6089;
    readonly name = "StrategyDepositBlocked";
    readonly msg = "Strategy deposit is currently blocked";
    constructor(logs?: string[] | undefined);
}
export declare class StrategyInvestBlocked extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6090;
    readonly code = 6090;
    readonly name = "StrategyInvestBlocked";
    readonly msg = "Strategy invest is currently blocked";
    constructor(logs?: string[] | undefined);
}
export declare class StrategyWithdrawBlocked extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6091;
    readonly code = 6091;
    readonly name = "StrategyWithdrawBlocked";
    readonly msg = "Strategy withdraw is currently blocked";
    constructor(logs?: string[] | undefined);
}
export declare class WrongSwapVaultDirection extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6092;
    readonly code = 6092;
    readonly name = "WrongSwapVaultDirection";
    readonly msg = "Vault swap can't be performed in the required direction";
    constructor(logs?: string[] | undefined);
}
export declare class SwapVaultsTooBig extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6093;
    readonly code = 6093;
    readonly name = "SwapVaultsTooBig";
    readonly msg = "Provided amount for vault swap is over the limit";
    constructor(logs?: string[] | undefined);
}
export declare class SwapVaultsCashOutputBelowMinimum extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6094;
    readonly code = 6094;
    readonly name = "SwapVaultsCashOutputBelowMinimum";
    readonly msg = "Token out for cash based vault swap is below minimum expected";
    constructor(logs?: string[] | undefined);
}
export declare class FlashIxsNotEnded extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6095;
    readonly code = 6095;
    readonly name = "FlashIxsNotEnded";
    readonly msg = "Flash ixs initiated without the closing ix in the transaction";
    constructor(logs?: string[] | undefined);
}
export declare class FlashTxWithUnexpectedIxs extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6096;
    readonly code = 6096;
    readonly name = "FlashTxWithUnexpectedIxs";
    readonly msg = "Some unexpected instructions are present in the tx. Either before or after the flash ixs, or some ix target the same program between";
    constructor(logs?: string[] | undefined);
}
export declare class FlashIxsAccountMismatch extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6097;
    readonly code = 6097;
    readonly name = "FlashIxsAccountMismatch";
    readonly msg = "Some accounts differ between the two flash ixs";
    constructor(logs?: string[] | undefined);
}
export declare class FlashIxsIncludeScope extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6098;
    readonly code = 6098;
    readonly name = "FlashIxsIncludeScope";
    readonly msg = "A scope ix is present in a flash tx";
    constructor(logs?: string[] | undefined);
}
export declare class FlashVaultSwapBlocked extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6099;
    readonly code = 6099;
    readonly name = "FlashVaultSwapBlocked";
    readonly msg = "Flash vault swap is blocked on this strategy";
    constructor(logs?: string[] | undefined);
}
export declare class FlashVaultSwapWrongAmountToLeave extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6100;
    readonly code = 6100;
    readonly name = "FlashVaultSwapWrongAmountToLeave";
    readonly msg = "Unexpected amount of tokens in ata prior flash vault swap (wrong amount_to_leave_to_user)";
    constructor(logs?: string[] | undefined);
}
export declare class DepositLessThanMinimum extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6101;
    readonly code = 6101;
    readonly name = "DepositLessThanMinimum";
    readonly msg = "Deposit amount less than minimal allowed";
    constructor(logs?: string[] | undefined);
}
export declare class DepositWithoutInvestDisallowed extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6102;
    readonly code = 6102;
    readonly name = "DepositWithoutInvestDisallowed";
    readonly msg = "Cannot deposit without invest";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidScopeChain extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6103;
    readonly code = 6103;
    readonly name = "InvalidScopeChain";
    readonly msg = "Invalid Scope Chain";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidScopeTWAPChain extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6104;
    readonly code = 6104;
    readonly name = "InvalidScopeTWAPChain";
    readonly msg = "Invalid Scope TWAP Chain";
    constructor(logs?: string[] | undefined);
}
export declare class PositionHasRemainingLiquidity extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6105;
    readonly code = 6105;
    readonly name = "PositionHasRemainingLiquidity";
    readonly msg = "Existent position has liquidity, new position creation is forbidden";
    constructor(logs?: string[] | undefined);
}
export declare class PoolRebalancing extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6106;
    readonly code = 6106;
    readonly name = "PoolRebalancing";
    readonly msg = "Deposit is not allowed as pool is rebalancing";
    constructor(logs?: string[] | undefined);
}
export declare class PermissionlessRebalancingDisabled extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6107;
    readonly code = 6107;
    readonly name = "PermissionlessRebalancingDisabled";
    readonly msg = "Permissionless rebalancing is disabled";
    constructor(logs?: string[] | undefined);
}
export declare class ManualRebalanceInvalidOwner extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6108;
    readonly code = 6108;
    readonly name = "ManualRebalanceInvalidOwner";
    readonly msg = "Only the owner of the strategy can manually rebalance it";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidRebalanceType extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6109;
    readonly code = 6109;
    readonly name = "InvalidRebalanceType";
    readonly msg = "Invalid rebalance type for the strategy";
    constructor(logs?: string[] | undefined);
}
export declare class NoRebalanceNecessary extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6110;
    readonly code = 6110;
    readonly name = "NoRebalanceNecessary";
    readonly msg = "No rebalance necessary based on current rebalance type/parameters";
    constructor(logs?: string[] | undefined);
}
export declare class TickArraysDoNotMatchRebalance extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6111;
    readonly code = 6111;
    readonly name = "TickArraysDoNotMatchRebalance";
    readonly msg = "The given tick arrays do not match the rebalance result";
    constructor(logs?: string[] | undefined);
}
export declare class StrategyPositionNotValid extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6112;
    readonly code = 6112;
    readonly name = "StrategyPositionNotValid";
    readonly msg = "Expected strategy position to be initialized";
    constructor(logs?: string[] | undefined);
}
export declare class CouldNotDeserializeRebalanceState extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6113;
    readonly code = 6113;
    readonly name = "CouldNotDeserializeRebalanceState";
    readonly msg = "Rebalance state could not be deserialized";
    constructor(logs?: string[] | undefined);
}
export declare class CouldNotSerializeRebalanceState extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6114;
    readonly code = 6114;
    readonly name = "CouldNotSerializeRebalanceState";
    readonly msg = "Rebalance state could not be serialized";
    constructor(logs?: string[] | undefined);
}
export declare class CouldNotDeserializeRebalanceParams extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6115;
    readonly code = 6115;
    readonly name = "CouldNotDeserializeRebalanceParams";
    readonly msg = "Rebalance params could not be deserialized";
    constructor(logs?: string[] | undefined);
}
export declare class NotEnoughTokensForRatio extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6116;
    readonly code = 6116;
    readonly name = "NotEnoughTokensForRatio";
    readonly msg = "Deposit is not allowed as token amounts are not enough to match our holdings ratio";
    constructor(logs?: string[] | undefined);
}
export declare class AmountsRepresentZeroShares extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6117;
    readonly code = 6117;
    readonly name = "AmountsRepresentZeroShares";
    readonly msg = "The provided amounts are too small";
    constructor(logs?: string[] | undefined);
}
export declare class MaxLossExceeded extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6118;
    readonly code = 6118;
    readonly name = "MaxLossExceeded";
    readonly msg = "Rouding errors exceed the maximal loss tolerance";
    constructor(logs?: string[] | undefined);
}
export declare class RewardNotStrategyToken extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6119;
    readonly code = 6119;
    readonly name = "RewardNotStrategyToken";
    readonly msg = "Reward does not match strategy token";
    constructor(logs?: string[] | undefined);
}
export declare class DecimalToU64ConversionFailed extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6120;
    readonly code = 6120;
    readonly name = "DecimalToU64ConversionFailed";
    readonly msg = "Decimal to u64 conversion failed";
    constructor(logs?: string[] | undefined);
}
export declare class DecimalOperationFailed extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6121;
    readonly code = 6121;
    readonly name = "DecimalOperationFailed";
    readonly msg = "Decimal operation failed";
    constructor(logs?: string[] | undefined);
}
export declare class VaultBalancesCausesWrongSharesIssuance extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6122;
    readonly code = 6122;
    readonly name = "VaultBalancesCausesWrongSharesIssuance";
    readonly msg = "Deposit is not allowed as the strategy is not fully invested in the pool ";
    constructor(logs?: string[] | undefined);
}
export declare class TokenDisabled extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6123;
    readonly code = 6123;
    readonly name = "TokenDisabled";
    readonly msg = "Token cannot be used in strategy creation";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidReferencePriceType extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6124;
    readonly code = 6124;
    readonly name = "InvalidReferencePriceType";
    readonly msg = "Invalid reference price type";
    constructor(logs?: string[] | undefined);
}
export declare class TokenToSwapNotEnough extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6125;
    readonly code = 6125;
    readonly name = "TokenToSwapNotEnough";
    readonly msg = "Token amount to be swapped is not enough";
    constructor(logs?: string[] | undefined);
}
export declare class TokenAccountBalanceMismatch extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6126;
    readonly code = 6126;
    readonly name = "TokenAccountBalanceMismatch";
    readonly msg = "Token amount in ata is different than the expected amount";
    constructor(logs?: string[] | undefined);
}
export declare class UnexpectedProgramIdForPrerequisiteIx extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6127;
    readonly code = 6127;
    readonly name = "UnexpectedProgramIdForPrerequisiteIx";
    readonly msg = "Unexpected programID for prerequisite ix";
    constructor(logs?: string[] | undefined);
}
export declare class ComputeFeesAndRewardsUpdateError extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6128;
    readonly code = 6128;
    readonly name = "ComputeFeesAndRewardsUpdateError";
    readonly msg = "Got an error from the dex specific function while computing the fees/rewards update";
    constructor(logs?: string[] | undefined);
}
export declare class SharesNotZero extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6129;
    readonly code = 6129;
    readonly name = "SharesNotZero";
    readonly msg = "There must be no shares issued when closing a strategy";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidScopeStakingRateChain extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6130;
    readonly code = 6130;
    readonly name = "InvalidScopeStakingRateChain";
    readonly msg = "Invalid Scope staking rate Chain";
    constructor(logs?: string[] | undefined);
}
export declare class StakingRateNotValid extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6131;
    readonly code = 6131;
    readonly name = "StakingRateNotValid";
    readonly msg = "Staking rate (provided by Scope) is not valid";
    constructor(logs?: string[] | undefined);
}
export declare class DecimalToU128ConversionFailed extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6132;
    readonly code = 6132;
    readonly name = "DecimalToU128ConversionFailed";
    readonly msg = "Decimal to u128 conversion failed";
    constructor(logs?: string[] | undefined);
}
export declare class DecimalNegativeSqrtRoot extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6133;
    readonly code = 6133;
    readonly name = "DecimalNegativeSqrtRoot";
    readonly msg = "Decimal sqrt on negative number";
    constructor(logs?: string[] | undefined);
}
export declare class DriftingOppositeDirection extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6134;
    readonly code = 6134;
    readonly name = "DriftingOppositeDirection";
    readonly msg = "Drifting strategy is moving in the opposite direction";
    constructor(logs?: string[] | undefined);
}
export declare class WrongRewardCollateralId extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6135;
    readonly code = 6135;
    readonly name = "WrongRewardCollateralId";
    readonly msg = "Wrong reward collateral_id";
    constructor(logs?: string[] | undefined);
}
export declare class CollateralInfoAlreadyExists extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6136;
    readonly code = 6136;
    readonly name = "CollateralInfoAlreadyExists";
    readonly msg = "Collateral info already exists for given index";
    constructor(logs?: string[] | undefined);
}
export declare class InvestTooEarly extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6137;
    readonly code = 6137;
    readonly name = "InvestTooEarly";
    readonly msg = "Invest is too early after the position was opened";
    constructor(logs?: string[] | undefined);
}
export declare class SwapUnevenTooEarly extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6138;
    readonly code = 6138;
    readonly name = "SwapUnevenTooEarly";
    readonly msg = "Swap uneven is too early after the position was opened";
    constructor(logs?: string[] | undefined);
}
export declare class FlashSwapTooEarly extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6139;
    readonly code = 6139;
    readonly name = "FlashSwapTooEarly";
    readonly msg = "Flash swap is too early after the position was opened";
    constructor(logs?: string[] | undefined);
}
export declare class RebalancesCapReached extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6140;
    readonly code = 6140;
    readonly name = "RebalancesCapReached";
    readonly msg = "Rebalance caps reached, no rebalances are allowed until the end of the current interval";
    constructor(logs?: string[] | undefined);
}
export declare class SwapUnevenInvalidAuthority extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6141;
    readonly code = 6141;
    readonly name = "SwapUnevenInvalidAuthority";
    readonly msg = "Cannot swap uneven because authority is set and the given signer does not correspond";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidTick extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6142;
    readonly code = 6142;
    readonly name = "InvalidTick";
    readonly msg = "Invalid tick requested";
    constructor(logs?: string[] | undefined);
}
export declare class MeteoraMathOverflow extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6143;
    readonly code = 6143;
    readonly name = "MeteoraMathOverflow";
    readonly msg = "Meteora math overflowed";
    constructor(logs?: string[] | undefined);
}
export declare class StrategyTickArrayNotValid extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6144;
    readonly code = 6144;
    readonly name = "StrategyTickArrayNotValid";
    readonly msg = "Expected strategy tick arrays to be initialized";
    constructor(logs?: string[] | undefined);
}
export declare class WrongEventAuthority extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6145;
    readonly code = 6145;
    readonly name = "WrongEventAuthority";
    readonly msg = "Wrong event authority";
    constructor(logs?: string[] | undefined);
}
export declare class StrategyFieldUpdateNotAllowed extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6146;
    readonly code = 6146;
    readonly name = "StrategyFieldUpdateNotAllowed";
    readonly msg = "Strategy field update is not allowed";
    constructor(logs?: string[] | undefined);
}
export declare class UnsupportedDex extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6147;
    readonly code = 6147;
    readonly name = "UnsupportedDex";
    readonly msg = "DEX is not supported for this operation";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidBPSValue extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6148;
    readonly code = 6148;
    readonly name = "InvalidBPSValue";
    readonly msg = "Invalid BPS value provided";
    constructor(logs?: string[] | undefined);
}
export declare class RewardVaultOverrideNotAllowed extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6149;
    readonly code = 6149;
    readonly name = "RewardVaultOverrideNotAllowed";
    readonly msg = "Reward vault override not allowed";
    constructor(logs?: string[] | undefined);
}
export declare class ComputeFeesAndRewardsInvalidReward extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6150;
    readonly code = 6150;
    readonly name = "ComputeFeesAndRewardsInvalidReward";
    readonly msg = "Got invalid reward from the dex specific function while computing the fees/rewards update";
    constructor(logs?: string[] | undefined);
}
export declare class EmptyTreasury extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6151;
    readonly code = 6151;
    readonly name = "EmptyTreasury";
    readonly msg = "No tokens to withdraw from treasury fee vault";
    constructor(logs?: string[] | undefined);
}
export declare class ChangingPoolRewardMintMismatch extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6152;
    readonly code = 6152;
    readonly name = "ChangingPoolRewardMintMismatch";
    readonly msg = "New pool reward mint does not match the old pool reward mint";
    constructor(logs?: string[] | undefined);
}
export declare class ProvidedRewardVaultMismatch extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6153;
    readonly code = 6153;
    readonly name = "ProvidedRewardVaultMismatch";
    readonly msg = "The provided reward vault does not match the strategy state";
    constructor(logs?: string[] | undefined);
}
export declare class RepeatedMint extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6154;
    readonly code = 6154;
    readonly name = "RepeatedMint";
    readonly msg = "The provided reward vault does not match the strategy state";
    constructor(logs?: string[] | undefined);
}
export declare class UnsupportedTokenExtension extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6155;
    readonly code = 6155;
    readonly name = "UnsupportedTokenExtension";
    readonly msg = "The token extension is not supported by the program";
    constructor(logs?: string[] | undefined);
}
export declare class UnsupportedDexForToken22 extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6156;
    readonly code = 6156;
    readonly name = "UnsupportedDexForToken22";
    readonly msg = "Cannot initialize strategy with this dex while having a mint with token22";
    constructor(logs?: string[] | undefined);
}
export declare function fromCode(code: number, logs?: string[]): CustomError | null;
//# sourceMappingURL=custom.d.ts.map