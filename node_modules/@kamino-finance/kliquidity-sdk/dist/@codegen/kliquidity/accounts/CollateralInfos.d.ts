import { Address, GetAccountInfoApi, GetMultipleAccountsApi, Rpc } from "@solana/kit";
import * as types from "../types";
export interface CollateralInfosFields {
    infos: Array<types.CollateralInfoFields>;
}
export interface CollateralInfosJSON {
    infos: Array<types.CollateralInfoJSON>;
}
export declare class CollateralInfos {
    readonly infos: Array<types.CollateralInfo>;
    static readonly discriminator: Buffer<ArrayBuffer>;
    static readonly layout: import("buffer-layout").Layout<CollateralInfos>;
    constructor(fields: CollateralInfosFields);
    static fetch(rpc: Rpc<GetAccountInfoApi>, address: Address, programId?: Address): Promise<CollateralInfos | null>;
    static fetchMultiple(rpc: Rpc<GetMultipleAccountsApi>, addresses: Address[], programId?: Address): Promise<Array<CollateralInfos | null>>;
    static decode(data: Buffer): CollateralInfos;
    toJSON(): CollateralInfosJSON;
    static fromJSON(obj: CollateralInfosJSON): CollateralInfos;
}
//# sourceMappingURL=CollateralInfos.d.ts.map