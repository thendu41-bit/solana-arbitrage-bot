import { Address } from "@solana/kit";
import BN from "bn.js";
import * as types from "../types";
export interface CollateralInfoFields {
    mint: Address;
    lowerHeuristic: BN;
    upperHeuristic: BN;
    expHeuristic: BN;
    maxTwapDivergenceBps: BN;
    scopeTwapPriceChain: Array<number>;
    scopePriceChain: Array<number>;
    name: Array<number>;
    maxAgePriceSeconds: BN;
    maxAgeTwapSeconds: BN;
    maxIgnorableAmountAsReward: BN;
    disabled: number;
    padding0: Array<number>;
    scopeStakingRateChain: Array<number>;
    padding: Array<BN>;
}
export interface CollateralInfoJSON {
    mint: string;
    lowerHeuristic: string;
    upperHeuristic: string;
    expHeuristic: string;
    maxTwapDivergenceBps: string;
    scopeTwapPriceChain: Array<number>;
    scopePriceChain: Array<number>;
    name: Array<number>;
    maxAgePriceSeconds: string;
    maxAgeTwapSeconds: string;
    maxIgnorableAmountAsReward: string;
    disabled: number;
    padding0: Array<number>;
    scopeStakingRateChain: Array<number>;
    padding: Array<string>;
}
export declare class CollateralInfo {
    readonly mint: Address;
    readonly lowerHeuristic: BN;
    readonly upperHeuristic: BN;
    readonly expHeuristic: BN;
    readonly maxTwapDivergenceBps: BN;
    readonly scopeTwapPriceChain: Array<number>;
    readonly scopePriceChain: Array<number>;
    readonly name: Array<number>;
    readonly maxAgePriceSeconds: BN;
    readonly maxAgeTwapSeconds: BN;
    readonly maxIgnorableAmountAsReward: BN;
    readonly disabled: number;
    readonly padding0: Array<number>;
    readonly scopeStakingRateChain: Array<number>;
    readonly padding: Array<BN>;
    constructor(fields: CollateralInfoFields);
    static layout(property?: string): import("buffer-layout").Layout<unknown>;
    static fromDecoded(obj: any): types.CollateralInfo;
    static toEncodable(fields: CollateralInfoFields): {
        mint: Address;
        lowerHeuristic: BN;
        upperHeuristic: BN;
        expHeuristic: BN;
        maxTwapDivergenceBps: BN;
        scopeTwapPriceChain: number[];
        scopePriceChain: number[];
        name: number[];
        maxAgePriceSeconds: BN;
        maxAgeTwapSeconds: BN;
        maxIgnorableAmountAsReward: BN;
        disabled: number;
        padding0: number[];
        scopeStakingRateChain: number[];
        padding: BN[];
    };
    toJSON(): CollateralInfoJSON;
    static fromJSON(obj: CollateralInfoJSON): CollateralInfo;
    toEncodable(): {
        mint: Address;
        lowerHeuristic: BN;
        upperHeuristic: BN;
        expHeuristic: BN;
        maxTwapDivergenceBps: BN;
        scopeTwapPriceChain: number[];
        scopePriceChain: number[];
        name: number[];
        maxAgePriceSeconds: BN;
        maxAgeTwapSeconds: BN;
        maxIgnorableAmountAsReward: BN;
        disabled: number;
        padding0: number[];
        scopeStakingRateChain: number[];
        padding: BN[];
    };
}
//# sourceMappingURL=CollateralInfo.d.ts.map