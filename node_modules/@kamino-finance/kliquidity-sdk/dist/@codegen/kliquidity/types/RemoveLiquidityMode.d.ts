import BN from "bn.js";
import * as types from "../types";
import * as borsh from "@coral-xyz/borsh";
export type LiquidityFields = [BN];
export type LiquidityValue = [BN];
export interface LiquidityJSON {
    kind: "Liquidity";
    value: [string];
}
export declare class Liquidity {
    static readonly discriminator = 0;
    static readonly kind = "Liquidity";
    readonly discriminator = 0;
    readonly kind = "Liquidity";
    readonly value: LiquidityValue;
    constructor(value: LiquidityFields);
    toJSON(): LiquidityJSON;
    toEncodable(): {
        Liquidity: {
            _0: BN;
        };
    };
}
export type BpsFields = [number];
export type BpsValue = [number];
export interface BpsJSON {
    kind: "Bps";
    value: [number];
}
export declare class Bps {
    static readonly discriminator = 1;
    static readonly kind = "Bps";
    readonly discriminator = 1;
    readonly kind = "Bps";
    readonly value: BpsValue;
    constructor(value: BpsFields);
    toJSON(): BpsJSON;
    toEncodable(): {
        Bps: {
            _0: number;
        };
    };
}
export interface AllJSON {
    kind: "All";
}
export declare class All {
    static readonly discriminator = 2;
    static readonly kind = "All";
    readonly discriminator = 2;
    readonly kind = "All";
    toJSON(): AllJSON;
    toEncodable(): {
        All: {};
    };
}
export declare function fromDecoded(obj: any): types.RemoveLiquidityModeKind;
export declare function fromJSON(obj: types.RemoveLiquidityModeJSON): types.RemoveLiquidityModeKind;
export declare function layout(property?: string): borsh.EnumLayout<unknown>;
//# sourceMappingURL=RemoveLiquidityMode.d.ts.map