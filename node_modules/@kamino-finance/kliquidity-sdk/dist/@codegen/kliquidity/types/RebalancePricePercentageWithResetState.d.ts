import BN from "bn.js";
import * as types from "../types";
export interface RebalancePricePercentageWithResetStateFields {
    lastRebalanceLowerResetPoolPrice: BN;
    lastRebalanceUpperResetPoolPrice: BN;
}
export interface RebalancePricePercentageWithResetStateJSON {
    lastRebalanceLowerResetPoolPrice: string;
    lastRebalanceUpperResetPoolPrice: string;
}
export declare class RebalancePricePercentageWithResetState {
    readonly lastRebalanceLowerResetPoolPrice: BN;
    readonly lastRebalanceUpperResetPoolPrice: BN;
    constructor(fields: RebalancePricePercentageWithResetStateFields);
    static layout(property?: string): import("buffer-layout").Layout<unknown>;
    static fromDecoded(obj: any): types.RebalancePricePercentageWithResetState;
    static toEncodable(fields: RebalancePricePercentageWithResetStateFields): {
        lastRebalanceLowerResetPoolPrice: BN;
        lastRebalanceUpperResetPoolPrice: BN;
    };
    toJSON(): RebalancePricePercentageWithResetStateJSON;
    static fromJSON(obj: RebalancePricePercentageWithResetStateJSON): RebalancePricePercentageWithResetState;
    toEncodable(): {
        lastRebalanceLowerResetPoolPrice: BN;
        lastRebalanceUpperResetPoolPrice: BN;
    };
}
//# sourceMappingURL=RebalancePricePercentageWithResetState.d.ts.map