"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.TreasuryFeeVaultReceiver = exports.ActionsAfterRebalanceDelaySeconds = exports.MinReferencePriceSlippageToleranceBps = exports.MinSwapUnevenSlippageToleranceBps = exports.MinPerformanceFeeBps = exports.ScopePriceId = exports.ScopeProgramId = exports.UpdateTokenInfos = exports.BlockLocalAdmin = exports.BlockEmergencySwap = exports.AdminAuthority = exports.DeprecatedTreasuryFeeVaults = exports.ActionsAuthority = exports.SwapDiscountBps = exports.WithdrawalFeeBps = exports.BlockSwapUnevenVaults = exports.BlockSwapRewards = exports.BlockCollectRewards = exports.BlockCollectFees = exports.BlockWithdraw = exports.BlockInvest = exports.BlockDeposit = exports.EmergencyMode = void 0;
exports.fromDecoded = fromDecoded;
exports.fromJSON = fromJSON;
exports.layout = layout;
const borsh = __importStar(require("@coral-xyz/borsh"));
class EmergencyMode {
    static discriminator = 0;
    static kind = "EmergencyMode";
    discriminator = 0;
    kind = "EmergencyMode";
    toJSON() {
        return {
            kind: "EmergencyMode",
        };
    }
    toEncodable() {
        return {
            EmergencyMode: {},
        };
    }
}
exports.EmergencyMode = EmergencyMode;
class BlockDeposit {
    static discriminator = 1;
    static kind = "BlockDeposit";
    discriminator = 1;
    kind = "BlockDeposit";
    toJSON() {
        return {
            kind: "BlockDeposit",
        };
    }
    toEncodable() {
        return {
            BlockDeposit: {},
        };
    }
}
exports.BlockDeposit = BlockDeposit;
class BlockInvest {
    static discriminator = 2;
    static kind = "BlockInvest";
    discriminator = 2;
    kind = "BlockInvest";
    toJSON() {
        return {
            kind: "BlockInvest",
        };
    }
    toEncodable() {
        return {
            BlockInvest: {},
        };
    }
}
exports.BlockInvest = BlockInvest;
class BlockWithdraw {
    static discriminator = 3;
    static kind = "BlockWithdraw";
    discriminator = 3;
    kind = "BlockWithdraw";
    toJSON() {
        return {
            kind: "BlockWithdraw",
        };
    }
    toEncodable() {
        return {
            BlockWithdraw: {},
        };
    }
}
exports.BlockWithdraw = BlockWithdraw;
class BlockCollectFees {
    static discriminator = 4;
    static kind = "BlockCollectFees";
    discriminator = 4;
    kind = "BlockCollectFees";
    toJSON() {
        return {
            kind: "BlockCollectFees",
        };
    }
    toEncodable() {
        return {
            BlockCollectFees: {},
        };
    }
}
exports.BlockCollectFees = BlockCollectFees;
class BlockCollectRewards {
    static discriminator = 5;
    static kind = "BlockCollectRewards";
    discriminator = 5;
    kind = "BlockCollectRewards";
    toJSON() {
        return {
            kind: "BlockCollectRewards",
        };
    }
    toEncodable() {
        return {
            BlockCollectRewards: {},
        };
    }
}
exports.BlockCollectRewards = BlockCollectRewards;
class BlockSwapRewards {
    static discriminator = 6;
    static kind = "BlockSwapRewards";
    discriminator = 6;
    kind = "BlockSwapRewards";
    toJSON() {
        return {
            kind: "BlockSwapRewards",
        };
    }
    toEncodable() {
        return {
            BlockSwapRewards: {},
        };
    }
}
exports.BlockSwapRewards = BlockSwapRewards;
class BlockSwapUnevenVaults {
    static discriminator = 7;
    static kind = "BlockSwapUnevenVaults";
    discriminator = 7;
    kind = "BlockSwapUnevenVaults";
    toJSON() {
        return {
            kind: "BlockSwapUnevenVaults",
        };
    }
    toEncodable() {
        return {
            BlockSwapUnevenVaults: {},
        };
    }
}
exports.BlockSwapUnevenVaults = BlockSwapUnevenVaults;
class WithdrawalFeeBps {
    static discriminator = 8;
    static kind = "WithdrawalFeeBps";
    discriminator = 8;
    kind = "WithdrawalFeeBps";
    toJSON() {
        return {
            kind: "WithdrawalFeeBps",
        };
    }
    toEncodable() {
        return {
            WithdrawalFeeBps: {},
        };
    }
}
exports.WithdrawalFeeBps = WithdrawalFeeBps;
class SwapDiscountBps {
    static discriminator = 9;
    static kind = "SwapDiscountBps";
    discriminator = 9;
    kind = "SwapDiscountBps";
    toJSON() {
        return {
            kind: "SwapDiscountBps",
        };
    }
    toEncodable() {
        return {
            SwapDiscountBps: {},
        };
    }
}
exports.SwapDiscountBps = SwapDiscountBps;
class ActionsAuthority {
    static discriminator = 10;
    static kind = "ActionsAuthority";
    discriminator = 10;
    kind = "ActionsAuthority";
    toJSON() {
        return {
            kind: "ActionsAuthority",
        };
    }
    toEncodable() {
        return {
            ActionsAuthority: {},
        };
    }
}
exports.ActionsAuthority = ActionsAuthority;
class DeprecatedTreasuryFeeVaults {
    static discriminator = 11;
    static kind = "DeprecatedTreasuryFeeVaults";
    discriminator = 11;
    kind = "DeprecatedTreasuryFeeVaults";
    toJSON() {
        return {
            kind: "DeprecatedTreasuryFeeVaults",
        };
    }
    toEncodable() {
        return {
            DeprecatedTreasuryFeeVaults: {},
        };
    }
}
exports.DeprecatedTreasuryFeeVaults = DeprecatedTreasuryFeeVaults;
class AdminAuthority {
    static discriminator = 12;
    static kind = "AdminAuthority";
    discriminator = 12;
    kind = "AdminAuthority";
    toJSON() {
        return {
            kind: "AdminAuthority",
        };
    }
    toEncodable() {
        return {
            AdminAuthority: {},
        };
    }
}
exports.AdminAuthority = AdminAuthority;
class BlockEmergencySwap {
    static discriminator = 13;
    static kind = "BlockEmergencySwap";
    discriminator = 13;
    kind = "BlockEmergencySwap";
    toJSON() {
        return {
            kind: "BlockEmergencySwap",
        };
    }
    toEncodable() {
        return {
            BlockEmergencySwap: {},
        };
    }
}
exports.BlockEmergencySwap = BlockEmergencySwap;
class BlockLocalAdmin {
    static discriminator = 14;
    static kind = "BlockLocalAdmin";
    discriminator = 14;
    kind = "BlockLocalAdmin";
    toJSON() {
        return {
            kind: "BlockLocalAdmin",
        };
    }
    toEncodable() {
        return {
            BlockLocalAdmin: {},
        };
    }
}
exports.BlockLocalAdmin = BlockLocalAdmin;
class UpdateTokenInfos {
    static discriminator = 15;
    static kind = "UpdateTokenInfos";
    discriminator = 15;
    kind = "UpdateTokenInfos";
    toJSON() {
        return {
            kind: "UpdateTokenInfos",
        };
    }
    toEncodable() {
        return {
            UpdateTokenInfos: {},
        };
    }
}
exports.UpdateTokenInfos = UpdateTokenInfos;
class ScopeProgramId {
    static discriminator = 16;
    static kind = "ScopeProgramId";
    discriminator = 16;
    kind = "ScopeProgramId";
    toJSON() {
        return {
            kind: "ScopeProgramId",
        };
    }
    toEncodable() {
        return {
            ScopeProgramId: {},
        };
    }
}
exports.ScopeProgramId = ScopeProgramId;
class ScopePriceId {
    static discriminator = 17;
    static kind = "ScopePriceId";
    discriminator = 17;
    kind = "ScopePriceId";
    toJSON() {
        return {
            kind: "ScopePriceId",
        };
    }
    toEncodable() {
        return {
            ScopePriceId: {},
        };
    }
}
exports.ScopePriceId = ScopePriceId;
class MinPerformanceFeeBps {
    static discriminator = 18;
    static kind = "MinPerformanceFeeBps";
    discriminator = 18;
    kind = "MinPerformanceFeeBps";
    toJSON() {
        return {
            kind: "MinPerformanceFeeBps",
        };
    }
    toEncodable() {
        return {
            MinPerformanceFeeBps: {},
        };
    }
}
exports.MinPerformanceFeeBps = MinPerformanceFeeBps;
class MinSwapUnevenSlippageToleranceBps {
    static discriminator = 19;
    static kind = "MinSwapUnevenSlippageToleranceBps";
    discriminator = 19;
    kind = "MinSwapUnevenSlippageToleranceBps";
    toJSON() {
        return {
            kind: "MinSwapUnevenSlippageToleranceBps",
        };
    }
    toEncodable() {
        return {
            MinSwapUnevenSlippageToleranceBps: {},
        };
    }
}
exports.MinSwapUnevenSlippageToleranceBps = MinSwapUnevenSlippageToleranceBps;
class MinReferencePriceSlippageToleranceBps {
    static discriminator = 20;
    static kind = "MinReferencePriceSlippageToleranceBps";
    discriminator = 20;
    kind = "MinReferencePriceSlippageToleranceBps";
    toJSON() {
        return {
            kind: "MinReferencePriceSlippageToleranceBps",
        };
    }
    toEncodable() {
        return {
            MinReferencePriceSlippageToleranceBps: {},
        };
    }
}
exports.MinReferencePriceSlippageToleranceBps = MinReferencePriceSlippageToleranceBps;
class ActionsAfterRebalanceDelaySeconds {
    static discriminator = 21;
    static kind = "ActionsAfterRebalanceDelaySeconds";
    discriminator = 21;
    kind = "ActionsAfterRebalanceDelaySeconds";
    toJSON() {
        return {
            kind: "ActionsAfterRebalanceDelaySeconds",
        };
    }
    toEncodable() {
        return {
            ActionsAfterRebalanceDelaySeconds: {},
        };
    }
}
exports.ActionsAfterRebalanceDelaySeconds = ActionsAfterRebalanceDelaySeconds;
class TreasuryFeeVaultReceiver {
    static discriminator = 22;
    static kind = "TreasuryFeeVaultReceiver";
    discriminator = 22;
    kind = "TreasuryFeeVaultReceiver";
    toJSON() {
        return {
            kind: "TreasuryFeeVaultReceiver",
        };
    }
    toEncodable() {
        return {
            TreasuryFeeVaultReceiver: {},
        };
    }
}
exports.TreasuryFeeVaultReceiver = TreasuryFeeVaultReceiver;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function fromDecoded(obj) {
    if (typeof obj !== "object") {
        throw new Error("Invalid enum object");
    }
    if ("EmergencyMode" in obj) {
        return new EmergencyMode();
    }
    if ("BlockDeposit" in obj) {
        return new BlockDeposit();
    }
    if ("BlockInvest" in obj) {
        return new BlockInvest();
    }
    if ("BlockWithdraw" in obj) {
        return new BlockWithdraw();
    }
    if ("BlockCollectFees" in obj) {
        return new BlockCollectFees();
    }
    if ("BlockCollectRewards" in obj) {
        return new BlockCollectRewards();
    }
    if ("BlockSwapRewards" in obj) {
        return new BlockSwapRewards();
    }
    if ("BlockSwapUnevenVaults" in obj) {
        return new BlockSwapUnevenVaults();
    }
    if ("WithdrawalFeeBps" in obj) {
        return new WithdrawalFeeBps();
    }
    if ("SwapDiscountBps" in obj) {
        return new SwapDiscountBps();
    }
    if ("ActionsAuthority" in obj) {
        return new ActionsAuthority();
    }
    if ("DeprecatedTreasuryFeeVaults" in obj) {
        return new DeprecatedTreasuryFeeVaults();
    }
    if ("AdminAuthority" in obj) {
        return new AdminAuthority();
    }
    if ("BlockEmergencySwap" in obj) {
        return new BlockEmergencySwap();
    }
    if ("BlockLocalAdmin" in obj) {
        return new BlockLocalAdmin();
    }
    if ("UpdateTokenInfos" in obj) {
        return new UpdateTokenInfos();
    }
    if ("ScopeProgramId" in obj) {
        return new ScopeProgramId();
    }
    if ("ScopePriceId" in obj) {
        return new ScopePriceId();
    }
    if ("MinPerformanceFeeBps" in obj) {
        return new MinPerformanceFeeBps();
    }
    if ("MinSwapUnevenSlippageToleranceBps" in obj) {
        return new MinSwapUnevenSlippageToleranceBps();
    }
    if ("MinReferencePriceSlippageToleranceBps" in obj) {
        return new MinReferencePriceSlippageToleranceBps();
    }
    if ("ActionsAfterRebalanceDelaySeconds" in obj) {
        return new ActionsAfterRebalanceDelaySeconds();
    }
    if ("TreasuryFeeVaultReceiver" in obj) {
        return new TreasuryFeeVaultReceiver();
    }
    throw new Error("Invalid enum object");
}
function fromJSON(obj) {
    switch (obj.kind) {
        case "EmergencyMode": {
            return new EmergencyMode();
        }
        case "BlockDeposit": {
            return new BlockDeposit();
        }
        case "BlockInvest": {
            return new BlockInvest();
        }
        case "BlockWithdraw": {
            return new BlockWithdraw();
        }
        case "BlockCollectFees": {
            return new BlockCollectFees();
        }
        case "BlockCollectRewards": {
            return new BlockCollectRewards();
        }
        case "BlockSwapRewards": {
            return new BlockSwapRewards();
        }
        case "BlockSwapUnevenVaults": {
            return new BlockSwapUnevenVaults();
        }
        case "WithdrawalFeeBps": {
            return new WithdrawalFeeBps();
        }
        case "SwapDiscountBps": {
            return new SwapDiscountBps();
        }
        case "ActionsAuthority": {
            return new ActionsAuthority();
        }
        case "DeprecatedTreasuryFeeVaults": {
            return new DeprecatedTreasuryFeeVaults();
        }
        case "AdminAuthority": {
            return new AdminAuthority();
        }
        case "BlockEmergencySwap": {
            return new BlockEmergencySwap();
        }
        case "BlockLocalAdmin": {
            return new BlockLocalAdmin();
        }
        case "UpdateTokenInfos": {
            return new UpdateTokenInfos();
        }
        case "ScopeProgramId": {
            return new ScopeProgramId();
        }
        case "ScopePriceId": {
            return new ScopePriceId();
        }
        case "MinPerformanceFeeBps": {
            return new MinPerformanceFeeBps();
        }
        case "MinSwapUnevenSlippageToleranceBps": {
            return new MinSwapUnevenSlippageToleranceBps();
        }
        case "MinReferencePriceSlippageToleranceBps": {
            return new MinReferencePriceSlippageToleranceBps();
        }
        case "ActionsAfterRebalanceDelaySeconds": {
            return new ActionsAfterRebalanceDelaySeconds();
        }
        case "TreasuryFeeVaultReceiver": {
            return new TreasuryFeeVaultReceiver();
        }
    }
}
function layout(property) {
    const ret = borsh.rustEnum([
        borsh.struct([], "EmergencyMode"),
        borsh.struct([], "BlockDeposit"),
        borsh.struct([], "BlockInvest"),
        borsh.struct([], "BlockWithdraw"),
        borsh.struct([], "BlockCollectFees"),
        borsh.struct([], "BlockCollectRewards"),
        borsh.struct([], "BlockSwapRewards"),
        borsh.struct([], "BlockSwapUnevenVaults"),
        borsh.struct([], "WithdrawalFeeBps"),
        borsh.struct([], "SwapDiscountBps"),
        borsh.struct([], "ActionsAuthority"),
        borsh.struct([], "DeprecatedTreasuryFeeVaults"),
        borsh.struct([], "AdminAuthority"),
        borsh.struct([], "BlockEmergencySwap"),
        borsh.struct([], "BlockLocalAdmin"),
        borsh.struct([], "UpdateTokenInfos"),
        borsh.struct([], "ScopeProgramId"),
        borsh.struct([], "ScopePriceId"),
        borsh.struct([], "MinPerformanceFeeBps"),
        borsh.struct([], "MinSwapUnevenSlippageToleranceBps"),
        borsh.struct([], "MinReferencePriceSlippageToleranceBps"),
        borsh.struct([], "ActionsAfterRebalanceDelaySeconds"),
        borsh.struct([], "TreasuryFeeVaultReceiver"),
    ]);
    if (property !== undefined) {
        return ret.replicate(property);
    }
    return ret;
}
//# sourceMappingURL=GlobalConfigOption.js.map