import { Address, IAccountMeta, IAccountSignerMeta, IInstruction, TransactionSigner } from "@solana/kit";
import BN from "bn.js";
export interface FlashSwapUnevenVaultsEndArgs {
    minRepayAmount: BN;
    amountToLeaveToUser: BN;
    aToB: boolean;
}
export interface FlashSwapUnevenVaultsEndAccounts {
    swapper: TransactionSigner;
    strategy: Address;
    globalConfig: Address;
    tokenAVault: Address;
    tokenBVault: Address;
    tokenAAta: Address;
    tokenBAta: Address;
    baseVaultAuthority: Address;
    pool: Address;
    position: Address;
    scopePrices: Address;
    tokenInfos: Address;
    tickArrayLower: Address;
    tickArrayUpper: Address;
    tokenAMint: Address;
    tokenBMint: Address;
    tokenATokenProgram: Address;
    tokenBTokenProgram: Address;
    instructionSysvarAccount: Address;
    consensusAccount: Address;
}
export declare const layout: import("buffer-layout").Layout<FlashSwapUnevenVaultsEndArgs>;
/**
 * End of Flash swap uneven vaults.
 *
 * See [`flash_swap_uneven_vaults_start`] for details.
 *
 * Warning: This instruction is allowed to be used independently from
 * `FlashSwapUnevenVaultsStart` and shall not perform any operation
 * that can be exploited when used alone.
 */
export declare function flashSwapUnevenVaultsEnd(args: FlashSwapUnevenVaultsEndArgs, accounts: FlashSwapUnevenVaultsEndAccounts, remainingAccounts?: Array<IAccountMeta | IAccountSignerMeta>, programAddress?: Address): IInstruction;
//# sourceMappingURL=flashSwapUnevenVaultsEnd.d.ts.map