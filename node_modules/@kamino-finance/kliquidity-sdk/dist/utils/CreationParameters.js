"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutodriftMethod = exports.ExpanderMethod = exports.PeriodicRebalanceMethod = exports.TakeProfitMethod = exports.DriftRebalanceMethod = exports.PricePercentageWithResetRangeRebalanceMethod = exports.PricePercentageRebalanceMethod = exports.ManualRebalanceMethod = exports.DefaultDex = exports.DefaultTickSpacing = exports.DefaultFeeTierOrca = exports.DefaultMintTokenB = exports.DefaultMintTokenA = exports.DefaultUpperPriceDifferenceBPS = exports.DefaultLowerPriceDifferenceBPS = exports.DefaultUpperPercentageBPSDecimal = exports.DefaultUpperPercentageBPS = exports.DefaultLowerPercentageBPSDecimal = exports.DefaultLowerPercentageBPS = exports.FullPercentage = exports.FullBPSDecimal = exports.FullBPS = void 0;
const kit_1 = require("@solana/kit");
const RebalanceType_1 = require("../@codegen/kliquidity/types/RebalanceType");
const decimal_js_1 = __importDefault(require("decimal.js"));
exports.FullBPS = 10_000;
exports.FullBPSDecimal = new decimal_js_1.default(exports.FullBPS);
exports.FullPercentage = 100;
exports.DefaultLowerPercentageBPS = 1000;
exports.DefaultLowerPercentageBPSDecimal = new decimal_js_1.default(exports.DefaultLowerPercentageBPS);
exports.DefaultUpperPercentageBPS = 1000;
exports.DefaultUpperPercentageBPSDecimal = new decimal_js_1.default(exports.DefaultUpperPercentageBPS);
// the default parameters for the manual rebalance, 5% above and below the current price
exports.DefaultLowerPriceDifferenceBPS = 500;
exports.DefaultUpperPriceDifferenceBPS = 500;
exports.DefaultMintTokenA = (0, kit_1.address)('So11111111111111111111111111111111111111112');
exports.DefaultMintTokenB = (0, kit_1.address)('EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v');
exports.DefaultFeeTierOrca = new decimal_js_1.default(0.0005);
exports.DefaultTickSpacing = 1;
exports.DefaultDex = 'ORCA';
exports.ManualRebalanceMethod = {
    label: 'Fixed Range',
    value: RebalanceType_1.Manual.discriminator,
    enabled: true,
    descriptionShort: 'Market make with no rebalancing',
    description: 'Liquidity is provided to a specified range width, with no rebalancing performed in any price scenario, thus no impermanent loss is realized via range adjustment. Asymmetric range widths are supported eg. 50% below price, and 500% above',
};
exports.PricePercentageRebalanceMethod = {
    label: 'Tracker',
    value: RebalanceType_1.PricePercentage.discriminator,
    enabled: true,
    descriptionShort: 'Maximize trading fee capture',
    description: 'Liquidity is provided to a specified range width, with rebalancing performed to the initial token ratio should the price move beyond a specified percentage in either direction. Asymmetric range widths are supported eg. 50% below price, and 500% above',
};
exports.PricePercentageWithResetRangeRebalanceMethod = {
    label: 'Price Percentage With Reset Range',
    value: RebalanceType_1.PricePercentageWithReset.discriminator,
    enabled: false,
    // todo: provide a better description
    description: 'Optimize your portfolio for maximum returns with Kamino’s Automated Percentage Rebalancing strategy. Automatically adjust your allocation based on predetermined percentages for a balanced and risk-minimized portfolio.',
};
exports.DriftRebalanceMethod = {
    label: 'Drift',
    value: RebalanceType_1.Drift.discriminator,
    enabled: false,
    // todo: ask for a description
    description: 'Optimize your portfolio for maximum returns with Kamino’s Drift strategy.',
};
exports.TakeProfitMethod = {
    label: 'Take Profit',
    value: RebalanceType_1.TakeProfit.discriminator,
    enabled: false,
    // todo: ask for a description
    description: 'Optimize your portfolio for maximum returns with Kamino’s Take Profit strategy.',
};
exports.PeriodicRebalanceMethod = {
    label: 'Periodic Rebalance',
    value: RebalanceType_1.PeriodicRebalance.discriminator,
    enabled: false,
    // todo: ask for a description
    description: 'Optimize your portfolio for maximum returns with Kamino’s Periodic Rebalance strategy.',
};
exports.ExpanderMethod = {
    label: 'Expander',
    value: RebalanceType_1.Expander.discriminator,
    enabled: false,
    // todo: ask for a description
    description: 'Optimize your portfolio for maximum returns with Kamino’s Expander strategy.',
};
exports.AutodriftMethod = {
    label: 'Autodrift',
    value: RebalanceType_1.Autodrift.discriminator,
    enabled: false,
    // todo: ask for a description
    description: 'Optimize your portfolio for maximum returns with Kamino’s Drift strategy.',
};
//# sourceMappingURL=CreationParameters.js.map