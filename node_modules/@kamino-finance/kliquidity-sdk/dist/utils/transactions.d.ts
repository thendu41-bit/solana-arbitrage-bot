import { Address, GetAccountInfoApi, GetTokenAccountBalanceApi, Instruction, Rpc, TransactionSigner } from '@solana/kit';
import Decimal from 'decimal.js';
import { CreateAta } from './types';
export declare const MAX_ACCOUNTS_PER_TRANSACTION = 64;
export declare const getComputeBudgetAndPriorityFeeIxns: (units: number, priorityFeeLamports?: Decimal) => Instruction[];
export declare const createAtaIfMissingIx: (connection: Rpc<GetAccountInfoApi>, mint: Address, owner: TransactionSigner, programId: Address) => Promise<Instruction | undefined>;
export declare const getAtasWithCreateIxnsIfMissing: (connection: Rpc<any>, mints: [Address, Address][], owner: TransactionSigner) => Promise<Instruction[]>;
export declare const createWsolAtaIfMissing: (rpc: Rpc<GetAccountInfoApi & GetTokenAccountBalanceApi>, amount: Decimal, owner: TransactionSigner, method?: "deposit" | "withdraw") => Promise<CreateAta>;
export declare const isWsolInfoInvalid: (wsolAtaAccountInfo: any) => boolean;
export declare function checkIfAccountExists(connection: Rpc<GetAccountInfoApi>, account: Address): Promise<boolean>;
export declare function removeBudgetAndAtaIxns(ixns: Instruction[], mints: Address[]): Instruction[];
export declare const findAtaBalance: (connection: Rpc<GetTokenAccountBalanceApi>, ata: Address) => Promise<number | null>;
//# sourceMappingURL=transactions.d.ts.map