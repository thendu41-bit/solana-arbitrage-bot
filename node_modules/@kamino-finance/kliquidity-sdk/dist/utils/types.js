"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RAYDIUM_DEVNET_PROGRAM_ID = void 0;
exports.strategyTypeToBase58 = strategyTypeToBase58;
exports.strategyTypeToNumber = strategyTypeToNumber;
exports.getStrategyTypeFromStrategy = getStrategyTypeFromStrategy;
exports.strategyCreationStatusToBase58 = strategyCreationStatusToBase58;
exports.strategyCreationStatusToNumber = strategyCreationStatusToNumber;
exports.getStrategyCreationStatusFromStrategy = getStrategyCreationStatusFromStrategy;
exports.depositAmountsForSwapToLamports = depositAmountsForSwapToLamports;
exports.noopProfiledFunctionExecution = noopProfiledFunctionExecution;
const kit_1 = require("@solana/kit");
const utils_1 = require("./utils");
exports.RAYDIUM_DEVNET_PROGRAM_ID = (0, kit_1.address)('devi51mZmdwUJGU9hjN27vEz64Gps7uUefqxg27EAtH');
function strategyTypeToBase58(strategyType) {
    switch (strategyType) {
        case 'NON_PEGGED':
            return '1';
        case 'PEGGED':
            return '2';
        case 'STABLE':
            return '3';
        default:
            throw new Error(`Invalid strategyType ${strategyType}`);
    }
}
function strategyTypeToNumber(strategyType) {
    switch (strategyType) {
        case 'NON_PEGGED':
            return 0;
        case 'PEGGED':
            return 1;
        case 'STABLE':
            return 2;
        default:
            throw new Error(`Invalid strategyType ${strategyType}`);
    }
}
function getStrategyTypeFromStrategy(strategy) {
    switch (strategy.strategyType.toNumber()) {
        case 0:
            return 'NON_PEGGED';
        case 1:
            return 'PEGGED';
        case 2:
            return 'STABLE';
        default:
            throw new Error(`Unknown strategyType value ${strategy.strategyType.toNumber()}`);
    }
}
function strategyCreationStatusToBase58(strategyCreationStatus) {
    switch (strategyCreationStatus) {
        case 'IGNORED':
            return '1';
        case 'SHADOW':
            return '2';
        case 'LIVE':
            return '3';
        case 'DEPRECATED':
            return '4';
        case 'STAGING':
            return '5';
        default:
            throw new Error(`Invalid strategyCreationStatus ${strategyCreationStatus}`);
    }
}
function strategyCreationStatusToNumber(strategyCreationStatus) {
    switch (strategyCreationStatus) {
        case 'IGNORED':
            return 0;
        case 'SHADOW':
            return 1;
        case 'LIVE':
            return 2;
        case 'DEPRECATED':
            return 3;
        case 'STAGING':
            return 4;
        default:
            throw new Error(`Invalid strategyCreationStatus ${strategyCreationStatus}`);
    }
}
function getStrategyCreationStatusFromStrategy(strategy) {
    switch (strategy.creationStatus) {
        case 0:
            return 'IGNORED';
        case 1:
            return 'SHADOW';
        case 2:
            return 'LIVE';
        case 3:
            return 'DEPRECATED';
        case 4:
            return 'STAGING';
        default:
            throw new Error(`Invalid strategyCreationStatus ${strategy.creationStatus}`);
    }
}
function depositAmountsForSwapToLamports(depositAmounts, tokenADecimals, tokenBDecimals) {
    return {
        requiredAAmountToDeposit: (0, utils_1.collToLamportsDecimal)(depositAmounts.requiredAAmountToDeposit, tokenADecimals),
        requiredBAmountToDeposit: (0, utils_1.collToLamportsDecimal)(depositAmounts.requiredBAmountToDeposit, tokenBDecimals),
        tokenAToSwapAmount: (0, utils_1.collToLamportsDecimal)(depositAmounts.tokenAToSwapAmount, tokenADecimals),
        tokenBToSwapAmount: (0, utils_1.collToLamportsDecimal)(depositAmounts.tokenBToSwapAmount, tokenBDecimals),
    };
}
function noopProfiledFunctionExecution(promise) {
    return promise;
}
//# sourceMappingURL=types.js.map