import { Address, Instruction, Option, TransactionSigner } from '@solana/kit';
import Decimal from 'decimal.js';
import { DriftDirectionKind, RebalanceAutodriftStepKind, RebalanceTypeKind, StakingRateSourceKind, StrategyConfigOptionKind } from '../@codegen/kliquidity/types';
import { RebalanceFieldInfo, RebalanceFieldsDict } from './types';
import BN from 'bn.js';
export declare const DollarBasedMintingMethod: Decimal;
export declare const ProportionalMintingMethod: Decimal;
export declare const RebalanceParamOffset: Decimal;
export declare function sleep(ms: number): Promise<unknown>;
export declare const Dex: readonly ["ORCA", "RAYDIUM", "METEORA"];
export type Dex = (typeof Dex)[number];
export declare const ReferencePriceType: readonly [import("./types").PriceReferenceType, import("./types").PriceReferenceType];
export type ReferencePriceType = (typeof ReferencePriceType)[number];
export declare function dexToNumber(dex: Dex): number;
export declare function numberToDex(num: number): Dex;
export declare function numberToReferencePriceType(num: number): ReferencePriceType;
export declare function getStrategyConfigValue(value: Decimal): number[];
export declare function buildStrategyRebalanceParams(params: Array<Decimal>, rebalance_type: RebalanceTypeKind, tokenADecimals?: number, tokenBDecimals?: number): number[];
export declare function doesStrategyHaveResetRange(rebalanceTypeNumber: number): boolean;
export declare function numberToDriftDirection(value: number): DriftDirectionKind;
export declare function numberToStakingRateSource(value: number): StakingRateSourceKind;
export declare function numberToAutodriftStep(value: number): RebalanceAutodriftStepKind;
export declare function numberToRebalanceType(rebalance_type: number): RebalanceTypeKind;
export declare function getUpdateStrategyConfigIx(signer: TransactionSigner, globalConfig: Address, strategy: Address, mode: StrategyConfigOptionKind, amount: Decimal, programId: Address, newAccount?: Address): Promise<Instruction>;
export declare function collToLamportsDecimal(amount: Decimal, decimals: number): Decimal;
export declare function lamportsToNumberDecimal(amount: Decimal.Value, decimals: number): Decimal;
export declare function readBigUint128LE(buffer: Buffer, offset: number): bigint;
export declare function readPriceOption(buffer: Buffer, offset: number): [number, Decimal];
export declare function rebalanceFieldsDictToInfo(rebalanceFields: RebalanceFieldsDict): RebalanceFieldInfo[];
export declare function isVaultInitialized(vault: Address, decimals: BN): boolean;
export declare function sqrtPriceToPrice(sqrtPrice: BN, dexNo: number, decimalsA: number, decimalsB: number): Decimal;
export declare function stripTwapZeros(chain: number[]): number[];
export declare function percentageToBPS(pct: number): number;
export declare function keyOrDefault(key: Address, defaultKey: Address): Address;
export declare function optionGetValue<T>(option: Option<T>): T | null;
export declare function optionGetValueOrUndefined<T>(option: Option<T>): T | undefined;
export declare function optionGetValueOrDefault<T>(option: Option<T>, defaultValue: T): T;
//# sourceMappingURL=utils.d.ts.map