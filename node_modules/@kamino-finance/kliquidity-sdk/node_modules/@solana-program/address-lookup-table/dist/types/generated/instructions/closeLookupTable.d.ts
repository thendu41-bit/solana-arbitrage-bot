/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type AccountSignerMeta, type Address, type FixedSizeCodec, type FixedSizeDecoder, type FixedSizeEncoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { ADDRESS_LOOKUP_TABLE_PROGRAM_ADDRESS } from '../programs';
export declare const CLOSE_LOOKUP_TABLE_DISCRIMINATOR = 4;
export declare function getCloseLookupTableDiscriminatorBytes(): ReadonlyUint8Array;
export type CloseLookupTableInstruction<TProgram extends string = typeof ADDRESS_LOOKUP_TABLE_PROGRAM_ADDRESS, TAccountAddress extends string | AccountMeta<string> = string, TAccountAuthority extends string | AccountMeta<string> = string, TAccountRecipient extends string | AccountMeta<string> = string, TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountAddress extends string ? WritableAccount<TAccountAddress> : TAccountAddress,
    TAccountAuthority extends string ? ReadonlySignerAccount<TAccountAuthority> & AccountSignerMeta<TAccountAuthority> : TAccountAuthority,
    TAccountRecipient extends string ? WritableAccount<TAccountRecipient> : TAccountRecipient,
    ...TRemainingAccounts
]>;
export type CloseLookupTableInstructionData = {
    discriminator: number;
};
export type CloseLookupTableInstructionDataArgs = {};
export declare function getCloseLookupTableInstructionDataEncoder(): FixedSizeEncoder<CloseLookupTableInstructionDataArgs>;
export declare function getCloseLookupTableInstructionDataDecoder(): FixedSizeDecoder<CloseLookupTableInstructionData>;
export declare function getCloseLookupTableInstructionDataCodec(): FixedSizeCodec<CloseLookupTableInstructionDataArgs, CloseLookupTableInstructionData>;
export type CloseLookupTableInput<TAccountAddress extends string = string, TAccountAuthority extends string = string, TAccountRecipient extends string = string> = {
    address: Address<TAccountAddress>;
    authority: TransactionSigner<TAccountAuthority>;
    recipient: Address<TAccountRecipient>;
};
export declare function getCloseLookupTableInstruction<TAccountAddress extends string, TAccountAuthority extends string, TAccountRecipient extends string, TProgramAddress extends Address = typeof ADDRESS_LOOKUP_TABLE_PROGRAM_ADDRESS>(input: CloseLookupTableInput<TAccountAddress, TAccountAuthority, TAccountRecipient>, config?: {
    programAddress?: TProgramAddress;
}): CloseLookupTableInstruction<TProgramAddress, TAccountAddress, TAccountAuthority, TAccountRecipient>;
export type ParsedCloseLookupTableInstruction<TProgram extends string = typeof ADDRESS_LOOKUP_TABLE_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        address: TAccountMetas[0];
        authority: TAccountMetas[1];
        recipient: TAccountMetas[2];
    };
    data: CloseLookupTableInstructionData;
};
export declare function parseCloseLookupTableInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedCloseLookupTableInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=closeLookupTable.d.ts.map