/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type AccountSignerMeta, type Address, type FixedSizeCodec, type FixedSizeDecoder, type FixedSizeEncoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type ProgramDerivedAddress, type ReadonlyAccount, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount, type WritableSignerAccount } from '@solana/kit';
import { ADDRESS_LOOKUP_TABLE_PROGRAM_ADDRESS } from '../programs';
import { type InstructionWithByteDelta } from '../shared';
export declare const CREATE_LOOKUP_TABLE_DISCRIMINATOR = 0;
export declare function getCreateLookupTableDiscriminatorBytes(): ReadonlyUint8Array;
export type CreateLookupTableInstruction<TProgram extends string = typeof ADDRESS_LOOKUP_TABLE_PROGRAM_ADDRESS, TAccountAddress extends string | AccountMeta<string> = string, TAccountAuthority extends string | AccountMeta<string> = string, TAccountPayer extends string | AccountMeta<string> = string, TAccountSystemProgram extends string | AccountMeta<string> = '11111111111111111111111111111111', TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountAddress extends string ? WritableAccount<TAccountAddress> : TAccountAddress,
    TAccountAuthority extends string ? ReadonlySignerAccount<TAccountAuthority> & AccountSignerMeta<TAccountAuthority> : TAccountAuthority,
    TAccountPayer extends string ? WritableSignerAccount<TAccountPayer> & AccountSignerMeta<TAccountPayer> : TAccountPayer,
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    ...TRemainingAccounts
]>;
export type CreateLookupTableInstructionData = {
    discriminator: number;
    recentSlot: bigint;
    bump: number;
};
export type CreateLookupTableInstructionDataArgs = {
    recentSlot: number | bigint;
    bump: number;
};
export declare function getCreateLookupTableInstructionDataEncoder(): FixedSizeEncoder<CreateLookupTableInstructionDataArgs>;
export declare function getCreateLookupTableInstructionDataDecoder(): FixedSizeDecoder<CreateLookupTableInstructionData>;
export declare function getCreateLookupTableInstructionDataCodec(): FixedSizeCodec<CreateLookupTableInstructionDataArgs, CreateLookupTableInstructionData>;
export type CreateLookupTableAsyncInput<TAccountAddress extends string = string, TAccountAuthority extends string = string, TAccountPayer extends string = string, TAccountSystemProgram extends string = string> = {
    address?: ProgramDerivedAddress<TAccountAddress>;
    authority: TransactionSigner<TAccountAuthority>;
    payer?: TransactionSigner<TAccountPayer>;
    systemProgram?: Address<TAccountSystemProgram>;
    recentSlot: CreateLookupTableInstructionDataArgs['recentSlot'];
    bump?: CreateLookupTableInstructionDataArgs['bump'];
};
export declare function getCreateLookupTableInstructionAsync<TAccountAddress extends string, TAccountAuthority extends string, TAccountPayer extends string, TAccountSystemProgram extends string, TProgramAddress extends Address = typeof ADDRESS_LOOKUP_TABLE_PROGRAM_ADDRESS>(input: CreateLookupTableAsyncInput<TAccountAddress, TAccountAuthority, TAccountPayer, TAccountSystemProgram>, config?: {
    programAddress?: TProgramAddress;
}): Promise<CreateLookupTableInstruction<TProgramAddress, TAccountAddress, TAccountAuthority, TAccountPayer, TAccountSystemProgram> & InstructionWithByteDelta>;
export type CreateLookupTableInput<TAccountAddress extends string = string, TAccountAuthority extends string = string, TAccountPayer extends string = string, TAccountSystemProgram extends string = string> = {
    address: ProgramDerivedAddress<TAccountAddress>;
    authority: TransactionSigner<TAccountAuthority>;
    payer?: TransactionSigner<TAccountPayer>;
    systemProgram?: Address<TAccountSystemProgram>;
    recentSlot: CreateLookupTableInstructionDataArgs['recentSlot'];
    bump?: CreateLookupTableInstructionDataArgs['bump'];
};
export declare function getCreateLookupTableInstruction<TAccountAddress extends string, TAccountAuthority extends string, TAccountPayer extends string, TAccountSystemProgram extends string, TProgramAddress extends Address = typeof ADDRESS_LOOKUP_TABLE_PROGRAM_ADDRESS>(input: CreateLookupTableInput<TAccountAddress, TAccountAuthority, TAccountPayer, TAccountSystemProgram>, config?: {
    programAddress?: TProgramAddress;
}): CreateLookupTableInstruction<TProgramAddress, TAccountAddress, TAccountAuthority, TAccountPayer, TAccountSystemProgram> & InstructionWithByteDelta;
export type ParsedCreateLookupTableInstruction<TProgram extends string = typeof ADDRESS_LOOKUP_TABLE_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        address: TAccountMetas[0];
        authority: TAccountMetas[1];
        payer: TAccountMetas[2];
        systemProgram: TAccountMetas[3];
    };
    data: CreateLookupTableInstructionData;
};
export declare function parseCreateLookupTableInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedCreateLookupTableInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=createLookupTable.d.ts.map