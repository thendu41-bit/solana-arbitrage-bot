import { getStructEncoder, getUtf8Encoder, getStructDecoder, getUtf8Decoder, combineCodec, AccountRole } from '@solana/kit';

// src/generated/instructions/addMemo.ts

// src/generated/programs/memo.ts
var MEMO_PROGRAM_ADDRESS = "MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr";
var MemoInstruction = /* @__PURE__ */ ((MemoInstruction2) => {
  MemoInstruction2[MemoInstruction2["AddMemo"] = 0] = "AddMemo";
  return MemoInstruction2;
})(MemoInstruction || {});

// src/generated/instructions/addMemo.ts
function getAddMemoInstructionDataEncoder() {
  return getStructEncoder([["memo", getUtf8Encoder()]]);
}
function getAddMemoInstructionDataDecoder() {
  return getStructDecoder([["memo", getUtf8Decoder()]]);
}
function getAddMemoInstructionDataCodec() {
  return combineCodec(
    getAddMemoInstructionDataEncoder(),
    getAddMemoInstructionDataDecoder()
  );
}
function getAddMemoInstruction(input, config) {
  const programAddress = config?.programAddress ?? MEMO_PROGRAM_ADDRESS;
  const args = { ...input };
  const remainingAccounts = (args.signers ?? []).map(
    (signer) => ({
      address: signer.address,
      role: AccountRole.READONLY_SIGNER,
      signer
    })
  );
  const instruction = {
    accounts: remainingAccounts,
    programAddress,
    data: getAddMemoInstructionDataEncoder().encode(
      args
    )
  };
  return instruction;
}
function parseAddMemoInstruction(instruction) {
  return {
    programAddress: instruction.programAddress,
    data: getAddMemoInstructionDataDecoder().decode(instruction.data)
  };
}

export { MEMO_PROGRAM_ADDRESS, MemoInstruction, getAddMemoInstruction, getAddMemoInstructionDataCodec, getAddMemoInstructionDataDecoder, getAddMemoInstructionDataEncoder, parseAddMemoInstruction };
//# sourceMappingURL=index.mjs.map
//# sourceMappingURL=index.mjs.map