'use strict';

var kit = require('@solana/kit');

// src/generated/instructions/addMemo.ts

// src/generated/programs/memo.ts
var MEMO_PROGRAM_ADDRESS = "MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr";
var MemoInstruction = /* @__PURE__ */ ((MemoInstruction2) => {
  MemoInstruction2[MemoInstruction2["AddMemo"] = 0] = "AddMemo";
  return MemoInstruction2;
})(MemoInstruction || {});

// src/generated/instructions/addMemo.ts
function getAddMemoInstructionDataEncoder() {
  return kit.getStructEncoder([["memo", kit.getUtf8Encoder()]]);
}
function getAddMemoInstructionDataDecoder() {
  return kit.getStructDecoder([["memo", kit.getUtf8Decoder()]]);
}
function getAddMemoInstructionDataCodec() {
  return kit.combineCodec(
    getAddMemoInstructionDataEncoder(),
    getAddMemoInstructionDataDecoder()
  );
}
function getAddMemoInstruction(input, config) {
  const programAddress = config?.programAddress ?? MEMO_PROGRAM_ADDRESS;
  const args = { ...input };
  const remainingAccounts = (args.signers ?? []).map(
    (signer) => ({
      address: signer.address,
      role: kit.AccountRole.READONLY_SIGNER,
      signer
    })
  );
  const instruction = {
    accounts: remainingAccounts,
    programAddress,
    data: getAddMemoInstructionDataEncoder().encode(
      args
    )
  };
  return instruction;
}
function parseAddMemoInstruction(instruction) {
  return {
    programAddress: instruction.programAddress,
    data: getAddMemoInstructionDataDecoder().decode(instruction.data)
  };
}

exports.MEMO_PROGRAM_ADDRESS = MEMO_PROGRAM_ADDRESS;
exports.MemoInstruction = MemoInstruction;
exports.getAddMemoInstruction = getAddMemoInstruction;
exports.getAddMemoInstructionDataCodec = getAddMemoInstructionDataCodec;
exports.getAddMemoInstructionDataDecoder = getAddMemoInstructionDataDecoder;
exports.getAddMemoInstructionDataEncoder = getAddMemoInstructionDataEncoder;
exports.parseAddMemoInstruction = parseAddMemoInstruction;
//# sourceMappingURL=index.js.map
//# sourceMappingURL=index.js.map