{"version":3,"sources":["../../src/generated/programs/memo.ts","../../src/generated/instructions/addMemo.ts"],"names":["MemoInstruction"],"mappings":";;;;;AAWO,IAAM,oBACX,GAAA;AAEU,IAAA,eAAA,qBAAAA,gBAAL,KAAA;AACL,EAAAA,gBAAA,CAAA,gBAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA;AADU,EAAAA,OAAAA,gBAAAA;AAAA,CAAA,EAAA,eAAA,IAAA,EAAA;;;ACwBL,SAAS,gCAAwE,GAAA;AACtF,EAAA,OAAO,iBAAiB,CAAC,CAAC,QAAQ,cAAe,EAAC,CAAC,CAAC,CAAA;AACtD;AAEO,SAAS,gCAAoE,GAAA;AAClF,EAAA,OAAO,iBAAiB,CAAC,CAAC,QAAQ,cAAe,EAAC,CAAC,CAAC,CAAA;AACtD;AAEO,SAAS,8BAGd,GAAA;AACA,EAAO,OAAA,YAAA;AAAA,IACL,gCAAiC,EAAA;AAAA,IACjC,gCAAiC;AAAA,GACnC;AACF;AAOO,SAAS,qBAAA,CAGd,OACA,MACqC,EAAA;AAErC,EAAM,MAAA,cAAA,GAAiB,QAAQ,cAAkB,IAAA,oBAAA;AAGjD,EAAM,MAAA,IAAA,GAAO,EAAE,GAAG,KAAM,EAAA;AAGxB,EAAA,MAAM,iBAAqC,GAAA,CAAA,IAAA,CAAK,OAAW,IAAA,EAAI,EAAA,GAAA;AAAA,IAC7D,CAAC,MAAY,MAAA;AAAA,MACX,SAAS,MAAO,CAAA,OAAA;AAAA,MAChB,MAAM,WAAY,CAAA,eAAA;AAAA,MAClB;AAAA,KACF;AAAA,GACF;AAEA,EAAA,MAAM,WAAc,GAAA;AAAA,IAClB,QAAU,EAAA,iBAAA;AAAA,IACV,cAAA;AAAA,IACA,IAAA,EAAM,kCAAmC,CAAA,MAAA;AAAA,MACvC;AAAA;AACF,GACF;AAEA,EAAO,OAAA,WAAA;AACT;AASO,SAAS,wBACd,WACoC,EAAA;AACpC,EAAO,OAAA;AAAA,IACL,gBAAgB,WAAY,CAAA,cAAA;AAAA,IAC5B,IAAM,EAAA,gCAAA,EAAmC,CAAA,MAAA,CAAO,YAAY,IAAI;AAAA,GAClE;AACF","file":"index.mjs","sourcesContent":["/**\n * This code was AUTOGENERATED using the codama library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun codama to update it.\n *\n * @see https://github.com/codama-idl/codama\n */\n\nimport { type Address } from '@solana/kit';\nimport { type ParsedAddMemoInstruction } from '../instructions';\n\nexport const MEMO_PROGRAM_ADDRESS =\n  'MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr' as Address<'MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr'>;\n\nexport enum MemoInstruction {\n  AddMemo,\n}\n\nexport type ParsedMemoInstruction<\n  TProgram extends string = 'MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr',\n> = {\n  instructionType: MemoInstruction.AddMemo;\n} & ParsedAddMemoInstruction<TProgram>;\n","/**\n * This code was AUTOGENERATED using the codama library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun codama to update it.\n *\n * @see https://github.com/codama-idl/codama\n */\n\nimport {\n  AccountRole,\n  combineCodec,\n  getStructDecoder,\n  getStructEncoder,\n  getUtf8Decoder,\n  getUtf8Encoder,\n  type Address,\n  type Codec,\n  type Decoder,\n  type Encoder,\n  type IAccountMeta,\n  type IInstruction,\n  type IInstructionWithAccounts,\n  type IInstructionWithData,\n  type TransactionSigner,\n} from '@solana/kit';\nimport { MEMO_PROGRAM_ADDRESS } from '../programs';\n\nexport type AddMemoInstruction<\n  TProgram extends string = typeof MEMO_PROGRAM_ADDRESS,\n  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],\n> = IInstruction<TProgram> &\n  IInstructionWithData<Uint8Array> &\n  IInstructionWithAccounts<TRemainingAccounts>;\n\nexport type AddMemoInstructionData = { memo: string };\n\nexport type AddMemoInstructionDataArgs = AddMemoInstructionData;\n\nexport function getAddMemoInstructionDataEncoder(): Encoder<AddMemoInstructionDataArgs> {\n  return getStructEncoder([['memo', getUtf8Encoder()]]);\n}\n\nexport function getAddMemoInstructionDataDecoder(): Decoder<AddMemoInstructionData> {\n  return getStructDecoder([['memo', getUtf8Decoder()]]);\n}\n\nexport function getAddMemoInstructionDataCodec(): Codec<\n  AddMemoInstructionDataArgs,\n  AddMemoInstructionData\n> {\n  return combineCodec(\n    getAddMemoInstructionDataEncoder(),\n    getAddMemoInstructionDataDecoder()\n  );\n}\n\nexport type AddMemoInput = {\n  memo: AddMemoInstructionDataArgs['memo'];\n  signers?: Array<TransactionSigner>;\n};\n\nexport function getAddMemoInstruction<\n  TProgramAddress extends Address = typeof MEMO_PROGRAM_ADDRESS,\n>(\n  input: AddMemoInput,\n  config?: { programAddress?: TProgramAddress }\n): AddMemoInstruction<TProgramAddress> {\n  // Program address.\n  const programAddress = config?.programAddress ?? MEMO_PROGRAM_ADDRESS;\n\n  // Original args.\n  const args = { ...input };\n\n  // Remaining accounts.\n  const remainingAccounts: IAccountMeta[] = (args.signers ?? []).map(\n    (signer) => ({\n      address: signer.address,\n      role: AccountRole.READONLY_SIGNER,\n      signer,\n    })\n  );\n\n  const instruction = {\n    accounts: remainingAccounts,\n    programAddress,\n    data: getAddMemoInstructionDataEncoder().encode(\n      args as AddMemoInstructionDataArgs\n    ),\n  } as AddMemoInstruction<TProgramAddress>;\n\n  return instruction;\n}\n\nexport type ParsedAddMemoInstruction<\n  TProgram extends string = typeof MEMO_PROGRAM_ADDRESS,\n> = {\n  programAddress: Address<TProgram>;\n  data: AddMemoInstructionData;\n};\n\nexport function parseAddMemoInstruction<TProgram extends string>(\n  instruction: IInstruction<TProgram> & IInstructionWithData<Uint8Array>\n): ParsedAddMemoInstruction<TProgram> {\n  return {\n    programAddress: instruction.programAddress,\n    data: getAddMemoInstructionDataDecoder().decode(instruction.data),\n  };\n}\n"]}