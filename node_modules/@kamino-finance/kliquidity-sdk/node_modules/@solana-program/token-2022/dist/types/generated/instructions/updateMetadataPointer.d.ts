/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type AccountSignerMeta, type Address, type FixedSizeCodec, type FixedSizeDecoder, type FixedSizeEncoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type Option, type OptionOrNullable, type ReadonlyAccount, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { TOKEN_2022_PROGRAM_ADDRESS } from '../programs';
export declare const UPDATE_METADATA_POINTER_DISCRIMINATOR = 39;
export declare function getUpdateMetadataPointerDiscriminatorBytes(): ReadonlyUint8Array;
export declare const UPDATE_METADATA_POINTER_METADATA_POINTER_DISCRIMINATOR = 1;
export declare function getUpdateMetadataPointerMetadataPointerDiscriminatorBytes(): ReadonlyUint8Array;
export type UpdateMetadataPointerInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMint extends string | AccountMeta<string> = string, TAccountMetadataPointerAuthority extends string | AccountMeta<string> = string, TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountMint extends string ? WritableAccount<TAccountMint> : TAccountMint,
    TAccountMetadataPointerAuthority extends string ? ReadonlyAccount<TAccountMetadataPointerAuthority> : TAccountMetadataPointerAuthority,
    ...TRemainingAccounts
]>;
export type UpdateMetadataPointerInstructionData = {
    discriminator: number;
    metadataPointerDiscriminator: number;
    /** The new account address that holds the metadata. */
    metadataAddress: Option<Address>;
};
export type UpdateMetadataPointerInstructionDataArgs = {
    /** The new account address that holds the metadata. */
    metadataAddress: OptionOrNullable<Address>;
};
export declare function getUpdateMetadataPointerInstructionDataEncoder(): FixedSizeEncoder<UpdateMetadataPointerInstructionDataArgs>;
export declare function getUpdateMetadataPointerInstructionDataDecoder(): FixedSizeDecoder<UpdateMetadataPointerInstructionData>;
export declare function getUpdateMetadataPointerInstructionDataCodec(): FixedSizeCodec<UpdateMetadataPointerInstructionDataArgs, UpdateMetadataPointerInstructionData>;
export type UpdateMetadataPointerInput<TAccountMint extends string = string, TAccountMetadataPointerAuthority extends string = string> = {
    /** The mint to initialize. */
    mint: Address<TAccountMint>;
    /** The metadata pointer authority or its multisignature account. */
    metadataPointerAuthority: Address<TAccountMetadataPointerAuthority> | TransactionSigner<TAccountMetadataPointerAuthority>;
    metadataAddress: UpdateMetadataPointerInstructionDataArgs['metadataAddress'];
    multiSigners?: Array<TransactionSigner>;
};
export declare function getUpdateMetadataPointerInstruction<TAccountMint extends string, TAccountMetadataPointerAuthority extends string, TProgramAddress extends Address = typeof TOKEN_2022_PROGRAM_ADDRESS>(input: UpdateMetadataPointerInput<TAccountMint, TAccountMetadataPointerAuthority>, config?: {
    programAddress?: TProgramAddress;
}): UpdateMetadataPointerInstruction<TProgramAddress, TAccountMint, (typeof input)['metadataPointerAuthority'] extends TransactionSigner<TAccountMetadataPointerAuthority> ? ReadonlySignerAccount<TAccountMetadataPointerAuthority> & AccountSignerMeta<TAccountMetadataPointerAuthority> : TAccountMetadataPointerAuthority>;
export type ParsedUpdateMetadataPointerInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** The mint to initialize. */
        mint: TAccountMetas[0];
        /** The metadata pointer authority or its multisignature account. */
        metadataPointerAuthority: TAccountMetas[1];
    };
    data: UpdateMetadataPointerInstructionData;
};
export declare function parseUpdateMetadataPointerInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedUpdateMetadataPointerInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=updateMetadataPointer.d.ts.map