/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type AccountSignerMeta, type Address, type Codec, type Decoder, type Encoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { TOKEN_2022_PROGRAM_ADDRESS } from '../programs';
export declare const UPDATE_TOKEN_GROUP_MAX_SIZE_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
export declare function getUpdateTokenGroupMaxSizeDiscriminatorBytes(): ReadonlyUint8Array;
export type UpdateTokenGroupMaxSizeInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountGroup extends string | AccountMeta<string> = string, TAccountUpdateAuthority extends string | AccountMeta<string> = string, TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountGroup extends string ? WritableAccount<TAccountGroup> : TAccountGroup,
    TAccountUpdateAuthority extends string ? ReadonlySignerAccount<TAccountUpdateAuthority> & AccountSignerMeta<TAccountUpdateAuthority> : TAccountUpdateAuthority,
    ...TRemainingAccounts
]>;
export type UpdateTokenGroupMaxSizeInstructionData = {
    discriminator: ReadonlyUint8Array;
    /** New max size for the group */
    maxSize: bigint;
};
export type UpdateTokenGroupMaxSizeInstructionDataArgs = {
    /** New max size for the group */
    maxSize: number | bigint;
};
export declare function getUpdateTokenGroupMaxSizeInstructionDataEncoder(): Encoder<UpdateTokenGroupMaxSizeInstructionDataArgs>;
export declare function getUpdateTokenGroupMaxSizeInstructionDataDecoder(): Decoder<UpdateTokenGroupMaxSizeInstructionData>;
export declare function getUpdateTokenGroupMaxSizeInstructionDataCodec(): Codec<UpdateTokenGroupMaxSizeInstructionDataArgs, UpdateTokenGroupMaxSizeInstructionData>;
export type UpdateTokenGroupMaxSizeInput<TAccountGroup extends string = string, TAccountUpdateAuthority extends string = string> = {
    group: Address<TAccountGroup>;
    updateAuthority: TransactionSigner<TAccountUpdateAuthority>;
    maxSize: UpdateTokenGroupMaxSizeInstructionDataArgs['maxSize'];
};
export declare function getUpdateTokenGroupMaxSizeInstruction<TAccountGroup extends string, TAccountUpdateAuthority extends string, TProgramAddress extends Address = typeof TOKEN_2022_PROGRAM_ADDRESS>(input: UpdateTokenGroupMaxSizeInput<TAccountGroup, TAccountUpdateAuthority>, config?: {
    programAddress?: TProgramAddress;
}): UpdateTokenGroupMaxSizeInstruction<TProgramAddress, TAccountGroup, TAccountUpdateAuthority>;
export type ParsedUpdateTokenGroupMaxSizeInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        group: TAccountMetas[0];
        updateAuthority: TAccountMetas[1];
    };
    data: UpdateTokenGroupMaxSizeInstructionData;
};
export declare function parseUpdateTokenGroupMaxSizeInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedUpdateTokenGroupMaxSizeInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=updateTokenGroupMaxSize.d.ts.map