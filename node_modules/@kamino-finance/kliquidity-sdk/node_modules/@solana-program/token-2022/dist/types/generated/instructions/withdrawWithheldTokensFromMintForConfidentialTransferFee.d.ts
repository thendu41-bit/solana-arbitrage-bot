/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type AccountSignerMeta, type Address, type FixedSizeCodec, type FixedSizeDecoder, type FixedSizeEncoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type ReadonlyAccount, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { TOKEN_2022_PROGRAM_ADDRESS } from '../programs';
import { type DecryptableBalance, type DecryptableBalanceArgs } from '../types';
export declare const WITHDRAW_WITHHELD_TOKENS_FROM_MINT_FOR_CONFIDENTIAL_TRANSFER_FEE_DISCRIMINATOR = 37;
export declare function getWithdrawWithheldTokensFromMintForConfidentialTransferFeeDiscriminatorBytes(): ReadonlyUint8Array;
export declare const WITHDRAW_WITHHELD_TOKENS_FROM_MINT_FOR_CONFIDENTIAL_TRANSFER_FEE_CONFIDENTIAL_TRANSFER_FEE_DISCRIMINATOR = 1;
export declare function getWithdrawWithheldTokensFromMintForConfidentialTransferFeeConfidentialTransferFeeDiscriminatorBytes(): ReadonlyUint8Array;
export type WithdrawWithheldTokensFromMintForConfidentialTransferFeeInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMint extends string | AccountMeta<string> = string, TAccountDestination extends string | AccountMeta<string> = string, TAccountInstructionsSysvarOrContextState extends string | AccountMeta<string> = string, TAccountRecord extends string | AccountMeta<string> = string, TAccountAuthority extends string | AccountMeta<string> = string, TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountMint extends string ? WritableAccount<TAccountMint> : TAccountMint,
    TAccountDestination extends string ? WritableAccount<TAccountDestination> : TAccountDestination,
    TAccountInstructionsSysvarOrContextState extends string ? ReadonlyAccount<TAccountInstructionsSysvarOrContextState> : TAccountInstructionsSysvarOrContextState,
    TAccountRecord extends string ? ReadonlyAccount<TAccountRecord> : TAccountRecord,
    TAccountAuthority extends string ? ReadonlyAccount<TAccountAuthority> : TAccountAuthority,
    ...TRemainingAccounts
]>;
export type WithdrawWithheldTokensFromMintForConfidentialTransferFeeInstructionData = {
    discriminator: number;
    confidentialTransferFeeDiscriminator: number;
    /** Proof instruction offset */
    proofInstructionOffset: number;
    /** The new decryptable balance in the destination token account */
    newDecryptableAvailableBalance: DecryptableBalance;
};
export type WithdrawWithheldTokensFromMintForConfidentialTransferFeeInstructionDataArgs = {
    /** Proof instruction offset */
    proofInstructionOffset: number;
    /** The new decryptable balance in the destination token account */
    newDecryptableAvailableBalance: DecryptableBalanceArgs;
};
export declare function getWithdrawWithheldTokensFromMintForConfidentialTransferFeeInstructionDataEncoder(): FixedSizeEncoder<WithdrawWithheldTokensFromMintForConfidentialTransferFeeInstructionDataArgs>;
export declare function getWithdrawWithheldTokensFromMintForConfidentialTransferFeeInstructionDataDecoder(): FixedSizeDecoder<WithdrawWithheldTokensFromMintForConfidentialTransferFeeInstructionData>;
export declare function getWithdrawWithheldTokensFromMintForConfidentialTransferFeeInstructionDataCodec(): FixedSizeCodec<WithdrawWithheldTokensFromMintForConfidentialTransferFeeInstructionDataArgs, WithdrawWithheldTokensFromMintForConfidentialTransferFeeInstructionData>;
export type WithdrawWithheldTokensFromMintForConfidentialTransferFeeInput<TAccountMint extends string = string, TAccountDestination extends string = string, TAccountInstructionsSysvarOrContextState extends string = string, TAccountRecord extends string = string, TAccountAuthority extends string = string> = {
    /** The token mint. */
    mint: Address<TAccountMint>;
    /** The fee receiver account. */
    destination: Address<TAccountDestination>;
    /** Instructions sysvar or context state account */
    instructionsSysvarOrContextState: Address<TAccountInstructionsSysvarOrContextState>;
    /** Optional record account if proof is read from record */
    record?: Address<TAccountRecord>;
    /** The mint's withdraw_withheld_authority */
    authority: Address<TAccountAuthority> | TransactionSigner<TAccountAuthority>;
    proofInstructionOffset: WithdrawWithheldTokensFromMintForConfidentialTransferFeeInstructionDataArgs['proofInstructionOffset'];
    newDecryptableAvailableBalance: WithdrawWithheldTokensFromMintForConfidentialTransferFeeInstructionDataArgs['newDecryptableAvailableBalance'];
    multiSigners?: Array<TransactionSigner>;
};
export declare function getWithdrawWithheldTokensFromMintForConfidentialTransferFeeInstruction<TAccountMint extends string, TAccountDestination extends string, TAccountInstructionsSysvarOrContextState extends string, TAccountRecord extends string, TAccountAuthority extends string, TProgramAddress extends Address = typeof TOKEN_2022_PROGRAM_ADDRESS>(input: WithdrawWithheldTokensFromMintForConfidentialTransferFeeInput<TAccountMint, TAccountDestination, TAccountInstructionsSysvarOrContextState, TAccountRecord, TAccountAuthority>, config?: {
    programAddress?: TProgramAddress;
}): WithdrawWithheldTokensFromMintForConfidentialTransferFeeInstruction<TProgramAddress, TAccountMint, TAccountDestination, TAccountInstructionsSysvarOrContextState, TAccountRecord, (typeof input)['authority'] extends TransactionSigner<TAccountAuthority> ? ReadonlySignerAccount<TAccountAuthority> & AccountSignerMeta<TAccountAuthority> : TAccountAuthority>;
export type ParsedWithdrawWithheldTokensFromMintForConfidentialTransferFeeInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** The token mint. */
        mint: TAccountMetas[0];
        /** The fee receiver account. */
        destination: TAccountMetas[1];
        /** Instructions sysvar or context state account */
        instructionsSysvarOrContextState: TAccountMetas[2];
        /** Optional record account if proof is read from record */
        record?: TAccountMetas[3] | undefined;
        /** The mint's withdraw_withheld_authority */
        authority: TAccountMetas[4];
    };
    data: WithdrawWithheldTokensFromMintForConfidentialTransferFeeInstructionData;
};
export declare function parseWithdrawWithheldTokensFromMintForConfidentialTransferFeeInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedWithdrawWithheldTokensFromMintForConfidentialTransferFeeInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=withdrawWithheldTokensFromMintForConfidentialTransferFee.d.ts.map