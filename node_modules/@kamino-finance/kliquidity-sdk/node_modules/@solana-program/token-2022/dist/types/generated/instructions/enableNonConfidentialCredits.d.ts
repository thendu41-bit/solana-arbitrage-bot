/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type AccountSignerMeta, type Address, type FixedSizeCodec, type FixedSizeDecoder, type FixedSizeEncoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type ReadonlyAccount, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { TOKEN_2022_PROGRAM_ADDRESS } from '../programs';
export declare const ENABLE_NON_CONFIDENTIAL_CREDITS_DISCRIMINATOR = 27;
export declare function getEnableNonConfidentialCreditsDiscriminatorBytes(): ReadonlyUint8Array;
export declare const ENABLE_NON_CONFIDENTIAL_CREDITS_CONFIDENTIAL_TRANSFER_DISCRIMINATOR = 11;
export declare function getEnableNonConfidentialCreditsConfidentialTransferDiscriminatorBytes(): ReadonlyUint8Array;
export type EnableNonConfidentialCreditsInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountToken extends string | AccountMeta<string> = string, TAccountAuthority extends string | AccountMeta<string> = string, TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountToken extends string ? WritableAccount<TAccountToken> : TAccountToken,
    TAccountAuthority extends string ? ReadonlyAccount<TAccountAuthority> : TAccountAuthority,
    ...TRemainingAccounts
]>;
export type EnableNonConfidentialCreditsInstructionData = {
    discriminator: number;
    confidentialTransferDiscriminator: number;
};
export type EnableNonConfidentialCreditsInstructionDataArgs = {};
export declare function getEnableNonConfidentialCreditsInstructionDataEncoder(): FixedSizeEncoder<EnableNonConfidentialCreditsInstructionDataArgs>;
export declare function getEnableNonConfidentialCreditsInstructionDataDecoder(): FixedSizeDecoder<EnableNonConfidentialCreditsInstructionData>;
export declare function getEnableNonConfidentialCreditsInstructionDataCodec(): FixedSizeCodec<EnableNonConfidentialCreditsInstructionDataArgs, EnableNonConfidentialCreditsInstructionData>;
export type EnableNonConfidentialCreditsInput<TAccountToken extends string = string, TAccountAuthority extends string = string> = {
    /** The SPL Token account. */
    token: Address<TAccountToken>;
    /** The source account's owner/delegate or its multisignature account. */
    authority: Address<TAccountAuthority> | TransactionSigner<TAccountAuthority>;
    multiSigners?: Array<TransactionSigner>;
};
export declare function getEnableNonConfidentialCreditsInstruction<TAccountToken extends string, TAccountAuthority extends string, TProgramAddress extends Address = typeof TOKEN_2022_PROGRAM_ADDRESS>(input: EnableNonConfidentialCreditsInput<TAccountToken, TAccountAuthority>, config?: {
    programAddress?: TProgramAddress;
}): EnableNonConfidentialCreditsInstruction<TProgramAddress, TAccountToken, (typeof input)['authority'] extends TransactionSigner<TAccountAuthority> ? ReadonlySignerAccount<TAccountAuthority> & AccountSignerMeta<TAccountAuthority> : TAccountAuthority>;
export type ParsedEnableNonConfidentialCreditsInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** The SPL Token account. */
        token: TAccountMetas[0];
        /** The source account's owner/delegate or its multisignature account. */
        authority: TAccountMetas[1];
    };
    data: EnableNonConfidentialCreditsInstructionData;
};
export declare function parseEnableNonConfidentialCreditsInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedEnableNonConfidentialCreditsInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=enableNonConfidentialCredits.d.ts.map