/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type AccountSignerMeta, type Address, type FixedSizeCodec, type FixedSizeDecoder, type FixedSizeEncoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type ReadonlyAccount, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { TOKEN_2022_PROGRAM_ADDRESS } from '../programs';
export declare const ENABLE_CPI_GUARD_DISCRIMINATOR = 34;
export declare function getEnableCpiGuardDiscriminatorBytes(): ReadonlyUint8Array;
export declare const ENABLE_CPI_GUARD_CPI_GUARD_DISCRIMINATOR = 0;
export declare function getEnableCpiGuardCpiGuardDiscriminatorBytes(): ReadonlyUint8Array;
export type EnableCpiGuardInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountToken extends string | AccountMeta<string> = string, TAccountOwner extends string | AccountMeta<string> = string, TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountToken extends string ? WritableAccount<TAccountToken> : TAccountToken,
    TAccountOwner extends string ? ReadonlyAccount<TAccountOwner> : TAccountOwner,
    ...TRemainingAccounts
]>;
export type EnableCpiGuardInstructionData = {
    discriminator: number;
    cpiGuardDiscriminator: number;
};
export type EnableCpiGuardInstructionDataArgs = {};
export declare function getEnableCpiGuardInstructionDataEncoder(): FixedSizeEncoder<EnableCpiGuardInstructionDataArgs>;
export declare function getEnableCpiGuardInstructionDataDecoder(): FixedSizeDecoder<EnableCpiGuardInstructionData>;
export declare function getEnableCpiGuardInstructionDataCodec(): FixedSizeCodec<EnableCpiGuardInstructionDataArgs, EnableCpiGuardInstructionData>;
export type EnableCpiGuardInput<TAccountToken extends string = string, TAccountOwner extends string = string> = {
    /** The token account to update. */
    token: Address<TAccountToken>;
    /** The account's owner/delegate or its multisignature account. */
    owner: Address<TAccountOwner> | TransactionSigner<TAccountOwner>;
    multiSigners?: Array<TransactionSigner>;
};
export declare function getEnableCpiGuardInstruction<TAccountToken extends string, TAccountOwner extends string, TProgramAddress extends Address = typeof TOKEN_2022_PROGRAM_ADDRESS>(input: EnableCpiGuardInput<TAccountToken, TAccountOwner>, config?: {
    programAddress?: TProgramAddress;
}): EnableCpiGuardInstruction<TProgramAddress, TAccountToken, (typeof input)['owner'] extends TransactionSigner<TAccountOwner> ? ReadonlySignerAccount<TAccountOwner> & AccountSignerMeta<TAccountOwner> : TAccountOwner>;
export type ParsedEnableCpiGuardInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** The token account to update. */
        token: TAccountMetas[0];
        /** The account's owner/delegate or its multisignature account. */
        owner: TAccountMetas[1];
    };
    data: EnableCpiGuardInstructionData;
};
export declare function parseEnableCpiGuardInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedEnableCpiGuardInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=enableCpiGuard.d.ts.map