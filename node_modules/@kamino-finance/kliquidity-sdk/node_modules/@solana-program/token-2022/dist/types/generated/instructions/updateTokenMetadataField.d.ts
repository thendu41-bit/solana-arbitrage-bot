/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type AccountSignerMeta, type Address, type Codec, type Decoder, type Encoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { TOKEN_2022_PROGRAM_ADDRESS } from '../programs';
import { type TokenMetadataField, type TokenMetadataFieldArgs } from '../types';
export declare const UPDATE_TOKEN_METADATA_FIELD_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
export declare function getUpdateTokenMetadataFieldDiscriminatorBytes(): ReadonlyUint8Array;
export type UpdateTokenMetadataFieldInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMetadata extends string | AccountMeta<string> = string, TAccountUpdateAuthority extends string | AccountMeta<string> = string, TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountMetadata extends string ? WritableAccount<TAccountMetadata> : TAccountMetadata,
    TAccountUpdateAuthority extends string ? ReadonlySignerAccount<TAccountUpdateAuthority> & AccountSignerMeta<TAccountUpdateAuthority> : TAccountUpdateAuthority,
    ...TRemainingAccounts
]>;
export type UpdateTokenMetadataFieldInstructionData = {
    discriminator: ReadonlyUint8Array;
    /** Field to update in the metadata. */
    field: TokenMetadataField;
    /** Value to write for the field. */
    value: string;
};
export type UpdateTokenMetadataFieldInstructionDataArgs = {
    /** Field to update in the metadata. */
    field: TokenMetadataFieldArgs;
    /** Value to write for the field. */
    value: string;
};
export declare function getUpdateTokenMetadataFieldInstructionDataEncoder(): Encoder<UpdateTokenMetadataFieldInstructionDataArgs>;
export declare function getUpdateTokenMetadataFieldInstructionDataDecoder(): Decoder<UpdateTokenMetadataFieldInstructionData>;
export declare function getUpdateTokenMetadataFieldInstructionDataCodec(): Codec<UpdateTokenMetadataFieldInstructionDataArgs, UpdateTokenMetadataFieldInstructionData>;
export type UpdateTokenMetadataFieldInput<TAccountMetadata extends string = string, TAccountUpdateAuthority extends string = string> = {
    metadata: Address<TAccountMetadata>;
    updateAuthority: TransactionSigner<TAccountUpdateAuthority>;
    field: UpdateTokenMetadataFieldInstructionDataArgs['field'];
    value: UpdateTokenMetadataFieldInstructionDataArgs['value'];
};
export declare function getUpdateTokenMetadataFieldInstruction<TAccountMetadata extends string, TAccountUpdateAuthority extends string, TProgramAddress extends Address = typeof TOKEN_2022_PROGRAM_ADDRESS>(input: UpdateTokenMetadataFieldInput<TAccountMetadata, TAccountUpdateAuthority>, config?: {
    programAddress?: TProgramAddress;
}): UpdateTokenMetadataFieldInstruction<TProgramAddress, TAccountMetadata, TAccountUpdateAuthority>;
export type ParsedUpdateTokenMetadataFieldInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        metadata: TAccountMetas[0];
        updateAuthority: TAccountMetas[1];
    };
    data: UpdateTokenMetadataFieldInstructionData;
};
export declare function parseUpdateTokenMetadataFieldInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedUpdateTokenMetadataFieldInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=updateTokenMetadataField.d.ts.map