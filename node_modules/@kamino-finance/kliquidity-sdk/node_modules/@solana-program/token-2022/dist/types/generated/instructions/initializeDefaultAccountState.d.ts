/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type Address, type FixedSizeCodec, type FixedSizeDecoder, type FixedSizeEncoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type ReadonlyUint8Array, type WritableAccount } from '@solana/kit';
import { TOKEN_2022_PROGRAM_ADDRESS } from '../programs';
import { type AccountState, type AccountStateArgs } from '../types';
export declare const INITIALIZE_DEFAULT_ACCOUNT_STATE_DISCRIMINATOR = 28;
export declare function getInitializeDefaultAccountStateDiscriminatorBytes(): ReadonlyUint8Array;
export declare const INITIALIZE_DEFAULT_ACCOUNT_STATE_DEFAULT_ACCOUNT_STATE_DISCRIMINATOR = 0;
export declare function getInitializeDefaultAccountStateDefaultAccountStateDiscriminatorBytes(): ReadonlyUint8Array;
export type InitializeDefaultAccountStateInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMint extends string | AccountMeta<string> = string, TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountMint extends string ? WritableAccount<TAccountMint> : TAccountMint,
    ...TRemainingAccounts
]>;
export type InitializeDefaultAccountStateInstructionData = {
    discriminator: number;
    defaultAccountStateDiscriminator: number;
    /** The state each new token account should start with. */
    state: AccountState;
};
export type InitializeDefaultAccountStateInstructionDataArgs = {
    /** The state each new token account should start with. */
    state: AccountStateArgs;
};
export declare function getInitializeDefaultAccountStateInstructionDataEncoder(): FixedSizeEncoder<InitializeDefaultAccountStateInstructionDataArgs>;
export declare function getInitializeDefaultAccountStateInstructionDataDecoder(): FixedSizeDecoder<InitializeDefaultAccountStateInstructionData>;
export declare function getInitializeDefaultAccountStateInstructionDataCodec(): FixedSizeCodec<InitializeDefaultAccountStateInstructionDataArgs, InitializeDefaultAccountStateInstructionData>;
export type InitializeDefaultAccountStateInput<TAccountMint extends string = string> = {
    /** The mint. */
    mint: Address<TAccountMint>;
    state: InitializeDefaultAccountStateInstructionDataArgs['state'];
};
export declare function getInitializeDefaultAccountStateInstruction<TAccountMint extends string, TProgramAddress extends Address = typeof TOKEN_2022_PROGRAM_ADDRESS>(input: InitializeDefaultAccountStateInput<TAccountMint>, config?: {
    programAddress?: TProgramAddress;
}): InitializeDefaultAccountStateInstruction<TProgramAddress, TAccountMint>;
export type ParsedInitializeDefaultAccountStateInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** The mint. */
        mint: TAccountMetas[0];
    };
    data: InitializeDefaultAccountStateInstructionData;
};
export declare function parseInitializeDefaultAccountStateInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedInitializeDefaultAccountStateInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=initializeDefaultAccountState.d.ts.map