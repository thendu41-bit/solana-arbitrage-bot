/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type Address, type FixedSizeCodec, type FixedSizeDecoder, type FixedSizeEncoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type Option, type OptionOrNullable, type ReadonlyUint8Array, type WritableAccount } from '@solana/kit';
import { TOKEN_2022_PROGRAM_ADDRESS } from '../programs';
export declare const INITIALIZE_CONFIDENTIAL_TRANSFER_MINT_DISCRIMINATOR = 27;
export declare function getInitializeConfidentialTransferMintDiscriminatorBytes(): ReadonlyUint8Array;
export declare const INITIALIZE_CONFIDENTIAL_TRANSFER_MINT_CONFIDENTIAL_TRANSFER_DISCRIMINATOR = 0;
export declare function getInitializeConfidentialTransferMintConfidentialTransferDiscriminatorBytes(): ReadonlyUint8Array;
export type InitializeConfidentialTransferMintInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMint extends string | AccountMeta<string> = string, TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountMint extends string ? WritableAccount<TAccountMint> : TAccountMint,
    ...TRemainingAccounts
]>;
export type InitializeConfidentialTransferMintInstructionData = {
    discriminator: number;
    confidentialTransferDiscriminator: number;
    /**
     * Authority to modify the `ConfidentialTransferMint` configuration and to
     * approve new accounts.
     */
    authority: Option<Address>;
    /**
     * Determines if newly configured accounts must be approved by the
     * `authority` before they may be used by the user.
     */
    autoApproveNewAccounts: boolean;
    /** New authority to decode any transfer amount in a confidential transfer. */
    auditorElgamalPubkey: Option<Address>;
};
export type InitializeConfidentialTransferMintInstructionDataArgs = {
    /**
     * Authority to modify the `ConfidentialTransferMint` configuration and to
     * approve new accounts.
     */
    authority: OptionOrNullable<Address>;
    /**
     * Determines if newly configured accounts must be approved by the
     * `authority` before they may be used by the user.
     */
    autoApproveNewAccounts: boolean;
    /** New authority to decode any transfer amount in a confidential transfer. */
    auditorElgamalPubkey: OptionOrNullable<Address>;
};
export declare function getInitializeConfidentialTransferMintInstructionDataEncoder(): FixedSizeEncoder<InitializeConfidentialTransferMintInstructionDataArgs>;
export declare function getInitializeConfidentialTransferMintInstructionDataDecoder(): FixedSizeDecoder<InitializeConfidentialTransferMintInstructionData>;
export declare function getInitializeConfidentialTransferMintInstructionDataCodec(): FixedSizeCodec<InitializeConfidentialTransferMintInstructionDataArgs, InitializeConfidentialTransferMintInstructionData>;
export type InitializeConfidentialTransferMintInput<TAccountMint extends string = string> = {
    /** The SPL Token mint. */
    mint: Address<TAccountMint>;
    authority: InitializeConfidentialTransferMintInstructionDataArgs['authority'];
    autoApproveNewAccounts: InitializeConfidentialTransferMintInstructionDataArgs['autoApproveNewAccounts'];
    auditorElgamalPubkey: InitializeConfidentialTransferMintInstructionDataArgs['auditorElgamalPubkey'];
};
export declare function getInitializeConfidentialTransferMintInstruction<TAccountMint extends string, TProgramAddress extends Address = typeof TOKEN_2022_PROGRAM_ADDRESS>(input: InitializeConfidentialTransferMintInput<TAccountMint>, config?: {
    programAddress?: TProgramAddress;
}): InitializeConfidentialTransferMintInstruction<TProgramAddress, TAccountMint>;
export type ParsedInitializeConfidentialTransferMintInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** The SPL Token mint. */
        mint: TAccountMetas[0];
    };
    data: InitializeConfidentialTransferMintInstructionData;
};
export declare function parseInitializeConfidentialTransferMintInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedInitializeConfidentialTransferMintInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=initializeConfidentialTransferMint.d.ts.map