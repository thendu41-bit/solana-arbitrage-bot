/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type AccountSignerMeta, type Address, type Codec, type Decoder, type Encoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { TOKEN_2022_PROGRAM_ADDRESS } from '../programs';
export declare const REMOVE_TOKEN_METADATA_KEY_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
export declare function getRemoveTokenMetadataKeyDiscriminatorBytes(): ReadonlyUint8Array;
export type RemoveTokenMetadataKeyInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMetadata extends string | AccountMeta<string> = string, TAccountUpdateAuthority extends string | AccountMeta<string> = string, TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountMetadata extends string ? WritableAccount<TAccountMetadata> : TAccountMetadata,
    TAccountUpdateAuthority extends string ? ReadonlySignerAccount<TAccountUpdateAuthority> & AccountSignerMeta<TAccountUpdateAuthority> : TAccountUpdateAuthority,
    ...TRemainingAccounts
]>;
export type RemoveTokenMetadataKeyInstructionData = {
    discriminator: ReadonlyUint8Array;
    /**
     * If the idempotent flag is set to true, then the instruction will not
     * error if the key does not exist
     */
    idempotent: boolean;
    /** Key to remove in the additional metadata portion. */
    key: string;
};
export type RemoveTokenMetadataKeyInstructionDataArgs = {
    /**
     * If the idempotent flag is set to true, then the instruction will not
     * error if the key does not exist
     */
    idempotent?: boolean;
    /** Key to remove in the additional metadata portion. */
    key: string;
};
export declare function getRemoveTokenMetadataKeyInstructionDataEncoder(): Encoder<RemoveTokenMetadataKeyInstructionDataArgs>;
export declare function getRemoveTokenMetadataKeyInstructionDataDecoder(): Decoder<RemoveTokenMetadataKeyInstructionData>;
export declare function getRemoveTokenMetadataKeyInstructionDataCodec(): Codec<RemoveTokenMetadataKeyInstructionDataArgs, RemoveTokenMetadataKeyInstructionData>;
export type RemoveTokenMetadataKeyInput<TAccountMetadata extends string = string, TAccountUpdateAuthority extends string = string> = {
    metadata: Address<TAccountMetadata>;
    updateAuthority: TransactionSigner<TAccountUpdateAuthority>;
    idempotent?: RemoveTokenMetadataKeyInstructionDataArgs['idempotent'];
    key: RemoveTokenMetadataKeyInstructionDataArgs['key'];
};
export declare function getRemoveTokenMetadataKeyInstruction<TAccountMetadata extends string, TAccountUpdateAuthority extends string, TProgramAddress extends Address = typeof TOKEN_2022_PROGRAM_ADDRESS>(input: RemoveTokenMetadataKeyInput<TAccountMetadata, TAccountUpdateAuthority>, config?: {
    programAddress?: TProgramAddress;
}): RemoveTokenMetadataKeyInstruction<TProgramAddress, TAccountMetadata, TAccountUpdateAuthority>;
export type ParsedRemoveTokenMetadataKeyInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        metadata: TAccountMetas[0];
        updateAuthority: TAccountMetas[1];
    };
    data: RemoveTokenMetadataKeyInstructionData;
};
export declare function parseRemoveTokenMetadataKeyInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedRemoveTokenMetadataKeyInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=removeTokenMetadataKey.d.ts.map