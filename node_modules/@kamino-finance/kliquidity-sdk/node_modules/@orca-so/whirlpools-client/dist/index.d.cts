import { ReadonlyUint8Array, Address, Encoder, Decoder, Codec, EncodedAccount, Account, MaybeEncodedAccount, MaybeAccount, fetchEncodedAccount, FetchAccountConfig, fetchEncodedAccounts, FetchAccountsConfig, SolanaError, SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM, IAccountMeta, IInstruction, IInstructionWithData, IInstructionWithAccounts, WritableAccount, ReadonlyAccount, ReadonlySignerAccount, IAccountSignerMeta, TransactionSigner, Option, OptionOrNullable, WritableSignerAccount, GetProgramAccountsMemcmpFilter, Rpc, GetProgramAccountsApi, ProgramDerivedAddress } from '@solana/kit';

declare const ADAPTIVE_FEE_TIER_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getAdaptiveFeeTierDiscriminatorBytes(): ReadonlyUint8Array;
type AdaptiveFeeTier = {
    discriminator: ReadonlyUint8Array;
    whirlpoolsConfig: Address;
    feeTierIndex: number;
    tickSpacing: number;
    initializePoolAuthority: Address;
    delegatedFeeAuthority: Address;
    defaultBaseFeeRate: number;
    filterPeriod: number;
    decayPeriod: number;
    reductionFactor: number;
    adaptiveFeeControlFactor: number;
    maxVolatilityAccumulator: number;
    tickGroupSize: number;
    majorSwapThresholdTicks: number;
};
type AdaptiveFeeTierArgs = {
    whirlpoolsConfig: Address;
    feeTierIndex: number;
    tickSpacing: number;
    initializePoolAuthority: Address;
    delegatedFeeAuthority: Address;
    defaultBaseFeeRate: number;
    filterPeriod: number;
    decayPeriod: number;
    reductionFactor: number;
    adaptiveFeeControlFactor: number;
    maxVolatilityAccumulator: number;
    tickGroupSize: number;
    majorSwapThresholdTicks: number;
};
declare function getAdaptiveFeeTierEncoder(): Encoder<AdaptiveFeeTierArgs>;
declare function getAdaptiveFeeTierDecoder(): Decoder<AdaptiveFeeTier>;
declare function getAdaptiveFeeTierCodec(): Codec<AdaptiveFeeTierArgs, AdaptiveFeeTier>;
declare function decodeAdaptiveFeeTier<TAddress extends string = string>(encodedAccount: EncodedAccount<TAddress>): Account<AdaptiveFeeTier, TAddress>;
declare function decodeAdaptiveFeeTier<TAddress extends string = string>(encodedAccount: MaybeEncodedAccount<TAddress>): MaybeAccount<AdaptiveFeeTier, TAddress>;
declare function fetchAdaptiveFeeTier<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<Account<AdaptiveFeeTier, TAddress>>;
declare function fetchMaybeAdaptiveFeeTier<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<MaybeAccount<AdaptiveFeeTier, TAddress>>;
declare function fetchAllAdaptiveFeeTier(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<Account<AdaptiveFeeTier>[]>;
declare function fetchAllMaybeAdaptiveFeeTier(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<MaybeAccount<AdaptiveFeeTier>[]>;
declare function getAdaptiveFeeTierSize(): number;

declare const FEE_TIER_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getFeeTierDiscriminatorBytes(): ReadonlyUint8Array;
type FeeTier = {
    discriminator: ReadonlyUint8Array;
    whirlpoolsConfig: Address;
    tickSpacing: number;
    defaultFeeRate: number;
};
type FeeTierArgs = {
    whirlpoolsConfig: Address;
    tickSpacing: number;
    defaultFeeRate: number;
};
declare function getFeeTierEncoder(): Encoder<FeeTierArgs>;
declare function getFeeTierDecoder(): Decoder<FeeTier>;
declare function getFeeTierCodec(): Codec<FeeTierArgs, FeeTier>;
declare function decodeFeeTier<TAddress extends string = string>(encodedAccount: EncodedAccount<TAddress>): Account<FeeTier, TAddress>;
declare function decodeFeeTier<TAddress extends string = string>(encodedAccount: MaybeEncodedAccount<TAddress>): MaybeAccount<FeeTier, TAddress>;
declare function fetchFeeTier<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<Account<FeeTier, TAddress>>;
declare function fetchMaybeFeeTier<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<MaybeAccount<FeeTier, TAddress>>;
declare function fetchAllFeeTier(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<Account<FeeTier>[]>;
declare function fetchAllMaybeFeeTier(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<MaybeAccount<FeeTier>[]>;
declare function getFeeTierSize(): number;

declare enum AccountsType {
    TransferHookA = 0,
    TransferHookB = 1,
    TransferHookReward = 2,
    TransferHookInput = 3,
    TransferHookIntermediate = 4,
    TransferHookOutput = 5,
    SupplementalTickArrays = 6,
    SupplementalTickArraysOne = 7,
    SupplementalTickArraysTwo = 8
}
type AccountsTypeArgs = AccountsType;
declare function getAccountsTypeEncoder(): Encoder<AccountsTypeArgs>;
declare function getAccountsTypeDecoder(): Decoder<AccountsType>;
declare function getAccountsTypeCodec(): Codec<AccountsTypeArgs, AccountsType>;

type AdaptiveFeeConstants = {
    filterPeriod: number;
    decayPeriod: number;
    reductionFactor: number;
    adaptiveFeeControlFactor: number;
    maxVolatilityAccumulator: number;
    tickGroupSize: number;
    majorSwapThresholdTicks: number;
    reserved: ReadonlyUint8Array;
};
type AdaptiveFeeConstantsArgs = AdaptiveFeeConstants;
declare function getAdaptiveFeeConstantsEncoder(): Encoder<AdaptiveFeeConstantsArgs>;
declare function getAdaptiveFeeConstantsDecoder(): Decoder<AdaptiveFeeConstants>;
declare function getAdaptiveFeeConstantsCodec(): Codec<AdaptiveFeeConstantsArgs, AdaptiveFeeConstants>;

type AdaptiveFeeVariables = {
    lastReferenceUpdateTimestamp: bigint;
    lastMajorSwapTimestamp: bigint;
    volatilityReference: number;
    tickGroupIndexReference: number;
    volatilityAccumulator: number;
    reserved: ReadonlyUint8Array;
};
type AdaptiveFeeVariablesArgs = {
    lastReferenceUpdateTimestamp: number | bigint;
    lastMajorSwapTimestamp: number | bigint;
    volatilityReference: number;
    tickGroupIndexReference: number;
    volatilityAccumulator: number;
    reserved: ReadonlyUint8Array;
};
declare function getAdaptiveFeeVariablesEncoder(): Encoder<AdaptiveFeeVariablesArgs>;
declare function getAdaptiveFeeVariablesDecoder(): Decoder<AdaptiveFeeVariables>;
declare function getAdaptiveFeeVariablesCodec(): Codec<AdaptiveFeeVariablesArgs, AdaptiveFeeVariables>;

declare enum LockType {
    Permanent = 0
}
type LockTypeArgs = LockType;
declare function getLockTypeEncoder(): Encoder<LockTypeArgs>;
declare function getLockTypeDecoder(): Decoder<LockType>;
declare function getLockTypeCodec(): Codec<LockTypeArgs, LockType>;

declare enum LockTypeLabel {
    Permanent = 0
}
type LockTypeLabelArgs = LockTypeLabel;
declare function getLockTypeLabelEncoder(): Encoder<LockTypeLabelArgs>;
declare function getLockTypeLabelDecoder(): Decoder<LockTypeLabel>;
declare function getLockTypeLabelCodec(): Codec<LockTypeLabelArgs, LockTypeLabel>;

type PositionRewardInfo = {
    growthInsideCheckpoint: bigint;
    amountOwed: bigint;
};
type PositionRewardInfoArgs = {
    growthInsideCheckpoint: number | bigint;
    amountOwed: number | bigint;
};
declare function getPositionRewardInfoEncoder(): Encoder<PositionRewardInfoArgs>;
declare function getPositionRewardInfoDecoder(): Decoder<PositionRewardInfo>;
declare function getPositionRewardInfoCodec(): Codec<PositionRewardInfoArgs, PositionRewardInfo>;

type RemainingAccountsInfo = {
    slices: Array<RemainingAccountsSlice>;
};
type RemainingAccountsInfoArgs = {
    slices: Array<RemainingAccountsSliceArgs>;
};
declare function getRemainingAccountsInfoEncoder(): Encoder<RemainingAccountsInfoArgs>;
declare function getRemainingAccountsInfoDecoder(): Decoder<RemainingAccountsInfo>;
declare function getRemainingAccountsInfoCodec(): Codec<RemainingAccountsInfoArgs, RemainingAccountsInfo>;

type RemainingAccountsSlice = {
    accountsType: AccountsType;
    length: number;
};
type RemainingAccountsSliceArgs = {
    accountsType: AccountsTypeArgs;
    length: number;
};
declare function getRemainingAccountsSliceEncoder(): Encoder<RemainingAccountsSliceArgs>;
declare function getRemainingAccountsSliceDecoder(): Decoder<RemainingAccountsSlice>;
declare function getRemainingAccountsSliceCodec(): Codec<RemainingAccountsSliceArgs, RemainingAccountsSlice>;

type Tick = {
    initialized: boolean;
    liquidityNet: bigint;
    liquidityGross: bigint;
    feeGrowthOutsideA: bigint;
    feeGrowthOutsideB: bigint;
    rewardGrowthsOutside: Array<bigint>;
};
type TickArgs = {
    initialized: boolean;
    liquidityNet: number | bigint;
    liquidityGross: number | bigint;
    feeGrowthOutsideA: number | bigint;
    feeGrowthOutsideB: number | bigint;
    rewardGrowthsOutside: Array<number | bigint>;
};
declare function getTickEncoder(): Encoder<TickArgs>;
declare function getTickDecoder(): Decoder<Tick>;
declare function getTickCodec(): Codec<TickArgs, Tick>;

type WhirlpoolRewardInfo = {
    mint: Address;
    vault: Address;
    authority: Address;
    emissionsPerSecondX64: bigint;
    growthGlobalX64: bigint;
};
type WhirlpoolRewardInfoArgs = {
    mint: Address;
    vault: Address;
    authority: Address;
    emissionsPerSecondX64: number | bigint;
    growthGlobalX64: number | bigint;
};
declare function getWhirlpoolRewardInfoEncoder(): Encoder<WhirlpoolRewardInfoArgs>;
declare function getWhirlpoolRewardInfoDecoder(): Decoder<WhirlpoolRewardInfo>;
declare function getWhirlpoolRewardInfoCodec(): Codec<WhirlpoolRewardInfoArgs, WhirlpoolRewardInfo>;

declare const LOCK_CONFIG_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getLockConfigDiscriminatorBytes(): ReadonlyUint8Array;
type LockConfig = {
    discriminator: ReadonlyUint8Array;
    position: Address;
    positionOwner: Address;
    whirlpool: Address;
    lockedTimestamp: bigint;
    lockType: LockTypeLabel;
};
type LockConfigArgs = {
    position: Address;
    positionOwner: Address;
    whirlpool: Address;
    lockedTimestamp: number | bigint;
    lockType: LockTypeLabelArgs;
};
declare function getLockConfigEncoder(): Encoder<LockConfigArgs>;
declare function getLockConfigDecoder(): Decoder<LockConfig>;
declare function getLockConfigCodec(): Codec<LockConfigArgs, LockConfig>;
declare function decodeLockConfig<TAddress extends string = string>(encodedAccount: EncodedAccount<TAddress>): Account<LockConfig, TAddress>;
declare function decodeLockConfig<TAddress extends string = string>(encodedAccount: MaybeEncodedAccount<TAddress>): MaybeAccount<LockConfig, TAddress>;
declare function fetchLockConfig<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<Account<LockConfig, TAddress>>;
declare function fetchMaybeLockConfig<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<MaybeAccount<LockConfig, TAddress>>;
declare function fetchAllLockConfig(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<Account<LockConfig>[]>;
declare function fetchAllMaybeLockConfig(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<MaybeAccount<LockConfig>[]>;
declare function getLockConfigSize(): number;

declare const ORACLE_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getOracleDiscriminatorBytes(): ReadonlyUint8Array;
type Oracle = {
    discriminator: ReadonlyUint8Array;
    whirlpool: Address;
    tradeEnableTimestamp: bigint;
    adaptiveFeeConstants: AdaptiveFeeConstants;
    adaptiveFeeVariables: AdaptiveFeeVariables;
    reserved: ReadonlyUint8Array;
};
type OracleArgs = {
    whirlpool: Address;
    tradeEnableTimestamp: number | bigint;
    adaptiveFeeConstants: AdaptiveFeeConstantsArgs;
    adaptiveFeeVariables: AdaptiveFeeVariablesArgs;
    reserved: ReadonlyUint8Array;
};
declare function getOracleEncoder(): Encoder<OracleArgs>;
declare function getOracleDecoder(): Decoder<Oracle>;
declare function getOracleCodec(): Codec<OracleArgs, Oracle>;
declare function decodeOracle<TAddress extends string = string>(encodedAccount: EncodedAccount<TAddress>): Account<Oracle, TAddress>;
declare function decodeOracle<TAddress extends string = string>(encodedAccount: MaybeEncodedAccount<TAddress>): MaybeAccount<Oracle, TAddress>;
declare function fetchOracle<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<Account<Oracle, TAddress>>;
declare function fetchMaybeOracle<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<MaybeAccount<Oracle, TAddress>>;
declare function fetchAllOracle(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<Account<Oracle>[]>;
declare function fetchAllMaybeOracle(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<MaybeAccount<Oracle>[]>;
declare function getOracleSize(): number;

declare const POSITION_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getPositionDiscriminatorBytes(): ReadonlyUint8Array;
type Position = {
    discriminator: ReadonlyUint8Array;
    whirlpool: Address;
    positionMint: Address;
    liquidity: bigint;
    tickLowerIndex: number;
    tickUpperIndex: number;
    feeGrowthCheckpointA: bigint;
    feeOwedA: bigint;
    feeGrowthCheckpointB: bigint;
    feeOwedB: bigint;
    rewardInfos: Array<PositionRewardInfo>;
};
type PositionArgs = {
    whirlpool: Address;
    positionMint: Address;
    liquidity: number | bigint;
    tickLowerIndex: number;
    tickUpperIndex: number;
    feeGrowthCheckpointA: number | bigint;
    feeOwedA: number | bigint;
    feeGrowthCheckpointB: number | bigint;
    feeOwedB: number | bigint;
    rewardInfos: Array<PositionRewardInfoArgs>;
};
declare function getPositionEncoder(): Encoder<PositionArgs>;
declare function getPositionDecoder(): Decoder<Position>;
declare function getPositionCodec(): Codec<PositionArgs, Position>;
declare function decodePosition<TAddress extends string = string>(encodedAccount: EncodedAccount<TAddress>): Account<Position, TAddress>;
declare function decodePosition<TAddress extends string = string>(encodedAccount: MaybeEncodedAccount<TAddress>): MaybeAccount<Position, TAddress>;
declare function fetchPosition<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<Account<Position, TAddress>>;
declare function fetchMaybePosition<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<MaybeAccount<Position, TAddress>>;
declare function fetchAllPosition(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<Account<Position>[]>;
declare function fetchAllMaybePosition(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<MaybeAccount<Position>[]>;
declare function getPositionSize(): number;

declare const POSITION_BUNDLE_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getPositionBundleDiscriminatorBytes(): ReadonlyUint8Array;
type PositionBundle = {
    discriminator: ReadonlyUint8Array;
    positionBundleMint: Address;
    positionBitmap: ReadonlyUint8Array;
};
type PositionBundleArgs = {
    positionBundleMint: Address;
    positionBitmap: ReadonlyUint8Array;
};
declare function getPositionBundleEncoder(): Encoder<PositionBundleArgs>;
declare function getPositionBundleDecoder(): Decoder<PositionBundle>;
declare function getPositionBundleCodec(): Codec<PositionBundleArgs, PositionBundle>;
declare function decodePositionBundle<TAddress extends string = string>(encodedAccount: EncodedAccount<TAddress>): Account<PositionBundle, TAddress>;
declare function decodePositionBundle<TAddress extends string = string>(encodedAccount: MaybeEncodedAccount<TAddress>): MaybeAccount<PositionBundle, TAddress>;
declare function fetchPositionBundle<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<Account<PositionBundle, TAddress>>;
declare function fetchMaybePositionBundle<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<MaybeAccount<PositionBundle, TAddress>>;
declare function fetchAllPositionBundle(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<Account<PositionBundle>[]>;
declare function fetchAllMaybePositionBundle(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<MaybeAccount<PositionBundle>[]>;
declare function getPositionBundleSize(): number;

declare const TICK_ARRAY_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getTickArrayDiscriminatorBytes(): ReadonlyUint8Array;
type TickArray = {
    discriminator: ReadonlyUint8Array;
    startTickIndex: number;
    ticks: Array<Tick>;
    whirlpool: Address;
};
type TickArrayArgs = {
    startTickIndex: number;
    ticks: Array<TickArgs>;
    whirlpool: Address;
};
declare function getTickArrayEncoder(): Encoder<TickArrayArgs>;
declare function getTickArrayDecoder(): Decoder<TickArray>;
declare function getTickArrayCodec(): Codec<TickArrayArgs, TickArray>;
declare function decodeTickArray<TAddress extends string = string>(encodedAccount: EncodedAccount<TAddress>): Account<TickArray, TAddress>;
declare function decodeTickArray<TAddress extends string = string>(encodedAccount: MaybeEncodedAccount<TAddress>): MaybeAccount<TickArray, TAddress>;
declare function fetchTickArray<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<Account<TickArray, TAddress>>;
declare function fetchMaybeTickArray<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<MaybeAccount<TickArray, TAddress>>;
declare function fetchAllTickArray(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<Account<TickArray>[]>;
declare function fetchAllMaybeTickArray(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<MaybeAccount<TickArray>[]>;
declare function getTickArraySize(): number;

declare const TOKEN_BADGE_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getTokenBadgeDiscriminatorBytes(): ReadonlyUint8Array;
type TokenBadge = {
    discriminator: ReadonlyUint8Array;
    whirlpoolsConfig: Address;
    tokenMint: Address;
};
type TokenBadgeArgs = {
    whirlpoolsConfig: Address;
    tokenMint: Address;
};
declare function getTokenBadgeEncoder(): Encoder<TokenBadgeArgs>;
declare function getTokenBadgeDecoder(): Decoder<TokenBadge>;
declare function getTokenBadgeCodec(): Codec<TokenBadgeArgs, TokenBadge>;
declare function decodeTokenBadge<TAddress extends string = string>(encodedAccount: EncodedAccount<TAddress>): Account<TokenBadge, TAddress>;
declare function decodeTokenBadge<TAddress extends string = string>(encodedAccount: MaybeEncodedAccount<TAddress>): MaybeAccount<TokenBadge, TAddress>;
declare function fetchTokenBadge<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<Account<TokenBadge, TAddress>>;
declare function fetchMaybeTokenBadge<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<MaybeAccount<TokenBadge, TAddress>>;
declare function fetchAllTokenBadge(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<Account<TokenBadge>[]>;
declare function fetchAllMaybeTokenBadge(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<MaybeAccount<TokenBadge>[]>;
declare function getTokenBadgeSize(): number;

declare const WHIRLPOOL_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getWhirlpoolDiscriminatorBytes(): ReadonlyUint8Array;
type Whirlpool = {
    discriminator: ReadonlyUint8Array;
    whirlpoolsConfig: Address;
    whirlpoolBump: ReadonlyUint8Array;
    tickSpacing: number;
    feeTierIndexSeed: ReadonlyUint8Array;
    feeRate: number;
    protocolFeeRate: number;
    liquidity: bigint;
    sqrtPrice: bigint;
    tickCurrentIndex: number;
    protocolFeeOwedA: bigint;
    protocolFeeOwedB: bigint;
    tokenMintA: Address;
    tokenVaultA: Address;
    feeGrowthGlobalA: bigint;
    tokenMintB: Address;
    tokenVaultB: Address;
    feeGrowthGlobalB: bigint;
    rewardLastUpdatedTimestamp: bigint;
    rewardInfos: Array<WhirlpoolRewardInfo>;
};
type WhirlpoolArgs = {
    whirlpoolsConfig: Address;
    whirlpoolBump: ReadonlyUint8Array;
    tickSpacing: number;
    feeTierIndexSeed: ReadonlyUint8Array;
    feeRate: number;
    protocolFeeRate: number;
    liquidity: number | bigint;
    sqrtPrice: number | bigint;
    tickCurrentIndex: number;
    protocolFeeOwedA: number | bigint;
    protocolFeeOwedB: number | bigint;
    tokenMintA: Address;
    tokenVaultA: Address;
    feeGrowthGlobalA: number | bigint;
    tokenMintB: Address;
    tokenVaultB: Address;
    feeGrowthGlobalB: number | bigint;
    rewardLastUpdatedTimestamp: number | bigint;
    rewardInfos: Array<WhirlpoolRewardInfoArgs>;
};
declare function getWhirlpoolEncoder(): Encoder<WhirlpoolArgs>;
declare function getWhirlpoolDecoder(): Decoder<Whirlpool>;
declare function getWhirlpoolCodec(): Codec<WhirlpoolArgs, Whirlpool>;
declare function decodeWhirlpool<TAddress extends string = string>(encodedAccount: EncodedAccount<TAddress>): Account<Whirlpool, TAddress>;
declare function decodeWhirlpool<TAddress extends string = string>(encodedAccount: MaybeEncodedAccount<TAddress>): MaybeAccount<Whirlpool, TAddress>;
declare function fetchWhirlpool<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<Account<Whirlpool, TAddress>>;
declare function fetchMaybeWhirlpool<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<MaybeAccount<Whirlpool, TAddress>>;
declare function fetchAllWhirlpool(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<Account<Whirlpool>[]>;
declare function fetchAllMaybeWhirlpool(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<MaybeAccount<Whirlpool>[]>;
declare function getWhirlpoolSize(): number;

declare const WHIRLPOOLS_CONFIG_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getWhirlpoolsConfigDiscriminatorBytes(): ReadonlyUint8Array;
type WhirlpoolsConfig = {
    discriminator: ReadonlyUint8Array;
    feeAuthority: Address;
    collectProtocolFeesAuthority: Address;
    rewardEmissionsSuperAuthority: Address;
    defaultProtocolFeeRate: number;
};
type WhirlpoolsConfigArgs = {
    feeAuthority: Address;
    collectProtocolFeesAuthority: Address;
    rewardEmissionsSuperAuthority: Address;
    defaultProtocolFeeRate: number;
};
declare function getWhirlpoolsConfigEncoder(): Encoder<WhirlpoolsConfigArgs>;
declare function getWhirlpoolsConfigDecoder(): Decoder<WhirlpoolsConfig>;
declare function getWhirlpoolsConfigCodec(): Codec<WhirlpoolsConfigArgs, WhirlpoolsConfig>;
declare function decodeWhirlpoolsConfig<TAddress extends string = string>(encodedAccount: EncodedAccount<TAddress>): Account<WhirlpoolsConfig, TAddress>;
declare function decodeWhirlpoolsConfig<TAddress extends string = string>(encodedAccount: MaybeEncodedAccount<TAddress>): MaybeAccount<WhirlpoolsConfig, TAddress>;
declare function fetchWhirlpoolsConfig<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<Account<WhirlpoolsConfig, TAddress>>;
declare function fetchMaybeWhirlpoolsConfig<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<MaybeAccount<WhirlpoolsConfig, TAddress>>;
declare function fetchAllWhirlpoolsConfig(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<Account<WhirlpoolsConfig>[]>;
declare function fetchAllMaybeWhirlpoolsConfig(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<MaybeAccount<WhirlpoolsConfig>[]>;
declare function getWhirlpoolsConfigSize(): number;

declare const WHIRLPOOLS_CONFIG_EXTENSION_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getWhirlpoolsConfigExtensionDiscriminatorBytes(): ReadonlyUint8Array;
type WhirlpoolsConfigExtension = {
    discriminator: ReadonlyUint8Array;
    whirlpoolsConfig: Address;
    configExtensionAuthority: Address;
    tokenBadgeAuthority: Address;
};
type WhirlpoolsConfigExtensionArgs = {
    whirlpoolsConfig: Address;
    configExtensionAuthority: Address;
    tokenBadgeAuthority: Address;
};
declare function getWhirlpoolsConfigExtensionEncoder(): Encoder<WhirlpoolsConfigExtensionArgs>;
declare function getWhirlpoolsConfigExtensionDecoder(): Decoder<WhirlpoolsConfigExtension>;
declare function getWhirlpoolsConfigExtensionCodec(): Codec<WhirlpoolsConfigExtensionArgs, WhirlpoolsConfigExtension>;
declare function decodeWhirlpoolsConfigExtension<TAddress extends string = string>(encodedAccount: EncodedAccount<TAddress>): Account<WhirlpoolsConfigExtension, TAddress>;
declare function decodeWhirlpoolsConfigExtension<TAddress extends string = string>(encodedAccount: MaybeEncodedAccount<TAddress>): MaybeAccount<WhirlpoolsConfigExtension, TAddress>;
declare function fetchWhirlpoolsConfigExtension<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<Account<WhirlpoolsConfigExtension, TAddress>>;
declare function fetchMaybeWhirlpoolsConfigExtension<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<MaybeAccount<WhirlpoolsConfigExtension, TAddress>>;
declare function fetchAllWhirlpoolsConfigExtension(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<Account<WhirlpoolsConfigExtension>[]>;
declare function fetchAllMaybeWhirlpoolsConfigExtension(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<MaybeAccount<WhirlpoolsConfigExtension>[]>;
declare function getWhirlpoolsConfigExtensionSize(): number;

declare const WHIRLPOOL_ERROR__INVALID_ENUM = 6000;
declare const WHIRLPOOL_ERROR__INVALID_START_TICK = 6001;
declare const WHIRLPOOL_ERROR__TICK_ARRAY_EXIST_IN_POOL = 6002;
declare const WHIRLPOOL_ERROR__TICK_ARRAY_INDEX_OUTOF_BOUNDS = 6003;
declare const WHIRLPOOL_ERROR__INVALID_TICK_SPACING = 6004;
declare const WHIRLPOOL_ERROR__CLOSE_POSITION_NOT_EMPTY = 6005;
declare const WHIRLPOOL_ERROR__DIVIDE_BY_ZERO = 6006;
declare const WHIRLPOOL_ERROR__NUMBER_CAST_ERROR = 6007;
declare const WHIRLPOOL_ERROR__NUMBER_DOWN_CAST_ERROR = 6008;
declare const WHIRLPOOL_ERROR__TICK_NOT_FOUND = 6009;
declare const WHIRLPOOL_ERROR__INVALID_TICK_INDEX = 6010;
declare const WHIRLPOOL_ERROR__SQRT_PRICE_OUT_OF_BOUNDS = 6011;
declare const WHIRLPOOL_ERROR__LIQUIDITY_ZERO = 6012;
declare const WHIRLPOOL_ERROR__LIQUIDITY_TOO_HIGH = 6013;
declare const WHIRLPOOL_ERROR__LIQUIDITY_OVERFLOW = 6014;
declare const WHIRLPOOL_ERROR__LIQUIDITY_UNDERFLOW = 6015;
declare const WHIRLPOOL_ERROR__LIQUIDITY_NET_ERROR = 6016;
declare const WHIRLPOOL_ERROR__TOKEN_MAX_EXCEEDED = 6017;
declare const WHIRLPOOL_ERROR__TOKEN_MIN_SUBCEEDED = 6018;
declare const WHIRLPOOL_ERROR__MISSING_OR_INVALID_DELEGATE = 6019;
declare const WHIRLPOOL_ERROR__INVALID_POSITION_TOKEN_AMOUNT = 6020;
declare const WHIRLPOOL_ERROR__INVALID_TIMESTAMP_CONVERSION = 6021;
declare const WHIRLPOOL_ERROR__INVALID_TIMESTAMP = 6022;
declare const WHIRLPOOL_ERROR__INVALID_TICK_ARRAY_SEQUENCE = 6023;
declare const WHIRLPOOL_ERROR__INVALID_TOKEN_MINT_ORDER = 6024;
declare const WHIRLPOOL_ERROR__REWARD_NOT_INITIALIZED = 6025;
declare const WHIRLPOOL_ERROR__INVALID_REWARD_INDEX = 6026;
declare const WHIRLPOOL_ERROR__REWARD_VAULT_AMOUNT_INSUFFICIENT = 6027;
declare const WHIRLPOOL_ERROR__FEE_RATE_MAX_EXCEEDED = 6028;
declare const WHIRLPOOL_ERROR__PROTOCOL_FEE_RATE_MAX_EXCEEDED = 6029;
declare const WHIRLPOOL_ERROR__MULTIPLICATION_SHIFT_RIGHT_OVERFLOW = 6030;
declare const WHIRLPOOL_ERROR__MUL_DIV_OVERFLOW = 6031;
declare const WHIRLPOOL_ERROR__MUL_DIV_INVALID_INPUT = 6032;
declare const WHIRLPOOL_ERROR__MULTIPLICATION_OVERFLOW = 6033;
declare const WHIRLPOOL_ERROR__INVALID_SQRT_PRICE_LIMIT_DIRECTION = 6034;
declare const WHIRLPOOL_ERROR__ZERO_TRADABLE_AMOUNT = 6035;
declare const WHIRLPOOL_ERROR__AMOUNT_OUT_BELOW_MINIMUM = 6036;
declare const WHIRLPOOL_ERROR__AMOUNT_IN_ABOVE_MAXIMUM = 6037;
declare const WHIRLPOOL_ERROR__TICK_ARRAY_SEQUENCE_INVALID_INDEX = 6038;
declare const WHIRLPOOL_ERROR__AMOUNT_CALC_OVERFLOW = 6039;
declare const WHIRLPOOL_ERROR__AMOUNT_REMAINING_OVERFLOW = 6040;
declare const WHIRLPOOL_ERROR__INVALID_INTERMEDIARY_MINT = 6041;
declare const WHIRLPOOL_ERROR__DUPLICATE_TWO_HOP_POOL = 6042;
declare const WHIRLPOOL_ERROR__INVALID_BUNDLE_INDEX = 6043;
declare const WHIRLPOOL_ERROR__BUNDLED_POSITION_ALREADY_OPENED = 6044;
declare const WHIRLPOOL_ERROR__BUNDLED_POSITION_ALREADY_CLOSED = 6045;
declare const WHIRLPOOL_ERROR__POSITION_BUNDLE_NOT_DELETABLE = 6046;
declare const WHIRLPOOL_ERROR__UNSUPPORTED_TOKEN_MINT = 6047;
declare const WHIRLPOOL_ERROR__REMAINING_ACCOUNTS_INVALID_SLICE = 6048;
declare const WHIRLPOOL_ERROR__REMAINING_ACCOUNTS_INSUFFICIENT = 6049;
declare const WHIRLPOOL_ERROR__NO_EXTRA_ACCOUNTS_FOR_TRANSFER_HOOK = 6050;
declare const WHIRLPOOL_ERROR__INTERMEDIATE_TOKEN_AMOUNT_MISMATCH = 6051;
declare const WHIRLPOOL_ERROR__TRANSFER_FEE_CALCULATION_ERROR = 6052;
declare const WHIRLPOOL_ERROR__REMAINING_ACCOUNTS_DUPLICATED_ACCOUNTS_TYPE = 6053;
declare const WHIRLPOOL_ERROR__FULL_RANGE_ONLY_POOL = 6054;
declare const WHIRLPOOL_ERROR__TOO_MANY_SUPPLEMENTAL_TICK_ARRAYS = 6055;
declare const WHIRLPOOL_ERROR__DIFFERENT_WHIRLPOOL_TICK_ARRAY_ACCOUNT = 6056;
declare const WHIRLPOOL_ERROR__PARTIAL_FILL_ERROR = 6057;
declare const WHIRLPOOL_ERROR__POSITION_NOT_LOCKABLE = 6058;
declare const WHIRLPOOL_ERROR__OPERATION_NOT_ALLOWED_ON_LOCKED_POSITION = 6059;
declare const WHIRLPOOL_ERROR__SAME_TICK_RANGE_NOT_ALLOWED = 6060;
declare const WHIRLPOOL_ERROR__INVALID_ADAPTIVE_FEE_CONSTANTS = 6061;
declare const WHIRLPOOL_ERROR__INVALID_FEE_TIER_INDEX = 6062;
declare const WHIRLPOOL_ERROR__INVALID_TRADE_ENABLE_TIMESTAMP = 6063;
declare const WHIRLPOOL_ERROR__TRADE_IS_NOT_ENABLED = 6064;
type WhirlpoolError = typeof WHIRLPOOL_ERROR__AMOUNT_CALC_OVERFLOW | typeof WHIRLPOOL_ERROR__AMOUNT_IN_ABOVE_MAXIMUM | typeof WHIRLPOOL_ERROR__AMOUNT_OUT_BELOW_MINIMUM | typeof WHIRLPOOL_ERROR__AMOUNT_REMAINING_OVERFLOW | typeof WHIRLPOOL_ERROR__BUNDLED_POSITION_ALREADY_CLOSED | typeof WHIRLPOOL_ERROR__BUNDLED_POSITION_ALREADY_OPENED | typeof WHIRLPOOL_ERROR__CLOSE_POSITION_NOT_EMPTY | typeof WHIRLPOOL_ERROR__DIFFERENT_WHIRLPOOL_TICK_ARRAY_ACCOUNT | typeof WHIRLPOOL_ERROR__DIVIDE_BY_ZERO | typeof WHIRLPOOL_ERROR__DUPLICATE_TWO_HOP_POOL | typeof WHIRLPOOL_ERROR__FEE_RATE_MAX_EXCEEDED | typeof WHIRLPOOL_ERROR__FULL_RANGE_ONLY_POOL | typeof WHIRLPOOL_ERROR__INTERMEDIATE_TOKEN_AMOUNT_MISMATCH | typeof WHIRLPOOL_ERROR__INVALID_ADAPTIVE_FEE_CONSTANTS | typeof WHIRLPOOL_ERROR__INVALID_BUNDLE_INDEX | typeof WHIRLPOOL_ERROR__INVALID_ENUM | typeof WHIRLPOOL_ERROR__INVALID_FEE_TIER_INDEX | typeof WHIRLPOOL_ERROR__INVALID_INTERMEDIARY_MINT | typeof WHIRLPOOL_ERROR__INVALID_POSITION_TOKEN_AMOUNT | typeof WHIRLPOOL_ERROR__INVALID_REWARD_INDEX | typeof WHIRLPOOL_ERROR__INVALID_SQRT_PRICE_LIMIT_DIRECTION | typeof WHIRLPOOL_ERROR__INVALID_START_TICK | typeof WHIRLPOOL_ERROR__INVALID_TICK_ARRAY_SEQUENCE | typeof WHIRLPOOL_ERROR__INVALID_TICK_INDEX | typeof WHIRLPOOL_ERROR__INVALID_TICK_SPACING | typeof WHIRLPOOL_ERROR__INVALID_TIMESTAMP | typeof WHIRLPOOL_ERROR__INVALID_TIMESTAMP_CONVERSION | typeof WHIRLPOOL_ERROR__INVALID_TOKEN_MINT_ORDER | typeof WHIRLPOOL_ERROR__INVALID_TRADE_ENABLE_TIMESTAMP | typeof WHIRLPOOL_ERROR__LIQUIDITY_NET_ERROR | typeof WHIRLPOOL_ERROR__LIQUIDITY_OVERFLOW | typeof WHIRLPOOL_ERROR__LIQUIDITY_TOO_HIGH | typeof WHIRLPOOL_ERROR__LIQUIDITY_UNDERFLOW | typeof WHIRLPOOL_ERROR__LIQUIDITY_ZERO | typeof WHIRLPOOL_ERROR__MISSING_OR_INVALID_DELEGATE | typeof WHIRLPOOL_ERROR__MUL_DIV_INVALID_INPUT | typeof WHIRLPOOL_ERROR__MUL_DIV_OVERFLOW | typeof WHIRLPOOL_ERROR__MULTIPLICATION_OVERFLOW | typeof WHIRLPOOL_ERROR__MULTIPLICATION_SHIFT_RIGHT_OVERFLOW | typeof WHIRLPOOL_ERROR__NO_EXTRA_ACCOUNTS_FOR_TRANSFER_HOOK | typeof WHIRLPOOL_ERROR__NUMBER_CAST_ERROR | typeof WHIRLPOOL_ERROR__NUMBER_DOWN_CAST_ERROR | typeof WHIRLPOOL_ERROR__OPERATION_NOT_ALLOWED_ON_LOCKED_POSITION | typeof WHIRLPOOL_ERROR__PARTIAL_FILL_ERROR | typeof WHIRLPOOL_ERROR__POSITION_BUNDLE_NOT_DELETABLE | typeof WHIRLPOOL_ERROR__POSITION_NOT_LOCKABLE | typeof WHIRLPOOL_ERROR__PROTOCOL_FEE_RATE_MAX_EXCEEDED | typeof WHIRLPOOL_ERROR__REMAINING_ACCOUNTS_DUPLICATED_ACCOUNTS_TYPE | typeof WHIRLPOOL_ERROR__REMAINING_ACCOUNTS_INSUFFICIENT | typeof WHIRLPOOL_ERROR__REMAINING_ACCOUNTS_INVALID_SLICE | typeof WHIRLPOOL_ERROR__REWARD_NOT_INITIALIZED | typeof WHIRLPOOL_ERROR__REWARD_VAULT_AMOUNT_INSUFFICIENT | typeof WHIRLPOOL_ERROR__SAME_TICK_RANGE_NOT_ALLOWED | typeof WHIRLPOOL_ERROR__SQRT_PRICE_OUT_OF_BOUNDS | typeof WHIRLPOOL_ERROR__TICK_ARRAY_EXIST_IN_POOL | typeof WHIRLPOOL_ERROR__TICK_ARRAY_INDEX_OUTOF_BOUNDS | typeof WHIRLPOOL_ERROR__TICK_ARRAY_SEQUENCE_INVALID_INDEX | typeof WHIRLPOOL_ERROR__TICK_NOT_FOUND | typeof WHIRLPOOL_ERROR__TOKEN_MAX_EXCEEDED | typeof WHIRLPOOL_ERROR__TOKEN_MIN_SUBCEEDED | typeof WHIRLPOOL_ERROR__TOO_MANY_SUPPLEMENTAL_TICK_ARRAYS | typeof WHIRLPOOL_ERROR__TRADE_IS_NOT_ENABLED | typeof WHIRLPOOL_ERROR__TRANSFER_FEE_CALCULATION_ERROR | typeof WHIRLPOOL_ERROR__UNSUPPORTED_TOKEN_MINT | typeof WHIRLPOOL_ERROR__ZERO_TRADABLE_AMOUNT;
declare function getWhirlpoolErrorMessage(code: WhirlpoolError): string;
declare function isWhirlpoolError<TProgramErrorCode extends WhirlpoolError>(error: unknown, transactionMessage: {
    instructions: Record<number, {
        programAddress: Address;
    }>;
}, code?: TProgramErrorCode): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> & Readonly<{
    context: Readonly<{
        code: TProgramErrorCode;
    }>;
}>;

declare const WHIRLPOOL_PROGRAM_ADDRESS: Address<"whirLbMiicVdio4qvUfM5KAg6Ct8VwpYzGff3uctyCc">;
declare enum WhirlpoolAccount {
    AdaptiveFeeTier = 0,
    WhirlpoolsConfig = 1,
    WhirlpoolsConfigExtension = 2,
    FeeTier = 3,
    LockConfig = 4,
    Oracle = 5,
    Position = 6,
    PositionBundle = 7,
    TickArray = 8,
    TokenBadge = 9,
    Whirlpool = 10
}
declare function identifyWhirlpoolAccount(account: {
    data: ReadonlyUint8Array;
} | ReadonlyUint8Array): WhirlpoolAccount;
declare enum WhirlpoolInstruction {
    InitializeConfig = 0,
    InitializePool = 1,
    InitializeTickArray = 2,
    InitializeFeeTier = 3,
    InitializeReward = 4,
    SetRewardEmissions = 5,
    OpenPosition = 6,
    OpenPositionWithMetadata = 7,
    IncreaseLiquidity = 8,
    DecreaseLiquidity = 9,
    UpdateFeesAndRewards = 10,
    CollectFees = 11,
    CollectReward = 12,
    CollectProtocolFees = 13,
    Swap = 14,
    ClosePosition = 15,
    SetDefaultFeeRate = 16,
    SetDefaultProtocolFeeRate = 17,
    SetFeeRate = 18,
    SetProtocolFeeRate = 19,
    SetFeeAuthority = 20,
    SetCollectProtocolFeesAuthority = 21,
    SetRewardAuthority = 22,
    SetRewardAuthorityBySuperAuthority = 23,
    SetRewardEmissionsSuperAuthority = 24,
    TwoHopSwap = 25,
    InitializePositionBundle = 26,
    InitializePositionBundleWithMetadata = 27,
    DeletePositionBundle = 28,
    OpenBundledPosition = 29,
    CloseBundledPosition = 30,
    OpenPositionWithTokenExtensions = 31,
    ClosePositionWithTokenExtensions = 32,
    LockPosition = 33,
    ResetPositionRange = 34,
    TransferLockedPosition = 35,
    InitializeAdaptiveFeeTier = 36,
    SetDefaultBaseFeeRate = 37,
    SetDelegatedFeeAuthority = 38,
    SetInitializePoolAuthority = 39,
    SetPresetAdaptiveFeeConstants = 40,
    InitializePoolWithAdaptiveFee = 41,
    SetFeeRateByDelegatedFeeAuthority = 42,
    CollectFeesV2 = 43,
    CollectProtocolFeesV2 = 44,
    CollectRewardV2 = 45,
    DecreaseLiquidityV2 = 46,
    IncreaseLiquidityV2 = 47,
    InitializePoolV2 = 48,
    InitializeRewardV2 = 49,
    SetRewardEmissionsV2 = 50,
    SwapV2 = 51,
    TwoHopSwapV2 = 52,
    InitializeConfigExtension = 53,
    SetConfigExtensionAuthority = 54,
    SetTokenBadgeAuthority = 55,
    InitializeTokenBadge = 56,
    DeleteTokenBadge = 57
}
declare function identifyWhirlpoolInstruction(instruction: {
    data: ReadonlyUint8Array;
} | ReadonlyUint8Array): WhirlpoolInstruction;
type ParsedWhirlpoolInstruction<TProgram extends string = 'whirLbMiicVdio4qvUfM5KAg6Ct8VwpYzGff3uctyCc'> = ({
    instructionType: WhirlpoolInstruction.InitializeConfig;
} & ParsedInitializeConfigInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.InitializePool;
} & ParsedInitializePoolInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.InitializeTickArray;
} & ParsedInitializeTickArrayInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.InitializeFeeTier;
} & ParsedInitializeFeeTierInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.InitializeReward;
} & ParsedInitializeRewardInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.SetRewardEmissions;
} & ParsedSetRewardEmissionsInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.OpenPosition;
} & ParsedOpenPositionInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.OpenPositionWithMetadata;
} & ParsedOpenPositionWithMetadataInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.IncreaseLiquidity;
} & ParsedIncreaseLiquidityInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.DecreaseLiquidity;
} & ParsedDecreaseLiquidityInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.UpdateFeesAndRewards;
} & ParsedUpdateFeesAndRewardsInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.CollectFees;
} & ParsedCollectFeesInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.CollectReward;
} & ParsedCollectRewardInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.CollectProtocolFees;
} & ParsedCollectProtocolFeesInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.Swap;
} & ParsedSwapInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.ClosePosition;
} & ParsedClosePositionInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.SetDefaultFeeRate;
} & ParsedSetDefaultFeeRateInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.SetDefaultProtocolFeeRate;
} & ParsedSetDefaultProtocolFeeRateInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.SetFeeRate;
} & ParsedSetFeeRateInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.SetProtocolFeeRate;
} & ParsedSetProtocolFeeRateInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.SetFeeAuthority;
} & ParsedSetFeeAuthorityInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.SetCollectProtocolFeesAuthority;
} & ParsedSetCollectProtocolFeesAuthorityInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.SetRewardAuthority;
} & ParsedSetRewardAuthorityInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.SetRewardAuthorityBySuperAuthority;
} & ParsedSetRewardAuthorityBySuperAuthorityInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.SetRewardEmissionsSuperAuthority;
} & ParsedSetRewardEmissionsSuperAuthorityInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.TwoHopSwap;
} & ParsedTwoHopSwapInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.InitializePositionBundle;
} & ParsedInitializePositionBundleInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.InitializePositionBundleWithMetadata;
} & ParsedInitializePositionBundleWithMetadataInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.DeletePositionBundle;
} & ParsedDeletePositionBundleInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.OpenBundledPosition;
} & ParsedOpenBundledPositionInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.CloseBundledPosition;
} & ParsedCloseBundledPositionInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.OpenPositionWithTokenExtensions;
} & ParsedOpenPositionWithTokenExtensionsInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.ClosePositionWithTokenExtensions;
} & ParsedClosePositionWithTokenExtensionsInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.LockPosition;
} & ParsedLockPositionInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.ResetPositionRange;
} & ParsedResetPositionRangeInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.TransferLockedPosition;
} & ParsedTransferLockedPositionInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.InitializeAdaptiveFeeTier;
} & ParsedInitializeAdaptiveFeeTierInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.SetDefaultBaseFeeRate;
} & ParsedSetDefaultBaseFeeRateInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.SetDelegatedFeeAuthority;
} & ParsedSetDelegatedFeeAuthorityInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.SetInitializePoolAuthority;
} & ParsedSetInitializePoolAuthorityInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.SetPresetAdaptiveFeeConstants;
} & ParsedSetPresetAdaptiveFeeConstantsInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.InitializePoolWithAdaptiveFee;
} & ParsedInitializePoolWithAdaptiveFeeInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.SetFeeRateByDelegatedFeeAuthority;
} & ParsedSetFeeRateByDelegatedFeeAuthorityInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.CollectFeesV2;
} & ParsedCollectFeesV2Instruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.CollectProtocolFeesV2;
} & ParsedCollectProtocolFeesV2Instruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.CollectRewardV2;
} & ParsedCollectRewardV2Instruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.DecreaseLiquidityV2;
} & ParsedDecreaseLiquidityV2Instruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.IncreaseLiquidityV2;
} & ParsedIncreaseLiquidityV2Instruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.InitializePoolV2;
} & ParsedInitializePoolV2Instruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.InitializeRewardV2;
} & ParsedInitializeRewardV2Instruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.SetRewardEmissionsV2;
} & ParsedSetRewardEmissionsV2Instruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.SwapV2;
} & ParsedSwapV2Instruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.TwoHopSwapV2;
} & ParsedTwoHopSwapV2Instruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.InitializeConfigExtension;
} & ParsedInitializeConfigExtensionInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.SetConfigExtensionAuthority;
} & ParsedSetConfigExtensionAuthorityInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.SetTokenBadgeAuthority;
} & ParsedSetTokenBadgeAuthorityInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.InitializeTokenBadge;
} & ParsedInitializeTokenBadgeInstruction<TProgram>) | ({
    instructionType: WhirlpoolInstruction.DeleteTokenBadge;
} & ParsedDeleteTokenBadgeInstruction<TProgram>);

declare const CLOSE_BUNDLED_POSITION_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getCloseBundledPositionDiscriminatorBytes(): ReadonlyUint8Array;
type CloseBundledPositionInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountBundledPosition extends string | IAccountMeta<string> = string, TAccountPositionBundle extends string | IAccountMeta<string> = string, TAccountPositionBundleTokenAccount extends string | IAccountMeta<string> = string, TAccountPositionBundleAuthority extends string | IAccountMeta<string> = string, TAccountReceiver extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountBundledPosition extends string ? WritableAccount<TAccountBundledPosition> : TAccountBundledPosition,
    TAccountPositionBundle extends string ? WritableAccount<TAccountPositionBundle> : TAccountPositionBundle,
    TAccountPositionBundleTokenAccount extends string ? ReadonlyAccount<TAccountPositionBundleTokenAccount> : TAccountPositionBundleTokenAccount,
    TAccountPositionBundleAuthority extends string ? ReadonlySignerAccount<TAccountPositionBundleAuthority> & IAccountSignerMeta<TAccountPositionBundleAuthority> : TAccountPositionBundleAuthority,
    TAccountReceiver extends string ? WritableAccount<TAccountReceiver> : TAccountReceiver,
    ...TRemainingAccounts
]>;
type CloseBundledPositionInstructionData = {
    discriminator: ReadonlyUint8Array;
    bundleIndex: number;
};
type CloseBundledPositionInstructionDataArgs = {
    bundleIndex: number;
};
declare function getCloseBundledPositionInstructionDataEncoder(): Encoder<CloseBundledPositionInstructionDataArgs>;
declare function getCloseBundledPositionInstructionDataDecoder(): Decoder<CloseBundledPositionInstructionData>;
declare function getCloseBundledPositionInstructionDataCodec(): Codec<CloseBundledPositionInstructionDataArgs, CloseBundledPositionInstructionData>;
type CloseBundledPositionInput<TAccountBundledPosition extends string = string, TAccountPositionBundle extends string = string, TAccountPositionBundleTokenAccount extends string = string, TAccountPositionBundleAuthority extends string = string, TAccountReceiver extends string = string> = {
    bundledPosition: Address<TAccountBundledPosition>;
    positionBundle: Address<TAccountPositionBundle>;
    positionBundleTokenAccount: Address<TAccountPositionBundleTokenAccount>;
    positionBundleAuthority: TransactionSigner<TAccountPositionBundleAuthority>;
    receiver: Address<TAccountReceiver>;
    bundleIndex: CloseBundledPositionInstructionDataArgs['bundleIndex'];
};
declare function getCloseBundledPositionInstruction<TAccountBundledPosition extends string, TAccountPositionBundle extends string, TAccountPositionBundleTokenAccount extends string, TAccountPositionBundleAuthority extends string, TAccountReceiver extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: CloseBundledPositionInput<TAccountBundledPosition, TAccountPositionBundle, TAccountPositionBundleTokenAccount, TAccountPositionBundleAuthority, TAccountReceiver>, config?: {
    programAddress?: TProgramAddress;
}): CloseBundledPositionInstruction<TProgramAddress, TAccountBundledPosition, TAccountPositionBundle, TAccountPositionBundleTokenAccount, TAccountPositionBundleAuthority, TAccountReceiver>;
type ParsedCloseBundledPositionInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        bundledPosition: TAccountMetas[0];
        positionBundle: TAccountMetas[1];
        positionBundleTokenAccount: TAccountMetas[2];
        positionBundleAuthority: TAccountMetas[3];
        receiver: TAccountMetas[4];
    };
    data: CloseBundledPositionInstructionData;
};
declare function parseCloseBundledPositionInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedCloseBundledPositionInstruction<TProgram, TAccountMetas>;

declare const CLOSE_POSITION_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getClosePositionDiscriminatorBytes(): ReadonlyUint8Array;
type ClosePositionInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountPositionAuthority extends string | IAccountMeta<string> = string, TAccountReceiver extends string | IAccountMeta<string> = string, TAccountPosition extends string | IAccountMeta<string> = string, TAccountPositionMint extends string | IAccountMeta<string> = string, TAccountPositionTokenAccount extends string | IAccountMeta<string> = string, TAccountTokenProgram extends string | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA', TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountPositionAuthority extends string ? ReadonlySignerAccount<TAccountPositionAuthority> & IAccountSignerMeta<TAccountPositionAuthority> : TAccountPositionAuthority,
    TAccountReceiver extends string ? WritableAccount<TAccountReceiver> : TAccountReceiver,
    TAccountPosition extends string ? WritableAccount<TAccountPosition> : TAccountPosition,
    TAccountPositionMint extends string ? WritableAccount<TAccountPositionMint> : TAccountPositionMint,
    TAccountPositionTokenAccount extends string ? WritableAccount<TAccountPositionTokenAccount> : TAccountPositionTokenAccount,
    TAccountTokenProgram extends string ? ReadonlyAccount<TAccountTokenProgram> : TAccountTokenProgram,
    ...TRemainingAccounts
]>;
type ClosePositionInstructionData = {
    discriminator: ReadonlyUint8Array;
};
type ClosePositionInstructionDataArgs = {};
declare function getClosePositionInstructionDataEncoder(): Encoder<ClosePositionInstructionDataArgs>;
declare function getClosePositionInstructionDataDecoder(): Decoder<ClosePositionInstructionData>;
declare function getClosePositionInstructionDataCodec(): Codec<ClosePositionInstructionDataArgs, ClosePositionInstructionData>;
type ClosePositionInput<TAccountPositionAuthority extends string = string, TAccountReceiver extends string = string, TAccountPosition extends string = string, TAccountPositionMint extends string = string, TAccountPositionTokenAccount extends string = string, TAccountTokenProgram extends string = string> = {
    positionAuthority: TransactionSigner<TAccountPositionAuthority>;
    receiver: Address<TAccountReceiver>;
    position: Address<TAccountPosition>;
    positionMint: Address<TAccountPositionMint>;
    positionTokenAccount: Address<TAccountPositionTokenAccount>;
    tokenProgram?: Address<TAccountTokenProgram>;
};
declare function getClosePositionInstruction<TAccountPositionAuthority extends string, TAccountReceiver extends string, TAccountPosition extends string, TAccountPositionMint extends string, TAccountPositionTokenAccount extends string, TAccountTokenProgram extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: ClosePositionInput<TAccountPositionAuthority, TAccountReceiver, TAccountPosition, TAccountPositionMint, TAccountPositionTokenAccount, TAccountTokenProgram>, config?: {
    programAddress?: TProgramAddress;
}): ClosePositionInstruction<TProgramAddress, TAccountPositionAuthority, TAccountReceiver, TAccountPosition, TAccountPositionMint, TAccountPositionTokenAccount, TAccountTokenProgram>;
type ParsedClosePositionInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        positionAuthority: TAccountMetas[0];
        receiver: TAccountMetas[1];
        position: TAccountMetas[2];
        positionMint: TAccountMetas[3];
        positionTokenAccount: TAccountMetas[4];
        tokenProgram: TAccountMetas[5];
    };
    data: ClosePositionInstructionData;
};
declare function parseClosePositionInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedClosePositionInstruction<TProgram, TAccountMetas>;

declare const CLOSE_POSITION_WITH_TOKEN_EXTENSIONS_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getClosePositionWithTokenExtensionsDiscriminatorBytes(): ReadonlyUint8Array;
type ClosePositionWithTokenExtensionsInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountPositionAuthority extends string | IAccountMeta<string> = string, TAccountReceiver extends string | IAccountMeta<string> = string, TAccountPosition extends string | IAccountMeta<string> = string, TAccountPositionMint extends string | IAccountMeta<string> = string, TAccountPositionTokenAccount extends string | IAccountMeta<string> = string, TAccountToken2022Program extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountPositionAuthority extends string ? ReadonlySignerAccount<TAccountPositionAuthority> & IAccountSignerMeta<TAccountPositionAuthority> : TAccountPositionAuthority,
    TAccountReceiver extends string ? WritableAccount<TAccountReceiver> : TAccountReceiver,
    TAccountPosition extends string ? WritableAccount<TAccountPosition> : TAccountPosition,
    TAccountPositionMint extends string ? WritableAccount<TAccountPositionMint> : TAccountPositionMint,
    TAccountPositionTokenAccount extends string ? WritableAccount<TAccountPositionTokenAccount> : TAccountPositionTokenAccount,
    TAccountToken2022Program extends string ? ReadonlyAccount<TAccountToken2022Program> : TAccountToken2022Program,
    ...TRemainingAccounts
]>;
type ClosePositionWithTokenExtensionsInstructionData = {
    discriminator: ReadonlyUint8Array;
};
type ClosePositionWithTokenExtensionsInstructionDataArgs = {};
declare function getClosePositionWithTokenExtensionsInstructionDataEncoder(): Encoder<ClosePositionWithTokenExtensionsInstructionDataArgs>;
declare function getClosePositionWithTokenExtensionsInstructionDataDecoder(): Decoder<ClosePositionWithTokenExtensionsInstructionData>;
declare function getClosePositionWithTokenExtensionsInstructionDataCodec(): Codec<ClosePositionWithTokenExtensionsInstructionDataArgs, ClosePositionWithTokenExtensionsInstructionData>;
type ClosePositionWithTokenExtensionsInput<TAccountPositionAuthority extends string = string, TAccountReceiver extends string = string, TAccountPosition extends string = string, TAccountPositionMint extends string = string, TAccountPositionTokenAccount extends string = string, TAccountToken2022Program extends string = string> = {
    positionAuthority: TransactionSigner<TAccountPositionAuthority>;
    receiver: Address<TAccountReceiver>;
    position: Address<TAccountPosition>;
    positionMint: Address<TAccountPositionMint>;
    positionTokenAccount: Address<TAccountPositionTokenAccount>;
    token2022Program: Address<TAccountToken2022Program>;
};
declare function getClosePositionWithTokenExtensionsInstruction<TAccountPositionAuthority extends string, TAccountReceiver extends string, TAccountPosition extends string, TAccountPositionMint extends string, TAccountPositionTokenAccount extends string, TAccountToken2022Program extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: ClosePositionWithTokenExtensionsInput<TAccountPositionAuthority, TAccountReceiver, TAccountPosition, TAccountPositionMint, TAccountPositionTokenAccount, TAccountToken2022Program>, config?: {
    programAddress?: TProgramAddress;
}): ClosePositionWithTokenExtensionsInstruction<TProgramAddress, TAccountPositionAuthority, TAccountReceiver, TAccountPosition, TAccountPositionMint, TAccountPositionTokenAccount, TAccountToken2022Program>;
type ParsedClosePositionWithTokenExtensionsInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        positionAuthority: TAccountMetas[0];
        receiver: TAccountMetas[1];
        position: TAccountMetas[2];
        positionMint: TAccountMetas[3];
        positionTokenAccount: TAccountMetas[4];
        token2022Program: TAccountMetas[5];
    };
    data: ClosePositionWithTokenExtensionsInstructionData;
};
declare function parseClosePositionWithTokenExtensionsInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedClosePositionWithTokenExtensionsInstruction<TProgram, TAccountMetas>;

declare const COLLECT_FEES_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getCollectFeesDiscriminatorBytes(): ReadonlyUint8Array;
type CollectFeesInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountWhirlpool extends string | IAccountMeta<string> = string, TAccountPositionAuthority extends string | IAccountMeta<string> = string, TAccountPosition extends string | IAccountMeta<string> = string, TAccountPositionTokenAccount extends string | IAccountMeta<string> = string, TAccountTokenOwnerAccountA extends string | IAccountMeta<string> = string, TAccountTokenVaultA extends string | IAccountMeta<string> = string, TAccountTokenOwnerAccountB extends string | IAccountMeta<string> = string, TAccountTokenVaultB extends string | IAccountMeta<string> = string, TAccountTokenProgram extends string | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA', TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountWhirlpool extends string ? ReadonlyAccount<TAccountWhirlpool> : TAccountWhirlpool,
    TAccountPositionAuthority extends string ? ReadonlySignerAccount<TAccountPositionAuthority> & IAccountSignerMeta<TAccountPositionAuthority> : TAccountPositionAuthority,
    TAccountPosition extends string ? WritableAccount<TAccountPosition> : TAccountPosition,
    TAccountPositionTokenAccount extends string ? ReadonlyAccount<TAccountPositionTokenAccount> : TAccountPositionTokenAccount,
    TAccountTokenOwnerAccountA extends string ? WritableAccount<TAccountTokenOwnerAccountA> : TAccountTokenOwnerAccountA,
    TAccountTokenVaultA extends string ? WritableAccount<TAccountTokenVaultA> : TAccountTokenVaultA,
    TAccountTokenOwnerAccountB extends string ? WritableAccount<TAccountTokenOwnerAccountB> : TAccountTokenOwnerAccountB,
    TAccountTokenVaultB extends string ? WritableAccount<TAccountTokenVaultB> : TAccountTokenVaultB,
    TAccountTokenProgram extends string ? ReadonlyAccount<TAccountTokenProgram> : TAccountTokenProgram,
    ...TRemainingAccounts
]>;
type CollectFeesInstructionData = {
    discriminator: ReadonlyUint8Array;
};
type CollectFeesInstructionDataArgs = {};
declare function getCollectFeesInstructionDataEncoder(): Encoder<CollectFeesInstructionDataArgs>;
declare function getCollectFeesInstructionDataDecoder(): Decoder<CollectFeesInstructionData>;
declare function getCollectFeesInstructionDataCodec(): Codec<CollectFeesInstructionDataArgs, CollectFeesInstructionData>;
type CollectFeesInput<TAccountWhirlpool extends string = string, TAccountPositionAuthority extends string = string, TAccountPosition extends string = string, TAccountPositionTokenAccount extends string = string, TAccountTokenOwnerAccountA extends string = string, TAccountTokenVaultA extends string = string, TAccountTokenOwnerAccountB extends string = string, TAccountTokenVaultB extends string = string, TAccountTokenProgram extends string = string> = {
    whirlpool: Address<TAccountWhirlpool>;
    positionAuthority: TransactionSigner<TAccountPositionAuthority>;
    position: Address<TAccountPosition>;
    positionTokenAccount: Address<TAccountPositionTokenAccount>;
    tokenOwnerAccountA: Address<TAccountTokenOwnerAccountA>;
    tokenVaultA: Address<TAccountTokenVaultA>;
    tokenOwnerAccountB: Address<TAccountTokenOwnerAccountB>;
    tokenVaultB: Address<TAccountTokenVaultB>;
    tokenProgram?: Address<TAccountTokenProgram>;
};
declare function getCollectFeesInstruction<TAccountWhirlpool extends string, TAccountPositionAuthority extends string, TAccountPosition extends string, TAccountPositionTokenAccount extends string, TAccountTokenOwnerAccountA extends string, TAccountTokenVaultA extends string, TAccountTokenOwnerAccountB extends string, TAccountTokenVaultB extends string, TAccountTokenProgram extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: CollectFeesInput<TAccountWhirlpool, TAccountPositionAuthority, TAccountPosition, TAccountPositionTokenAccount, TAccountTokenOwnerAccountA, TAccountTokenVaultA, TAccountTokenOwnerAccountB, TAccountTokenVaultB, TAccountTokenProgram>, config?: {
    programAddress?: TProgramAddress;
}): CollectFeesInstruction<TProgramAddress, TAccountWhirlpool, TAccountPositionAuthority, TAccountPosition, TAccountPositionTokenAccount, TAccountTokenOwnerAccountA, TAccountTokenVaultA, TAccountTokenOwnerAccountB, TAccountTokenVaultB, TAccountTokenProgram>;
type ParsedCollectFeesInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        whirlpool: TAccountMetas[0];
        positionAuthority: TAccountMetas[1];
        position: TAccountMetas[2];
        positionTokenAccount: TAccountMetas[3];
        tokenOwnerAccountA: TAccountMetas[4];
        tokenVaultA: TAccountMetas[5];
        tokenOwnerAccountB: TAccountMetas[6];
        tokenVaultB: TAccountMetas[7];
        tokenProgram: TAccountMetas[8];
    };
    data: CollectFeesInstructionData;
};
declare function parseCollectFeesInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedCollectFeesInstruction<TProgram, TAccountMetas>;

declare const COLLECT_FEES_V2_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getCollectFeesV2DiscriminatorBytes(): ReadonlyUint8Array;
type CollectFeesV2Instruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountWhirlpool extends string | IAccountMeta<string> = string, TAccountPositionAuthority extends string | IAccountMeta<string> = string, TAccountPosition extends string | IAccountMeta<string> = string, TAccountPositionTokenAccount extends string | IAccountMeta<string> = string, TAccountTokenMintA extends string | IAccountMeta<string> = string, TAccountTokenMintB extends string | IAccountMeta<string> = string, TAccountTokenOwnerAccountA extends string | IAccountMeta<string> = string, TAccountTokenVaultA extends string | IAccountMeta<string> = string, TAccountTokenOwnerAccountB extends string | IAccountMeta<string> = string, TAccountTokenVaultB extends string | IAccountMeta<string> = string, TAccountTokenProgramA extends string | IAccountMeta<string> = string, TAccountTokenProgramB extends string | IAccountMeta<string> = string, TAccountMemoProgram extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountWhirlpool extends string ? ReadonlyAccount<TAccountWhirlpool> : TAccountWhirlpool,
    TAccountPositionAuthority extends string ? ReadonlySignerAccount<TAccountPositionAuthority> & IAccountSignerMeta<TAccountPositionAuthority> : TAccountPositionAuthority,
    TAccountPosition extends string ? WritableAccount<TAccountPosition> : TAccountPosition,
    TAccountPositionTokenAccount extends string ? ReadonlyAccount<TAccountPositionTokenAccount> : TAccountPositionTokenAccount,
    TAccountTokenMintA extends string ? ReadonlyAccount<TAccountTokenMintA> : TAccountTokenMintA,
    TAccountTokenMintB extends string ? ReadonlyAccount<TAccountTokenMintB> : TAccountTokenMintB,
    TAccountTokenOwnerAccountA extends string ? WritableAccount<TAccountTokenOwnerAccountA> : TAccountTokenOwnerAccountA,
    TAccountTokenVaultA extends string ? WritableAccount<TAccountTokenVaultA> : TAccountTokenVaultA,
    TAccountTokenOwnerAccountB extends string ? WritableAccount<TAccountTokenOwnerAccountB> : TAccountTokenOwnerAccountB,
    TAccountTokenVaultB extends string ? WritableAccount<TAccountTokenVaultB> : TAccountTokenVaultB,
    TAccountTokenProgramA extends string ? ReadonlyAccount<TAccountTokenProgramA> : TAccountTokenProgramA,
    TAccountTokenProgramB extends string ? ReadonlyAccount<TAccountTokenProgramB> : TAccountTokenProgramB,
    TAccountMemoProgram extends string ? ReadonlyAccount<TAccountMemoProgram> : TAccountMemoProgram,
    ...TRemainingAccounts
]>;
type CollectFeesV2InstructionData = {
    discriminator: ReadonlyUint8Array;
    remainingAccountsInfo: Option<RemainingAccountsInfo>;
};
type CollectFeesV2InstructionDataArgs = {
    remainingAccountsInfo: OptionOrNullable<RemainingAccountsInfoArgs>;
};
declare function getCollectFeesV2InstructionDataEncoder(): Encoder<CollectFeesV2InstructionDataArgs>;
declare function getCollectFeesV2InstructionDataDecoder(): Decoder<CollectFeesV2InstructionData>;
declare function getCollectFeesV2InstructionDataCodec(): Codec<CollectFeesV2InstructionDataArgs, CollectFeesV2InstructionData>;
type CollectFeesV2Input<TAccountWhirlpool extends string = string, TAccountPositionAuthority extends string = string, TAccountPosition extends string = string, TAccountPositionTokenAccount extends string = string, TAccountTokenMintA extends string = string, TAccountTokenMintB extends string = string, TAccountTokenOwnerAccountA extends string = string, TAccountTokenVaultA extends string = string, TAccountTokenOwnerAccountB extends string = string, TAccountTokenVaultB extends string = string, TAccountTokenProgramA extends string = string, TAccountTokenProgramB extends string = string, TAccountMemoProgram extends string = string> = {
    whirlpool: Address<TAccountWhirlpool>;
    positionAuthority: TransactionSigner<TAccountPositionAuthority>;
    position: Address<TAccountPosition>;
    positionTokenAccount: Address<TAccountPositionTokenAccount>;
    tokenMintA: Address<TAccountTokenMintA>;
    tokenMintB: Address<TAccountTokenMintB>;
    tokenOwnerAccountA: Address<TAccountTokenOwnerAccountA>;
    tokenVaultA: Address<TAccountTokenVaultA>;
    tokenOwnerAccountB: Address<TAccountTokenOwnerAccountB>;
    tokenVaultB: Address<TAccountTokenVaultB>;
    tokenProgramA: Address<TAccountTokenProgramA>;
    tokenProgramB: Address<TAccountTokenProgramB>;
    memoProgram: Address<TAccountMemoProgram>;
    remainingAccountsInfo: CollectFeesV2InstructionDataArgs['remainingAccountsInfo'];
};
declare function getCollectFeesV2Instruction<TAccountWhirlpool extends string, TAccountPositionAuthority extends string, TAccountPosition extends string, TAccountPositionTokenAccount extends string, TAccountTokenMintA extends string, TAccountTokenMintB extends string, TAccountTokenOwnerAccountA extends string, TAccountTokenVaultA extends string, TAccountTokenOwnerAccountB extends string, TAccountTokenVaultB extends string, TAccountTokenProgramA extends string, TAccountTokenProgramB extends string, TAccountMemoProgram extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: CollectFeesV2Input<TAccountWhirlpool, TAccountPositionAuthority, TAccountPosition, TAccountPositionTokenAccount, TAccountTokenMintA, TAccountTokenMintB, TAccountTokenOwnerAccountA, TAccountTokenVaultA, TAccountTokenOwnerAccountB, TAccountTokenVaultB, TAccountTokenProgramA, TAccountTokenProgramB, TAccountMemoProgram>, config?: {
    programAddress?: TProgramAddress;
}): CollectFeesV2Instruction<TProgramAddress, TAccountWhirlpool, TAccountPositionAuthority, TAccountPosition, TAccountPositionTokenAccount, TAccountTokenMintA, TAccountTokenMintB, TAccountTokenOwnerAccountA, TAccountTokenVaultA, TAccountTokenOwnerAccountB, TAccountTokenVaultB, TAccountTokenProgramA, TAccountTokenProgramB, TAccountMemoProgram>;
type ParsedCollectFeesV2Instruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        whirlpool: TAccountMetas[0];
        positionAuthority: TAccountMetas[1];
        position: TAccountMetas[2];
        positionTokenAccount: TAccountMetas[3];
        tokenMintA: TAccountMetas[4];
        tokenMintB: TAccountMetas[5];
        tokenOwnerAccountA: TAccountMetas[6];
        tokenVaultA: TAccountMetas[7];
        tokenOwnerAccountB: TAccountMetas[8];
        tokenVaultB: TAccountMetas[9];
        tokenProgramA: TAccountMetas[10];
        tokenProgramB: TAccountMetas[11];
        memoProgram: TAccountMetas[12];
    };
    data: CollectFeesV2InstructionData;
};
declare function parseCollectFeesV2Instruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedCollectFeesV2Instruction<TProgram, TAccountMetas>;

declare const COLLECT_PROTOCOL_FEES_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getCollectProtocolFeesDiscriminatorBytes(): ReadonlyUint8Array;
type CollectProtocolFeesInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountWhirlpoolsConfig extends string | IAccountMeta<string> = string, TAccountWhirlpool extends string | IAccountMeta<string> = string, TAccountCollectProtocolFeesAuthority extends string | IAccountMeta<string> = string, TAccountTokenVaultA extends string | IAccountMeta<string> = string, TAccountTokenVaultB extends string | IAccountMeta<string> = string, TAccountTokenDestinationA extends string | IAccountMeta<string> = string, TAccountTokenDestinationB extends string | IAccountMeta<string> = string, TAccountTokenProgram extends string | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA', TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountWhirlpoolsConfig extends string ? ReadonlyAccount<TAccountWhirlpoolsConfig> : TAccountWhirlpoolsConfig,
    TAccountWhirlpool extends string ? WritableAccount<TAccountWhirlpool> : TAccountWhirlpool,
    TAccountCollectProtocolFeesAuthority extends string ? ReadonlySignerAccount<TAccountCollectProtocolFeesAuthority> & IAccountSignerMeta<TAccountCollectProtocolFeesAuthority> : TAccountCollectProtocolFeesAuthority,
    TAccountTokenVaultA extends string ? WritableAccount<TAccountTokenVaultA> : TAccountTokenVaultA,
    TAccountTokenVaultB extends string ? WritableAccount<TAccountTokenVaultB> : TAccountTokenVaultB,
    TAccountTokenDestinationA extends string ? WritableAccount<TAccountTokenDestinationA> : TAccountTokenDestinationA,
    TAccountTokenDestinationB extends string ? WritableAccount<TAccountTokenDestinationB> : TAccountTokenDestinationB,
    TAccountTokenProgram extends string ? ReadonlyAccount<TAccountTokenProgram> : TAccountTokenProgram,
    ...TRemainingAccounts
]>;
type CollectProtocolFeesInstructionData = {
    discriminator: ReadonlyUint8Array;
};
type CollectProtocolFeesInstructionDataArgs = {};
declare function getCollectProtocolFeesInstructionDataEncoder(): Encoder<CollectProtocolFeesInstructionDataArgs>;
declare function getCollectProtocolFeesInstructionDataDecoder(): Decoder<CollectProtocolFeesInstructionData>;
declare function getCollectProtocolFeesInstructionDataCodec(): Codec<CollectProtocolFeesInstructionDataArgs, CollectProtocolFeesInstructionData>;
type CollectProtocolFeesInput<TAccountWhirlpoolsConfig extends string = string, TAccountWhirlpool extends string = string, TAccountCollectProtocolFeesAuthority extends string = string, TAccountTokenVaultA extends string = string, TAccountTokenVaultB extends string = string, TAccountTokenDestinationA extends string = string, TAccountTokenDestinationB extends string = string, TAccountTokenProgram extends string = string> = {
    whirlpoolsConfig: Address<TAccountWhirlpoolsConfig>;
    whirlpool: Address<TAccountWhirlpool>;
    collectProtocolFeesAuthority: TransactionSigner<TAccountCollectProtocolFeesAuthority>;
    tokenVaultA: Address<TAccountTokenVaultA>;
    tokenVaultB: Address<TAccountTokenVaultB>;
    tokenDestinationA: Address<TAccountTokenDestinationA>;
    tokenDestinationB: Address<TAccountTokenDestinationB>;
    tokenProgram?: Address<TAccountTokenProgram>;
};
declare function getCollectProtocolFeesInstruction<TAccountWhirlpoolsConfig extends string, TAccountWhirlpool extends string, TAccountCollectProtocolFeesAuthority extends string, TAccountTokenVaultA extends string, TAccountTokenVaultB extends string, TAccountTokenDestinationA extends string, TAccountTokenDestinationB extends string, TAccountTokenProgram extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: CollectProtocolFeesInput<TAccountWhirlpoolsConfig, TAccountWhirlpool, TAccountCollectProtocolFeesAuthority, TAccountTokenVaultA, TAccountTokenVaultB, TAccountTokenDestinationA, TAccountTokenDestinationB, TAccountTokenProgram>, config?: {
    programAddress?: TProgramAddress;
}): CollectProtocolFeesInstruction<TProgramAddress, TAccountWhirlpoolsConfig, TAccountWhirlpool, TAccountCollectProtocolFeesAuthority, TAccountTokenVaultA, TAccountTokenVaultB, TAccountTokenDestinationA, TAccountTokenDestinationB, TAccountTokenProgram>;
type ParsedCollectProtocolFeesInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        whirlpoolsConfig: TAccountMetas[0];
        whirlpool: TAccountMetas[1];
        collectProtocolFeesAuthority: TAccountMetas[2];
        tokenVaultA: TAccountMetas[3];
        tokenVaultB: TAccountMetas[4];
        tokenDestinationA: TAccountMetas[5];
        tokenDestinationB: TAccountMetas[6];
        tokenProgram: TAccountMetas[7];
    };
    data: CollectProtocolFeesInstructionData;
};
declare function parseCollectProtocolFeesInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedCollectProtocolFeesInstruction<TProgram, TAccountMetas>;

declare const COLLECT_PROTOCOL_FEES_V2_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getCollectProtocolFeesV2DiscriminatorBytes(): ReadonlyUint8Array;
type CollectProtocolFeesV2Instruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountWhirlpoolsConfig extends string | IAccountMeta<string> = string, TAccountWhirlpool extends string | IAccountMeta<string> = string, TAccountCollectProtocolFeesAuthority extends string | IAccountMeta<string> = string, TAccountTokenMintA extends string | IAccountMeta<string> = string, TAccountTokenMintB extends string | IAccountMeta<string> = string, TAccountTokenVaultA extends string | IAccountMeta<string> = string, TAccountTokenVaultB extends string | IAccountMeta<string> = string, TAccountTokenDestinationA extends string | IAccountMeta<string> = string, TAccountTokenDestinationB extends string | IAccountMeta<string> = string, TAccountTokenProgramA extends string | IAccountMeta<string> = string, TAccountTokenProgramB extends string | IAccountMeta<string> = string, TAccountMemoProgram extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountWhirlpoolsConfig extends string ? ReadonlyAccount<TAccountWhirlpoolsConfig> : TAccountWhirlpoolsConfig,
    TAccountWhirlpool extends string ? WritableAccount<TAccountWhirlpool> : TAccountWhirlpool,
    TAccountCollectProtocolFeesAuthority extends string ? ReadonlySignerAccount<TAccountCollectProtocolFeesAuthority> & IAccountSignerMeta<TAccountCollectProtocolFeesAuthority> : TAccountCollectProtocolFeesAuthority,
    TAccountTokenMintA extends string ? ReadonlyAccount<TAccountTokenMintA> : TAccountTokenMintA,
    TAccountTokenMintB extends string ? ReadonlyAccount<TAccountTokenMintB> : TAccountTokenMintB,
    TAccountTokenVaultA extends string ? WritableAccount<TAccountTokenVaultA> : TAccountTokenVaultA,
    TAccountTokenVaultB extends string ? WritableAccount<TAccountTokenVaultB> : TAccountTokenVaultB,
    TAccountTokenDestinationA extends string ? WritableAccount<TAccountTokenDestinationA> : TAccountTokenDestinationA,
    TAccountTokenDestinationB extends string ? WritableAccount<TAccountTokenDestinationB> : TAccountTokenDestinationB,
    TAccountTokenProgramA extends string ? ReadonlyAccount<TAccountTokenProgramA> : TAccountTokenProgramA,
    TAccountTokenProgramB extends string ? ReadonlyAccount<TAccountTokenProgramB> : TAccountTokenProgramB,
    TAccountMemoProgram extends string ? ReadonlyAccount<TAccountMemoProgram> : TAccountMemoProgram,
    ...TRemainingAccounts
]>;
type CollectProtocolFeesV2InstructionData = {
    discriminator: ReadonlyUint8Array;
    remainingAccountsInfo: Option<RemainingAccountsInfo>;
};
type CollectProtocolFeesV2InstructionDataArgs = {
    remainingAccountsInfo: OptionOrNullable<RemainingAccountsInfoArgs>;
};
declare function getCollectProtocolFeesV2InstructionDataEncoder(): Encoder<CollectProtocolFeesV2InstructionDataArgs>;
declare function getCollectProtocolFeesV2InstructionDataDecoder(): Decoder<CollectProtocolFeesV2InstructionData>;
declare function getCollectProtocolFeesV2InstructionDataCodec(): Codec<CollectProtocolFeesV2InstructionDataArgs, CollectProtocolFeesV2InstructionData>;
type CollectProtocolFeesV2Input<TAccountWhirlpoolsConfig extends string = string, TAccountWhirlpool extends string = string, TAccountCollectProtocolFeesAuthority extends string = string, TAccountTokenMintA extends string = string, TAccountTokenMintB extends string = string, TAccountTokenVaultA extends string = string, TAccountTokenVaultB extends string = string, TAccountTokenDestinationA extends string = string, TAccountTokenDestinationB extends string = string, TAccountTokenProgramA extends string = string, TAccountTokenProgramB extends string = string, TAccountMemoProgram extends string = string> = {
    whirlpoolsConfig: Address<TAccountWhirlpoolsConfig>;
    whirlpool: Address<TAccountWhirlpool>;
    collectProtocolFeesAuthority: TransactionSigner<TAccountCollectProtocolFeesAuthority>;
    tokenMintA: Address<TAccountTokenMintA>;
    tokenMintB: Address<TAccountTokenMintB>;
    tokenVaultA: Address<TAccountTokenVaultA>;
    tokenVaultB: Address<TAccountTokenVaultB>;
    tokenDestinationA: Address<TAccountTokenDestinationA>;
    tokenDestinationB: Address<TAccountTokenDestinationB>;
    tokenProgramA: Address<TAccountTokenProgramA>;
    tokenProgramB: Address<TAccountTokenProgramB>;
    memoProgram: Address<TAccountMemoProgram>;
    remainingAccountsInfo: CollectProtocolFeesV2InstructionDataArgs['remainingAccountsInfo'];
};
declare function getCollectProtocolFeesV2Instruction<TAccountWhirlpoolsConfig extends string, TAccountWhirlpool extends string, TAccountCollectProtocolFeesAuthority extends string, TAccountTokenMintA extends string, TAccountTokenMintB extends string, TAccountTokenVaultA extends string, TAccountTokenVaultB extends string, TAccountTokenDestinationA extends string, TAccountTokenDestinationB extends string, TAccountTokenProgramA extends string, TAccountTokenProgramB extends string, TAccountMemoProgram extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: CollectProtocolFeesV2Input<TAccountWhirlpoolsConfig, TAccountWhirlpool, TAccountCollectProtocolFeesAuthority, TAccountTokenMintA, TAccountTokenMintB, TAccountTokenVaultA, TAccountTokenVaultB, TAccountTokenDestinationA, TAccountTokenDestinationB, TAccountTokenProgramA, TAccountTokenProgramB, TAccountMemoProgram>, config?: {
    programAddress?: TProgramAddress;
}): CollectProtocolFeesV2Instruction<TProgramAddress, TAccountWhirlpoolsConfig, TAccountWhirlpool, TAccountCollectProtocolFeesAuthority, TAccountTokenMintA, TAccountTokenMintB, TAccountTokenVaultA, TAccountTokenVaultB, TAccountTokenDestinationA, TAccountTokenDestinationB, TAccountTokenProgramA, TAccountTokenProgramB, TAccountMemoProgram>;
type ParsedCollectProtocolFeesV2Instruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        whirlpoolsConfig: TAccountMetas[0];
        whirlpool: TAccountMetas[1];
        collectProtocolFeesAuthority: TAccountMetas[2];
        tokenMintA: TAccountMetas[3];
        tokenMintB: TAccountMetas[4];
        tokenVaultA: TAccountMetas[5];
        tokenVaultB: TAccountMetas[6];
        tokenDestinationA: TAccountMetas[7];
        tokenDestinationB: TAccountMetas[8];
        tokenProgramA: TAccountMetas[9];
        tokenProgramB: TAccountMetas[10];
        memoProgram: TAccountMetas[11];
    };
    data: CollectProtocolFeesV2InstructionData;
};
declare function parseCollectProtocolFeesV2Instruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedCollectProtocolFeesV2Instruction<TProgram, TAccountMetas>;

declare const COLLECT_REWARD_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getCollectRewardDiscriminatorBytes(): ReadonlyUint8Array;
type CollectRewardInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountWhirlpool extends string | IAccountMeta<string> = string, TAccountPositionAuthority extends string | IAccountMeta<string> = string, TAccountPosition extends string | IAccountMeta<string> = string, TAccountPositionTokenAccount extends string | IAccountMeta<string> = string, TAccountRewardOwnerAccount extends string | IAccountMeta<string> = string, TAccountRewardVault extends string | IAccountMeta<string> = string, TAccountTokenProgram extends string | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA', TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountWhirlpool extends string ? ReadonlyAccount<TAccountWhirlpool> : TAccountWhirlpool,
    TAccountPositionAuthority extends string ? ReadonlySignerAccount<TAccountPositionAuthority> & IAccountSignerMeta<TAccountPositionAuthority> : TAccountPositionAuthority,
    TAccountPosition extends string ? WritableAccount<TAccountPosition> : TAccountPosition,
    TAccountPositionTokenAccount extends string ? ReadonlyAccount<TAccountPositionTokenAccount> : TAccountPositionTokenAccount,
    TAccountRewardOwnerAccount extends string ? WritableAccount<TAccountRewardOwnerAccount> : TAccountRewardOwnerAccount,
    TAccountRewardVault extends string ? WritableAccount<TAccountRewardVault> : TAccountRewardVault,
    TAccountTokenProgram extends string ? ReadonlyAccount<TAccountTokenProgram> : TAccountTokenProgram,
    ...TRemainingAccounts
]>;
type CollectRewardInstructionData = {
    discriminator: ReadonlyUint8Array;
    rewardIndex: number;
};
type CollectRewardInstructionDataArgs = {
    rewardIndex: number;
};
declare function getCollectRewardInstructionDataEncoder(): Encoder<CollectRewardInstructionDataArgs>;
declare function getCollectRewardInstructionDataDecoder(): Decoder<CollectRewardInstructionData>;
declare function getCollectRewardInstructionDataCodec(): Codec<CollectRewardInstructionDataArgs, CollectRewardInstructionData>;
type CollectRewardInput<TAccountWhirlpool extends string = string, TAccountPositionAuthority extends string = string, TAccountPosition extends string = string, TAccountPositionTokenAccount extends string = string, TAccountRewardOwnerAccount extends string = string, TAccountRewardVault extends string = string, TAccountTokenProgram extends string = string> = {
    whirlpool: Address<TAccountWhirlpool>;
    positionAuthority: TransactionSigner<TAccountPositionAuthority>;
    position: Address<TAccountPosition>;
    positionTokenAccount: Address<TAccountPositionTokenAccount>;
    rewardOwnerAccount: Address<TAccountRewardOwnerAccount>;
    rewardVault: Address<TAccountRewardVault>;
    tokenProgram?: Address<TAccountTokenProgram>;
    rewardIndex: CollectRewardInstructionDataArgs['rewardIndex'];
};
declare function getCollectRewardInstruction<TAccountWhirlpool extends string, TAccountPositionAuthority extends string, TAccountPosition extends string, TAccountPositionTokenAccount extends string, TAccountRewardOwnerAccount extends string, TAccountRewardVault extends string, TAccountTokenProgram extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: CollectRewardInput<TAccountWhirlpool, TAccountPositionAuthority, TAccountPosition, TAccountPositionTokenAccount, TAccountRewardOwnerAccount, TAccountRewardVault, TAccountTokenProgram>, config?: {
    programAddress?: TProgramAddress;
}): CollectRewardInstruction<TProgramAddress, TAccountWhirlpool, TAccountPositionAuthority, TAccountPosition, TAccountPositionTokenAccount, TAccountRewardOwnerAccount, TAccountRewardVault, TAccountTokenProgram>;
type ParsedCollectRewardInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        whirlpool: TAccountMetas[0];
        positionAuthority: TAccountMetas[1];
        position: TAccountMetas[2];
        positionTokenAccount: TAccountMetas[3];
        rewardOwnerAccount: TAccountMetas[4];
        rewardVault: TAccountMetas[5];
        tokenProgram: TAccountMetas[6];
    };
    data: CollectRewardInstructionData;
};
declare function parseCollectRewardInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedCollectRewardInstruction<TProgram, TAccountMetas>;

declare const COLLECT_REWARD_V2_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getCollectRewardV2DiscriminatorBytes(): ReadonlyUint8Array;
type CollectRewardV2Instruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountWhirlpool extends string | IAccountMeta<string> = string, TAccountPositionAuthority extends string | IAccountMeta<string> = string, TAccountPosition extends string | IAccountMeta<string> = string, TAccountPositionTokenAccount extends string | IAccountMeta<string> = string, TAccountRewardOwnerAccount extends string | IAccountMeta<string> = string, TAccountRewardMint extends string | IAccountMeta<string> = string, TAccountRewardVault extends string | IAccountMeta<string> = string, TAccountRewardTokenProgram extends string | IAccountMeta<string> = string, TAccountMemoProgram extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountWhirlpool extends string ? ReadonlyAccount<TAccountWhirlpool> : TAccountWhirlpool,
    TAccountPositionAuthority extends string ? ReadonlySignerAccount<TAccountPositionAuthority> & IAccountSignerMeta<TAccountPositionAuthority> : TAccountPositionAuthority,
    TAccountPosition extends string ? WritableAccount<TAccountPosition> : TAccountPosition,
    TAccountPositionTokenAccount extends string ? ReadonlyAccount<TAccountPositionTokenAccount> : TAccountPositionTokenAccount,
    TAccountRewardOwnerAccount extends string ? WritableAccount<TAccountRewardOwnerAccount> : TAccountRewardOwnerAccount,
    TAccountRewardMint extends string ? ReadonlyAccount<TAccountRewardMint> : TAccountRewardMint,
    TAccountRewardVault extends string ? WritableAccount<TAccountRewardVault> : TAccountRewardVault,
    TAccountRewardTokenProgram extends string ? ReadonlyAccount<TAccountRewardTokenProgram> : TAccountRewardTokenProgram,
    TAccountMemoProgram extends string ? ReadonlyAccount<TAccountMemoProgram> : TAccountMemoProgram,
    ...TRemainingAccounts
]>;
type CollectRewardV2InstructionData = {
    discriminator: ReadonlyUint8Array;
    rewardIndex: number;
    remainingAccountsInfo: Option<RemainingAccountsInfo>;
};
type CollectRewardV2InstructionDataArgs = {
    rewardIndex: number;
    remainingAccountsInfo: OptionOrNullable<RemainingAccountsInfoArgs>;
};
declare function getCollectRewardV2InstructionDataEncoder(): Encoder<CollectRewardV2InstructionDataArgs>;
declare function getCollectRewardV2InstructionDataDecoder(): Decoder<CollectRewardV2InstructionData>;
declare function getCollectRewardV2InstructionDataCodec(): Codec<CollectRewardV2InstructionDataArgs, CollectRewardV2InstructionData>;
type CollectRewardV2Input<TAccountWhirlpool extends string = string, TAccountPositionAuthority extends string = string, TAccountPosition extends string = string, TAccountPositionTokenAccount extends string = string, TAccountRewardOwnerAccount extends string = string, TAccountRewardMint extends string = string, TAccountRewardVault extends string = string, TAccountRewardTokenProgram extends string = string, TAccountMemoProgram extends string = string> = {
    whirlpool: Address<TAccountWhirlpool>;
    positionAuthority: TransactionSigner<TAccountPositionAuthority>;
    position: Address<TAccountPosition>;
    positionTokenAccount: Address<TAccountPositionTokenAccount>;
    rewardOwnerAccount: Address<TAccountRewardOwnerAccount>;
    rewardMint: Address<TAccountRewardMint>;
    rewardVault: Address<TAccountRewardVault>;
    rewardTokenProgram: Address<TAccountRewardTokenProgram>;
    memoProgram: Address<TAccountMemoProgram>;
    rewardIndex: CollectRewardV2InstructionDataArgs['rewardIndex'];
    remainingAccountsInfo: CollectRewardV2InstructionDataArgs['remainingAccountsInfo'];
};
declare function getCollectRewardV2Instruction<TAccountWhirlpool extends string, TAccountPositionAuthority extends string, TAccountPosition extends string, TAccountPositionTokenAccount extends string, TAccountRewardOwnerAccount extends string, TAccountRewardMint extends string, TAccountRewardVault extends string, TAccountRewardTokenProgram extends string, TAccountMemoProgram extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: CollectRewardV2Input<TAccountWhirlpool, TAccountPositionAuthority, TAccountPosition, TAccountPositionTokenAccount, TAccountRewardOwnerAccount, TAccountRewardMint, TAccountRewardVault, TAccountRewardTokenProgram, TAccountMemoProgram>, config?: {
    programAddress?: TProgramAddress;
}): CollectRewardV2Instruction<TProgramAddress, TAccountWhirlpool, TAccountPositionAuthority, TAccountPosition, TAccountPositionTokenAccount, TAccountRewardOwnerAccount, TAccountRewardMint, TAccountRewardVault, TAccountRewardTokenProgram, TAccountMemoProgram>;
type ParsedCollectRewardV2Instruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        whirlpool: TAccountMetas[0];
        positionAuthority: TAccountMetas[1];
        position: TAccountMetas[2];
        positionTokenAccount: TAccountMetas[3];
        rewardOwnerAccount: TAccountMetas[4];
        rewardMint: TAccountMetas[5];
        rewardVault: TAccountMetas[6];
        rewardTokenProgram: TAccountMetas[7];
        memoProgram: TAccountMetas[8];
    };
    data: CollectRewardV2InstructionData;
};
declare function parseCollectRewardV2Instruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedCollectRewardV2Instruction<TProgram, TAccountMetas>;

declare const DECREASE_LIQUIDITY_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getDecreaseLiquidityDiscriminatorBytes(): ReadonlyUint8Array;
type DecreaseLiquidityInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountWhirlpool extends string | IAccountMeta<string> = string, TAccountTokenProgram extends string | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA', TAccountPositionAuthority extends string | IAccountMeta<string> = string, TAccountPosition extends string | IAccountMeta<string> = string, TAccountPositionTokenAccount extends string | IAccountMeta<string> = string, TAccountTokenOwnerAccountA extends string | IAccountMeta<string> = string, TAccountTokenOwnerAccountB extends string | IAccountMeta<string> = string, TAccountTokenVaultA extends string | IAccountMeta<string> = string, TAccountTokenVaultB extends string | IAccountMeta<string> = string, TAccountTickArrayLower extends string | IAccountMeta<string> = string, TAccountTickArrayUpper extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountWhirlpool extends string ? WritableAccount<TAccountWhirlpool> : TAccountWhirlpool,
    TAccountTokenProgram extends string ? ReadonlyAccount<TAccountTokenProgram> : TAccountTokenProgram,
    TAccountPositionAuthority extends string ? ReadonlySignerAccount<TAccountPositionAuthority> & IAccountSignerMeta<TAccountPositionAuthority> : TAccountPositionAuthority,
    TAccountPosition extends string ? WritableAccount<TAccountPosition> : TAccountPosition,
    TAccountPositionTokenAccount extends string ? ReadonlyAccount<TAccountPositionTokenAccount> : TAccountPositionTokenAccount,
    TAccountTokenOwnerAccountA extends string ? WritableAccount<TAccountTokenOwnerAccountA> : TAccountTokenOwnerAccountA,
    TAccountTokenOwnerAccountB extends string ? WritableAccount<TAccountTokenOwnerAccountB> : TAccountTokenOwnerAccountB,
    TAccountTokenVaultA extends string ? WritableAccount<TAccountTokenVaultA> : TAccountTokenVaultA,
    TAccountTokenVaultB extends string ? WritableAccount<TAccountTokenVaultB> : TAccountTokenVaultB,
    TAccountTickArrayLower extends string ? WritableAccount<TAccountTickArrayLower> : TAccountTickArrayLower,
    TAccountTickArrayUpper extends string ? WritableAccount<TAccountTickArrayUpper> : TAccountTickArrayUpper,
    ...TRemainingAccounts
]>;
type DecreaseLiquidityInstructionData = {
    discriminator: ReadonlyUint8Array;
    liquidityAmount: bigint;
    tokenMinA: bigint;
    tokenMinB: bigint;
};
type DecreaseLiquidityInstructionDataArgs = {
    liquidityAmount: number | bigint;
    tokenMinA: number | bigint;
    tokenMinB: number | bigint;
};
declare function getDecreaseLiquidityInstructionDataEncoder(): Encoder<DecreaseLiquidityInstructionDataArgs>;
declare function getDecreaseLiquidityInstructionDataDecoder(): Decoder<DecreaseLiquidityInstructionData>;
declare function getDecreaseLiquidityInstructionDataCodec(): Codec<DecreaseLiquidityInstructionDataArgs, DecreaseLiquidityInstructionData>;
type DecreaseLiquidityInput<TAccountWhirlpool extends string = string, TAccountTokenProgram extends string = string, TAccountPositionAuthority extends string = string, TAccountPosition extends string = string, TAccountPositionTokenAccount extends string = string, TAccountTokenOwnerAccountA extends string = string, TAccountTokenOwnerAccountB extends string = string, TAccountTokenVaultA extends string = string, TAccountTokenVaultB extends string = string, TAccountTickArrayLower extends string = string, TAccountTickArrayUpper extends string = string> = {
    whirlpool: Address<TAccountWhirlpool>;
    tokenProgram?: Address<TAccountTokenProgram>;
    positionAuthority: TransactionSigner<TAccountPositionAuthority>;
    position: Address<TAccountPosition>;
    positionTokenAccount: Address<TAccountPositionTokenAccount>;
    tokenOwnerAccountA: Address<TAccountTokenOwnerAccountA>;
    tokenOwnerAccountB: Address<TAccountTokenOwnerAccountB>;
    tokenVaultA: Address<TAccountTokenVaultA>;
    tokenVaultB: Address<TAccountTokenVaultB>;
    tickArrayLower: Address<TAccountTickArrayLower>;
    tickArrayUpper: Address<TAccountTickArrayUpper>;
    liquidityAmount: DecreaseLiquidityInstructionDataArgs['liquidityAmount'];
    tokenMinA: DecreaseLiquidityInstructionDataArgs['tokenMinA'];
    tokenMinB: DecreaseLiquidityInstructionDataArgs['tokenMinB'];
};
declare function getDecreaseLiquidityInstruction<TAccountWhirlpool extends string, TAccountTokenProgram extends string, TAccountPositionAuthority extends string, TAccountPosition extends string, TAccountPositionTokenAccount extends string, TAccountTokenOwnerAccountA extends string, TAccountTokenOwnerAccountB extends string, TAccountTokenVaultA extends string, TAccountTokenVaultB extends string, TAccountTickArrayLower extends string, TAccountTickArrayUpper extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: DecreaseLiquidityInput<TAccountWhirlpool, TAccountTokenProgram, TAccountPositionAuthority, TAccountPosition, TAccountPositionTokenAccount, TAccountTokenOwnerAccountA, TAccountTokenOwnerAccountB, TAccountTokenVaultA, TAccountTokenVaultB, TAccountTickArrayLower, TAccountTickArrayUpper>, config?: {
    programAddress?: TProgramAddress;
}): DecreaseLiquidityInstruction<TProgramAddress, TAccountWhirlpool, TAccountTokenProgram, TAccountPositionAuthority, TAccountPosition, TAccountPositionTokenAccount, TAccountTokenOwnerAccountA, TAccountTokenOwnerAccountB, TAccountTokenVaultA, TAccountTokenVaultB, TAccountTickArrayLower, TAccountTickArrayUpper>;
type ParsedDecreaseLiquidityInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        whirlpool: TAccountMetas[0];
        tokenProgram: TAccountMetas[1];
        positionAuthority: TAccountMetas[2];
        position: TAccountMetas[3];
        positionTokenAccount: TAccountMetas[4];
        tokenOwnerAccountA: TAccountMetas[5];
        tokenOwnerAccountB: TAccountMetas[6];
        tokenVaultA: TAccountMetas[7];
        tokenVaultB: TAccountMetas[8];
        tickArrayLower: TAccountMetas[9];
        tickArrayUpper: TAccountMetas[10];
    };
    data: DecreaseLiquidityInstructionData;
};
declare function parseDecreaseLiquidityInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedDecreaseLiquidityInstruction<TProgram, TAccountMetas>;

declare const DECREASE_LIQUIDITY_V2_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getDecreaseLiquidityV2DiscriminatorBytes(): ReadonlyUint8Array;
type DecreaseLiquidityV2Instruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountWhirlpool extends string | IAccountMeta<string> = string, TAccountTokenProgramA extends string | IAccountMeta<string> = string, TAccountTokenProgramB extends string | IAccountMeta<string> = string, TAccountMemoProgram extends string | IAccountMeta<string> = string, TAccountPositionAuthority extends string | IAccountMeta<string> = string, TAccountPosition extends string | IAccountMeta<string> = string, TAccountPositionTokenAccount extends string | IAccountMeta<string> = string, TAccountTokenMintA extends string | IAccountMeta<string> = string, TAccountTokenMintB extends string | IAccountMeta<string> = string, TAccountTokenOwnerAccountA extends string | IAccountMeta<string> = string, TAccountTokenOwnerAccountB extends string | IAccountMeta<string> = string, TAccountTokenVaultA extends string | IAccountMeta<string> = string, TAccountTokenVaultB extends string | IAccountMeta<string> = string, TAccountTickArrayLower extends string | IAccountMeta<string> = string, TAccountTickArrayUpper extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountWhirlpool extends string ? WritableAccount<TAccountWhirlpool> : TAccountWhirlpool,
    TAccountTokenProgramA extends string ? ReadonlyAccount<TAccountTokenProgramA> : TAccountTokenProgramA,
    TAccountTokenProgramB extends string ? ReadonlyAccount<TAccountTokenProgramB> : TAccountTokenProgramB,
    TAccountMemoProgram extends string ? ReadonlyAccount<TAccountMemoProgram> : TAccountMemoProgram,
    TAccountPositionAuthority extends string ? ReadonlySignerAccount<TAccountPositionAuthority> & IAccountSignerMeta<TAccountPositionAuthority> : TAccountPositionAuthority,
    TAccountPosition extends string ? WritableAccount<TAccountPosition> : TAccountPosition,
    TAccountPositionTokenAccount extends string ? ReadonlyAccount<TAccountPositionTokenAccount> : TAccountPositionTokenAccount,
    TAccountTokenMintA extends string ? ReadonlyAccount<TAccountTokenMintA> : TAccountTokenMintA,
    TAccountTokenMintB extends string ? ReadonlyAccount<TAccountTokenMintB> : TAccountTokenMintB,
    TAccountTokenOwnerAccountA extends string ? WritableAccount<TAccountTokenOwnerAccountA> : TAccountTokenOwnerAccountA,
    TAccountTokenOwnerAccountB extends string ? WritableAccount<TAccountTokenOwnerAccountB> : TAccountTokenOwnerAccountB,
    TAccountTokenVaultA extends string ? WritableAccount<TAccountTokenVaultA> : TAccountTokenVaultA,
    TAccountTokenVaultB extends string ? WritableAccount<TAccountTokenVaultB> : TAccountTokenVaultB,
    TAccountTickArrayLower extends string ? WritableAccount<TAccountTickArrayLower> : TAccountTickArrayLower,
    TAccountTickArrayUpper extends string ? WritableAccount<TAccountTickArrayUpper> : TAccountTickArrayUpper,
    ...TRemainingAccounts
]>;
type DecreaseLiquidityV2InstructionData = {
    discriminator: ReadonlyUint8Array;
    liquidityAmount: bigint;
    tokenMinA: bigint;
    tokenMinB: bigint;
    remainingAccountsInfo: Option<RemainingAccountsInfo>;
};
type DecreaseLiquidityV2InstructionDataArgs = {
    liquidityAmount: number | bigint;
    tokenMinA: number | bigint;
    tokenMinB: number | bigint;
    remainingAccountsInfo: OptionOrNullable<RemainingAccountsInfoArgs>;
};
declare function getDecreaseLiquidityV2InstructionDataEncoder(): Encoder<DecreaseLiquidityV2InstructionDataArgs>;
declare function getDecreaseLiquidityV2InstructionDataDecoder(): Decoder<DecreaseLiquidityV2InstructionData>;
declare function getDecreaseLiquidityV2InstructionDataCodec(): Codec<DecreaseLiquidityV2InstructionDataArgs, DecreaseLiquidityV2InstructionData>;
type DecreaseLiquidityV2Input<TAccountWhirlpool extends string = string, TAccountTokenProgramA extends string = string, TAccountTokenProgramB extends string = string, TAccountMemoProgram extends string = string, TAccountPositionAuthority extends string = string, TAccountPosition extends string = string, TAccountPositionTokenAccount extends string = string, TAccountTokenMintA extends string = string, TAccountTokenMintB extends string = string, TAccountTokenOwnerAccountA extends string = string, TAccountTokenOwnerAccountB extends string = string, TAccountTokenVaultA extends string = string, TAccountTokenVaultB extends string = string, TAccountTickArrayLower extends string = string, TAccountTickArrayUpper extends string = string> = {
    whirlpool: Address<TAccountWhirlpool>;
    tokenProgramA: Address<TAccountTokenProgramA>;
    tokenProgramB: Address<TAccountTokenProgramB>;
    memoProgram: Address<TAccountMemoProgram>;
    positionAuthority: TransactionSigner<TAccountPositionAuthority>;
    position: Address<TAccountPosition>;
    positionTokenAccount: Address<TAccountPositionTokenAccount>;
    tokenMintA: Address<TAccountTokenMintA>;
    tokenMintB: Address<TAccountTokenMintB>;
    tokenOwnerAccountA: Address<TAccountTokenOwnerAccountA>;
    tokenOwnerAccountB: Address<TAccountTokenOwnerAccountB>;
    tokenVaultA: Address<TAccountTokenVaultA>;
    tokenVaultB: Address<TAccountTokenVaultB>;
    tickArrayLower: Address<TAccountTickArrayLower>;
    tickArrayUpper: Address<TAccountTickArrayUpper>;
    liquidityAmount: DecreaseLiquidityV2InstructionDataArgs['liquidityAmount'];
    tokenMinA: DecreaseLiquidityV2InstructionDataArgs['tokenMinA'];
    tokenMinB: DecreaseLiquidityV2InstructionDataArgs['tokenMinB'];
    remainingAccountsInfo: DecreaseLiquidityV2InstructionDataArgs['remainingAccountsInfo'];
};
declare function getDecreaseLiquidityV2Instruction<TAccountWhirlpool extends string, TAccountTokenProgramA extends string, TAccountTokenProgramB extends string, TAccountMemoProgram extends string, TAccountPositionAuthority extends string, TAccountPosition extends string, TAccountPositionTokenAccount extends string, TAccountTokenMintA extends string, TAccountTokenMintB extends string, TAccountTokenOwnerAccountA extends string, TAccountTokenOwnerAccountB extends string, TAccountTokenVaultA extends string, TAccountTokenVaultB extends string, TAccountTickArrayLower extends string, TAccountTickArrayUpper extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: DecreaseLiquidityV2Input<TAccountWhirlpool, TAccountTokenProgramA, TAccountTokenProgramB, TAccountMemoProgram, TAccountPositionAuthority, TAccountPosition, TAccountPositionTokenAccount, TAccountTokenMintA, TAccountTokenMintB, TAccountTokenOwnerAccountA, TAccountTokenOwnerAccountB, TAccountTokenVaultA, TAccountTokenVaultB, TAccountTickArrayLower, TAccountTickArrayUpper>, config?: {
    programAddress?: TProgramAddress;
}): DecreaseLiquidityV2Instruction<TProgramAddress, TAccountWhirlpool, TAccountTokenProgramA, TAccountTokenProgramB, TAccountMemoProgram, TAccountPositionAuthority, TAccountPosition, TAccountPositionTokenAccount, TAccountTokenMintA, TAccountTokenMintB, TAccountTokenOwnerAccountA, TAccountTokenOwnerAccountB, TAccountTokenVaultA, TAccountTokenVaultB, TAccountTickArrayLower, TAccountTickArrayUpper>;
type ParsedDecreaseLiquidityV2Instruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        whirlpool: TAccountMetas[0];
        tokenProgramA: TAccountMetas[1];
        tokenProgramB: TAccountMetas[2];
        memoProgram: TAccountMetas[3];
        positionAuthority: TAccountMetas[4];
        position: TAccountMetas[5];
        positionTokenAccount: TAccountMetas[6];
        tokenMintA: TAccountMetas[7];
        tokenMintB: TAccountMetas[8];
        tokenOwnerAccountA: TAccountMetas[9];
        tokenOwnerAccountB: TAccountMetas[10];
        tokenVaultA: TAccountMetas[11];
        tokenVaultB: TAccountMetas[12];
        tickArrayLower: TAccountMetas[13];
        tickArrayUpper: TAccountMetas[14];
    };
    data: DecreaseLiquidityV2InstructionData;
};
declare function parseDecreaseLiquidityV2Instruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedDecreaseLiquidityV2Instruction<TProgram, TAccountMetas>;

declare const DELETE_POSITION_BUNDLE_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getDeletePositionBundleDiscriminatorBytes(): ReadonlyUint8Array;
type DeletePositionBundleInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountPositionBundle extends string | IAccountMeta<string> = string, TAccountPositionBundleMint extends string | IAccountMeta<string> = string, TAccountPositionBundleTokenAccount extends string | IAccountMeta<string> = string, TAccountPositionBundleOwner extends string | IAccountMeta<string> = string, TAccountReceiver extends string | IAccountMeta<string> = string, TAccountTokenProgram extends string | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA', TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountPositionBundle extends string ? WritableAccount<TAccountPositionBundle> : TAccountPositionBundle,
    TAccountPositionBundleMint extends string ? WritableAccount<TAccountPositionBundleMint> : TAccountPositionBundleMint,
    TAccountPositionBundleTokenAccount extends string ? WritableAccount<TAccountPositionBundleTokenAccount> : TAccountPositionBundleTokenAccount,
    TAccountPositionBundleOwner extends string ? ReadonlySignerAccount<TAccountPositionBundleOwner> & IAccountSignerMeta<TAccountPositionBundleOwner> : TAccountPositionBundleOwner,
    TAccountReceiver extends string ? WritableAccount<TAccountReceiver> : TAccountReceiver,
    TAccountTokenProgram extends string ? ReadonlyAccount<TAccountTokenProgram> : TAccountTokenProgram,
    ...TRemainingAccounts
]>;
type DeletePositionBundleInstructionData = {
    discriminator: ReadonlyUint8Array;
};
type DeletePositionBundleInstructionDataArgs = {};
declare function getDeletePositionBundleInstructionDataEncoder(): Encoder<DeletePositionBundleInstructionDataArgs>;
declare function getDeletePositionBundleInstructionDataDecoder(): Decoder<DeletePositionBundleInstructionData>;
declare function getDeletePositionBundleInstructionDataCodec(): Codec<DeletePositionBundleInstructionDataArgs, DeletePositionBundleInstructionData>;
type DeletePositionBundleInput<TAccountPositionBundle extends string = string, TAccountPositionBundleMint extends string = string, TAccountPositionBundleTokenAccount extends string = string, TAccountPositionBundleOwner extends string = string, TAccountReceiver extends string = string, TAccountTokenProgram extends string = string> = {
    positionBundle: Address<TAccountPositionBundle>;
    positionBundleMint: Address<TAccountPositionBundleMint>;
    positionBundleTokenAccount: Address<TAccountPositionBundleTokenAccount>;
    positionBundleOwner: TransactionSigner<TAccountPositionBundleOwner>;
    receiver: Address<TAccountReceiver>;
    tokenProgram?: Address<TAccountTokenProgram>;
};
declare function getDeletePositionBundleInstruction<TAccountPositionBundle extends string, TAccountPositionBundleMint extends string, TAccountPositionBundleTokenAccount extends string, TAccountPositionBundleOwner extends string, TAccountReceiver extends string, TAccountTokenProgram extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: DeletePositionBundleInput<TAccountPositionBundle, TAccountPositionBundleMint, TAccountPositionBundleTokenAccount, TAccountPositionBundleOwner, TAccountReceiver, TAccountTokenProgram>, config?: {
    programAddress?: TProgramAddress;
}): DeletePositionBundleInstruction<TProgramAddress, TAccountPositionBundle, TAccountPositionBundleMint, TAccountPositionBundleTokenAccount, TAccountPositionBundleOwner, TAccountReceiver, TAccountTokenProgram>;
type ParsedDeletePositionBundleInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        positionBundle: TAccountMetas[0];
        positionBundleMint: TAccountMetas[1];
        positionBundleTokenAccount: TAccountMetas[2];
        positionBundleOwner: TAccountMetas[3];
        receiver: TAccountMetas[4];
        tokenProgram: TAccountMetas[5];
    };
    data: DeletePositionBundleInstructionData;
};
declare function parseDeletePositionBundleInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedDeletePositionBundleInstruction<TProgram, TAccountMetas>;

declare const DELETE_TOKEN_BADGE_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getDeleteTokenBadgeDiscriminatorBytes(): ReadonlyUint8Array;
type DeleteTokenBadgeInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountWhirlpoolsConfig extends string | IAccountMeta<string> = string, TAccountWhirlpoolsConfigExtension extends string | IAccountMeta<string> = string, TAccountTokenBadgeAuthority extends string | IAccountMeta<string> = string, TAccountTokenMint extends string | IAccountMeta<string> = string, TAccountTokenBadge extends string | IAccountMeta<string> = string, TAccountReceiver extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountWhirlpoolsConfig extends string ? ReadonlyAccount<TAccountWhirlpoolsConfig> : TAccountWhirlpoolsConfig,
    TAccountWhirlpoolsConfigExtension extends string ? ReadonlyAccount<TAccountWhirlpoolsConfigExtension> : TAccountWhirlpoolsConfigExtension,
    TAccountTokenBadgeAuthority extends string ? ReadonlySignerAccount<TAccountTokenBadgeAuthority> & IAccountSignerMeta<TAccountTokenBadgeAuthority> : TAccountTokenBadgeAuthority,
    TAccountTokenMint extends string ? ReadonlyAccount<TAccountTokenMint> : TAccountTokenMint,
    TAccountTokenBadge extends string ? WritableAccount<TAccountTokenBadge> : TAccountTokenBadge,
    TAccountReceiver extends string ? WritableAccount<TAccountReceiver> : TAccountReceiver,
    ...TRemainingAccounts
]>;
type DeleteTokenBadgeInstructionData = {
    discriminator: ReadonlyUint8Array;
};
type DeleteTokenBadgeInstructionDataArgs = {};
declare function getDeleteTokenBadgeInstructionDataEncoder(): Encoder<DeleteTokenBadgeInstructionDataArgs>;
declare function getDeleteTokenBadgeInstructionDataDecoder(): Decoder<DeleteTokenBadgeInstructionData>;
declare function getDeleteTokenBadgeInstructionDataCodec(): Codec<DeleteTokenBadgeInstructionDataArgs, DeleteTokenBadgeInstructionData>;
type DeleteTokenBadgeInput<TAccountWhirlpoolsConfig extends string = string, TAccountWhirlpoolsConfigExtension extends string = string, TAccountTokenBadgeAuthority extends string = string, TAccountTokenMint extends string = string, TAccountTokenBadge extends string = string, TAccountReceiver extends string = string> = {
    whirlpoolsConfig: Address<TAccountWhirlpoolsConfig>;
    whirlpoolsConfigExtension: Address<TAccountWhirlpoolsConfigExtension>;
    tokenBadgeAuthority: TransactionSigner<TAccountTokenBadgeAuthority>;
    tokenMint: Address<TAccountTokenMint>;
    tokenBadge: Address<TAccountTokenBadge>;
    receiver: Address<TAccountReceiver>;
};
declare function getDeleteTokenBadgeInstruction<TAccountWhirlpoolsConfig extends string, TAccountWhirlpoolsConfigExtension extends string, TAccountTokenBadgeAuthority extends string, TAccountTokenMint extends string, TAccountTokenBadge extends string, TAccountReceiver extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: DeleteTokenBadgeInput<TAccountWhirlpoolsConfig, TAccountWhirlpoolsConfigExtension, TAccountTokenBadgeAuthority, TAccountTokenMint, TAccountTokenBadge, TAccountReceiver>, config?: {
    programAddress?: TProgramAddress;
}): DeleteTokenBadgeInstruction<TProgramAddress, TAccountWhirlpoolsConfig, TAccountWhirlpoolsConfigExtension, TAccountTokenBadgeAuthority, TAccountTokenMint, TAccountTokenBadge, TAccountReceiver>;
type ParsedDeleteTokenBadgeInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        whirlpoolsConfig: TAccountMetas[0];
        whirlpoolsConfigExtension: TAccountMetas[1];
        tokenBadgeAuthority: TAccountMetas[2];
        tokenMint: TAccountMetas[3];
        tokenBadge: TAccountMetas[4];
        receiver: TAccountMetas[5];
    };
    data: DeleteTokenBadgeInstructionData;
};
declare function parseDeleteTokenBadgeInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedDeleteTokenBadgeInstruction<TProgram, TAccountMetas>;

declare const INCREASE_LIQUIDITY_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getIncreaseLiquidityDiscriminatorBytes(): ReadonlyUint8Array;
type IncreaseLiquidityInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountWhirlpool extends string | IAccountMeta<string> = string, TAccountTokenProgram extends string | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA', TAccountPositionAuthority extends string | IAccountMeta<string> = string, TAccountPosition extends string | IAccountMeta<string> = string, TAccountPositionTokenAccount extends string | IAccountMeta<string> = string, TAccountTokenOwnerAccountA extends string | IAccountMeta<string> = string, TAccountTokenOwnerAccountB extends string | IAccountMeta<string> = string, TAccountTokenVaultA extends string | IAccountMeta<string> = string, TAccountTokenVaultB extends string | IAccountMeta<string> = string, TAccountTickArrayLower extends string | IAccountMeta<string> = string, TAccountTickArrayUpper extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountWhirlpool extends string ? WritableAccount<TAccountWhirlpool> : TAccountWhirlpool,
    TAccountTokenProgram extends string ? ReadonlyAccount<TAccountTokenProgram> : TAccountTokenProgram,
    TAccountPositionAuthority extends string ? ReadonlySignerAccount<TAccountPositionAuthority> & IAccountSignerMeta<TAccountPositionAuthority> : TAccountPositionAuthority,
    TAccountPosition extends string ? WritableAccount<TAccountPosition> : TAccountPosition,
    TAccountPositionTokenAccount extends string ? ReadonlyAccount<TAccountPositionTokenAccount> : TAccountPositionTokenAccount,
    TAccountTokenOwnerAccountA extends string ? WritableAccount<TAccountTokenOwnerAccountA> : TAccountTokenOwnerAccountA,
    TAccountTokenOwnerAccountB extends string ? WritableAccount<TAccountTokenOwnerAccountB> : TAccountTokenOwnerAccountB,
    TAccountTokenVaultA extends string ? WritableAccount<TAccountTokenVaultA> : TAccountTokenVaultA,
    TAccountTokenVaultB extends string ? WritableAccount<TAccountTokenVaultB> : TAccountTokenVaultB,
    TAccountTickArrayLower extends string ? WritableAccount<TAccountTickArrayLower> : TAccountTickArrayLower,
    TAccountTickArrayUpper extends string ? WritableAccount<TAccountTickArrayUpper> : TAccountTickArrayUpper,
    ...TRemainingAccounts
]>;
type IncreaseLiquidityInstructionData = {
    discriminator: ReadonlyUint8Array;
    liquidityAmount: bigint;
    tokenMaxA: bigint;
    tokenMaxB: bigint;
};
type IncreaseLiquidityInstructionDataArgs = {
    liquidityAmount: number | bigint;
    tokenMaxA: number | bigint;
    tokenMaxB: number | bigint;
};
declare function getIncreaseLiquidityInstructionDataEncoder(): Encoder<IncreaseLiquidityInstructionDataArgs>;
declare function getIncreaseLiquidityInstructionDataDecoder(): Decoder<IncreaseLiquidityInstructionData>;
declare function getIncreaseLiquidityInstructionDataCodec(): Codec<IncreaseLiquidityInstructionDataArgs, IncreaseLiquidityInstructionData>;
type IncreaseLiquidityInput<TAccountWhirlpool extends string = string, TAccountTokenProgram extends string = string, TAccountPositionAuthority extends string = string, TAccountPosition extends string = string, TAccountPositionTokenAccount extends string = string, TAccountTokenOwnerAccountA extends string = string, TAccountTokenOwnerAccountB extends string = string, TAccountTokenVaultA extends string = string, TAccountTokenVaultB extends string = string, TAccountTickArrayLower extends string = string, TAccountTickArrayUpper extends string = string> = {
    whirlpool: Address<TAccountWhirlpool>;
    tokenProgram?: Address<TAccountTokenProgram>;
    positionAuthority: TransactionSigner<TAccountPositionAuthority>;
    position: Address<TAccountPosition>;
    positionTokenAccount: Address<TAccountPositionTokenAccount>;
    tokenOwnerAccountA: Address<TAccountTokenOwnerAccountA>;
    tokenOwnerAccountB: Address<TAccountTokenOwnerAccountB>;
    tokenVaultA: Address<TAccountTokenVaultA>;
    tokenVaultB: Address<TAccountTokenVaultB>;
    tickArrayLower: Address<TAccountTickArrayLower>;
    tickArrayUpper: Address<TAccountTickArrayUpper>;
    liquidityAmount: IncreaseLiquidityInstructionDataArgs['liquidityAmount'];
    tokenMaxA: IncreaseLiquidityInstructionDataArgs['tokenMaxA'];
    tokenMaxB: IncreaseLiquidityInstructionDataArgs['tokenMaxB'];
};
declare function getIncreaseLiquidityInstruction<TAccountWhirlpool extends string, TAccountTokenProgram extends string, TAccountPositionAuthority extends string, TAccountPosition extends string, TAccountPositionTokenAccount extends string, TAccountTokenOwnerAccountA extends string, TAccountTokenOwnerAccountB extends string, TAccountTokenVaultA extends string, TAccountTokenVaultB extends string, TAccountTickArrayLower extends string, TAccountTickArrayUpper extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: IncreaseLiquidityInput<TAccountWhirlpool, TAccountTokenProgram, TAccountPositionAuthority, TAccountPosition, TAccountPositionTokenAccount, TAccountTokenOwnerAccountA, TAccountTokenOwnerAccountB, TAccountTokenVaultA, TAccountTokenVaultB, TAccountTickArrayLower, TAccountTickArrayUpper>, config?: {
    programAddress?: TProgramAddress;
}): IncreaseLiquidityInstruction<TProgramAddress, TAccountWhirlpool, TAccountTokenProgram, TAccountPositionAuthority, TAccountPosition, TAccountPositionTokenAccount, TAccountTokenOwnerAccountA, TAccountTokenOwnerAccountB, TAccountTokenVaultA, TAccountTokenVaultB, TAccountTickArrayLower, TAccountTickArrayUpper>;
type ParsedIncreaseLiquidityInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        whirlpool: TAccountMetas[0];
        tokenProgram: TAccountMetas[1];
        positionAuthority: TAccountMetas[2];
        position: TAccountMetas[3];
        positionTokenAccount: TAccountMetas[4];
        tokenOwnerAccountA: TAccountMetas[5];
        tokenOwnerAccountB: TAccountMetas[6];
        tokenVaultA: TAccountMetas[7];
        tokenVaultB: TAccountMetas[8];
        tickArrayLower: TAccountMetas[9];
        tickArrayUpper: TAccountMetas[10];
    };
    data: IncreaseLiquidityInstructionData;
};
declare function parseIncreaseLiquidityInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedIncreaseLiquidityInstruction<TProgram, TAccountMetas>;

declare const INCREASE_LIQUIDITY_V2_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getIncreaseLiquidityV2DiscriminatorBytes(): ReadonlyUint8Array;
type IncreaseLiquidityV2Instruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountWhirlpool extends string | IAccountMeta<string> = string, TAccountTokenProgramA extends string | IAccountMeta<string> = string, TAccountTokenProgramB extends string | IAccountMeta<string> = string, TAccountMemoProgram extends string | IAccountMeta<string> = string, TAccountPositionAuthority extends string | IAccountMeta<string> = string, TAccountPosition extends string | IAccountMeta<string> = string, TAccountPositionTokenAccount extends string | IAccountMeta<string> = string, TAccountTokenMintA extends string | IAccountMeta<string> = string, TAccountTokenMintB extends string | IAccountMeta<string> = string, TAccountTokenOwnerAccountA extends string | IAccountMeta<string> = string, TAccountTokenOwnerAccountB extends string | IAccountMeta<string> = string, TAccountTokenVaultA extends string | IAccountMeta<string> = string, TAccountTokenVaultB extends string | IAccountMeta<string> = string, TAccountTickArrayLower extends string | IAccountMeta<string> = string, TAccountTickArrayUpper extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountWhirlpool extends string ? WritableAccount<TAccountWhirlpool> : TAccountWhirlpool,
    TAccountTokenProgramA extends string ? ReadonlyAccount<TAccountTokenProgramA> : TAccountTokenProgramA,
    TAccountTokenProgramB extends string ? ReadonlyAccount<TAccountTokenProgramB> : TAccountTokenProgramB,
    TAccountMemoProgram extends string ? ReadonlyAccount<TAccountMemoProgram> : TAccountMemoProgram,
    TAccountPositionAuthority extends string ? ReadonlySignerAccount<TAccountPositionAuthority> & IAccountSignerMeta<TAccountPositionAuthority> : TAccountPositionAuthority,
    TAccountPosition extends string ? WritableAccount<TAccountPosition> : TAccountPosition,
    TAccountPositionTokenAccount extends string ? ReadonlyAccount<TAccountPositionTokenAccount> : TAccountPositionTokenAccount,
    TAccountTokenMintA extends string ? ReadonlyAccount<TAccountTokenMintA> : TAccountTokenMintA,
    TAccountTokenMintB extends string ? ReadonlyAccount<TAccountTokenMintB> : TAccountTokenMintB,
    TAccountTokenOwnerAccountA extends string ? WritableAccount<TAccountTokenOwnerAccountA> : TAccountTokenOwnerAccountA,
    TAccountTokenOwnerAccountB extends string ? WritableAccount<TAccountTokenOwnerAccountB> : TAccountTokenOwnerAccountB,
    TAccountTokenVaultA extends string ? WritableAccount<TAccountTokenVaultA> : TAccountTokenVaultA,
    TAccountTokenVaultB extends string ? WritableAccount<TAccountTokenVaultB> : TAccountTokenVaultB,
    TAccountTickArrayLower extends string ? WritableAccount<TAccountTickArrayLower> : TAccountTickArrayLower,
    TAccountTickArrayUpper extends string ? WritableAccount<TAccountTickArrayUpper> : TAccountTickArrayUpper,
    ...TRemainingAccounts
]>;
type IncreaseLiquidityV2InstructionData = {
    discriminator: ReadonlyUint8Array;
    liquidityAmount: bigint;
    tokenMaxA: bigint;
    tokenMaxB: bigint;
    remainingAccountsInfo: Option<RemainingAccountsInfo>;
};
type IncreaseLiquidityV2InstructionDataArgs = {
    liquidityAmount: number | bigint;
    tokenMaxA: number | bigint;
    tokenMaxB: number | bigint;
    remainingAccountsInfo: OptionOrNullable<RemainingAccountsInfoArgs>;
};
declare function getIncreaseLiquidityV2InstructionDataEncoder(): Encoder<IncreaseLiquidityV2InstructionDataArgs>;
declare function getIncreaseLiquidityV2InstructionDataDecoder(): Decoder<IncreaseLiquidityV2InstructionData>;
declare function getIncreaseLiquidityV2InstructionDataCodec(): Codec<IncreaseLiquidityV2InstructionDataArgs, IncreaseLiquidityV2InstructionData>;
type IncreaseLiquidityV2Input<TAccountWhirlpool extends string = string, TAccountTokenProgramA extends string = string, TAccountTokenProgramB extends string = string, TAccountMemoProgram extends string = string, TAccountPositionAuthority extends string = string, TAccountPosition extends string = string, TAccountPositionTokenAccount extends string = string, TAccountTokenMintA extends string = string, TAccountTokenMintB extends string = string, TAccountTokenOwnerAccountA extends string = string, TAccountTokenOwnerAccountB extends string = string, TAccountTokenVaultA extends string = string, TAccountTokenVaultB extends string = string, TAccountTickArrayLower extends string = string, TAccountTickArrayUpper extends string = string> = {
    whirlpool: Address<TAccountWhirlpool>;
    tokenProgramA: Address<TAccountTokenProgramA>;
    tokenProgramB: Address<TAccountTokenProgramB>;
    memoProgram: Address<TAccountMemoProgram>;
    positionAuthority: TransactionSigner<TAccountPositionAuthority>;
    position: Address<TAccountPosition>;
    positionTokenAccount: Address<TAccountPositionTokenAccount>;
    tokenMintA: Address<TAccountTokenMintA>;
    tokenMintB: Address<TAccountTokenMintB>;
    tokenOwnerAccountA: Address<TAccountTokenOwnerAccountA>;
    tokenOwnerAccountB: Address<TAccountTokenOwnerAccountB>;
    tokenVaultA: Address<TAccountTokenVaultA>;
    tokenVaultB: Address<TAccountTokenVaultB>;
    tickArrayLower: Address<TAccountTickArrayLower>;
    tickArrayUpper: Address<TAccountTickArrayUpper>;
    liquidityAmount: IncreaseLiquidityV2InstructionDataArgs['liquidityAmount'];
    tokenMaxA: IncreaseLiquidityV2InstructionDataArgs['tokenMaxA'];
    tokenMaxB: IncreaseLiquidityV2InstructionDataArgs['tokenMaxB'];
    remainingAccountsInfo: IncreaseLiquidityV2InstructionDataArgs['remainingAccountsInfo'];
};
declare function getIncreaseLiquidityV2Instruction<TAccountWhirlpool extends string, TAccountTokenProgramA extends string, TAccountTokenProgramB extends string, TAccountMemoProgram extends string, TAccountPositionAuthority extends string, TAccountPosition extends string, TAccountPositionTokenAccount extends string, TAccountTokenMintA extends string, TAccountTokenMintB extends string, TAccountTokenOwnerAccountA extends string, TAccountTokenOwnerAccountB extends string, TAccountTokenVaultA extends string, TAccountTokenVaultB extends string, TAccountTickArrayLower extends string, TAccountTickArrayUpper extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: IncreaseLiquidityV2Input<TAccountWhirlpool, TAccountTokenProgramA, TAccountTokenProgramB, TAccountMemoProgram, TAccountPositionAuthority, TAccountPosition, TAccountPositionTokenAccount, TAccountTokenMintA, TAccountTokenMintB, TAccountTokenOwnerAccountA, TAccountTokenOwnerAccountB, TAccountTokenVaultA, TAccountTokenVaultB, TAccountTickArrayLower, TAccountTickArrayUpper>, config?: {
    programAddress?: TProgramAddress;
}): IncreaseLiquidityV2Instruction<TProgramAddress, TAccountWhirlpool, TAccountTokenProgramA, TAccountTokenProgramB, TAccountMemoProgram, TAccountPositionAuthority, TAccountPosition, TAccountPositionTokenAccount, TAccountTokenMintA, TAccountTokenMintB, TAccountTokenOwnerAccountA, TAccountTokenOwnerAccountB, TAccountTokenVaultA, TAccountTokenVaultB, TAccountTickArrayLower, TAccountTickArrayUpper>;
type ParsedIncreaseLiquidityV2Instruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        whirlpool: TAccountMetas[0];
        tokenProgramA: TAccountMetas[1];
        tokenProgramB: TAccountMetas[2];
        memoProgram: TAccountMetas[3];
        positionAuthority: TAccountMetas[4];
        position: TAccountMetas[5];
        positionTokenAccount: TAccountMetas[6];
        tokenMintA: TAccountMetas[7];
        tokenMintB: TAccountMetas[8];
        tokenOwnerAccountA: TAccountMetas[9];
        tokenOwnerAccountB: TAccountMetas[10];
        tokenVaultA: TAccountMetas[11];
        tokenVaultB: TAccountMetas[12];
        tickArrayLower: TAccountMetas[13];
        tickArrayUpper: TAccountMetas[14];
    };
    data: IncreaseLiquidityV2InstructionData;
};
declare function parseIncreaseLiquidityV2Instruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedIncreaseLiquidityV2Instruction<TProgram, TAccountMetas>;

declare const INITIALIZE_ADAPTIVE_FEE_TIER_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getInitializeAdaptiveFeeTierDiscriminatorBytes(): ReadonlyUint8Array;
type InitializeAdaptiveFeeTierInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountWhirlpoolsConfig extends string | IAccountMeta<string> = string, TAccountAdaptiveFeeTier extends string | IAccountMeta<string> = string, TAccountFunder extends string | IAccountMeta<string> = string, TAccountFeeAuthority extends string | IAccountMeta<string> = string, TAccountSystemProgram extends string | IAccountMeta<string> = '11111111111111111111111111111111', TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountWhirlpoolsConfig extends string ? ReadonlyAccount<TAccountWhirlpoolsConfig> : TAccountWhirlpoolsConfig,
    TAccountAdaptiveFeeTier extends string ? WritableAccount<TAccountAdaptiveFeeTier> : TAccountAdaptiveFeeTier,
    TAccountFunder extends string ? WritableSignerAccount<TAccountFunder> & IAccountSignerMeta<TAccountFunder> : TAccountFunder,
    TAccountFeeAuthority extends string ? ReadonlySignerAccount<TAccountFeeAuthority> & IAccountSignerMeta<TAccountFeeAuthority> : TAccountFeeAuthority,
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    ...TRemainingAccounts
]>;
type InitializeAdaptiveFeeTierInstructionData = {
    discriminator: ReadonlyUint8Array;
    feeTierIndex: number;
    tickSpacing: number;
    initializePoolAuthority: Address;
    delegatedFeeAuthority: Address;
    defaultBaseFeeRate: number;
    filterPeriod: number;
    decayPeriod: number;
    reductionFactor: number;
    adaptiveFeeControlFactor: number;
    maxVolatilityAccumulator: number;
    tickGroupSize: number;
    majorSwapThresholdTicks: number;
};
type InitializeAdaptiveFeeTierInstructionDataArgs = {
    feeTierIndex: number;
    tickSpacing: number;
    initializePoolAuthority: Address;
    delegatedFeeAuthority: Address;
    defaultBaseFeeRate: number;
    filterPeriod: number;
    decayPeriod: number;
    reductionFactor: number;
    adaptiveFeeControlFactor: number;
    maxVolatilityAccumulator: number;
    tickGroupSize: number;
    majorSwapThresholdTicks: number;
};
declare function getInitializeAdaptiveFeeTierInstructionDataEncoder(): Encoder<InitializeAdaptiveFeeTierInstructionDataArgs>;
declare function getInitializeAdaptiveFeeTierInstructionDataDecoder(): Decoder<InitializeAdaptiveFeeTierInstructionData>;
declare function getInitializeAdaptiveFeeTierInstructionDataCodec(): Codec<InitializeAdaptiveFeeTierInstructionDataArgs, InitializeAdaptiveFeeTierInstructionData>;
type InitializeAdaptiveFeeTierInput<TAccountWhirlpoolsConfig extends string = string, TAccountAdaptiveFeeTier extends string = string, TAccountFunder extends string = string, TAccountFeeAuthority extends string = string, TAccountSystemProgram extends string = string> = {
    whirlpoolsConfig: Address<TAccountWhirlpoolsConfig>;
    adaptiveFeeTier: Address<TAccountAdaptiveFeeTier>;
    funder: TransactionSigner<TAccountFunder>;
    feeAuthority: TransactionSigner<TAccountFeeAuthority>;
    systemProgram?: Address<TAccountSystemProgram>;
    feeTierIndex: InitializeAdaptiveFeeTierInstructionDataArgs['feeTierIndex'];
    tickSpacing: InitializeAdaptiveFeeTierInstructionDataArgs['tickSpacing'];
    initializePoolAuthority: InitializeAdaptiveFeeTierInstructionDataArgs['initializePoolAuthority'];
    delegatedFeeAuthority: InitializeAdaptiveFeeTierInstructionDataArgs['delegatedFeeAuthority'];
    defaultBaseFeeRate: InitializeAdaptiveFeeTierInstructionDataArgs['defaultBaseFeeRate'];
    filterPeriod: InitializeAdaptiveFeeTierInstructionDataArgs['filterPeriod'];
    decayPeriod: InitializeAdaptiveFeeTierInstructionDataArgs['decayPeriod'];
    reductionFactor: InitializeAdaptiveFeeTierInstructionDataArgs['reductionFactor'];
    adaptiveFeeControlFactor: InitializeAdaptiveFeeTierInstructionDataArgs['adaptiveFeeControlFactor'];
    maxVolatilityAccumulator: InitializeAdaptiveFeeTierInstructionDataArgs['maxVolatilityAccumulator'];
    tickGroupSize: InitializeAdaptiveFeeTierInstructionDataArgs['tickGroupSize'];
    majorSwapThresholdTicks: InitializeAdaptiveFeeTierInstructionDataArgs['majorSwapThresholdTicks'];
};
declare function getInitializeAdaptiveFeeTierInstruction<TAccountWhirlpoolsConfig extends string, TAccountAdaptiveFeeTier extends string, TAccountFunder extends string, TAccountFeeAuthority extends string, TAccountSystemProgram extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: InitializeAdaptiveFeeTierInput<TAccountWhirlpoolsConfig, TAccountAdaptiveFeeTier, TAccountFunder, TAccountFeeAuthority, TAccountSystemProgram>, config?: {
    programAddress?: TProgramAddress;
}): InitializeAdaptiveFeeTierInstruction<TProgramAddress, TAccountWhirlpoolsConfig, TAccountAdaptiveFeeTier, TAccountFunder, TAccountFeeAuthority, TAccountSystemProgram>;
type ParsedInitializeAdaptiveFeeTierInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        whirlpoolsConfig: TAccountMetas[0];
        adaptiveFeeTier: TAccountMetas[1];
        funder: TAccountMetas[2];
        feeAuthority: TAccountMetas[3];
        systemProgram: TAccountMetas[4];
    };
    data: InitializeAdaptiveFeeTierInstructionData;
};
declare function parseInitializeAdaptiveFeeTierInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedInitializeAdaptiveFeeTierInstruction<TProgram, TAccountMetas>;

declare const INITIALIZE_CONFIG_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getInitializeConfigDiscriminatorBytes(): ReadonlyUint8Array;
type InitializeConfigInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountConfig extends string | IAccountMeta<string> = string, TAccountFunder extends string | IAccountMeta<string> = string, TAccountSystemProgram extends string | IAccountMeta<string> = '11111111111111111111111111111111', TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountConfig extends string ? WritableSignerAccount<TAccountConfig> & IAccountSignerMeta<TAccountConfig> : TAccountConfig,
    TAccountFunder extends string ? WritableSignerAccount<TAccountFunder> & IAccountSignerMeta<TAccountFunder> : TAccountFunder,
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    ...TRemainingAccounts
]>;
type InitializeConfigInstructionData = {
    discriminator: ReadonlyUint8Array;
    feeAuthority: Address;
    collectProtocolFeesAuthority: Address;
    rewardEmissionsSuperAuthority: Address;
    defaultProtocolFeeRate: number;
};
type InitializeConfigInstructionDataArgs = {
    feeAuthority: Address;
    collectProtocolFeesAuthority: Address;
    rewardEmissionsSuperAuthority: Address;
    defaultProtocolFeeRate: number;
};
declare function getInitializeConfigInstructionDataEncoder(): Encoder<InitializeConfigInstructionDataArgs>;
declare function getInitializeConfigInstructionDataDecoder(): Decoder<InitializeConfigInstructionData>;
declare function getInitializeConfigInstructionDataCodec(): Codec<InitializeConfigInstructionDataArgs, InitializeConfigInstructionData>;
type InitializeConfigInput<TAccountConfig extends string = string, TAccountFunder extends string = string, TAccountSystemProgram extends string = string> = {
    config: TransactionSigner<TAccountConfig>;
    funder: TransactionSigner<TAccountFunder>;
    systemProgram?: Address<TAccountSystemProgram>;
    feeAuthority: InitializeConfigInstructionDataArgs['feeAuthority'];
    collectProtocolFeesAuthority: InitializeConfigInstructionDataArgs['collectProtocolFeesAuthority'];
    rewardEmissionsSuperAuthority: InitializeConfigInstructionDataArgs['rewardEmissionsSuperAuthority'];
    defaultProtocolFeeRate: InitializeConfigInstructionDataArgs['defaultProtocolFeeRate'];
};
declare function getInitializeConfigInstruction<TAccountConfig extends string, TAccountFunder extends string, TAccountSystemProgram extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: InitializeConfigInput<TAccountConfig, TAccountFunder, TAccountSystemProgram>, config?: {
    programAddress?: TProgramAddress;
}): InitializeConfigInstruction<TProgramAddress, TAccountConfig, TAccountFunder, TAccountSystemProgram>;
type ParsedInitializeConfigInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        config: TAccountMetas[0];
        funder: TAccountMetas[1];
        systemProgram: TAccountMetas[2];
    };
    data: InitializeConfigInstructionData;
};
declare function parseInitializeConfigInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedInitializeConfigInstruction<TProgram, TAccountMetas>;

declare const INITIALIZE_CONFIG_EXTENSION_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getInitializeConfigExtensionDiscriminatorBytes(): ReadonlyUint8Array;
type InitializeConfigExtensionInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountConfig extends string | IAccountMeta<string> = string, TAccountConfigExtension extends string | IAccountMeta<string> = string, TAccountFunder extends string | IAccountMeta<string> = string, TAccountFeeAuthority extends string | IAccountMeta<string> = string, TAccountSystemProgram extends string | IAccountMeta<string> = '11111111111111111111111111111111', TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountConfig extends string ? ReadonlyAccount<TAccountConfig> : TAccountConfig,
    TAccountConfigExtension extends string ? WritableAccount<TAccountConfigExtension> : TAccountConfigExtension,
    TAccountFunder extends string ? WritableSignerAccount<TAccountFunder> & IAccountSignerMeta<TAccountFunder> : TAccountFunder,
    TAccountFeeAuthority extends string ? ReadonlySignerAccount<TAccountFeeAuthority> & IAccountSignerMeta<TAccountFeeAuthority> : TAccountFeeAuthority,
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    ...TRemainingAccounts
]>;
type InitializeConfigExtensionInstructionData = {
    discriminator: ReadonlyUint8Array;
};
type InitializeConfigExtensionInstructionDataArgs = {};
declare function getInitializeConfigExtensionInstructionDataEncoder(): Encoder<InitializeConfigExtensionInstructionDataArgs>;
declare function getInitializeConfigExtensionInstructionDataDecoder(): Decoder<InitializeConfigExtensionInstructionData>;
declare function getInitializeConfigExtensionInstructionDataCodec(): Codec<InitializeConfigExtensionInstructionDataArgs, InitializeConfigExtensionInstructionData>;
type InitializeConfigExtensionInput<TAccountConfig extends string = string, TAccountConfigExtension extends string = string, TAccountFunder extends string = string, TAccountFeeAuthority extends string = string, TAccountSystemProgram extends string = string> = {
    config: Address<TAccountConfig>;
    configExtension: Address<TAccountConfigExtension>;
    funder: TransactionSigner<TAccountFunder>;
    feeAuthority: TransactionSigner<TAccountFeeAuthority>;
    systemProgram?: Address<TAccountSystemProgram>;
};
declare function getInitializeConfigExtensionInstruction<TAccountConfig extends string, TAccountConfigExtension extends string, TAccountFunder extends string, TAccountFeeAuthority extends string, TAccountSystemProgram extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: InitializeConfigExtensionInput<TAccountConfig, TAccountConfigExtension, TAccountFunder, TAccountFeeAuthority, TAccountSystemProgram>, config?: {
    programAddress?: TProgramAddress;
}): InitializeConfigExtensionInstruction<TProgramAddress, TAccountConfig, TAccountConfigExtension, TAccountFunder, TAccountFeeAuthority, TAccountSystemProgram>;
type ParsedInitializeConfigExtensionInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        config: TAccountMetas[0];
        configExtension: TAccountMetas[1];
        funder: TAccountMetas[2];
        feeAuthority: TAccountMetas[3];
        systemProgram: TAccountMetas[4];
    };
    data: InitializeConfigExtensionInstructionData;
};
declare function parseInitializeConfigExtensionInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedInitializeConfigExtensionInstruction<TProgram, TAccountMetas>;

declare const INITIALIZE_FEE_TIER_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getInitializeFeeTierDiscriminatorBytes(): ReadonlyUint8Array;
type InitializeFeeTierInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountConfig extends string | IAccountMeta<string> = string, TAccountFeeTier extends string | IAccountMeta<string> = string, TAccountFunder extends string | IAccountMeta<string> = string, TAccountFeeAuthority extends string | IAccountMeta<string> = string, TAccountSystemProgram extends string | IAccountMeta<string> = '11111111111111111111111111111111', TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountConfig extends string ? ReadonlyAccount<TAccountConfig> : TAccountConfig,
    TAccountFeeTier extends string ? WritableAccount<TAccountFeeTier> : TAccountFeeTier,
    TAccountFunder extends string ? WritableSignerAccount<TAccountFunder> & IAccountSignerMeta<TAccountFunder> : TAccountFunder,
    TAccountFeeAuthority extends string ? ReadonlySignerAccount<TAccountFeeAuthority> & IAccountSignerMeta<TAccountFeeAuthority> : TAccountFeeAuthority,
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    ...TRemainingAccounts
]>;
type InitializeFeeTierInstructionData = {
    discriminator: ReadonlyUint8Array;
    tickSpacing: number;
    defaultFeeRate: number;
};
type InitializeFeeTierInstructionDataArgs = {
    tickSpacing: number;
    defaultFeeRate: number;
};
declare function getInitializeFeeTierInstructionDataEncoder(): Encoder<InitializeFeeTierInstructionDataArgs>;
declare function getInitializeFeeTierInstructionDataDecoder(): Decoder<InitializeFeeTierInstructionData>;
declare function getInitializeFeeTierInstructionDataCodec(): Codec<InitializeFeeTierInstructionDataArgs, InitializeFeeTierInstructionData>;
type InitializeFeeTierInput<TAccountConfig extends string = string, TAccountFeeTier extends string = string, TAccountFunder extends string = string, TAccountFeeAuthority extends string = string, TAccountSystemProgram extends string = string> = {
    config: Address<TAccountConfig>;
    feeTier: Address<TAccountFeeTier>;
    funder: TransactionSigner<TAccountFunder>;
    feeAuthority: TransactionSigner<TAccountFeeAuthority>;
    systemProgram?: Address<TAccountSystemProgram>;
    tickSpacing: InitializeFeeTierInstructionDataArgs['tickSpacing'];
    defaultFeeRate: InitializeFeeTierInstructionDataArgs['defaultFeeRate'];
};
declare function getInitializeFeeTierInstruction<TAccountConfig extends string, TAccountFeeTier extends string, TAccountFunder extends string, TAccountFeeAuthority extends string, TAccountSystemProgram extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: InitializeFeeTierInput<TAccountConfig, TAccountFeeTier, TAccountFunder, TAccountFeeAuthority, TAccountSystemProgram>, config?: {
    programAddress?: TProgramAddress;
}): InitializeFeeTierInstruction<TProgramAddress, TAccountConfig, TAccountFeeTier, TAccountFunder, TAccountFeeAuthority, TAccountSystemProgram>;
type ParsedInitializeFeeTierInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        config: TAccountMetas[0];
        feeTier: TAccountMetas[1];
        funder: TAccountMetas[2];
        feeAuthority: TAccountMetas[3];
        systemProgram: TAccountMetas[4];
    };
    data: InitializeFeeTierInstructionData;
};
declare function parseInitializeFeeTierInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedInitializeFeeTierInstruction<TProgram, TAccountMetas>;

declare const INITIALIZE_POOL_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getInitializePoolDiscriminatorBytes(): ReadonlyUint8Array;
type InitializePoolInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountWhirlpoolsConfig extends string | IAccountMeta<string> = string, TAccountTokenMintA extends string | IAccountMeta<string> = string, TAccountTokenMintB extends string | IAccountMeta<string> = string, TAccountFunder extends string | IAccountMeta<string> = string, TAccountWhirlpool extends string | IAccountMeta<string> = string, TAccountTokenVaultA extends string | IAccountMeta<string> = string, TAccountTokenVaultB extends string | IAccountMeta<string> = string, TAccountFeeTier extends string | IAccountMeta<string> = string, TAccountTokenProgram extends string | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA', TAccountSystemProgram extends string | IAccountMeta<string> = '11111111111111111111111111111111', TAccountRent extends string | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111', TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountWhirlpoolsConfig extends string ? ReadonlyAccount<TAccountWhirlpoolsConfig> : TAccountWhirlpoolsConfig,
    TAccountTokenMintA extends string ? ReadonlyAccount<TAccountTokenMintA> : TAccountTokenMintA,
    TAccountTokenMintB extends string ? ReadonlyAccount<TAccountTokenMintB> : TAccountTokenMintB,
    TAccountFunder extends string ? WritableSignerAccount<TAccountFunder> & IAccountSignerMeta<TAccountFunder> : TAccountFunder,
    TAccountWhirlpool extends string ? WritableAccount<TAccountWhirlpool> : TAccountWhirlpool,
    TAccountTokenVaultA extends string ? WritableSignerAccount<TAccountTokenVaultA> & IAccountSignerMeta<TAccountTokenVaultA> : TAccountTokenVaultA,
    TAccountTokenVaultB extends string ? WritableSignerAccount<TAccountTokenVaultB> & IAccountSignerMeta<TAccountTokenVaultB> : TAccountTokenVaultB,
    TAccountFeeTier extends string ? ReadonlyAccount<TAccountFeeTier> : TAccountFeeTier,
    TAccountTokenProgram extends string ? ReadonlyAccount<TAccountTokenProgram> : TAccountTokenProgram,
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    TAccountRent extends string ? ReadonlyAccount<TAccountRent> : TAccountRent,
    ...TRemainingAccounts
]>;
type InitializePoolInstructionData = {
    discriminator: ReadonlyUint8Array;
    whirlpoolBump: number;
    tickSpacing: number;
    initialSqrtPrice: bigint;
};
type InitializePoolInstructionDataArgs = {
    whirlpoolBump: number;
    tickSpacing: number;
    initialSqrtPrice: number | bigint;
};
declare function getInitializePoolInstructionDataEncoder(): Encoder<InitializePoolInstructionDataArgs>;
declare function getInitializePoolInstructionDataDecoder(): Decoder<InitializePoolInstructionData>;
declare function getInitializePoolInstructionDataCodec(): Codec<InitializePoolInstructionDataArgs, InitializePoolInstructionData>;
type InitializePoolInput<TAccountWhirlpoolsConfig extends string = string, TAccountTokenMintA extends string = string, TAccountTokenMintB extends string = string, TAccountFunder extends string = string, TAccountWhirlpool extends string = string, TAccountTokenVaultA extends string = string, TAccountTokenVaultB extends string = string, TAccountFeeTier extends string = string, TAccountTokenProgram extends string = string, TAccountSystemProgram extends string = string, TAccountRent extends string = string> = {
    whirlpoolsConfig: Address<TAccountWhirlpoolsConfig>;
    tokenMintA: Address<TAccountTokenMintA>;
    tokenMintB: Address<TAccountTokenMintB>;
    funder: TransactionSigner<TAccountFunder>;
    whirlpool: Address<TAccountWhirlpool>;
    tokenVaultA: TransactionSigner<TAccountTokenVaultA>;
    tokenVaultB: TransactionSigner<TAccountTokenVaultB>;
    feeTier: Address<TAccountFeeTier>;
    tokenProgram?: Address<TAccountTokenProgram>;
    systemProgram?: Address<TAccountSystemProgram>;
    rent?: Address<TAccountRent>;
    whirlpoolBump: InitializePoolInstructionDataArgs['whirlpoolBump'];
    tickSpacing: InitializePoolInstructionDataArgs['tickSpacing'];
    initialSqrtPrice: InitializePoolInstructionDataArgs['initialSqrtPrice'];
};
declare function getInitializePoolInstruction<TAccountWhirlpoolsConfig extends string, TAccountTokenMintA extends string, TAccountTokenMintB extends string, TAccountFunder extends string, TAccountWhirlpool extends string, TAccountTokenVaultA extends string, TAccountTokenVaultB extends string, TAccountFeeTier extends string, TAccountTokenProgram extends string, TAccountSystemProgram extends string, TAccountRent extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: InitializePoolInput<TAccountWhirlpoolsConfig, TAccountTokenMintA, TAccountTokenMintB, TAccountFunder, TAccountWhirlpool, TAccountTokenVaultA, TAccountTokenVaultB, TAccountFeeTier, TAccountTokenProgram, TAccountSystemProgram, TAccountRent>, config?: {
    programAddress?: TProgramAddress;
}): InitializePoolInstruction<TProgramAddress, TAccountWhirlpoolsConfig, TAccountTokenMintA, TAccountTokenMintB, TAccountFunder, TAccountWhirlpool, TAccountTokenVaultA, TAccountTokenVaultB, TAccountFeeTier, TAccountTokenProgram, TAccountSystemProgram, TAccountRent>;
type ParsedInitializePoolInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        whirlpoolsConfig: TAccountMetas[0];
        tokenMintA: TAccountMetas[1];
        tokenMintB: TAccountMetas[2];
        funder: TAccountMetas[3];
        whirlpool: TAccountMetas[4];
        tokenVaultA: TAccountMetas[5];
        tokenVaultB: TAccountMetas[6];
        feeTier: TAccountMetas[7];
        tokenProgram: TAccountMetas[8];
        systemProgram: TAccountMetas[9];
        rent: TAccountMetas[10];
    };
    data: InitializePoolInstructionData;
};
declare function parseInitializePoolInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedInitializePoolInstruction<TProgram, TAccountMetas>;

declare const INITIALIZE_POOL_V2_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getInitializePoolV2DiscriminatorBytes(): ReadonlyUint8Array;
type InitializePoolV2Instruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountWhirlpoolsConfig extends string | IAccountMeta<string> = string, TAccountTokenMintA extends string | IAccountMeta<string> = string, TAccountTokenMintB extends string | IAccountMeta<string> = string, TAccountTokenBadgeA extends string | IAccountMeta<string> = string, TAccountTokenBadgeB extends string | IAccountMeta<string> = string, TAccountFunder extends string | IAccountMeta<string> = string, TAccountWhirlpool extends string | IAccountMeta<string> = string, TAccountTokenVaultA extends string | IAccountMeta<string> = string, TAccountTokenVaultB extends string | IAccountMeta<string> = string, TAccountFeeTier extends string | IAccountMeta<string> = string, TAccountTokenProgramA extends string | IAccountMeta<string> = string, TAccountTokenProgramB extends string | IAccountMeta<string> = string, TAccountSystemProgram extends string | IAccountMeta<string> = '11111111111111111111111111111111', TAccountRent extends string | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111', TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountWhirlpoolsConfig extends string ? ReadonlyAccount<TAccountWhirlpoolsConfig> : TAccountWhirlpoolsConfig,
    TAccountTokenMintA extends string ? ReadonlyAccount<TAccountTokenMintA> : TAccountTokenMintA,
    TAccountTokenMintB extends string ? ReadonlyAccount<TAccountTokenMintB> : TAccountTokenMintB,
    TAccountTokenBadgeA extends string ? ReadonlyAccount<TAccountTokenBadgeA> : TAccountTokenBadgeA,
    TAccountTokenBadgeB extends string ? ReadonlyAccount<TAccountTokenBadgeB> : TAccountTokenBadgeB,
    TAccountFunder extends string ? WritableSignerAccount<TAccountFunder> & IAccountSignerMeta<TAccountFunder> : TAccountFunder,
    TAccountWhirlpool extends string ? WritableAccount<TAccountWhirlpool> : TAccountWhirlpool,
    TAccountTokenVaultA extends string ? WritableSignerAccount<TAccountTokenVaultA> & IAccountSignerMeta<TAccountTokenVaultA> : TAccountTokenVaultA,
    TAccountTokenVaultB extends string ? WritableSignerAccount<TAccountTokenVaultB> & IAccountSignerMeta<TAccountTokenVaultB> : TAccountTokenVaultB,
    TAccountFeeTier extends string ? ReadonlyAccount<TAccountFeeTier> : TAccountFeeTier,
    TAccountTokenProgramA extends string ? ReadonlyAccount<TAccountTokenProgramA> : TAccountTokenProgramA,
    TAccountTokenProgramB extends string ? ReadonlyAccount<TAccountTokenProgramB> : TAccountTokenProgramB,
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    TAccountRent extends string ? ReadonlyAccount<TAccountRent> : TAccountRent,
    ...TRemainingAccounts
]>;
type InitializePoolV2InstructionData = {
    discriminator: ReadonlyUint8Array;
    tickSpacing: number;
    initialSqrtPrice: bigint;
};
type InitializePoolV2InstructionDataArgs = {
    tickSpacing: number;
    initialSqrtPrice: number | bigint;
};
declare function getInitializePoolV2InstructionDataEncoder(): Encoder<InitializePoolV2InstructionDataArgs>;
declare function getInitializePoolV2InstructionDataDecoder(): Decoder<InitializePoolV2InstructionData>;
declare function getInitializePoolV2InstructionDataCodec(): Codec<InitializePoolV2InstructionDataArgs, InitializePoolV2InstructionData>;
type InitializePoolV2Input<TAccountWhirlpoolsConfig extends string = string, TAccountTokenMintA extends string = string, TAccountTokenMintB extends string = string, TAccountTokenBadgeA extends string = string, TAccountTokenBadgeB extends string = string, TAccountFunder extends string = string, TAccountWhirlpool extends string = string, TAccountTokenVaultA extends string = string, TAccountTokenVaultB extends string = string, TAccountFeeTier extends string = string, TAccountTokenProgramA extends string = string, TAccountTokenProgramB extends string = string, TAccountSystemProgram extends string = string, TAccountRent extends string = string> = {
    whirlpoolsConfig: Address<TAccountWhirlpoolsConfig>;
    tokenMintA: Address<TAccountTokenMintA>;
    tokenMintB: Address<TAccountTokenMintB>;
    tokenBadgeA: Address<TAccountTokenBadgeA>;
    tokenBadgeB: Address<TAccountTokenBadgeB>;
    funder: TransactionSigner<TAccountFunder>;
    whirlpool: Address<TAccountWhirlpool>;
    tokenVaultA: TransactionSigner<TAccountTokenVaultA>;
    tokenVaultB: TransactionSigner<TAccountTokenVaultB>;
    feeTier: Address<TAccountFeeTier>;
    tokenProgramA: Address<TAccountTokenProgramA>;
    tokenProgramB: Address<TAccountTokenProgramB>;
    systemProgram?: Address<TAccountSystemProgram>;
    rent?: Address<TAccountRent>;
    tickSpacing: InitializePoolV2InstructionDataArgs['tickSpacing'];
    initialSqrtPrice: InitializePoolV2InstructionDataArgs['initialSqrtPrice'];
};
declare function getInitializePoolV2Instruction<TAccountWhirlpoolsConfig extends string, TAccountTokenMintA extends string, TAccountTokenMintB extends string, TAccountTokenBadgeA extends string, TAccountTokenBadgeB extends string, TAccountFunder extends string, TAccountWhirlpool extends string, TAccountTokenVaultA extends string, TAccountTokenVaultB extends string, TAccountFeeTier extends string, TAccountTokenProgramA extends string, TAccountTokenProgramB extends string, TAccountSystemProgram extends string, TAccountRent extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: InitializePoolV2Input<TAccountWhirlpoolsConfig, TAccountTokenMintA, TAccountTokenMintB, TAccountTokenBadgeA, TAccountTokenBadgeB, TAccountFunder, TAccountWhirlpool, TAccountTokenVaultA, TAccountTokenVaultB, TAccountFeeTier, TAccountTokenProgramA, TAccountTokenProgramB, TAccountSystemProgram, TAccountRent>, config?: {
    programAddress?: TProgramAddress;
}): InitializePoolV2Instruction<TProgramAddress, TAccountWhirlpoolsConfig, TAccountTokenMintA, TAccountTokenMintB, TAccountTokenBadgeA, TAccountTokenBadgeB, TAccountFunder, TAccountWhirlpool, TAccountTokenVaultA, TAccountTokenVaultB, TAccountFeeTier, TAccountTokenProgramA, TAccountTokenProgramB, TAccountSystemProgram, TAccountRent>;
type ParsedInitializePoolV2Instruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        whirlpoolsConfig: TAccountMetas[0];
        tokenMintA: TAccountMetas[1];
        tokenMintB: TAccountMetas[2];
        tokenBadgeA: TAccountMetas[3];
        tokenBadgeB: TAccountMetas[4];
        funder: TAccountMetas[5];
        whirlpool: TAccountMetas[6];
        tokenVaultA: TAccountMetas[7];
        tokenVaultB: TAccountMetas[8];
        feeTier: TAccountMetas[9];
        tokenProgramA: TAccountMetas[10];
        tokenProgramB: TAccountMetas[11];
        systemProgram: TAccountMetas[12];
        rent: TAccountMetas[13];
    };
    data: InitializePoolV2InstructionData;
};
declare function parseInitializePoolV2Instruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedInitializePoolV2Instruction<TProgram, TAccountMetas>;

declare const INITIALIZE_POOL_WITH_ADAPTIVE_FEE_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getInitializePoolWithAdaptiveFeeDiscriminatorBytes(): ReadonlyUint8Array;
type InitializePoolWithAdaptiveFeeInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountWhirlpoolsConfig extends string | IAccountMeta<string> = string, TAccountTokenMintA extends string | IAccountMeta<string> = string, TAccountTokenMintB extends string | IAccountMeta<string> = string, TAccountTokenBadgeA extends string | IAccountMeta<string> = string, TAccountTokenBadgeB extends string | IAccountMeta<string> = string, TAccountFunder extends string | IAccountMeta<string> = string, TAccountInitializePoolAuthority extends string | IAccountMeta<string> = string, TAccountWhirlpool extends string | IAccountMeta<string> = string, TAccountOracle extends string | IAccountMeta<string> = string, TAccountTokenVaultA extends string | IAccountMeta<string> = string, TAccountTokenVaultB extends string | IAccountMeta<string> = string, TAccountAdaptiveFeeTier extends string | IAccountMeta<string> = string, TAccountTokenProgramA extends string | IAccountMeta<string> = string, TAccountTokenProgramB extends string | IAccountMeta<string> = string, TAccountSystemProgram extends string | IAccountMeta<string> = '11111111111111111111111111111111', TAccountRent extends string | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111', TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountWhirlpoolsConfig extends string ? ReadonlyAccount<TAccountWhirlpoolsConfig> : TAccountWhirlpoolsConfig,
    TAccountTokenMintA extends string ? ReadonlyAccount<TAccountTokenMintA> : TAccountTokenMintA,
    TAccountTokenMintB extends string ? ReadonlyAccount<TAccountTokenMintB> : TAccountTokenMintB,
    TAccountTokenBadgeA extends string ? ReadonlyAccount<TAccountTokenBadgeA> : TAccountTokenBadgeA,
    TAccountTokenBadgeB extends string ? ReadonlyAccount<TAccountTokenBadgeB> : TAccountTokenBadgeB,
    TAccountFunder extends string ? WritableSignerAccount<TAccountFunder> & IAccountSignerMeta<TAccountFunder> : TAccountFunder,
    TAccountInitializePoolAuthority extends string ? ReadonlySignerAccount<TAccountInitializePoolAuthority> & IAccountSignerMeta<TAccountInitializePoolAuthority> : TAccountInitializePoolAuthority,
    TAccountWhirlpool extends string ? WritableAccount<TAccountWhirlpool> : TAccountWhirlpool,
    TAccountOracle extends string ? WritableAccount<TAccountOracle> : TAccountOracle,
    TAccountTokenVaultA extends string ? WritableSignerAccount<TAccountTokenVaultA> & IAccountSignerMeta<TAccountTokenVaultA> : TAccountTokenVaultA,
    TAccountTokenVaultB extends string ? WritableSignerAccount<TAccountTokenVaultB> & IAccountSignerMeta<TAccountTokenVaultB> : TAccountTokenVaultB,
    TAccountAdaptiveFeeTier extends string ? ReadonlyAccount<TAccountAdaptiveFeeTier> : TAccountAdaptiveFeeTier,
    TAccountTokenProgramA extends string ? ReadonlyAccount<TAccountTokenProgramA> : TAccountTokenProgramA,
    TAccountTokenProgramB extends string ? ReadonlyAccount<TAccountTokenProgramB> : TAccountTokenProgramB,
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    TAccountRent extends string ? ReadonlyAccount<TAccountRent> : TAccountRent,
    ...TRemainingAccounts
]>;
type InitializePoolWithAdaptiveFeeInstructionData = {
    discriminator: ReadonlyUint8Array;
    initialSqrtPrice: bigint;
    tradeEnableTimestamp: Option<bigint>;
};
type InitializePoolWithAdaptiveFeeInstructionDataArgs = {
    initialSqrtPrice: number | bigint;
    tradeEnableTimestamp: OptionOrNullable<number | bigint>;
};
declare function getInitializePoolWithAdaptiveFeeInstructionDataEncoder(): Encoder<InitializePoolWithAdaptiveFeeInstructionDataArgs>;
declare function getInitializePoolWithAdaptiveFeeInstructionDataDecoder(): Decoder<InitializePoolWithAdaptiveFeeInstructionData>;
declare function getInitializePoolWithAdaptiveFeeInstructionDataCodec(): Codec<InitializePoolWithAdaptiveFeeInstructionDataArgs, InitializePoolWithAdaptiveFeeInstructionData>;
type InitializePoolWithAdaptiveFeeInput<TAccountWhirlpoolsConfig extends string = string, TAccountTokenMintA extends string = string, TAccountTokenMintB extends string = string, TAccountTokenBadgeA extends string = string, TAccountTokenBadgeB extends string = string, TAccountFunder extends string = string, TAccountInitializePoolAuthority extends string = string, TAccountWhirlpool extends string = string, TAccountOracle extends string = string, TAccountTokenVaultA extends string = string, TAccountTokenVaultB extends string = string, TAccountAdaptiveFeeTier extends string = string, TAccountTokenProgramA extends string = string, TAccountTokenProgramB extends string = string, TAccountSystemProgram extends string = string, TAccountRent extends string = string> = {
    whirlpoolsConfig: Address<TAccountWhirlpoolsConfig>;
    tokenMintA: Address<TAccountTokenMintA>;
    tokenMintB: Address<TAccountTokenMintB>;
    tokenBadgeA: Address<TAccountTokenBadgeA>;
    tokenBadgeB: Address<TAccountTokenBadgeB>;
    funder: TransactionSigner<TAccountFunder>;
    initializePoolAuthority: TransactionSigner<TAccountInitializePoolAuthority>;
    whirlpool: Address<TAccountWhirlpool>;
    oracle: Address<TAccountOracle>;
    tokenVaultA: TransactionSigner<TAccountTokenVaultA>;
    tokenVaultB: TransactionSigner<TAccountTokenVaultB>;
    adaptiveFeeTier: Address<TAccountAdaptiveFeeTier>;
    tokenProgramA: Address<TAccountTokenProgramA>;
    tokenProgramB: Address<TAccountTokenProgramB>;
    systemProgram?: Address<TAccountSystemProgram>;
    rent?: Address<TAccountRent>;
    initialSqrtPrice: InitializePoolWithAdaptiveFeeInstructionDataArgs['initialSqrtPrice'];
    tradeEnableTimestamp: InitializePoolWithAdaptiveFeeInstructionDataArgs['tradeEnableTimestamp'];
};
declare function getInitializePoolWithAdaptiveFeeInstruction<TAccountWhirlpoolsConfig extends string, TAccountTokenMintA extends string, TAccountTokenMintB extends string, TAccountTokenBadgeA extends string, TAccountTokenBadgeB extends string, TAccountFunder extends string, TAccountInitializePoolAuthority extends string, TAccountWhirlpool extends string, TAccountOracle extends string, TAccountTokenVaultA extends string, TAccountTokenVaultB extends string, TAccountAdaptiveFeeTier extends string, TAccountTokenProgramA extends string, TAccountTokenProgramB extends string, TAccountSystemProgram extends string, TAccountRent extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: InitializePoolWithAdaptiveFeeInput<TAccountWhirlpoolsConfig, TAccountTokenMintA, TAccountTokenMintB, TAccountTokenBadgeA, TAccountTokenBadgeB, TAccountFunder, TAccountInitializePoolAuthority, TAccountWhirlpool, TAccountOracle, TAccountTokenVaultA, TAccountTokenVaultB, TAccountAdaptiveFeeTier, TAccountTokenProgramA, TAccountTokenProgramB, TAccountSystemProgram, TAccountRent>, config?: {
    programAddress?: TProgramAddress;
}): InitializePoolWithAdaptiveFeeInstruction<TProgramAddress, TAccountWhirlpoolsConfig, TAccountTokenMintA, TAccountTokenMintB, TAccountTokenBadgeA, TAccountTokenBadgeB, TAccountFunder, TAccountInitializePoolAuthority, TAccountWhirlpool, TAccountOracle, TAccountTokenVaultA, TAccountTokenVaultB, TAccountAdaptiveFeeTier, TAccountTokenProgramA, TAccountTokenProgramB, TAccountSystemProgram, TAccountRent>;
type ParsedInitializePoolWithAdaptiveFeeInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        whirlpoolsConfig: TAccountMetas[0];
        tokenMintA: TAccountMetas[1];
        tokenMintB: TAccountMetas[2];
        tokenBadgeA: TAccountMetas[3];
        tokenBadgeB: TAccountMetas[4];
        funder: TAccountMetas[5];
        initializePoolAuthority: TAccountMetas[6];
        whirlpool: TAccountMetas[7];
        oracle: TAccountMetas[8];
        tokenVaultA: TAccountMetas[9];
        tokenVaultB: TAccountMetas[10];
        adaptiveFeeTier: TAccountMetas[11];
        tokenProgramA: TAccountMetas[12];
        tokenProgramB: TAccountMetas[13];
        systemProgram: TAccountMetas[14];
        rent: TAccountMetas[15];
    };
    data: InitializePoolWithAdaptiveFeeInstructionData;
};
declare function parseInitializePoolWithAdaptiveFeeInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedInitializePoolWithAdaptiveFeeInstruction<TProgram, TAccountMetas>;

declare const INITIALIZE_POSITION_BUNDLE_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getInitializePositionBundleDiscriminatorBytes(): ReadonlyUint8Array;
type InitializePositionBundleInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountPositionBundle extends string | IAccountMeta<string> = string, TAccountPositionBundleMint extends string | IAccountMeta<string> = string, TAccountPositionBundleTokenAccount extends string | IAccountMeta<string> = string, TAccountPositionBundleOwner extends string | IAccountMeta<string> = string, TAccountFunder extends string | IAccountMeta<string> = string, TAccountTokenProgram extends string | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA', TAccountSystemProgram extends string | IAccountMeta<string> = '11111111111111111111111111111111', TAccountRent extends string | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111', TAccountAssociatedTokenProgram extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountPositionBundle extends string ? WritableAccount<TAccountPositionBundle> : TAccountPositionBundle,
    TAccountPositionBundleMint extends string ? WritableSignerAccount<TAccountPositionBundleMint> & IAccountSignerMeta<TAccountPositionBundleMint> : TAccountPositionBundleMint,
    TAccountPositionBundleTokenAccount extends string ? WritableAccount<TAccountPositionBundleTokenAccount> : TAccountPositionBundleTokenAccount,
    TAccountPositionBundleOwner extends string ? ReadonlyAccount<TAccountPositionBundleOwner> : TAccountPositionBundleOwner,
    TAccountFunder extends string ? WritableSignerAccount<TAccountFunder> & IAccountSignerMeta<TAccountFunder> : TAccountFunder,
    TAccountTokenProgram extends string ? ReadonlyAccount<TAccountTokenProgram> : TAccountTokenProgram,
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    TAccountRent extends string ? ReadonlyAccount<TAccountRent> : TAccountRent,
    TAccountAssociatedTokenProgram extends string ? ReadonlyAccount<TAccountAssociatedTokenProgram> : TAccountAssociatedTokenProgram,
    ...TRemainingAccounts
]>;
type InitializePositionBundleInstructionData = {
    discriminator: ReadonlyUint8Array;
};
type InitializePositionBundleInstructionDataArgs = {};
declare function getInitializePositionBundleInstructionDataEncoder(): Encoder<InitializePositionBundleInstructionDataArgs>;
declare function getInitializePositionBundleInstructionDataDecoder(): Decoder<InitializePositionBundleInstructionData>;
declare function getInitializePositionBundleInstructionDataCodec(): Codec<InitializePositionBundleInstructionDataArgs, InitializePositionBundleInstructionData>;
type InitializePositionBundleInput<TAccountPositionBundle extends string = string, TAccountPositionBundleMint extends string = string, TAccountPositionBundleTokenAccount extends string = string, TAccountPositionBundleOwner extends string = string, TAccountFunder extends string = string, TAccountTokenProgram extends string = string, TAccountSystemProgram extends string = string, TAccountRent extends string = string, TAccountAssociatedTokenProgram extends string = string> = {
    positionBundle: Address<TAccountPositionBundle>;
    positionBundleMint: TransactionSigner<TAccountPositionBundleMint>;
    positionBundleTokenAccount: Address<TAccountPositionBundleTokenAccount>;
    positionBundleOwner: Address<TAccountPositionBundleOwner>;
    funder: TransactionSigner<TAccountFunder>;
    tokenProgram?: Address<TAccountTokenProgram>;
    systemProgram?: Address<TAccountSystemProgram>;
    rent?: Address<TAccountRent>;
    associatedTokenProgram: Address<TAccountAssociatedTokenProgram>;
};
declare function getInitializePositionBundleInstruction<TAccountPositionBundle extends string, TAccountPositionBundleMint extends string, TAccountPositionBundleTokenAccount extends string, TAccountPositionBundleOwner extends string, TAccountFunder extends string, TAccountTokenProgram extends string, TAccountSystemProgram extends string, TAccountRent extends string, TAccountAssociatedTokenProgram extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: InitializePositionBundleInput<TAccountPositionBundle, TAccountPositionBundleMint, TAccountPositionBundleTokenAccount, TAccountPositionBundleOwner, TAccountFunder, TAccountTokenProgram, TAccountSystemProgram, TAccountRent, TAccountAssociatedTokenProgram>, config?: {
    programAddress?: TProgramAddress;
}): InitializePositionBundleInstruction<TProgramAddress, TAccountPositionBundle, TAccountPositionBundleMint, TAccountPositionBundleTokenAccount, TAccountPositionBundleOwner, TAccountFunder, TAccountTokenProgram, TAccountSystemProgram, TAccountRent, TAccountAssociatedTokenProgram>;
type ParsedInitializePositionBundleInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        positionBundle: TAccountMetas[0];
        positionBundleMint: TAccountMetas[1];
        positionBundleTokenAccount: TAccountMetas[2];
        positionBundleOwner: TAccountMetas[3];
        funder: TAccountMetas[4];
        tokenProgram: TAccountMetas[5];
        systemProgram: TAccountMetas[6];
        rent: TAccountMetas[7];
        associatedTokenProgram: TAccountMetas[8];
    };
    data: InitializePositionBundleInstructionData;
};
declare function parseInitializePositionBundleInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedInitializePositionBundleInstruction<TProgram, TAccountMetas>;

declare const INITIALIZE_POSITION_BUNDLE_WITH_METADATA_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getInitializePositionBundleWithMetadataDiscriminatorBytes(): ReadonlyUint8Array;
type InitializePositionBundleWithMetadataInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountPositionBundle extends string | IAccountMeta<string> = string, TAccountPositionBundleMint extends string | IAccountMeta<string> = string, TAccountPositionBundleMetadata extends string | IAccountMeta<string> = string, TAccountPositionBundleTokenAccount extends string | IAccountMeta<string> = string, TAccountPositionBundleOwner extends string | IAccountMeta<string> = string, TAccountFunder extends string | IAccountMeta<string> = string, TAccountMetadataUpdateAuth extends string | IAccountMeta<string> = string, TAccountTokenProgram extends string | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA', TAccountSystemProgram extends string | IAccountMeta<string> = '11111111111111111111111111111111', TAccountRent extends string | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111', TAccountAssociatedTokenProgram extends string | IAccountMeta<string> = string, TAccountMetadataProgram extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountPositionBundle extends string ? WritableAccount<TAccountPositionBundle> : TAccountPositionBundle,
    TAccountPositionBundleMint extends string ? WritableSignerAccount<TAccountPositionBundleMint> & IAccountSignerMeta<TAccountPositionBundleMint> : TAccountPositionBundleMint,
    TAccountPositionBundleMetadata extends string ? WritableAccount<TAccountPositionBundleMetadata> : TAccountPositionBundleMetadata,
    TAccountPositionBundleTokenAccount extends string ? WritableAccount<TAccountPositionBundleTokenAccount> : TAccountPositionBundleTokenAccount,
    TAccountPositionBundleOwner extends string ? ReadonlyAccount<TAccountPositionBundleOwner> : TAccountPositionBundleOwner,
    TAccountFunder extends string ? WritableSignerAccount<TAccountFunder> & IAccountSignerMeta<TAccountFunder> : TAccountFunder,
    TAccountMetadataUpdateAuth extends string ? ReadonlyAccount<TAccountMetadataUpdateAuth> : TAccountMetadataUpdateAuth,
    TAccountTokenProgram extends string ? ReadonlyAccount<TAccountTokenProgram> : TAccountTokenProgram,
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    TAccountRent extends string ? ReadonlyAccount<TAccountRent> : TAccountRent,
    TAccountAssociatedTokenProgram extends string ? ReadonlyAccount<TAccountAssociatedTokenProgram> : TAccountAssociatedTokenProgram,
    TAccountMetadataProgram extends string ? ReadonlyAccount<TAccountMetadataProgram> : TAccountMetadataProgram,
    ...TRemainingAccounts
]>;
type InitializePositionBundleWithMetadataInstructionData = {
    discriminator: ReadonlyUint8Array;
};
type InitializePositionBundleWithMetadataInstructionDataArgs = {};
declare function getInitializePositionBundleWithMetadataInstructionDataEncoder(): Encoder<InitializePositionBundleWithMetadataInstructionDataArgs>;
declare function getInitializePositionBundleWithMetadataInstructionDataDecoder(): Decoder<InitializePositionBundleWithMetadataInstructionData>;
declare function getInitializePositionBundleWithMetadataInstructionDataCodec(): Codec<InitializePositionBundleWithMetadataInstructionDataArgs, InitializePositionBundleWithMetadataInstructionData>;
type InitializePositionBundleWithMetadataInput<TAccountPositionBundle extends string = string, TAccountPositionBundleMint extends string = string, TAccountPositionBundleMetadata extends string = string, TAccountPositionBundleTokenAccount extends string = string, TAccountPositionBundleOwner extends string = string, TAccountFunder extends string = string, TAccountMetadataUpdateAuth extends string = string, TAccountTokenProgram extends string = string, TAccountSystemProgram extends string = string, TAccountRent extends string = string, TAccountAssociatedTokenProgram extends string = string, TAccountMetadataProgram extends string = string> = {
    positionBundle: Address<TAccountPositionBundle>;
    positionBundleMint: TransactionSigner<TAccountPositionBundleMint>;
    positionBundleMetadata: Address<TAccountPositionBundleMetadata>;
    positionBundleTokenAccount: Address<TAccountPositionBundleTokenAccount>;
    positionBundleOwner: Address<TAccountPositionBundleOwner>;
    funder: TransactionSigner<TAccountFunder>;
    metadataUpdateAuth: Address<TAccountMetadataUpdateAuth>;
    tokenProgram?: Address<TAccountTokenProgram>;
    systemProgram?: Address<TAccountSystemProgram>;
    rent?: Address<TAccountRent>;
    associatedTokenProgram: Address<TAccountAssociatedTokenProgram>;
    metadataProgram: Address<TAccountMetadataProgram>;
};
declare function getInitializePositionBundleWithMetadataInstruction<TAccountPositionBundle extends string, TAccountPositionBundleMint extends string, TAccountPositionBundleMetadata extends string, TAccountPositionBundleTokenAccount extends string, TAccountPositionBundleOwner extends string, TAccountFunder extends string, TAccountMetadataUpdateAuth extends string, TAccountTokenProgram extends string, TAccountSystemProgram extends string, TAccountRent extends string, TAccountAssociatedTokenProgram extends string, TAccountMetadataProgram extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: InitializePositionBundleWithMetadataInput<TAccountPositionBundle, TAccountPositionBundleMint, TAccountPositionBundleMetadata, TAccountPositionBundleTokenAccount, TAccountPositionBundleOwner, TAccountFunder, TAccountMetadataUpdateAuth, TAccountTokenProgram, TAccountSystemProgram, TAccountRent, TAccountAssociatedTokenProgram, TAccountMetadataProgram>, config?: {
    programAddress?: TProgramAddress;
}): InitializePositionBundleWithMetadataInstruction<TProgramAddress, TAccountPositionBundle, TAccountPositionBundleMint, TAccountPositionBundleMetadata, TAccountPositionBundleTokenAccount, TAccountPositionBundleOwner, TAccountFunder, TAccountMetadataUpdateAuth, TAccountTokenProgram, TAccountSystemProgram, TAccountRent, TAccountAssociatedTokenProgram, TAccountMetadataProgram>;
type ParsedInitializePositionBundleWithMetadataInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        positionBundle: TAccountMetas[0];
        positionBundleMint: TAccountMetas[1];
        positionBundleMetadata: TAccountMetas[2];
        positionBundleTokenAccount: TAccountMetas[3];
        positionBundleOwner: TAccountMetas[4];
        funder: TAccountMetas[5];
        metadataUpdateAuth: TAccountMetas[6];
        tokenProgram: TAccountMetas[7];
        systemProgram: TAccountMetas[8];
        rent: TAccountMetas[9];
        associatedTokenProgram: TAccountMetas[10];
        metadataProgram: TAccountMetas[11];
    };
    data: InitializePositionBundleWithMetadataInstructionData;
};
declare function parseInitializePositionBundleWithMetadataInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedInitializePositionBundleWithMetadataInstruction<TProgram, TAccountMetas>;

declare const INITIALIZE_REWARD_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getInitializeRewardDiscriminatorBytes(): ReadonlyUint8Array;
type InitializeRewardInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountRewardAuthority extends string | IAccountMeta<string> = string, TAccountFunder extends string | IAccountMeta<string> = string, TAccountWhirlpool extends string | IAccountMeta<string> = string, TAccountRewardMint extends string | IAccountMeta<string> = string, TAccountRewardVault extends string | IAccountMeta<string> = string, TAccountTokenProgram extends string | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA', TAccountSystemProgram extends string | IAccountMeta<string> = '11111111111111111111111111111111', TAccountRent extends string | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111', TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountRewardAuthority extends string ? ReadonlySignerAccount<TAccountRewardAuthority> & IAccountSignerMeta<TAccountRewardAuthority> : TAccountRewardAuthority,
    TAccountFunder extends string ? WritableSignerAccount<TAccountFunder> & IAccountSignerMeta<TAccountFunder> : TAccountFunder,
    TAccountWhirlpool extends string ? WritableAccount<TAccountWhirlpool> : TAccountWhirlpool,
    TAccountRewardMint extends string ? ReadonlyAccount<TAccountRewardMint> : TAccountRewardMint,
    TAccountRewardVault extends string ? WritableSignerAccount<TAccountRewardVault> & IAccountSignerMeta<TAccountRewardVault> : TAccountRewardVault,
    TAccountTokenProgram extends string ? ReadonlyAccount<TAccountTokenProgram> : TAccountTokenProgram,
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    TAccountRent extends string ? ReadonlyAccount<TAccountRent> : TAccountRent,
    ...TRemainingAccounts
]>;
type InitializeRewardInstructionData = {
    discriminator: ReadonlyUint8Array;
    rewardIndex: number;
};
type InitializeRewardInstructionDataArgs = {
    rewardIndex: number;
};
declare function getInitializeRewardInstructionDataEncoder(): Encoder<InitializeRewardInstructionDataArgs>;
declare function getInitializeRewardInstructionDataDecoder(): Decoder<InitializeRewardInstructionData>;
declare function getInitializeRewardInstructionDataCodec(): Codec<InitializeRewardInstructionDataArgs, InitializeRewardInstructionData>;
type InitializeRewardInput<TAccountRewardAuthority extends string = string, TAccountFunder extends string = string, TAccountWhirlpool extends string = string, TAccountRewardMint extends string = string, TAccountRewardVault extends string = string, TAccountTokenProgram extends string = string, TAccountSystemProgram extends string = string, TAccountRent extends string = string> = {
    rewardAuthority: TransactionSigner<TAccountRewardAuthority>;
    funder: TransactionSigner<TAccountFunder>;
    whirlpool: Address<TAccountWhirlpool>;
    rewardMint: Address<TAccountRewardMint>;
    rewardVault: TransactionSigner<TAccountRewardVault>;
    tokenProgram?: Address<TAccountTokenProgram>;
    systemProgram?: Address<TAccountSystemProgram>;
    rent?: Address<TAccountRent>;
    rewardIndex: InitializeRewardInstructionDataArgs['rewardIndex'];
};
declare function getInitializeRewardInstruction<TAccountRewardAuthority extends string, TAccountFunder extends string, TAccountWhirlpool extends string, TAccountRewardMint extends string, TAccountRewardVault extends string, TAccountTokenProgram extends string, TAccountSystemProgram extends string, TAccountRent extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: InitializeRewardInput<TAccountRewardAuthority, TAccountFunder, TAccountWhirlpool, TAccountRewardMint, TAccountRewardVault, TAccountTokenProgram, TAccountSystemProgram, TAccountRent>, config?: {
    programAddress?: TProgramAddress;
}): InitializeRewardInstruction<TProgramAddress, TAccountRewardAuthority, TAccountFunder, TAccountWhirlpool, TAccountRewardMint, TAccountRewardVault, TAccountTokenProgram, TAccountSystemProgram, TAccountRent>;
type ParsedInitializeRewardInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        rewardAuthority: TAccountMetas[0];
        funder: TAccountMetas[1];
        whirlpool: TAccountMetas[2];
        rewardMint: TAccountMetas[3];
        rewardVault: TAccountMetas[4];
        tokenProgram: TAccountMetas[5];
        systemProgram: TAccountMetas[6];
        rent: TAccountMetas[7];
    };
    data: InitializeRewardInstructionData;
};
declare function parseInitializeRewardInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedInitializeRewardInstruction<TProgram, TAccountMetas>;

declare const INITIALIZE_REWARD_V2_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getInitializeRewardV2DiscriminatorBytes(): ReadonlyUint8Array;
type InitializeRewardV2Instruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountRewardAuthority extends string | IAccountMeta<string> = string, TAccountFunder extends string | IAccountMeta<string> = string, TAccountWhirlpool extends string | IAccountMeta<string> = string, TAccountRewardMint extends string | IAccountMeta<string> = string, TAccountRewardTokenBadge extends string | IAccountMeta<string> = string, TAccountRewardVault extends string | IAccountMeta<string> = string, TAccountRewardTokenProgram extends string | IAccountMeta<string> = string, TAccountSystemProgram extends string | IAccountMeta<string> = '11111111111111111111111111111111', TAccountRent extends string | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111', TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountRewardAuthority extends string ? ReadonlySignerAccount<TAccountRewardAuthority> & IAccountSignerMeta<TAccountRewardAuthority> : TAccountRewardAuthority,
    TAccountFunder extends string ? WritableSignerAccount<TAccountFunder> & IAccountSignerMeta<TAccountFunder> : TAccountFunder,
    TAccountWhirlpool extends string ? WritableAccount<TAccountWhirlpool> : TAccountWhirlpool,
    TAccountRewardMint extends string ? ReadonlyAccount<TAccountRewardMint> : TAccountRewardMint,
    TAccountRewardTokenBadge extends string ? ReadonlyAccount<TAccountRewardTokenBadge> : TAccountRewardTokenBadge,
    TAccountRewardVault extends string ? WritableSignerAccount<TAccountRewardVault> & IAccountSignerMeta<TAccountRewardVault> : TAccountRewardVault,
    TAccountRewardTokenProgram extends string ? ReadonlyAccount<TAccountRewardTokenProgram> : TAccountRewardTokenProgram,
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    TAccountRent extends string ? ReadonlyAccount<TAccountRent> : TAccountRent,
    ...TRemainingAccounts
]>;
type InitializeRewardV2InstructionData = {
    discriminator: ReadonlyUint8Array;
    rewardIndex: number;
};
type InitializeRewardV2InstructionDataArgs = {
    rewardIndex: number;
};
declare function getInitializeRewardV2InstructionDataEncoder(): Encoder<InitializeRewardV2InstructionDataArgs>;
declare function getInitializeRewardV2InstructionDataDecoder(): Decoder<InitializeRewardV2InstructionData>;
declare function getInitializeRewardV2InstructionDataCodec(): Codec<InitializeRewardV2InstructionDataArgs, InitializeRewardV2InstructionData>;
type InitializeRewardV2Input<TAccountRewardAuthority extends string = string, TAccountFunder extends string = string, TAccountWhirlpool extends string = string, TAccountRewardMint extends string = string, TAccountRewardTokenBadge extends string = string, TAccountRewardVault extends string = string, TAccountRewardTokenProgram extends string = string, TAccountSystemProgram extends string = string, TAccountRent extends string = string> = {
    rewardAuthority: TransactionSigner<TAccountRewardAuthority>;
    funder: TransactionSigner<TAccountFunder>;
    whirlpool: Address<TAccountWhirlpool>;
    rewardMint: Address<TAccountRewardMint>;
    rewardTokenBadge: Address<TAccountRewardTokenBadge>;
    rewardVault: TransactionSigner<TAccountRewardVault>;
    rewardTokenProgram: Address<TAccountRewardTokenProgram>;
    systemProgram?: Address<TAccountSystemProgram>;
    rent?: Address<TAccountRent>;
    rewardIndex: InitializeRewardV2InstructionDataArgs['rewardIndex'];
};
declare function getInitializeRewardV2Instruction<TAccountRewardAuthority extends string, TAccountFunder extends string, TAccountWhirlpool extends string, TAccountRewardMint extends string, TAccountRewardTokenBadge extends string, TAccountRewardVault extends string, TAccountRewardTokenProgram extends string, TAccountSystemProgram extends string, TAccountRent extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: InitializeRewardV2Input<TAccountRewardAuthority, TAccountFunder, TAccountWhirlpool, TAccountRewardMint, TAccountRewardTokenBadge, TAccountRewardVault, TAccountRewardTokenProgram, TAccountSystemProgram, TAccountRent>, config?: {
    programAddress?: TProgramAddress;
}): InitializeRewardV2Instruction<TProgramAddress, TAccountRewardAuthority, TAccountFunder, TAccountWhirlpool, TAccountRewardMint, TAccountRewardTokenBadge, TAccountRewardVault, TAccountRewardTokenProgram, TAccountSystemProgram, TAccountRent>;
type ParsedInitializeRewardV2Instruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        rewardAuthority: TAccountMetas[0];
        funder: TAccountMetas[1];
        whirlpool: TAccountMetas[2];
        rewardMint: TAccountMetas[3];
        rewardTokenBadge: TAccountMetas[4];
        rewardVault: TAccountMetas[5];
        rewardTokenProgram: TAccountMetas[6];
        systemProgram: TAccountMetas[7];
        rent: TAccountMetas[8];
    };
    data: InitializeRewardV2InstructionData;
};
declare function parseInitializeRewardV2Instruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedInitializeRewardV2Instruction<TProgram, TAccountMetas>;

declare const INITIALIZE_TICK_ARRAY_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getInitializeTickArrayDiscriminatorBytes(): ReadonlyUint8Array;
type InitializeTickArrayInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountWhirlpool extends string | IAccountMeta<string> = string, TAccountFunder extends string | IAccountMeta<string> = string, TAccountTickArray extends string | IAccountMeta<string> = string, TAccountSystemProgram extends string | IAccountMeta<string> = '11111111111111111111111111111111', TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountWhirlpool extends string ? ReadonlyAccount<TAccountWhirlpool> : TAccountWhirlpool,
    TAccountFunder extends string ? WritableSignerAccount<TAccountFunder> & IAccountSignerMeta<TAccountFunder> : TAccountFunder,
    TAccountTickArray extends string ? WritableAccount<TAccountTickArray> : TAccountTickArray,
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    ...TRemainingAccounts
]>;
type InitializeTickArrayInstructionData = {
    discriminator: ReadonlyUint8Array;
    startTickIndex: number;
};
type InitializeTickArrayInstructionDataArgs = {
    startTickIndex: number;
};
declare function getInitializeTickArrayInstructionDataEncoder(): Encoder<InitializeTickArrayInstructionDataArgs>;
declare function getInitializeTickArrayInstructionDataDecoder(): Decoder<InitializeTickArrayInstructionData>;
declare function getInitializeTickArrayInstructionDataCodec(): Codec<InitializeTickArrayInstructionDataArgs, InitializeTickArrayInstructionData>;
type InitializeTickArrayInput<TAccountWhirlpool extends string = string, TAccountFunder extends string = string, TAccountTickArray extends string = string, TAccountSystemProgram extends string = string> = {
    whirlpool: Address<TAccountWhirlpool>;
    funder: TransactionSigner<TAccountFunder>;
    tickArray: Address<TAccountTickArray>;
    systemProgram?: Address<TAccountSystemProgram>;
    startTickIndex: InitializeTickArrayInstructionDataArgs['startTickIndex'];
};
declare function getInitializeTickArrayInstruction<TAccountWhirlpool extends string, TAccountFunder extends string, TAccountTickArray extends string, TAccountSystemProgram extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: InitializeTickArrayInput<TAccountWhirlpool, TAccountFunder, TAccountTickArray, TAccountSystemProgram>, config?: {
    programAddress?: TProgramAddress;
}): InitializeTickArrayInstruction<TProgramAddress, TAccountWhirlpool, TAccountFunder, TAccountTickArray, TAccountSystemProgram>;
type ParsedInitializeTickArrayInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        whirlpool: TAccountMetas[0];
        funder: TAccountMetas[1];
        tickArray: TAccountMetas[2];
        systemProgram: TAccountMetas[3];
    };
    data: InitializeTickArrayInstructionData;
};
declare function parseInitializeTickArrayInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedInitializeTickArrayInstruction<TProgram, TAccountMetas>;

declare const INITIALIZE_TOKEN_BADGE_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getInitializeTokenBadgeDiscriminatorBytes(): ReadonlyUint8Array;
type InitializeTokenBadgeInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountWhirlpoolsConfig extends string | IAccountMeta<string> = string, TAccountWhirlpoolsConfigExtension extends string | IAccountMeta<string> = string, TAccountTokenBadgeAuthority extends string | IAccountMeta<string> = string, TAccountTokenMint extends string | IAccountMeta<string> = string, TAccountTokenBadge extends string | IAccountMeta<string> = string, TAccountFunder extends string | IAccountMeta<string> = string, TAccountSystemProgram extends string | IAccountMeta<string> = '11111111111111111111111111111111', TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountWhirlpoolsConfig extends string ? ReadonlyAccount<TAccountWhirlpoolsConfig> : TAccountWhirlpoolsConfig,
    TAccountWhirlpoolsConfigExtension extends string ? ReadonlyAccount<TAccountWhirlpoolsConfigExtension> : TAccountWhirlpoolsConfigExtension,
    TAccountTokenBadgeAuthority extends string ? ReadonlySignerAccount<TAccountTokenBadgeAuthority> & IAccountSignerMeta<TAccountTokenBadgeAuthority> : TAccountTokenBadgeAuthority,
    TAccountTokenMint extends string ? ReadonlyAccount<TAccountTokenMint> : TAccountTokenMint,
    TAccountTokenBadge extends string ? WritableAccount<TAccountTokenBadge> : TAccountTokenBadge,
    TAccountFunder extends string ? WritableSignerAccount<TAccountFunder> & IAccountSignerMeta<TAccountFunder> : TAccountFunder,
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    ...TRemainingAccounts
]>;
type InitializeTokenBadgeInstructionData = {
    discriminator: ReadonlyUint8Array;
};
type InitializeTokenBadgeInstructionDataArgs = {};
declare function getInitializeTokenBadgeInstructionDataEncoder(): Encoder<InitializeTokenBadgeInstructionDataArgs>;
declare function getInitializeTokenBadgeInstructionDataDecoder(): Decoder<InitializeTokenBadgeInstructionData>;
declare function getInitializeTokenBadgeInstructionDataCodec(): Codec<InitializeTokenBadgeInstructionDataArgs, InitializeTokenBadgeInstructionData>;
type InitializeTokenBadgeInput<TAccountWhirlpoolsConfig extends string = string, TAccountWhirlpoolsConfigExtension extends string = string, TAccountTokenBadgeAuthority extends string = string, TAccountTokenMint extends string = string, TAccountTokenBadge extends string = string, TAccountFunder extends string = string, TAccountSystemProgram extends string = string> = {
    whirlpoolsConfig: Address<TAccountWhirlpoolsConfig>;
    whirlpoolsConfigExtension: Address<TAccountWhirlpoolsConfigExtension>;
    tokenBadgeAuthority: TransactionSigner<TAccountTokenBadgeAuthority>;
    tokenMint: Address<TAccountTokenMint>;
    tokenBadge: Address<TAccountTokenBadge>;
    funder: TransactionSigner<TAccountFunder>;
    systemProgram?: Address<TAccountSystemProgram>;
};
declare function getInitializeTokenBadgeInstruction<TAccountWhirlpoolsConfig extends string, TAccountWhirlpoolsConfigExtension extends string, TAccountTokenBadgeAuthority extends string, TAccountTokenMint extends string, TAccountTokenBadge extends string, TAccountFunder extends string, TAccountSystemProgram extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: InitializeTokenBadgeInput<TAccountWhirlpoolsConfig, TAccountWhirlpoolsConfigExtension, TAccountTokenBadgeAuthority, TAccountTokenMint, TAccountTokenBadge, TAccountFunder, TAccountSystemProgram>, config?: {
    programAddress?: TProgramAddress;
}): InitializeTokenBadgeInstruction<TProgramAddress, TAccountWhirlpoolsConfig, TAccountWhirlpoolsConfigExtension, TAccountTokenBadgeAuthority, TAccountTokenMint, TAccountTokenBadge, TAccountFunder, TAccountSystemProgram>;
type ParsedInitializeTokenBadgeInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        whirlpoolsConfig: TAccountMetas[0];
        whirlpoolsConfigExtension: TAccountMetas[1];
        tokenBadgeAuthority: TAccountMetas[2];
        tokenMint: TAccountMetas[3];
        tokenBadge: TAccountMetas[4];
        funder: TAccountMetas[5];
        systemProgram: TAccountMetas[6];
    };
    data: InitializeTokenBadgeInstructionData;
};
declare function parseInitializeTokenBadgeInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedInitializeTokenBadgeInstruction<TProgram, TAccountMetas>;

declare const LOCK_POSITION_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getLockPositionDiscriminatorBytes(): ReadonlyUint8Array;
type LockPositionInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountFunder extends string | IAccountMeta<string> = string, TAccountPositionAuthority extends string | IAccountMeta<string> = string, TAccountPosition extends string | IAccountMeta<string> = string, TAccountPositionMint extends string | IAccountMeta<string> = string, TAccountPositionTokenAccount extends string | IAccountMeta<string> = string, TAccountLockConfig extends string | IAccountMeta<string> = string, TAccountWhirlpool extends string | IAccountMeta<string> = string, TAccountToken2022Program extends string | IAccountMeta<string> = string, TAccountSystemProgram extends string | IAccountMeta<string> = '11111111111111111111111111111111', TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountFunder extends string ? WritableSignerAccount<TAccountFunder> & IAccountSignerMeta<TAccountFunder> : TAccountFunder,
    TAccountPositionAuthority extends string ? ReadonlySignerAccount<TAccountPositionAuthority> & IAccountSignerMeta<TAccountPositionAuthority> : TAccountPositionAuthority,
    TAccountPosition extends string ? ReadonlyAccount<TAccountPosition> : TAccountPosition,
    TAccountPositionMint extends string ? ReadonlyAccount<TAccountPositionMint> : TAccountPositionMint,
    TAccountPositionTokenAccount extends string ? WritableAccount<TAccountPositionTokenAccount> : TAccountPositionTokenAccount,
    TAccountLockConfig extends string ? WritableAccount<TAccountLockConfig> : TAccountLockConfig,
    TAccountWhirlpool extends string ? ReadonlyAccount<TAccountWhirlpool> : TAccountWhirlpool,
    TAccountToken2022Program extends string ? ReadonlyAccount<TAccountToken2022Program> : TAccountToken2022Program,
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    ...TRemainingAccounts
]>;
type LockPositionInstructionData = {
    discriminator: ReadonlyUint8Array;
    lockType: LockType;
};
type LockPositionInstructionDataArgs = {
    lockType: LockTypeArgs;
};
declare function getLockPositionInstructionDataEncoder(): Encoder<LockPositionInstructionDataArgs>;
declare function getLockPositionInstructionDataDecoder(): Decoder<LockPositionInstructionData>;
declare function getLockPositionInstructionDataCodec(): Codec<LockPositionInstructionDataArgs, LockPositionInstructionData>;
type LockPositionInput<TAccountFunder extends string = string, TAccountPositionAuthority extends string = string, TAccountPosition extends string = string, TAccountPositionMint extends string = string, TAccountPositionTokenAccount extends string = string, TAccountLockConfig extends string = string, TAccountWhirlpool extends string = string, TAccountToken2022Program extends string = string, TAccountSystemProgram extends string = string> = {
    funder: TransactionSigner<TAccountFunder>;
    positionAuthority: TransactionSigner<TAccountPositionAuthority>;
    position: Address<TAccountPosition>;
    positionMint: Address<TAccountPositionMint>;
    positionTokenAccount: Address<TAccountPositionTokenAccount>;
    lockConfig: Address<TAccountLockConfig>;
    whirlpool: Address<TAccountWhirlpool>;
    token2022Program: Address<TAccountToken2022Program>;
    systemProgram?: Address<TAccountSystemProgram>;
    lockType: LockPositionInstructionDataArgs['lockType'];
};
declare function getLockPositionInstruction<TAccountFunder extends string, TAccountPositionAuthority extends string, TAccountPosition extends string, TAccountPositionMint extends string, TAccountPositionTokenAccount extends string, TAccountLockConfig extends string, TAccountWhirlpool extends string, TAccountToken2022Program extends string, TAccountSystemProgram extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: LockPositionInput<TAccountFunder, TAccountPositionAuthority, TAccountPosition, TAccountPositionMint, TAccountPositionTokenAccount, TAccountLockConfig, TAccountWhirlpool, TAccountToken2022Program, TAccountSystemProgram>, config?: {
    programAddress?: TProgramAddress;
}): LockPositionInstruction<TProgramAddress, TAccountFunder, TAccountPositionAuthority, TAccountPosition, TAccountPositionMint, TAccountPositionTokenAccount, TAccountLockConfig, TAccountWhirlpool, TAccountToken2022Program, TAccountSystemProgram>;
type ParsedLockPositionInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        funder: TAccountMetas[0];
        positionAuthority: TAccountMetas[1];
        position: TAccountMetas[2];
        positionMint: TAccountMetas[3];
        positionTokenAccount: TAccountMetas[4];
        lockConfig: TAccountMetas[5];
        whirlpool: TAccountMetas[6];
        token2022Program: TAccountMetas[7];
        systemProgram: TAccountMetas[8];
    };
    data: LockPositionInstructionData;
};
declare function parseLockPositionInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedLockPositionInstruction<TProgram, TAccountMetas>;

declare const OPEN_BUNDLED_POSITION_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getOpenBundledPositionDiscriminatorBytes(): ReadonlyUint8Array;
type OpenBundledPositionInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountBundledPosition extends string | IAccountMeta<string> = string, TAccountPositionBundle extends string | IAccountMeta<string> = string, TAccountPositionBundleTokenAccount extends string | IAccountMeta<string> = string, TAccountPositionBundleAuthority extends string | IAccountMeta<string> = string, TAccountWhirlpool extends string | IAccountMeta<string> = string, TAccountFunder extends string | IAccountMeta<string> = string, TAccountSystemProgram extends string | IAccountMeta<string> = '11111111111111111111111111111111', TAccountRent extends string | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111', TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountBundledPosition extends string ? WritableAccount<TAccountBundledPosition> : TAccountBundledPosition,
    TAccountPositionBundle extends string ? WritableAccount<TAccountPositionBundle> : TAccountPositionBundle,
    TAccountPositionBundleTokenAccount extends string ? ReadonlyAccount<TAccountPositionBundleTokenAccount> : TAccountPositionBundleTokenAccount,
    TAccountPositionBundleAuthority extends string ? ReadonlySignerAccount<TAccountPositionBundleAuthority> & IAccountSignerMeta<TAccountPositionBundleAuthority> : TAccountPositionBundleAuthority,
    TAccountWhirlpool extends string ? ReadonlyAccount<TAccountWhirlpool> : TAccountWhirlpool,
    TAccountFunder extends string ? WritableSignerAccount<TAccountFunder> & IAccountSignerMeta<TAccountFunder> : TAccountFunder,
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    TAccountRent extends string ? ReadonlyAccount<TAccountRent> : TAccountRent,
    ...TRemainingAccounts
]>;
type OpenBundledPositionInstructionData = {
    discriminator: ReadonlyUint8Array;
    bundleIndex: number;
    tickLowerIndex: number;
    tickUpperIndex: number;
};
type OpenBundledPositionInstructionDataArgs = {
    bundleIndex: number;
    tickLowerIndex: number;
    tickUpperIndex: number;
};
declare function getOpenBundledPositionInstructionDataEncoder(): Encoder<OpenBundledPositionInstructionDataArgs>;
declare function getOpenBundledPositionInstructionDataDecoder(): Decoder<OpenBundledPositionInstructionData>;
declare function getOpenBundledPositionInstructionDataCodec(): Codec<OpenBundledPositionInstructionDataArgs, OpenBundledPositionInstructionData>;
type OpenBundledPositionInput<TAccountBundledPosition extends string = string, TAccountPositionBundle extends string = string, TAccountPositionBundleTokenAccount extends string = string, TAccountPositionBundleAuthority extends string = string, TAccountWhirlpool extends string = string, TAccountFunder extends string = string, TAccountSystemProgram extends string = string, TAccountRent extends string = string> = {
    bundledPosition: Address<TAccountBundledPosition>;
    positionBundle: Address<TAccountPositionBundle>;
    positionBundleTokenAccount: Address<TAccountPositionBundleTokenAccount>;
    positionBundleAuthority: TransactionSigner<TAccountPositionBundleAuthority>;
    whirlpool: Address<TAccountWhirlpool>;
    funder: TransactionSigner<TAccountFunder>;
    systemProgram?: Address<TAccountSystemProgram>;
    rent?: Address<TAccountRent>;
    bundleIndex: OpenBundledPositionInstructionDataArgs['bundleIndex'];
    tickLowerIndex: OpenBundledPositionInstructionDataArgs['tickLowerIndex'];
    tickUpperIndex: OpenBundledPositionInstructionDataArgs['tickUpperIndex'];
};
declare function getOpenBundledPositionInstruction<TAccountBundledPosition extends string, TAccountPositionBundle extends string, TAccountPositionBundleTokenAccount extends string, TAccountPositionBundleAuthority extends string, TAccountWhirlpool extends string, TAccountFunder extends string, TAccountSystemProgram extends string, TAccountRent extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: OpenBundledPositionInput<TAccountBundledPosition, TAccountPositionBundle, TAccountPositionBundleTokenAccount, TAccountPositionBundleAuthority, TAccountWhirlpool, TAccountFunder, TAccountSystemProgram, TAccountRent>, config?: {
    programAddress?: TProgramAddress;
}): OpenBundledPositionInstruction<TProgramAddress, TAccountBundledPosition, TAccountPositionBundle, TAccountPositionBundleTokenAccount, TAccountPositionBundleAuthority, TAccountWhirlpool, TAccountFunder, TAccountSystemProgram, TAccountRent>;
type ParsedOpenBundledPositionInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        bundledPosition: TAccountMetas[0];
        positionBundle: TAccountMetas[1];
        positionBundleTokenAccount: TAccountMetas[2];
        positionBundleAuthority: TAccountMetas[3];
        whirlpool: TAccountMetas[4];
        funder: TAccountMetas[5];
        systemProgram: TAccountMetas[6];
        rent: TAccountMetas[7];
    };
    data: OpenBundledPositionInstructionData;
};
declare function parseOpenBundledPositionInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedOpenBundledPositionInstruction<TProgram, TAccountMetas>;

declare const OPEN_POSITION_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getOpenPositionDiscriminatorBytes(): ReadonlyUint8Array;
type OpenPositionInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountFunder extends string | IAccountMeta<string> = string, TAccountOwner extends string | IAccountMeta<string> = string, TAccountPosition extends string | IAccountMeta<string> = string, TAccountPositionMint extends string | IAccountMeta<string> = string, TAccountPositionTokenAccount extends string | IAccountMeta<string> = string, TAccountWhirlpool extends string | IAccountMeta<string> = string, TAccountTokenProgram extends string | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA', TAccountSystemProgram extends string | IAccountMeta<string> = '11111111111111111111111111111111', TAccountRent extends string | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111', TAccountAssociatedTokenProgram extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountFunder extends string ? WritableSignerAccount<TAccountFunder> & IAccountSignerMeta<TAccountFunder> : TAccountFunder,
    TAccountOwner extends string ? ReadonlyAccount<TAccountOwner> : TAccountOwner,
    TAccountPosition extends string ? WritableAccount<TAccountPosition> : TAccountPosition,
    TAccountPositionMint extends string ? WritableSignerAccount<TAccountPositionMint> & IAccountSignerMeta<TAccountPositionMint> : TAccountPositionMint,
    TAccountPositionTokenAccount extends string ? WritableAccount<TAccountPositionTokenAccount> : TAccountPositionTokenAccount,
    TAccountWhirlpool extends string ? ReadonlyAccount<TAccountWhirlpool> : TAccountWhirlpool,
    TAccountTokenProgram extends string ? ReadonlyAccount<TAccountTokenProgram> : TAccountTokenProgram,
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    TAccountRent extends string ? ReadonlyAccount<TAccountRent> : TAccountRent,
    TAccountAssociatedTokenProgram extends string ? ReadonlyAccount<TAccountAssociatedTokenProgram> : TAccountAssociatedTokenProgram,
    ...TRemainingAccounts
]>;
type OpenPositionInstructionData = {
    discriminator: ReadonlyUint8Array;
    positionBump: number;
    tickLowerIndex: number;
    tickUpperIndex: number;
};
type OpenPositionInstructionDataArgs = {
    positionBump: number;
    tickLowerIndex: number;
    tickUpperIndex: number;
};
declare function getOpenPositionInstructionDataEncoder(): Encoder<OpenPositionInstructionDataArgs>;
declare function getOpenPositionInstructionDataDecoder(): Decoder<OpenPositionInstructionData>;
declare function getOpenPositionInstructionDataCodec(): Codec<OpenPositionInstructionDataArgs, OpenPositionInstructionData>;
type OpenPositionInput<TAccountFunder extends string = string, TAccountOwner extends string = string, TAccountPosition extends string = string, TAccountPositionMint extends string = string, TAccountPositionTokenAccount extends string = string, TAccountWhirlpool extends string = string, TAccountTokenProgram extends string = string, TAccountSystemProgram extends string = string, TAccountRent extends string = string, TAccountAssociatedTokenProgram extends string = string> = {
    funder: TransactionSigner<TAccountFunder>;
    owner: Address<TAccountOwner>;
    position: Address<TAccountPosition>;
    positionMint: TransactionSigner<TAccountPositionMint>;
    positionTokenAccount: Address<TAccountPositionTokenAccount>;
    whirlpool: Address<TAccountWhirlpool>;
    tokenProgram?: Address<TAccountTokenProgram>;
    systemProgram?: Address<TAccountSystemProgram>;
    rent?: Address<TAccountRent>;
    associatedTokenProgram: Address<TAccountAssociatedTokenProgram>;
    positionBump: OpenPositionInstructionDataArgs['positionBump'];
    tickLowerIndex: OpenPositionInstructionDataArgs['tickLowerIndex'];
    tickUpperIndex: OpenPositionInstructionDataArgs['tickUpperIndex'];
};
declare function getOpenPositionInstruction<TAccountFunder extends string, TAccountOwner extends string, TAccountPosition extends string, TAccountPositionMint extends string, TAccountPositionTokenAccount extends string, TAccountWhirlpool extends string, TAccountTokenProgram extends string, TAccountSystemProgram extends string, TAccountRent extends string, TAccountAssociatedTokenProgram extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: OpenPositionInput<TAccountFunder, TAccountOwner, TAccountPosition, TAccountPositionMint, TAccountPositionTokenAccount, TAccountWhirlpool, TAccountTokenProgram, TAccountSystemProgram, TAccountRent, TAccountAssociatedTokenProgram>, config?: {
    programAddress?: TProgramAddress;
}): OpenPositionInstruction<TProgramAddress, TAccountFunder, TAccountOwner, TAccountPosition, TAccountPositionMint, TAccountPositionTokenAccount, TAccountWhirlpool, TAccountTokenProgram, TAccountSystemProgram, TAccountRent, TAccountAssociatedTokenProgram>;
type ParsedOpenPositionInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        funder: TAccountMetas[0];
        owner: TAccountMetas[1];
        position: TAccountMetas[2];
        positionMint: TAccountMetas[3];
        positionTokenAccount: TAccountMetas[4];
        whirlpool: TAccountMetas[5];
        tokenProgram: TAccountMetas[6];
        systemProgram: TAccountMetas[7];
        rent: TAccountMetas[8];
        associatedTokenProgram: TAccountMetas[9];
    };
    data: OpenPositionInstructionData;
};
declare function parseOpenPositionInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedOpenPositionInstruction<TProgram, TAccountMetas>;

declare const OPEN_POSITION_WITH_METADATA_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getOpenPositionWithMetadataDiscriminatorBytes(): ReadonlyUint8Array;
type OpenPositionWithMetadataInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountFunder extends string | IAccountMeta<string> = string, TAccountOwner extends string | IAccountMeta<string> = string, TAccountPosition extends string | IAccountMeta<string> = string, TAccountPositionMint extends string | IAccountMeta<string> = string, TAccountPositionMetadataAccount extends string | IAccountMeta<string> = string, TAccountPositionTokenAccount extends string | IAccountMeta<string> = string, TAccountWhirlpool extends string | IAccountMeta<string> = string, TAccountTokenProgram extends string | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA', TAccountSystemProgram extends string | IAccountMeta<string> = '11111111111111111111111111111111', TAccountRent extends string | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111', TAccountAssociatedTokenProgram extends string | IAccountMeta<string> = string, TAccountMetadataProgram extends string | IAccountMeta<string> = string, TAccountMetadataUpdateAuth extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountFunder extends string ? WritableSignerAccount<TAccountFunder> & IAccountSignerMeta<TAccountFunder> : TAccountFunder,
    TAccountOwner extends string ? ReadonlyAccount<TAccountOwner> : TAccountOwner,
    TAccountPosition extends string ? WritableAccount<TAccountPosition> : TAccountPosition,
    TAccountPositionMint extends string ? WritableSignerAccount<TAccountPositionMint> & IAccountSignerMeta<TAccountPositionMint> : TAccountPositionMint,
    TAccountPositionMetadataAccount extends string ? WritableAccount<TAccountPositionMetadataAccount> : TAccountPositionMetadataAccount,
    TAccountPositionTokenAccount extends string ? WritableAccount<TAccountPositionTokenAccount> : TAccountPositionTokenAccount,
    TAccountWhirlpool extends string ? ReadonlyAccount<TAccountWhirlpool> : TAccountWhirlpool,
    TAccountTokenProgram extends string ? ReadonlyAccount<TAccountTokenProgram> : TAccountTokenProgram,
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    TAccountRent extends string ? ReadonlyAccount<TAccountRent> : TAccountRent,
    TAccountAssociatedTokenProgram extends string ? ReadonlyAccount<TAccountAssociatedTokenProgram> : TAccountAssociatedTokenProgram,
    TAccountMetadataProgram extends string ? ReadonlyAccount<TAccountMetadataProgram> : TAccountMetadataProgram,
    TAccountMetadataUpdateAuth extends string ? ReadonlyAccount<TAccountMetadataUpdateAuth> : TAccountMetadataUpdateAuth,
    ...TRemainingAccounts
]>;
type OpenPositionWithMetadataInstructionData = {
    discriminator: ReadonlyUint8Array;
    positionBump: number;
    metadataBump: number;
    tickLowerIndex: number;
    tickUpperIndex: number;
};
type OpenPositionWithMetadataInstructionDataArgs = {
    positionBump: number;
    metadataBump: number;
    tickLowerIndex: number;
    tickUpperIndex: number;
};
declare function getOpenPositionWithMetadataInstructionDataEncoder(): Encoder<OpenPositionWithMetadataInstructionDataArgs>;
declare function getOpenPositionWithMetadataInstructionDataDecoder(): Decoder<OpenPositionWithMetadataInstructionData>;
declare function getOpenPositionWithMetadataInstructionDataCodec(): Codec<OpenPositionWithMetadataInstructionDataArgs, OpenPositionWithMetadataInstructionData>;
type OpenPositionWithMetadataInput<TAccountFunder extends string = string, TAccountOwner extends string = string, TAccountPosition extends string = string, TAccountPositionMint extends string = string, TAccountPositionMetadataAccount extends string = string, TAccountPositionTokenAccount extends string = string, TAccountWhirlpool extends string = string, TAccountTokenProgram extends string = string, TAccountSystemProgram extends string = string, TAccountRent extends string = string, TAccountAssociatedTokenProgram extends string = string, TAccountMetadataProgram extends string = string, TAccountMetadataUpdateAuth extends string = string> = {
    funder: TransactionSigner<TAccountFunder>;
    owner: Address<TAccountOwner>;
    position: Address<TAccountPosition>;
    positionMint: TransactionSigner<TAccountPositionMint>;
    positionMetadataAccount: Address<TAccountPositionMetadataAccount>;
    positionTokenAccount: Address<TAccountPositionTokenAccount>;
    whirlpool: Address<TAccountWhirlpool>;
    tokenProgram?: Address<TAccountTokenProgram>;
    systemProgram?: Address<TAccountSystemProgram>;
    rent?: Address<TAccountRent>;
    associatedTokenProgram: Address<TAccountAssociatedTokenProgram>;
    metadataProgram: Address<TAccountMetadataProgram>;
    metadataUpdateAuth: Address<TAccountMetadataUpdateAuth>;
    positionBump: OpenPositionWithMetadataInstructionDataArgs['positionBump'];
    metadataBump: OpenPositionWithMetadataInstructionDataArgs['metadataBump'];
    tickLowerIndex: OpenPositionWithMetadataInstructionDataArgs['tickLowerIndex'];
    tickUpperIndex: OpenPositionWithMetadataInstructionDataArgs['tickUpperIndex'];
};
declare function getOpenPositionWithMetadataInstruction<TAccountFunder extends string, TAccountOwner extends string, TAccountPosition extends string, TAccountPositionMint extends string, TAccountPositionMetadataAccount extends string, TAccountPositionTokenAccount extends string, TAccountWhirlpool extends string, TAccountTokenProgram extends string, TAccountSystemProgram extends string, TAccountRent extends string, TAccountAssociatedTokenProgram extends string, TAccountMetadataProgram extends string, TAccountMetadataUpdateAuth extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: OpenPositionWithMetadataInput<TAccountFunder, TAccountOwner, TAccountPosition, TAccountPositionMint, TAccountPositionMetadataAccount, TAccountPositionTokenAccount, TAccountWhirlpool, TAccountTokenProgram, TAccountSystemProgram, TAccountRent, TAccountAssociatedTokenProgram, TAccountMetadataProgram, TAccountMetadataUpdateAuth>, config?: {
    programAddress?: TProgramAddress;
}): OpenPositionWithMetadataInstruction<TProgramAddress, TAccountFunder, TAccountOwner, TAccountPosition, TAccountPositionMint, TAccountPositionMetadataAccount, TAccountPositionTokenAccount, TAccountWhirlpool, TAccountTokenProgram, TAccountSystemProgram, TAccountRent, TAccountAssociatedTokenProgram, TAccountMetadataProgram, TAccountMetadataUpdateAuth>;
type ParsedOpenPositionWithMetadataInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        funder: TAccountMetas[0];
        owner: TAccountMetas[1];
        position: TAccountMetas[2];
        positionMint: TAccountMetas[3];
        positionMetadataAccount: TAccountMetas[4];
        positionTokenAccount: TAccountMetas[5];
        whirlpool: TAccountMetas[6];
        tokenProgram: TAccountMetas[7];
        systemProgram: TAccountMetas[8];
        rent: TAccountMetas[9];
        associatedTokenProgram: TAccountMetas[10];
        metadataProgram: TAccountMetas[11];
        metadataUpdateAuth: TAccountMetas[12];
    };
    data: OpenPositionWithMetadataInstructionData;
};
declare function parseOpenPositionWithMetadataInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedOpenPositionWithMetadataInstruction<TProgram, TAccountMetas>;

declare const OPEN_POSITION_WITH_TOKEN_EXTENSIONS_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getOpenPositionWithTokenExtensionsDiscriminatorBytes(): ReadonlyUint8Array;
type OpenPositionWithTokenExtensionsInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountFunder extends string | IAccountMeta<string> = string, TAccountOwner extends string | IAccountMeta<string> = string, TAccountPosition extends string | IAccountMeta<string> = string, TAccountPositionMint extends string | IAccountMeta<string> = string, TAccountPositionTokenAccount extends string | IAccountMeta<string> = string, TAccountWhirlpool extends string | IAccountMeta<string> = string, TAccountToken2022Program extends string | IAccountMeta<string> = string, TAccountSystemProgram extends string | IAccountMeta<string> = '11111111111111111111111111111111', TAccountAssociatedTokenProgram extends string | IAccountMeta<string> = string, TAccountMetadataUpdateAuth extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountFunder extends string ? WritableSignerAccount<TAccountFunder> & IAccountSignerMeta<TAccountFunder> : TAccountFunder,
    TAccountOwner extends string ? ReadonlyAccount<TAccountOwner> : TAccountOwner,
    TAccountPosition extends string ? WritableAccount<TAccountPosition> : TAccountPosition,
    TAccountPositionMint extends string ? WritableSignerAccount<TAccountPositionMint> & IAccountSignerMeta<TAccountPositionMint> : TAccountPositionMint,
    TAccountPositionTokenAccount extends string ? WritableAccount<TAccountPositionTokenAccount> : TAccountPositionTokenAccount,
    TAccountWhirlpool extends string ? ReadonlyAccount<TAccountWhirlpool> : TAccountWhirlpool,
    TAccountToken2022Program extends string ? ReadonlyAccount<TAccountToken2022Program> : TAccountToken2022Program,
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    TAccountAssociatedTokenProgram extends string ? ReadonlyAccount<TAccountAssociatedTokenProgram> : TAccountAssociatedTokenProgram,
    TAccountMetadataUpdateAuth extends string ? ReadonlyAccount<TAccountMetadataUpdateAuth> : TAccountMetadataUpdateAuth,
    ...TRemainingAccounts
]>;
type OpenPositionWithTokenExtensionsInstructionData = {
    discriminator: ReadonlyUint8Array;
    tickLowerIndex: number;
    tickUpperIndex: number;
    withTokenMetadataExtension: boolean;
};
type OpenPositionWithTokenExtensionsInstructionDataArgs = {
    tickLowerIndex: number;
    tickUpperIndex: number;
    withTokenMetadataExtension: boolean;
};
declare function getOpenPositionWithTokenExtensionsInstructionDataEncoder(): Encoder<OpenPositionWithTokenExtensionsInstructionDataArgs>;
declare function getOpenPositionWithTokenExtensionsInstructionDataDecoder(): Decoder<OpenPositionWithTokenExtensionsInstructionData>;
declare function getOpenPositionWithTokenExtensionsInstructionDataCodec(): Codec<OpenPositionWithTokenExtensionsInstructionDataArgs, OpenPositionWithTokenExtensionsInstructionData>;
type OpenPositionWithTokenExtensionsInput<TAccountFunder extends string = string, TAccountOwner extends string = string, TAccountPosition extends string = string, TAccountPositionMint extends string = string, TAccountPositionTokenAccount extends string = string, TAccountWhirlpool extends string = string, TAccountToken2022Program extends string = string, TAccountSystemProgram extends string = string, TAccountAssociatedTokenProgram extends string = string, TAccountMetadataUpdateAuth extends string = string> = {
    funder: TransactionSigner<TAccountFunder>;
    owner: Address<TAccountOwner>;
    position: Address<TAccountPosition>;
    positionMint: TransactionSigner<TAccountPositionMint>;
    positionTokenAccount: Address<TAccountPositionTokenAccount>;
    whirlpool: Address<TAccountWhirlpool>;
    token2022Program: Address<TAccountToken2022Program>;
    systemProgram?: Address<TAccountSystemProgram>;
    associatedTokenProgram: Address<TAccountAssociatedTokenProgram>;
    metadataUpdateAuth: Address<TAccountMetadataUpdateAuth>;
    tickLowerIndex: OpenPositionWithTokenExtensionsInstructionDataArgs['tickLowerIndex'];
    tickUpperIndex: OpenPositionWithTokenExtensionsInstructionDataArgs['tickUpperIndex'];
    withTokenMetadataExtension: OpenPositionWithTokenExtensionsInstructionDataArgs['withTokenMetadataExtension'];
};
declare function getOpenPositionWithTokenExtensionsInstruction<TAccountFunder extends string, TAccountOwner extends string, TAccountPosition extends string, TAccountPositionMint extends string, TAccountPositionTokenAccount extends string, TAccountWhirlpool extends string, TAccountToken2022Program extends string, TAccountSystemProgram extends string, TAccountAssociatedTokenProgram extends string, TAccountMetadataUpdateAuth extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: OpenPositionWithTokenExtensionsInput<TAccountFunder, TAccountOwner, TAccountPosition, TAccountPositionMint, TAccountPositionTokenAccount, TAccountWhirlpool, TAccountToken2022Program, TAccountSystemProgram, TAccountAssociatedTokenProgram, TAccountMetadataUpdateAuth>, config?: {
    programAddress?: TProgramAddress;
}): OpenPositionWithTokenExtensionsInstruction<TProgramAddress, TAccountFunder, TAccountOwner, TAccountPosition, TAccountPositionMint, TAccountPositionTokenAccount, TAccountWhirlpool, TAccountToken2022Program, TAccountSystemProgram, TAccountAssociatedTokenProgram, TAccountMetadataUpdateAuth>;
type ParsedOpenPositionWithTokenExtensionsInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        funder: TAccountMetas[0];
        owner: TAccountMetas[1];
        position: TAccountMetas[2];
        positionMint: TAccountMetas[3];
        positionTokenAccount: TAccountMetas[4];
        whirlpool: TAccountMetas[5];
        token2022Program: TAccountMetas[6];
        systemProgram: TAccountMetas[7];
        associatedTokenProgram: TAccountMetas[8];
        metadataUpdateAuth: TAccountMetas[9];
    };
    data: OpenPositionWithTokenExtensionsInstructionData;
};
declare function parseOpenPositionWithTokenExtensionsInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedOpenPositionWithTokenExtensionsInstruction<TProgram, TAccountMetas>;

declare const RESET_POSITION_RANGE_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getResetPositionRangeDiscriminatorBytes(): ReadonlyUint8Array;
type ResetPositionRangeInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountFunder extends string | IAccountMeta<string> = string, TAccountPositionAuthority extends string | IAccountMeta<string> = string, TAccountWhirlpool extends string | IAccountMeta<string> = string, TAccountPosition extends string | IAccountMeta<string> = string, TAccountPositionTokenAccount extends string | IAccountMeta<string> = string, TAccountSystemProgram extends string | IAccountMeta<string> = '11111111111111111111111111111111', TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountFunder extends string ? WritableSignerAccount<TAccountFunder> & IAccountSignerMeta<TAccountFunder> : TAccountFunder,
    TAccountPositionAuthority extends string ? ReadonlySignerAccount<TAccountPositionAuthority> & IAccountSignerMeta<TAccountPositionAuthority> : TAccountPositionAuthority,
    TAccountWhirlpool extends string ? ReadonlyAccount<TAccountWhirlpool> : TAccountWhirlpool,
    TAccountPosition extends string ? WritableAccount<TAccountPosition> : TAccountPosition,
    TAccountPositionTokenAccount extends string ? ReadonlyAccount<TAccountPositionTokenAccount> : TAccountPositionTokenAccount,
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    ...TRemainingAccounts
]>;
type ResetPositionRangeInstructionData = {
    discriminator: ReadonlyUint8Array;
    newTickLowerIndex: number;
    newTickUpperIndex: number;
};
type ResetPositionRangeInstructionDataArgs = {
    newTickLowerIndex: number;
    newTickUpperIndex: number;
};
declare function getResetPositionRangeInstructionDataEncoder(): Encoder<ResetPositionRangeInstructionDataArgs>;
declare function getResetPositionRangeInstructionDataDecoder(): Decoder<ResetPositionRangeInstructionData>;
declare function getResetPositionRangeInstructionDataCodec(): Codec<ResetPositionRangeInstructionDataArgs, ResetPositionRangeInstructionData>;
type ResetPositionRangeInput<TAccountFunder extends string = string, TAccountPositionAuthority extends string = string, TAccountWhirlpool extends string = string, TAccountPosition extends string = string, TAccountPositionTokenAccount extends string = string, TAccountSystemProgram extends string = string> = {
    funder: TransactionSigner<TAccountFunder>;
    positionAuthority: TransactionSigner<TAccountPositionAuthority>;
    whirlpool: Address<TAccountWhirlpool>;
    position: Address<TAccountPosition>;
    positionTokenAccount: Address<TAccountPositionTokenAccount>;
    systemProgram?: Address<TAccountSystemProgram>;
    newTickLowerIndex: ResetPositionRangeInstructionDataArgs['newTickLowerIndex'];
    newTickUpperIndex: ResetPositionRangeInstructionDataArgs['newTickUpperIndex'];
};
declare function getResetPositionRangeInstruction<TAccountFunder extends string, TAccountPositionAuthority extends string, TAccountWhirlpool extends string, TAccountPosition extends string, TAccountPositionTokenAccount extends string, TAccountSystemProgram extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: ResetPositionRangeInput<TAccountFunder, TAccountPositionAuthority, TAccountWhirlpool, TAccountPosition, TAccountPositionTokenAccount, TAccountSystemProgram>, config?: {
    programAddress?: TProgramAddress;
}): ResetPositionRangeInstruction<TProgramAddress, TAccountFunder, TAccountPositionAuthority, TAccountWhirlpool, TAccountPosition, TAccountPositionTokenAccount, TAccountSystemProgram>;
type ParsedResetPositionRangeInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        funder: TAccountMetas[0];
        positionAuthority: TAccountMetas[1];
        whirlpool: TAccountMetas[2];
        position: TAccountMetas[3];
        positionTokenAccount: TAccountMetas[4];
        systemProgram: TAccountMetas[5];
    };
    data: ResetPositionRangeInstructionData;
};
declare function parseResetPositionRangeInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedResetPositionRangeInstruction<TProgram, TAccountMetas>;

declare const SET_COLLECT_PROTOCOL_FEES_AUTHORITY_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getSetCollectProtocolFeesAuthorityDiscriminatorBytes(): ReadonlyUint8Array;
type SetCollectProtocolFeesAuthorityInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountWhirlpoolsConfig extends string | IAccountMeta<string> = string, TAccountCollectProtocolFeesAuthority extends string | IAccountMeta<string> = string, TAccountNewCollectProtocolFeesAuthority extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountWhirlpoolsConfig extends string ? WritableAccount<TAccountWhirlpoolsConfig> : TAccountWhirlpoolsConfig,
    TAccountCollectProtocolFeesAuthority extends string ? ReadonlySignerAccount<TAccountCollectProtocolFeesAuthority> & IAccountSignerMeta<TAccountCollectProtocolFeesAuthority> : TAccountCollectProtocolFeesAuthority,
    TAccountNewCollectProtocolFeesAuthority extends string ? ReadonlyAccount<TAccountNewCollectProtocolFeesAuthority> : TAccountNewCollectProtocolFeesAuthority,
    ...TRemainingAccounts
]>;
type SetCollectProtocolFeesAuthorityInstructionData = {
    discriminator: ReadonlyUint8Array;
};
type SetCollectProtocolFeesAuthorityInstructionDataArgs = {};
declare function getSetCollectProtocolFeesAuthorityInstructionDataEncoder(): Encoder<SetCollectProtocolFeesAuthorityInstructionDataArgs>;
declare function getSetCollectProtocolFeesAuthorityInstructionDataDecoder(): Decoder<SetCollectProtocolFeesAuthorityInstructionData>;
declare function getSetCollectProtocolFeesAuthorityInstructionDataCodec(): Codec<SetCollectProtocolFeesAuthorityInstructionDataArgs, SetCollectProtocolFeesAuthorityInstructionData>;
type SetCollectProtocolFeesAuthorityInput<TAccountWhirlpoolsConfig extends string = string, TAccountCollectProtocolFeesAuthority extends string = string, TAccountNewCollectProtocolFeesAuthority extends string = string> = {
    whirlpoolsConfig: Address<TAccountWhirlpoolsConfig>;
    collectProtocolFeesAuthority: TransactionSigner<TAccountCollectProtocolFeesAuthority>;
    newCollectProtocolFeesAuthority: Address<TAccountNewCollectProtocolFeesAuthority>;
};
declare function getSetCollectProtocolFeesAuthorityInstruction<TAccountWhirlpoolsConfig extends string, TAccountCollectProtocolFeesAuthority extends string, TAccountNewCollectProtocolFeesAuthority extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: SetCollectProtocolFeesAuthorityInput<TAccountWhirlpoolsConfig, TAccountCollectProtocolFeesAuthority, TAccountNewCollectProtocolFeesAuthority>, config?: {
    programAddress?: TProgramAddress;
}): SetCollectProtocolFeesAuthorityInstruction<TProgramAddress, TAccountWhirlpoolsConfig, TAccountCollectProtocolFeesAuthority, TAccountNewCollectProtocolFeesAuthority>;
type ParsedSetCollectProtocolFeesAuthorityInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        whirlpoolsConfig: TAccountMetas[0];
        collectProtocolFeesAuthority: TAccountMetas[1];
        newCollectProtocolFeesAuthority: TAccountMetas[2];
    };
    data: SetCollectProtocolFeesAuthorityInstructionData;
};
declare function parseSetCollectProtocolFeesAuthorityInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedSetCollectProtocolFeesAuthorityInstruction<TProgram, TAccountMetas>;

declare const SET_CONFIG_EXTENSION_AUTHORITY_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getSetConfigExtensionAuthorityDiscriminatorBytes(): ReadonlyUint8Array;
type SetConfigExtensionAuthorityInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountWhirlpoolsConfig extends string | IAccountMeta<string> = string, TAccountWhirlpoolsConfigExtension extends string | IAccountMeta<string> = string, TAccountConfigExtensionAuthority extends string | IAccountMeta<string> = string, TAccountNewConfigExtensionAuthority extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountWhirlpoolsConfig extends string ? ReadonlyAccount<TAccountWhirlpoolsConfig> : TAccountWhirlpoolsConfig,
    TAccountWhirlpoolsConfigExtension extends string ? WritableAccount<TAccountWhirlpoolsConfigExtension> : TAccountWhirlpoolsConfigExtension,
    TAccountConfigExtensionAuthority extends string ? ReadonlySignerAccount<TAccountConfigExtensionAuthority> & IAccountSignerMeta<TAccountConfigExtensionAuthority> : TAccountConfigExtensionAuthority,
    TAccountNewConfigExtensionAuthority extends string ? ReadonlyAccount<TAccountNewConfigExtensionAuthority> : TAccountNewConfigExtensionAuthority,
    ...TRemainingAccounts
]>;
type SetConfigExtensionAuthorityInstructionData = {
    discriminator: ReadonlyUint8Array;
};
type SetConfigExtensionAuthorityInstructionDataArgs = {};
declare function getSetConfigExtensionAuthorityInstructionDataEncoder(): Encoder<SetConfigExtensionAuthorityInstructionDataArgs>;
declare function getSetConfigExtensionAuthorityInstructionDataDecoder(): Decoder<SetConfigExtensionAuthorityInstructionData>;
declare function getSetConfigExtensionAuthorityInstructionDataCodec(): Codec<SetConfigExtensionAuthorityInstructionDataArgs, SetConfigExtensionAuthorityInstructionData>;
type SetConfigExtensionAuthorityInput<TAccountWhirlpoolsConfig extends string = string, TAccountWhirlpoolsConfigExtension extends string = string, TAccountConfigExtensionAuthority extends string = string, TAccountNewConfigExtensionAuthority extends string = string> = {
    whirlpoolsConfig: Address<TAccountWhirlpoolsConfig>;
    whirlpoolsConfigExtension: Address<TAccountWhirlpoolsConfigExtension>;
    configExtensionAuthority: TransactionSigner<TAccountConfigExtensionAuthority>;
    newConfigExtensionAuthority: Address<TAccountNewConfigExtensionAuthority>;
};
declare function getSetConfigExtensionAuthorityInstruction<TAccountWhirlpoolsConfig extends string, TAccountWhirlpoolsConfigExtension extends string, TAccountConfigExtensionAuthority extends string, TAccountNewConfigExtensionAuthority extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: SetConfigExtensionAuthorityInput<TAccountWhirlpoolsConfig, TAccountWhirlpoolsConfigExtension, TAccountConfigExtensionAuthority, TAccountNewConfigExtensionAuthority>, config?: {
    programAddress?: TProgramAddress;
}): SetConfigExtensionAuthorityInstruction<TProgramAddress, TAccountWhirlpoolsConfig, TAccountWhirlpoolsConfigExtension, TAccountConfigExtensionAuthority, TAccountNewConfigExtensionAuthority>;
type ParsedSetConfigExtensionAuthorityInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        whirlpoolsConfig: TAccountMetas[0];
        whirlpoolsConfigExtension: TAccountMetas[1];
        configExtensionAuthority: TAccountMetas[2];
        newConfigExtensionAuthority: TAccountMetas[3];
    };
    data: SetConfigExtensionAuthorityInstructionData;
};
declare function parseSetConfigExtensionAuthorityInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedSetConfigExtensionAuthorityInstruction<TProgram, TAccountMetas>;

declare const SET_DEFAULT_BASE_FEE_RATE_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getSetDefaultBaseFeeRateDiscriminatorBytes(): ReadonlyUint8Array;
type SetDefaultBaseFeeRateInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountWhirlpoolsConfig extends string | IAccountMeta<string> = string, TAccountAdaptiveFeeTier extends string | IAccountMeta<string> = string, TAccountFeeAuthority extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountWhirlpoolsConfig extends string ? ReadonlyAccount<TAccountWhirlpoolsConfig> : TAccountWhirlpoolsConfig,
    TAccountAdaptiveFeeTier extends string ? WritableAccount<TAccountAdaptiveFeeTier> : TAccountAdaptiveFeeTier,
    TAccountFeeAuthority extends string ? ReadonlySignerAccount<TAccountFeeAuthority> & IAccountSignerMeta<TAccountFeeAuthority> : TAccountFeeAuthority,
    ...TRemainingAccounts
]>;
type SetDefaultBaseFeeRateInstructionData = {
    discriminator: ReadonlyUint8Array;
    defaultBaseFeeRate: number;
};
type SetDefaultBaseFeeRateInstructionDataArgs = {
    defaultBaseFeeRate: number;
};
declare function getSetDefaultBaseFeeRateInstructionDataEncoder(): Encoder<SetDefaultBaseFeeRateInstructionDataArgs>;
declare function getSetDefaultBaseFeeRateInstructionDataDecoder(): Decoder<SetDefaultBaseFeeRateInstructionData>;
declare function getSetDefaultBaseFeeRateInstructionDataCodec(): Codec<SetDefaultBaseFeeRateInstructionDataArgs, SetDefaultBaseFeeRateInstructionData>;
type SetDefaultBaseFeeRateInput<TAccountWhirlpoolsConfig extends string = string, TAccountAdaptiveFeeTier extends string = string, TAccountFeeAuthority extends string = string> = {
    whirlpoolsConfig: Address<TAccountWhirlpoolsConfig>;
    adaptiveFeeTier: Address<TAccountAdaptiveFeeTier>;
    feeAuthority: TransactionSigner<TAccountFeeAuthority>;
    defaultBaseFeeRate: SetDefaultBaseFeeRateInstructionDataArgs['defaultBaseFeeRate'];
};
declare function getSetDefaultBaseFeeRateInstruction<TAccountWhirlpoolsConfig extends string, TAccountAdaptiveFeeTier extends string, TAccountFeeAuthority extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: SetDefaultBaseFeeRateInput<TAccountWhirlpoolsConfig, TAccountAdaptiveFeeTier, TAccountFeeAuthority>, config?: {
    programAddress?: TProgramAddress;
}): SetDefaultBaseFeeRateInstruction<TProgramAddress, TAccountWhirlpoolsConfig, TAccountAdaptiveFeeTier, TAccountFeeAuthority>;
type ParsedSetDefaultBaseFeeRateInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        whirlpoolsConfig: TAccountMetas[0];
        adaptiveFeeTier: TAccountMetas[1];
        feeAuthority: TAccountMetas[2];
    };
    data: SetDefaultBaseFeeRateInstructionData;
};
declare function parseSetDefaultBaseFeeRateInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedSetDefaultBaseFeeRateInstruction<TProgram, TAccountMetas>;

declare const SET_DEFAULT_FEE_RATE_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getSetDefaultFeeRateDiscriminatorBytes(): ReadonlyUint8Array;
type SetDefaultFeeRateInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountWhirlpoolsConfig extends string | IAccountMeta<string> = string, TAccountFeeTier extends string | IAccountMeta<string> = string, TAccountFeeAuthority extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountWhirlpoolsConfig extends string ? ReadonlyAccount<TAccountWhirlpoolsConfig> : TAccountWhirlpoolsConfig,
    TAccountFeeTier extends string ? WritableAccount<TAccountFeeTier> : TAccountFeeTier,
    TAccountFeeAuthority extends string ? ReadonlySignerAccount<TAccountFeeAuthority> & IAccountSignerMeta<TAccountFeeAuthority> : TAccountFeeAuthority,
    ...TRemainingAccounts
]>;
type SetDefaultFeeRateInstructionData = {
    discriminator: ReadonlyUint8Array;
    defaultFeeRate: number;
};
type SetDefaultFeeRateInstructionDataArgs = {
    defaultFeeRate: number;
};
declare function getSetDefaultFeeRateInstructionDataEncoder(): Encoder<SetDefaultFeeRateInstructionDataArgs>;
declare function getSetDefaultFeeRateInstructionDataDecoder(): Decoder<SetDefaultFeeRateInstructionData>;
declare function getSetDefaultFeeRateInstructionDataCodec(): Codec<SetDefaultFeeRateInstructionDataArgs, SetDefaultFeeRateInstructionData>;
type SetDefaultFeeRateInput<TAccountWhirlpoolsConfig extends string = string, TAccountFeeTier extends string = string, TAccountFeeAuthority extends string = string> = {
    whirlpoolsConfig: Address<TAccountWhirlpoolsConfig>;
    feeTier: Address<TAccountFeeTier>;
    feeAuthority: TransactionSigner<TAccountFeeAuthority>;
    defaultFeeRate: SetDefaultFeeRateInstructionDataArgs['defaultFeeRate'];
};
declare function getSetDefaultFeeRateInstruction<TAccountWhirlpoolsConfig extends string, TAccountFeeTier extends string, TAccountFeeAuthority extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: SetDefaultFeeRateInput<TAccountWhirlpoolsConfig, TAccountFeeTier, TAccountFeeAuthority>, config?: {
    programAddress?: TProgramAddress;
}): SetDefaultFeeRateInstruction<TProgramAddress, TAccountWhirlpoolsConfig, TAccountFeeTier, TAccountFeeAuthority>;
type ParsedSetDefaultFeeRateInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        whirlpoolsConfig: TAccountMetas[0];
        feeTier: TAccountMetas[1];
        feeAuthority: TAccountMetas[2];
    };
    data: SetDefaultFeeRateInstructionData;
};
declare function parseSetDefaultFeeRateInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedSetDefaultFeeRateInstruction<TProgram, TAccountMetas>;

declare const SET_DEFAULT_PROTOCOL_FEE_RATE_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getSetDefaultProtocolFeeRateDiscriminatorBytes(): ReadonlyUint8Array;
type SetDefaultProtocolFeeRateInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountWhirlpoolsConfig extends string | IAccountMeta<string> = string, TAccountFeeAuthority extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountWhirlpoolsConfig extends string ? WritableAccount<TAccountWhirlpoolsConfig> : TAccountWhirlpoolsConfig,
    TAccountFeeAuthority extends string ? ReadonlySignerAccount<TAccountFeeAuthority> & IAccountSignerMeta<TAccountFeeAuthority> : TAccountFeeAuthority,
    ...TRemainingAccounts
]>;
type SetDefaultProtocolFeeRateInstructionData = {
    discriminator: ReadonlyUint8Array;
    defaultProtocolFeeRate: number;
};
type SetDefaultProtocolFeeRateInstructionDataArgs = {
    defaultProtocolFeeRate: number;
};
declare function getSetDefaultProtocolFeeRateInstructionDataEncoder(): Encoder<SetDefaultProtocolFeeRateInstructionDataArgs>;
declare function getSetDefaultProtocolFeeRateInstructionDataDecoder(): Decoder<SetDefaultProtocolFeeRateInstructionData>;
declare function getSetDefaultProtocolFeeRateInstructionDataCodec(): Codec<SetDefaultProtocolFeeRateInstructionDataArgs, SetDefaultProtocolFeeRateInstructionData>;
type SetDefaultProtocolFeeRateInput<TAccountWhirlpoolsConfig extends string = string, TAccountFeeAuthority extends string = string> = {
    whirlpoolsConfig: Address<TAccountWhirlpoolsConfig>;
    feeAuthority: TransactionSigner<TAccountFeeAuthority>;
    defaultProtocolFeeRate: SetDefaultProtocolFeeRateInstructionDataArgs['defaultProtocolFeeRate'];
};
declare function getSetDefaultProtocolFeeRateInstruction<TAccountWhirlpoolsConfig extends string, TAccountFeeAuthority extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: SetDefaultProtocolFeeRateInput<TAccountWhirlpoolsConfig, TAccountFeeAuthority>, config?: {
    programAddress?: TProgramAddress;
}): SetDefaultProtocolFeeRateInstruction<TProgramAddress, TAccountWhirlpoolsConfig, TAccountFeeAuthority>;
type ParsedSetDefaultProtocolFeeRateInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        whirlpoolsConfig: TAccountMetas[0];
        feeAuthority: TAccountMetas[1];
    };
    data: SetDefaultProtocolFeeRateInstructionData;
};
declare function parseSetDefaultProtocolFeeRateInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedSetDefaultProtocolFeeRateInstruction<TProgram, TAccountMetas>;

declare const SET_DELEGATED_FEE_AUTHORITY_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getSetDelegatedFeeAuthorityDiscriminatorBytes(): ReadonlyUint8Array;
type SetDelegatedFeeAuthorityInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountWhirlpoolsConfig extends string | IAccountMeta<string> = string, TAccountAdaptiveFeeTier extends string | IAccountMeta<string> = string, TAccountFeeAuthority extends string | IAccountMeta<string> = string, TAccountNewDelegatedFeeAuthority extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountWhirlpoolsConfig extends string ? ReadonlyAccount<TAccountWhirlpoolsConfig> : TAccountWhirlpoolsConfig,
    TAccountAdaptiveFeeTier extends string ? WritableAccount<TAccountAdaptiveFeeTier> : TAccountAdaptiveFeeTier,
    TAccountFeeAuthority extends string ? ReadonlySignerAccount<TAccountFeeAuthority> & IAccountSignerMeta<TAccountFeeAuthority> : TAccountFeeAuthority,
    TAccountNewDelegatedFeeAuthority extends string ? ReadonlyAccount<TAccountNewDelegatedFeeAuthority> : TAccountNewDelegatedFeeAuthority,
    ...TRemainingAccounts
]>;
type SetDelegatedFeeAuthorityInstructionData = {
    discriminator: ReadonlyUint8Array;
};
type SetDelegatedFeeAuthorityInstructionDataArgs = {};
declare function getSetDelegatedFeeAuthorityInstructionDataEncoder(): Encoder<SetDelegatedFeeAuthorityInstructionDataArgs>;
declare function getSetDelegatedFeeAuthorityInstructionDataDecoder(): Decoder<SetDelegatedFeeAuthorityInstructionData>;
declare function getSetDelegatedFeeAuthorityInstructionDataCodec(): Codec<SetDelegatedFeeAuthorityInstructionDataArgs, SetDelegatedFeeAuthorityInstructionData>;
type SetDelegatedFeeAuthorityInput<TAccountWhirlpoolsConfig extends string = string, TAccountAdaptiveFeeTier extends string = string, TAccountFeeAuthority extends string = string, TAccountNewDelegatedFeeAuthority extends string = string> = {
    whirlpoolsConfig: Address<TAccountWhirlpoolsConfig>;
    adaptiveFeeTier: Address<TAccountAdaptiveFeeTier>;
    feeAuthority: TransactionSigner<TAccountFeeAuthority>;
    newDelegatedFeeAuthority: Address<TAccountNewDelegatedFeeAuthority>;
};
declare function getSetDelegatedFeeAuthorityInstruction<TAccountWhirlpoolsConfig extends string, TAccountAdaptiveFeeTier extends string, TAccountFeeAuthority extends string, TAccountNewDelegatedFeeAuthority extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: SetDelegatedFeeAuthorityInput<TAccountWhirlpoolsConfig, TAccountAdaptiveFeeTier, TAccountFeeAuthority, TAccountNewDelegatedFeeAuthority>, config?: {
    programAddress?: TProgramAddress;
}): SetDelegatedFeeAuthorityInstruction<TProgramAddress, TAccountWhirlpoolsConfig, TAccountAdaptiveFeeTier, TAccountFeeAuthority, TAccountNewDelegatedFeeAuthority>;
type ParsedSetDelegatedFeeAuthorityInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        whirlpoolsConfig: TAccountMetas[0];
        adaptiveFeeTier: TAccountMetas[1];
        feeAuthority: TAccountMetas[2];
        newDelegatedFeeAuthority: TAccountMetas[3];
    };
    data: SetDelegatedFeeAuthorityInstructionData;
};
declare function parseSetDelegatedFeeAuthorityInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedSetDelegatedFeeAuthorityInstruction<TProgram, TAccountMetas>;

declare const SET_FEE_AUTHORITY_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getSetFeeAuthorityDiscriminatorBytes(): ReadonlyUint8Array;
type SetFeeAuthorityInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountWhirlpoolsConfig extends string | IAccountMeta<string> = string, TAccountFeeAuthority extends string | IAccountMeta<string> = string, TAccountNewFeeAuthority extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountWhirlpoolsConfig extends string ? WritableAccount<TAccountWhirlpoolsConfig> : TAccountWhirlpoolsConfig,
    TAccountFeeAuthority extends string ? ReadonlySignerAccount<TAccountFeeAuthority> & IAccountSignerMeta<TAccountFeeAuthority> : TAccountFeeAuthority,
    TAccountNewFeeAuthority extends string ? ReadonlyAccount<TAccountNewFeeAuthority> : TAccountNewFeeAuthority,
    ...TRemainingAccounts
]>;
type SetFeeAuthorityInstructionData = {
    discriminator: ReadonlyUint8Array;
};
type SetFeeAuthorityInstructionDataArgs = {};
declare function getSetFeeAuthorityInstructionDataEncoder(): Encoder<SetFeeAuthorityInstructionDataArgs>;
declare function getSetFeeAuthorityInstructionDataDecoder(): Decoder<SetFeeAuthorityInstructionData>;
declare function getSetFeeAuthorityInstructionDataCodec(): Codec<SetFeeAuthorityInstructionDataArgs, SetFeeAuthorityInstructionData>;
type SetFeeAuthorityInput<TAccountWhirlpoolsConfig extends string = string, TAccountFeeAuthority extends string = string, TAccountNewFeeAuthority extends string = string> = {
    whirlpoolsConfig: Address<TAccountWhirlpoolsConfig>;
    feeAuthority: TransactionSigner<TAccountFeeAuthority>;
    newFeeAuthority: Address<TAccountNewFeeAuthority>;
};
declare function getSetFeeAuthorityInstruction<TAccountWhirlpoolsConfig extends string, TAccountFeeAuthority extends string, TAccountNewFeeAuthority extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: SetFeeAuthorityInput<TAccountWhirlpoolsConfig, TAccountFeeAuthority, TAccountNewFeeAuthority>, config?: {
    programAddress?: TProgramAddress;
}): SetFeeAuthorityInstruction<TProgramAddress, TAccountWhirlpoolsConfig, TAccountFeeAuthority, TAccountNewFeeAuthority>;
type ParsedSetFeeAuthorityInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        whirlpoolsConfig: TAccountMetas[0];
        feeAuthority: TAccountMetas[1];
        newFeeAuthority: TAccountMetas[2];
    };
    data: SetFeeAuthorityInstructionData;
};
declare function parseSetFeeAuthorityInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedSetFeeAuthorityInstruction<TProgram, TAccountMetas>;

declare const SET_FEE_RATE_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getSetFeeRateDiscriminatorBytes(): ReadonlyUint8Array;
type SetFeeRateInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountWhirlpoolsConfig extends string | IAccountMeta<string> = string, TAccountWhirlpool extends string | IAccountMeta<string> = string, TAccountFeeAuthority extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountWhirlpoolsConfig extends string ? ReadonlyAccount<TAccountWhirlpoolsConfig> : TAccountWhirlpoolsConfig,
    TAccountWhirlpool extends string ? WritableAccount<TAccountWhirlpool> : TAccountWhirlpool,
    TAccountFeeAuthority extends string ? ReadonlySignerAccount<TAccountFeeAuthority> & IAccountSignerMeta<TAccountFeeAuthority> : TAccountFeeAuthority,
    ...TRemainingAccounts
]>;
type SetFeeRateInstructionData = {
    discriminator: ReadonlyUint8Array;
    feeRate: number;
};
type SetFeeRateInstructionDataArgs = {
    feeRate: number;
};
declare function getSetFeeRateInstructionDataEncoder(): Encoder<SetFeeRateInstructionDataArgs>;
declare function getSetFeeRateInstructionDataDecoder(): Decoder<SetFeeRateInstructionData>;
declare function getSetFeeRateInstructionDataCodec(): Codec<SetFeeRateInstructionDataArgs, SetFeeRateInstructionData>;
type SetFeeRateInput<TAccountWhirlpoolsConfig extends string = string, TAccountWhirlpool extends string = string, TAccountFeeAuthority extends string = string> = {
    whirlpoolsConfig: Address<TAccountWhirlpoolsConfig>;
    whirlpool: Address<TAccountWhirlpool>;
    feeAuthority: TransactionSigner<TAccountFeeAuthority>;
    feeRate: SetFeeRateInstructionDataArgs['feeRate'];
};
declare function getSetFeeRateInstruction<TAccountWhirlpoolsConfig extends string, TAccountWhirlpool extends string, TAccountFeeAuthority extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: SetFeeRateInput<TAccountWhirlpoolsConfig, TAccountWhirlpool, TAccountFeeAuthority>, config?: {
    programAddress?: TProgramAddress;
}): SetFeeRateInstruction<TProgramAddress, TAccountWhirlpoolsConfig, TAccountWhirlpool, TAccountFeeAuthority>;
type ParsedSetFeeRateInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        whirlpoolsConfig: TAccountMetas[0];
        whirlpool: TAccountMetas[1];
        feeAuthority: TAccountMetas[2];
    };
    data: SetFeeRateInstructionData;
};
declare function parseSetFeeRateInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedSetFeeRateInstruction<TProgram, TAccountMetas>;

declare const SET_FEE_RATE_BY_DELEGATED_FEE_AUTHORITY_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getSetFeeRateByDelegatedFeeAuthorityDiscriminatorBytes(): ReadonlyUint8Array;
type SetFeeRateByDelegatedFeeAuthorityInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountWhirlpool extends string | IAccountMeta<string> = string, TAccountAdaptiveFeeTier extends string | IAccountMeta<string> = string, TAccountDelegatedFeeAuthority extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountWhirlpool extends string ? WritableAccount<TAccountWhirlpool> : TAccountWhirlpool,
    TAccountAdaptiveFeeTier extends string ? ReadonlyAccount<TAccountAdaptiveFeeTier> : TAccountAdaptiveFeeTier,
    TAccountDelegatedFeeAuthority extends string ? ReadonlySignerAccount<TAccountDelegatedFeeAuthority> & IAccountSignerMeta<TAccountDelegatedFeeAuthority> : TAccountDelegatedFeeAuthority,
    ...TRemainingAccounts
]>;
type SetFeeRateByDelegatedFeeAuthorityInstructionData = {
    discriminator: ReadonlyUint8Array;
    feeRate: number;
};
type SetFeeRateByDelegatedFeeAuthorityInstructionDataArgs = {
    feeRate: number;
};
declare function getSetFeeRateByDelegatedFeeAuthorityInstructionDataEncoder(): Encoder<SetFeeRateByDelegatedFeeAuthorityInstructionDataArgs>;
declare function getSetFeeRateByDelegatedFeeAuthorityInstructionDataDecoder(): Decoder<SetFeeRateByDelegatedFeeAuthorityInstructionData>;
declare function getSetFeeRateByDelegatedFeeAuthorityInstructionDataCodec(): Codec<SetFeeRateByDelegatedFeeAuthorityInstructionDataArgs, SetFeeRateByDelegatedFeeAuthorityInstructionData>;
type SetFeeRateByDelegatedFeeAuthorityInput<TAccountWhirlpool extends string = string, TAccountAdaptiveFeeTier extends string = string, TAccountDelegatedFeeAuthority extends string = string> = {
    whirlpool: Address<TAccountWhirlpool>;
    adaptiveFeeTier: Address<TAccountAdaptiveFeeTier>;
    delegatedFeeAuthority: TransactionSigner<TAccountDelegatedFeeAuthority>;
    feeRate: SetFeeRateByDelegatedFeeAuthorityInstructionDataArgs['feeRate'];
};
declare function getSetFeeRateByDelegatedFeeAuthorityInstruction<TAccountWhirlpool extends string, TAccountAdaptiveFeeTier extends string, TAccountDelegatedFeeAuthority extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: SetFeeRateByDelegatedFeeAuthorityInput<TAccountWhirlpool, TAccountAdaptiveFeeTier, TAccountDelegatedFeeAuthority>, config?: {
    programAddress?: TProgramAddress;
}): SetFeeRateByDelegatedFeeAuthorityInstruction<TProgramAddress, TAccountWhirlpool, TAccountAdaptiveFeeTier, TAccountDelegatedFeeAuthority>;
type ParsedSetFeeRateByDelegatedFeeAuthorityInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        whirlpool: TAccountMetas[0];
        adaptiveFeeTier: TAccountMetas[1];
        delegatedFeeAuthority: TAccountMetas[2];
    };
    data: SetFeeRateByDelegatedFeeAuthorityInstructionData;
};
declare function parseSetFeeRateByDelegatedFeeAuthorityInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedSetFeeRateByDelegatedFeeAuthorityInstruction<TProgram, TAccountMetas>;

declare const SET_INITIALIZE_POOL_AUTHORITY_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getSetInitializePoolAuthorityDiscriminatorBytes(): ReadonlyUint8Array;
type SetInitializePoolAuthorityInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountWhirlpoolsConfig extends string | IAccountMeta<string> = string, TAccountAdaptiveFeeTier extends string | IAccountMeta<string> = string, TAccountFeeAuthority extends string | IAccountMeta<string> = string, TAccountNewInitializePoolAuthority extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountWhirlpoolsConfig extends string ? ReadonlyAccount<TAccountWhirlpoolsConfig> : TAccountWhirlpoolsConfig,
    TAccountAdaptiveFeeTier extends string ? WritableAccount<TAccountAdaptiveFeeTier> : TAccountAdaptiveFeeTier,
    TAccountFeeAuthority extends string ? ReadonlySignerAccount<TAccountFeeAuthority> & IAccountSignerMeta<TAccountFeeAuthority> : TAccountFeeAuthority,
    TAccountNewInitializePoolAuthority extends string ? ReadonlyAccount<TAccountNewInitializePoolAuthority> : TAccountNewInitializePoolAuthority,
    ...TRemainingAccounts
]>;
type SetInitializePoolAuthorityInstructionData = {
    discriminator: ReadonlyUint8Array;
};
type SetInitializePoolAuthorityInstructionDataArgs = {};
declare function getSetInitializePoolAuthorityInstructionDataEncoder(): Encoder<SetInitializePoolAuthorityInstructionDataArgs>;
declare function getSetInitializePoolAuthorityInstructionDataDecoder(): Decoder<SetInitializePoolAuthorityInstructionData>;
declare function getSetInitializePoolAuthorityInstructionDataCodec(): Codec<SetInitializePoolAuthorityInstructionDataArgs, SetInitializePoolAuthorityInstructionData>;
type SetInitializePoolAuthorityInput<TAccountWhirlpoolsConfig extends string = string, TAccountAdaptiveFeeTier extends string = string, TAccountFeeAuthority extends string = string, TAccountNewInitializePoolAuthority extends string = string> = {
    whirlpoolsConfig: Address<TAccountWhirlpoolsConfig>;
    adaptiveFeeTier: Address<TAccountAdaptiveFeeTier>;
    feeAuthority: TransactionSigner<TAccountFeeAuthority>;
    newInitializePoolAuthority: Address<TAccountNewInitializePoolAuthority>;
};
declare function getSetInitializePoolAuthorityInstruction<TAccountWhirlpoolsConfig extends string, TAccountAdaptiveFeeTier extends string, TAccountFeeAuthority extends string, TAccountNewInitializePoolAuthority extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: SetInitializePoolAuthorityInput<TAccountWhirlpoolsConfig, TAccountAdaptiveFeeTier, TAccountFeeAuthority, TAccountNewInitializePoolAuthority>, config?: {
    programAddress?: TProgramAddress;
}): SetInitializePoolAuthorityInstruction<TProgramAddress, TAccountWhirlpoolsConfig, TAccountAdaptiveFeeTier, TAccountFeeAuthority, TAccountNewInitializePoolAuthority>;
type ParsedSetInitializePoolAuthorityInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        whirlpoolsConfig: TAccountMetas[0];
        adaptiveFeeTier: TAccountMetas[1];
        feeAuthority: TAccountMetas[2];
        newInitializePoolAuthority: TAccountMetas[3];
    };
    data: SetInitializePoolAuthorityInstructionData;
};
declare function parseSetInitializePoolAuthorityInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedSetInitializePoolAuthorityInstruction<TProgram, TAccountMetas>;

declare const SET_PRESET_ADAPTIVE_FEE_CONSTANTS_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getSetPresetAdaptiveFeeConstantsDiscriminatorBytes(): ReadonlyUint8Array;
type SetPresetAdaptiveFeeConstantsInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountWhirlpoolsConfig extends string | IAccountMeta<string> = string, TAccountAdaptiveFeeTier extends string | IAccountMeta<string> = string, TAccountFeeAuthority extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountWhirlpoolsConfig extends string ? ReadonlyAccount<TAccountWhirlpoolsConfig> : TAccountWhirlpoolsConfig,
    TAccountAdaptiveFeeTier extends string ? WritableAccount<TAccountAdaptiveFeeTier> : TAccountAdaptiveFeeTier,
    TAccountFeeAuthority extends string ? ReadonlySignerAccount<TAccountFeeAuthority> & IAccountSignerMeta<TAccountFeeAuthority> : TAccountFeeAuthority,
    ...TRemainingAccounts
]>;
type SetPresetAdaptiveFeeConstantsInstructionData = {
    discriminator: ReadonlyUint8Array;
    filterPeriod: number;
    decayPeriod: number;
    reductionFactor: number;
    adaptiveFeeControlFactor: number;
    maxVolatilityAccumulator: number;
    tickGroupSize: number;
    majorSwapThresholdTicks: number;
};
type SetPresetAdaptiveFeeConstantsInstructionDataArgs = {
    filterPeriod: number;
    decayPeriod: number;
    reductionFactor: number;
    adaptiveFeeControlFactor: number;
    maxVolatilityAccumulator: number;
    tickGroupSize: number;
    majorSwapThresholdTicks: number;
};
declare function getSetPresetAdaptiveFeeConstantsInstructionDataEncoder(): Encoder<SetPresetAdaptiveFeeConstantsInstructionDataArgs>;
declare function getSetPresetAdaptiveFeeConstantsInstructionDataDecoder(): Decoder<SetPresetAdaptiveFeeConstantsInstructionData>;
declare function getSetPresetAdaptiveFeeConstantsInstructionDataCodec(): Codec<SetPresetAdaptiveFeeConstantsInstructionDataArgs, SetPresetAdaptiveFeeConstantsInstructionData>;
type SetPresetAdaptiveFeeConstantsInput<TAccountWhirlpoolsConfig extends string = string, TAccountAdaptiveFeeTier extends string = string, TAccountFeeAuthority extends string = string> = {
    whirlpoolsConfig: Address<TAccountWhirlpoolsConfig>;
    adaptiveFeeTier: Address<TAccountAdaptiveFeeTier>;
    feeAuthority: TransactionSigner<TAccountFeeAuthority>;
    filterPeriod: SetPresetAdaptiveFeeConstantsInstructionDataArgs['filterPeriod'];
    decayPeriod: SetPresetAdaptiveFeeConstantsInstructionDataArgs['decayPeriod'];
    reductionFactor: SetPresetAdaptiveFeeConstantsInstructionDataArgs['reductionFactor'];
    adaptiveFeeControlFactor: SetPresetAdaptiveFeeConstantsInstructionDataArgs['adaptiveFeeControlFactor'];
    maxVolatilityAccumulator: SetPresetAdaptiveFeeConstantsInstructionDataArgs['maxVolatilityAccumulator'];
    tickGroupSize: SetPresetAdaptiveFeeConstantsInstructionDataArgs['tickGroupSize'];
    majorSwapThresholdTicks: SetPresetAdaptiveFeeConstantsInstructionDataArgs['majorSwapThresholdTicks'];
};
declare function getSetPresetAdaptiveFeeConstantsInstruction<TAccountWhirlpoolsConfig extends string, TAccountAdaptiveFeeTier extends string, TAccountFeeAuthority extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: SetPresetAdaptiveFeeConstantsInput<TAccountWhirlpoolsConfig, TAccountAdaptiveFeeTier, TAccountFeeAuthority>, config?: {
    programAddress?: TProgramAddress;
}): SetPresetAdaptiveFeeConstantsInstruction<TProgramAddress, TAccountWhirlpoolsConfig, TAccountAdaptiveFeeTier, TAccountFeeAuthority>;
type ParsedSetPresetAdaptiveFeeConstantsInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        whirlpoolsConfig: TAccountMetas[0];
        adaptiveFeeTier: TAccountMetas[1];
        feeAuthority: TAccountMetas[2];
    };
    data: SetPresetAdaptiveFeeConstantsInstructionData;
};
declare function parseSetPresetAdaptiveFeeConstantsInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedSetPresetAdaptiveFeeConstantsInstruction<TProgram, TAccountMetas>;

declare const SET_PROTOCOL_FEE_RATE_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getSetProtocolFeeRateDiscriminatorBytes(): ReadonlyUint8Array;
type SetProtocolFeeRateInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountWhirlpoolsConfig extends string | IAccountMeta<string> = string, TAccountWhirlpool extends string | IAccountMeta<string> = string, TAccountFeeAuthority extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountWhirlpoolsConfig extends string ? ReadonlyAccount<TAccountWhirlpoolsConfig> : TAccountWhirlpoolsConfig,
    TAccountWhirlpool extends string ? WritableAccount<TAccountWhirlpool> : TAccountWhirlpool,
    TAccountFeeAuthority extends string ? ReadonlySignerAccount<TAccountFeeAuthority> & IAccountSignerMeta<TAccountFeeAuthority> : TAccountFeeAuthority,
    ...TRemainingAccounts
]>;
type SetProtocolFeeRateInstructionData = {
    discriminator: ReadonlyUint8Array;
    protocolFeeRate: number;
};
type SetProtocolFeeRateInstructionDataArgs = {
    protocolFeeRate: number;
};
declare function getSetProtocolFeeRateInstructionDataEncoder(): Encoder<SetProtocolFeeRateInstructionDataArgs>;
declare function getSetProtocolFeeRateInstructionDataDecoder(): Decoder<SetProtocolFeeRateInstructionData>;
declare function getSetProtocolFeeRateInstructionDataCodec(): Codec<SetProtocolFeeRateInstructionDataArgs, SetProtocolFeeRateInstructionData>;
type SetProtocolFeeRateInput<TAccountWhirlpoolsConfig extends string = string, TAccountWhirlpool extends string = string, TAccountFeeAuthority extends string = string> = {
    whirlpoolsConfig: Address<TAccountWhirlpoolsConfig>;
    whirlpool: Address<TAccountWhirlpool>;
    feeAuthority: TransactionSigner<TAccountFeeAuthority>;
    protocolFeeRate: SetProtocolFeeRateInstructionDataArgs['protocolFeeRate'];
};
declare function getSetProtocolFeeRateInstruction<TAccountWhirlpoolsConfig extends string, TAccountWhirlpool extends string, TAccountFeeAuthority extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: SetProtocolFeeRateInput<TAccountWhirlpoolsConfig, TAccountWhirlpool, TAccountFeeAuthority>, config?: {
    programAddress?: TProgramAddress;
}): SetProtocolFeeRateInstruction<TProgramAddress, TAccountWhirlpoolsConfig, TAccountWhirlpool, TAccountFeeAuthority>;
type ParsedSetProtocolFeeRateInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        whirlpoolsConfig: TAccountMetas[0];
        whirlpool: TAccountMetas[1];
        feeAuthority: TAccountMetas[2];
    };
    data: SetProtocolFeeRateInstructionData;
};
declare function parseSetProtocolFeeRateInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedSetProtocolFeeRateInstruction<TProgram, TAccountMetas>;

declare const SET_REWARD_AUTHORITY_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getSetRewardAuthorityDiscriminatorBytes(): ReadonlyUint8Array;
type SetRewardAuthorityInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountWhirlpool extends string | IAccountMeta<string> = string, TAccountRewardAuthority extends string | IAccountMeta<string> = string, TAccountNewRewardAuthority extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountWhirlpool extends string ? WritableAccount<TAccountWhirlpool> : TAccountWhirlpool,
    TAccountRewardAuthority extends string ? ReadonlySignerAccount<TAccountRewardAuthority> & IAccountSignerMeta<TAccountRewardAuthority> : TAccountRewardAuthority,
    TAccountNewRewardAuthority extends string ? ReadonlyAccount<TAccountNewRewardAuthority> : TAccountNewRewardAuthority,
    ...TRemainingAccounts
]>;
type SetRewardAuthorityInstructionData = {
    discriminator: ReadonlyUint8Array;
    rewardIndex: number;
};
type SetRewardAuthorityInstructionDataArgs = {
    rewardIndex: number;
};
declare function getSetRewardAuthorityInstructionDataEncoder(): Encoder<SetRewardAuthorityInstructionDataArgs>;
declare function getSetRewardAuthorityInstructionDataDecoder(): Decoder<SetRewardAuthorityInstructionData>;
declare function getSetRewardAuthorityInstructionDataCodec(): Codec<SetRewardAuthorityInstructionDataArgs, SetRewardAuthorityInstructionData>;
type SetRewardAuthorityInput<TAccountWhirlpool extends string = string, TAccountRewardAuthority extends string = string, TAccountNewRewardAuthority extends string = string> = {
    whirlpool: Address<TAccountWhirlpool>;
    rewardAuthority: TransactionSigner<TAccountRewardAuthority>;
    newRewardAuthority: Address<TAccountNewRewardAuthority>;
    rewardIndex: SetRewardAuthorityInstructionDataArgs['rewardIndex'];
};
declare function getSetRewardAuthorityInstruction<TAccountWhirlpool extends string, TAccountRewardAuthority extends string, TAccountNewRewardAuthority extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: SetRewardAuthorityInput<TAccountWhirlpool, TAccountRewardAuthority, TAccountNewRewardAuthority>, config?: {
    programAddress?: TProgramAddress;
}): SetRewardAuthorityInstruction<TProgramAddress, TAccountWhirlpool, TAccountRewardAuthority, TAccountNewRewardAuthority>;
type ParsedSetRewardAuthorityInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        whirlpool: TAccountMetas[0];
        rewardAuthority: TAccountMetas[1];
        newRewardAuthority: TAccountMetas[2];
    };
    data: SetRewardAuthorityInstructionData;
};
declare function parseSetRewardAuthorityInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedSetRewardAuthorityInstruction<TProgram, TAccountMetas>;

declare const SET_REWARD_AUTHORITY_BY_SUPER_AUTHORITY_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getSetRewardAuthorityBySuperAuthorityDiscriminatorBytes(): ReadonlyUint8Array;
type SetRewardAuthorityBySuperAuthorityInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountWhirlpoolsConfig extends string | IAccountMeta<string> = string, TAccountWhirlpool extends string | IAccountMeta<string> = string, TAccountRewardEmissionsSuperAuthority extends string | IAccountMeta<string> = string, TAccountNewRewardAuthority extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountWhirlpoolsConfig extends string ? ReadonlyAccount<TAccountWhirlpoolsConfig> : TAccountWhirlpoolsConfig,
    TAccountWhirlpool extends string ? WritableAccount<TAccountWhirlpool> : TAccountWhirlpool,
    TAccountRewardEmissionsSuperAuthority extends string ? ReadonlySignerAccount<TAccountRewardEmissionsSuperAuthority> & IAccountSignerMeta<TAccountRewardEmissionsSuperAuthority> : TAccountRewardEmissionsSuperAuthority,
    TAccountNewRewardAuthority extends string ? ReadonlyAccount<TAccountNewRewardAuthority> : TAccountNewRewardAuthority,
    ...TRemainingAccounts
]>;
type SetRewardAuthorityBySuperAuthorityInstructionData = {
    discriminator: ReadonlyUint8Array;
    rewardIndex: number;
};
type SetRewardAuthorityBySuperAuthorityInstructionDataArgs = {
    rewardIndex: number;
};
declare function getSetRewardAuthorityBySuperAuthorityInstructionDataEncoder(): Encoder<SetRewardAuthorityBySuperAuthorityInstructionDataArgs>;
declare function getSetRewardAuthorityBySuperAuthorityInstructionDataDecoder(): Decoder<SetRewardAuthorityBySuperAuthorityInstructionData>;
declare function getSetRewardAuthorityBySuperAuthorityInstructionDataCodec(): Codec<SetRewardAuthorityBySuperAuthorityInstructionDataArgs, SetRewardAuthorityBySuperAuthorityInstructionData>;
type SetRewardAuthorityBySuperAuthorityInput<TAccountWhirlpoolsConfig extends string = string, TAccountWhirlpool extends string = string, TAccountRewardEmissionsSuperAuthority extends string = string, TAccountNewRewardAuthority extends string = string> = {
    whirlpoolsConfig: Address<TAccountWhirlpoolsConfig>;
    whirlpool: Address<TAccountWhirlpool>;
    rewardEmissionsSuperAuthority: TransactionSigner<TAccountRewardEmissionsSuperAuthority>;
    newRewardAuthority: Address<TAccountNewRewardAuthority>;
    rewardIndex: SetRewardAuthorityBySuperAuthorityInstructionDataArgs['rewardIndex'];
};
declare function getSetRewardAuthorityBySuperAuthorityInstruction<TAccountWhirlpoolsConfig extends string, TAccountWhirlpool extends string, TAccountRewardEmissionsSuperAuthority extends string, TAccountNewRewardAuthority extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: SetRewardAuthorityBySuperAuthorityInput<TAccountWhirlpoolsConfig, TAccountWhirlpool, TAccountRewardEmissionsSuperAuthority, TAccountNewRewardAuthority>, config?: {
    programAddress?: TProgramAddress;
}): SetRewardAuthorityBySuperAuthorityInstruction<TProgramAddress, TAccountWhirlpoolsConfig, TAccountWhirlpool, TAccountRewardEmissionsSuperAuthority, TAccountNewRewardAuthority>;
type ParsedSetRewardAuthorityBySuperAuthorityInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        whirlpoolsConfig: TAccountMetas[0];
        whirlpool: TAccountMetas[1];
        rewardEmissionsSuperAuthority: TAccountMetas[2];
        newRewardAuthority: TAccountMetas[3];
    };
    data: SetRewardAuthorityBySuperAuthorityInstructionData;
};
declare function parseSetRewardAuthorityBySuperAuthorityInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedSetRewardAuthorityBySuperAuthorityInstruction<TProgram, TAccountMetas>;

declare const SET_REWARD_EMISSIONS_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getSetRewardEmissionsDiscriminatorBytes(): ReadonlyUint8Array;
type SetRewardEmissionsInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountWhirlpool extends string | IAccountMeta<string> = string, TAccountRewardAuthority extends string | IAccountMeta<string> = string, TAccountRewardVault extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountWhirlpool extends string ? WritableAccount<TAccountWhirlpool> : TAccountWhirlpool,
    TAccountRewardAuthority extends string ? ReadonlySignerAccount<TAccountRewardAuthority> & IAccountSignerMeta<TAccountRewardAuthority> : TAccountRewardAuthority,
    TAccountRewardVault extends string ? ReadonlyAccount<TAccountRewardVault> : TAccountRewardVault,
    ...TRemainingAccounts
]>;
type SetRewardEmissionsInstructionData = {
    discriminator: ReadonlyUint8Array;
    rewardIndex: number;
    emissionsPerSecondX64: bigint;
};
type SetRewardEmissionsInstructionDataArgs = {
    rewardIndex: number;
    emissionsPerSecondX64: number | bigint;
};
declare function getSetRewardEmissionsInstructionDataEncoder(): Encoder<SetRewardEmissionsInstructionDataArgs>;
declare function getSetRewardEmissionsInstructionDataDecoder(): Decoder<SetRewardEmissionsInstructionData>;
declare function getSetRewardEmissionsInstructionDataCodec(): Codec<SetRewardEmissionsInstructionDataArgs, SetRewardEmissionsInstructionData>;
type SetRewardEmissionsInput<TAccountWhirlpool extends string = string, TAccountRewardAuthority extends string = string, TAccountRewardVault extends string = string> = {
    whirlpool: Address<TAccountWhirlpool>;
    rewardAuthority: TransactionSigner<TAccountRewardAuthority>;
    rewardVault: Address<TAccountRewardVault>;
    rewardIndex: SetRewardEmissionsInstructionDataArgs['rewardIndex'];
    emissionsPerSecondX64: SetRewardEmissionsInstructionDataArgs['emissionsPerSecondX64'];
};
declare function getSetRewardEmissionsInstruction<TAccountWhirlpool extends string, TAccountRewardAuthority extends string, TAccountRewardVault extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: SetRewardEmissionsInput<TAccountWhirlpool, TAccountRewardAuthority, TAccountRewardVault>, config?: {
    programAddress?: TProgramAddress;
}): SetRewardEmissionsInstruction<TProgramAddress, TAccountWhirlpool, TAccountRewardAuthority, TAccountRewardVault>;
type ParsedSetRewardEmissionsInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        whirlpool: TAccountMetas[0];
        rewardAuthority: TAccountMetas[1];
        rewardVault: TAccountMetas[2];
    };
    data: SetRewardEmissionsInstructionData;
};
declare function parseSetRewardEmissionsInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedSetRewardEmissionsInstruction<TProgram, TAccountMetas>;

declare const SET_REWARD_EMISSIONS_SUPER_AUTHORITY_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getSetRewardEmissionsSuperAuthorityDiscriminatorBytes(): ReadonlyUint8Array;
type SetRewardEmissionsSuperAuthorityInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountWhirlpoolsConfig extends string | IAccountMeta<string> = string, TAccountRewardEmissionsSuperAuthority extends string | IAccountMeta<string> = string, TAccountNewRewardEmissionsSuperAuthority extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountWhirlpoolsConfig extends string ? WritableAccount<TAccountWhirlpoolsConfig> : TAccountWhirlpoolsConfig,
    TAccountRewardEmissionsSuperAuthority extends string ? ReadonlySignerAccount<TAccountRewardEmissionsSuperAuthority> & IAccountSignerMeta<TAccountRewardEmissionsSuperAuthority> : TAccountRewardEmissionsSuperAuthority,
    TAccountNewRewardEmissionsSuperAuthority extends string ? ReadonlyAccount<TAccountNewRewardEmissionsSuperAuthority> : TAccountNewRewardEmissionsSuperAuthority,
    ...TRemainingAccounts
]>;
type SetRewardEmissionsSuperAuthorityInstructionData = {
    discriminator: ReadonlyUint8Array;
};
type SetRewardEmissionsSuperAuthorityInstructionDataArgs = {};
declare function getSetRewardEmissionsSuperAuthorityInstructionDataEncoder(): Encoder<SetRewardEmissionsSuperAuthorityInstructionDataArgs>;
declare function getSetRewardEmissionsSuperAuthorityInstructionDataDecoder(): Decoder<SetRewardEmissionsSuperAuthorityInstructionData>;
declare function getSetRewardEmissionsSuperAuthorityInstructionDataCodec(): Codec<SetRewardEmissionsSuperAuthorityInstructionDataArgs, SetRewardEmissionsSuperAuthorityInstructionData>;
type SetRewardEmissionsSuperAuthorityInput<TAccountWhirlpoolsConfig extends string = string, TAccountRewardEmissionsSuperAuthority extends string = string, TAccountNewRewardEmissionsSuperAuthority extends string = string> = {
    whirlpoolsConfig: Address<TAccountWhirlpoolsConfig>;
    rewardEmissionsSuperAuthority: TransactionSigner<TAccountRewardEmissionsSuperAuthority>;
    newRewardEmissionsSuperAuthority: Address<TAccountNewRewardEmissionsSuperAuthority>;
};
declare function getSetRewardEmissionsSuperAuthorityInstruction<TAccountWhirlpoolsConfig extends string, TAccountRewardEmissionsSuperAuthority extends string, TAccountNewRewardEmissionsSuperAuthority extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: SetRewardEmissionsSuperAuthorityInput<TAccountWhirlpoolsConfig, TAccountRewardEmissionsSuperAuthority, TAccountNewRewardEmissionsSuperAuthority>, config?: {
    programAddress?: TProgramAddress;
}): SetRewardEmissionsSuperAuthorityInstruction<TProgramAddress, TAccountWhirlpoolsConfig, TAccountRewardEmissionsSuperAuthority, TAccountNewRewardEmissionsSuperAuthority>;
type ParsedSetRewardEmissionsSuperAuthorityInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        whirlpoolsConfig: TAccountMetas[0];
        rewardEmissionsSuperAuthority: TAccountMetas[1];
        newRewardEmissionsSuperAuthority: TAccountMetas[2];
    };
    data: SetRewardEmissionsSuperAuthorityInstructionData;
};
declare function parseSetRewardEmissionsSuperAuthorityInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedSetRewardEmissionsSuperAuthorityInstruction<TProgram, TAccountMetas>;

declare const SET_REWARD_EMISSIONS_V2_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getSetRewardEmissionsV2DiscriminatorBytes(): ReadonlyUint8Array;
type SetRewardEmissionsV2Instruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountWhirlpool extends string | IAccountMeta<string> = string, TAccountRewardAuthority extends string | IAccountMeta<string> = string, TAccountRewardVault extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountWhirlpool extends string ? WritableAccount<TAccountWhirlpool> : TAccountWhirlpool,
    TAccountRewardAuthority extends string ? ReadonlySignerAccount<TAccountRewardAuthority> & IAccountSignerMeta<TAccountRewardAuthority> : TAccountRewardAuthority,
    TAccountRewardVault extends string ? ReadonlyAccount<TAccountRewardVault> : TAccountRewardVault,
    ...TRemainingAccounts
]>;
type SetRewardEmissionsV2InstructionData = {
    discriminator: ReadonlyUint8Array;
    rewardIndex: number;
    emissionsPerSecondX64: bigint;
};
type SetRewardEmissionsV2InstructionDataArgs = {
    rewardIndex: number;
    emissionsPerSecondX64: number | bigint;
};
declare function getSetRewardEmissionsV2InstructionDataEncoder(): Encoder<SetRewardEmissionsV2InstructionDataArgs>;
declare function getSetRewardEmissionsV2InstructionDataDecoder(): Decoder<SetRewardEmissionsV2InstructionData>;
declare function getSetRewardEmissionsV2InstructionDataCodec(): Codec<SetRewardEmissionsV2InstructionDataArgs, SetRewardEmissionsV2InstructionData>;
type SetRewardEmissionsV2Input<TAccountWhirlpool extends string = string, TAccountRewardAuthority extends string = string, TAccountRewardVault extends string = string> = {
    whirlpool: Address<TAccountWhirlpool>;
    rewardAuthority: TransactionSigner<TAccountRewardAuthority>;
    rewardVault: Address<TAccountRewardVault>;
    rewardIndex: SetRewardEmissionsV2InstructionDataArgs['rewardIndex'];
    emissionsPerSecondX64: SetRewardEmissionsV2InstructionDataArgs['emissionsPerSecondX64'];
};
declare function getSetRewardEmissionsV2Instruction<TAccountWhirlpool extends string, TAccountRewardAuthority extends string, TAccountRewardVault extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: SetRewardEmissionsV2Input<TAccountWhirlpool, TAccountRewardAuthority, TAccountRewardVault>, config?: {
    programAddress?: TProgramAddress;
}): SetRewardEmissionsV2Instruction<TProgramAddress, TAccountWhirlpool, TAccountRewardAuthority, TAccountRewardVault>;
type ParsedSetRewardEmissionsV2Instruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        whirlpool: TAccountMetas[0];
        rewardAuthority: TAccountMetas[1];
        rewardVault: TAccountMetas[2];
    };
    data: SetRewardEmissionsV2InstructionData;
};
declare function parseSetRewardEmissionsV2Instruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedSetRewardEmissionsV2Instruction<TProgram, TAccountMetas>;

declare const SET_TOKEN_BADGE_AUTHORITY_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getSetTokenBadgeAuthorityDiscriminatorBytes(): ReadonlyUint8Array;
type SetTokenBadgeAuthorityInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountWhirlpoolsConfig extends string | IAccountMeta<string> = string, TAccountWhirlpoolsConfigExtension extends string | IAccountMeta<string> = string, TAccountConfigExtensionAuthority extends string | IAccountMeta<string> = string, TAccountNewTokenBadgeAuthority extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountWhirlpoolsConfig extends string ? ReadonlyAccount<TAccountWhirlpoolsConfig> : TAccountWhirlpoolsConfig,
    TAccountWhirlpoolsConfigExtension extends string ? WritableAccount<TAccountWhirlpoolsConfigExtension> : TAccountWhirlpoolsConfigExtension,
    TAccountConfigExtensionAuthority extends string ? ReadonlySignerAccount<TAccountConfigExtensionAuthority> & IAccountSignerMeta<TAccountConfigExtensionAuthority> : TAccountConfigExtensionAuthority,
    TAccountNewTokenBadgeAuthority extends string ? ReadonlyAccount<TAccountNewTokenBadgeAuthority> : TAccountNewTokenBadgeAuthority,
    ...TRemainingAccounts
]>;
type SetTokenBadgeAuthorityInstructionData = {
    discriminator: ReadonlyUint8Array;
};
type SetTokenBadgeAuthorityInstructionDataArgs = {};
declare function getSetTokenBadgeAuthorityInstructionDataEncoder(): Encoder<SetTokenBadgeAuthorityInstructionDataArgs>;
declare function getSetTokenBadgeAuthorityInstructionDataDecoder(): Decoder<SetTokenBadgeAuthorityInstructionData>;
declare function getSetTokenBadgeAuthorityInstructionDataCodec(): Codec<SetTokenBadgeAuthorityInstructionDataArgs, SetTokenBadgeAuthorityInstructionData>;
type SetTokenBadgeAuthorityInput<TAccountWhirlpoolsConfig extends string = string, TAccountWhirlpoolsConfigExtension extends string = string, TAccountConfigExtensionAuthority extends string = string, TAccountNewTokenBadgeAuthority extends string = string> = {
    whirlpoolsConfig: Address<TAccountWhirlpoolsConfig>;
    whirlpoolsConfigExtension: Address<TAccountWhirlpoolsConfigExtension>;
    configExtensionAuthority: TransactionSigner<TAccountConfigExtensionAuthority>;
    newTokenBadgeAuthority: Address<TAccountNewTokenBadgeAuthority>;
};
declare function getSetTokenBadgeAuthorityInstruction<TAccountWhirlpoolsConfig extends string, TAccountWhirlpoolsConfigExtension extends string, TAccountConfigExtensionAuthority extends string, TAccountNewTokenBadgeAuthority extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: SetTokenBadgeAuthorityInput<TAccountWhirlpoolsConfig, TAccountWhirlpoolsConfigExtension, TAccountConfigExtensionAuthority, TAccountNewTokenBadgeAuthority>, config?: {
    programAddress?: TProgramAddress;
}): SetTokenBadgeAuthorityInstruction<TProgramAddress, TAccountWhirlpoolsConfig, TAccountWhirlpoolsConfigExtension, TAccountConfigExtensionAuthority, TAccountNewTokenBadgeAuthority>;
type ParsedSetTokenBadgeAuthorityInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        whirlpoolsConfig: TAccountMetas[0];
        whirlpoolsConfigExtension: TAccountMetas[1];
        configExtensionAuthority: TAccountMetas[2];
        newTokenBadgeAuthority: TAccountMetas[3];
    };
    data: SetTokenBadgeAuthorityInstructionData;
};
declare function parseSetTokenBadgeAuthorityInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedSetTokenBadgeAuthorityInstruction<TProgram, TAccountMetas>;

declare const SWAP_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getSwapDiscriminatorBytes(): ReadonlyUint8Array;
type SwapInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountTokenProgram extends string | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA', TAccountTokenAuthority extends string | IAccountMeta<string> = string, TAccountWhirlpool extends string | IAccountMeta<string> = string, TAccountTokenOwnerAccountA extends string | IAccountMeta<string> = string, TAccountTokenVaultA extends string | IAccountMeta<string> = string, TAccountTokenOwnerAccountB extends string | IAccountMeta<string> = string, TAccountTokenVaultB extends string | IAccountMeta<string> = string, TAccountTickArray0 extends string | IAccountMeta<string> = string, TAccountTickArray1 extends string | IAccountMeta<string> = string, TAccountTickArray2 extends string | IAccountMeta<string> = string, TAccountOracle extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountTokenProgram extends string ? ReadonlyAccount<TAccountTokenProgram> : TAccountTokenProgram,
    TAccountTokenAuthority extends string ? ReadonlySignerAccount<TAccountTokenAuthority> & IAccountSignerMeta<TAccountTokenAuthority> : TAccountTokenAuthority,
    TAccountWhirlpool extends string ? WritableAccount<TAccountWhirlpool> : TAccountWhirlpool,
    TAccountTokenOwnerAccountA extends string ? WritableAccount<TAccountTokenOwnerAccountA> : TAccountTokenOwnerAccountA,
    TAccountTokenVaultA extends string ? WritableAccount<TAccountTokenVaultA> : TAccountTokenVaultA,
    TAccountTokenOwnerAccountB extends string ? WritableAccount<TAccountTokenOwnerAccountB> : TAccountTokenOwnerAccountB,
    TAccountTokenVaultB extends string ? WritableAccount<TAccountTokenVaultB> : TAccountTokenVaultB,
    TAccountTickArray0 extends string ? WritableAccount<TAccountTickArray0> : TAccountTickArray0,
    TAccountTickArray1 extends string ? WritableAccount<TAccountTickArray1> : TAccountTickArray1,
    TAccountTickArray2 extends string ? WritableAccount<TAccountTickArray2> : TAccountTickArray2,
    TAccountOracle extends string ? ReadonlyAccount<TAccountOracle> : TAccountOracle,
    ...TRemainingAccounts
]>;
type SwapInstructionData = {
    discriminator: ReadonlyUint8Array;
    amount: bigint;
    otherAmountThreshold: bigint;
    sqrtPriceLimit: bigint;
    amountSpecifiedIsInput: boolean;
    aToB: boolean;
};
type SwapInstructionDataArgs = {
    amount: number | bigint;
    otherAmountThreshold: number | bigint;
    sqrtPriceLimit: number | bigint;
    amountSpecifiedIsInput: boolean;
    aToB: boolean;
};
declare function getSwapInstructionDataEncoder(): Encoder<SwapInstructionDataArgs>;
declare function getSwapInstructionDataDecoder(): Decoder<SwapInstructionData>;
declare function getSwapInstructionDataCodec(): Codec<SwapInstructionDataArgs, SwapInstructionData>;
type SwapInput<TAccountTokenProgram extends string = string, TAccountTokenAuthority extends string = string, TAccountWhirlpool extends string = string, TAccountTokenOwnerAccountA extends string = string, TAccountTokenVaultA extends string = string, TAccountTokenOwnerAccountB extends string = string, TAccountTokenVaultB extends string = string, TAccountTickArray0 extends string = string, TAccountTickArray1 extends string = string, TAccountTickArray2 extends string = string, TAccountOracle extends string = string> = {
    tokenProgram?: Address<TAccountTokenProgram>;
    tokenAuthority: TransactionSigner<TAccountTokenAuthority>;
    whirlpool: Address<TAccountWhirlpool>;
    tokenOwnerAccountA: Address<TAccountTokenOwnerAccountA>;
    tokenVaultA: Address<TAccountTokenVaultA>;
    tokenOwnerAccountB: Address<TAccountTokenOwnerAccountB>;
    tokenVaultB: Address<TAccountTokenVaultB>;
    tickArray0: Address<TAccountTickArray0>;
    tickArray1: Address<TAccountTickArray1>;
    tickArray2: Address<TAccountTickArray2>;
    oracle: Address<TAccountOracle>;
    amount: SwapInstructionDataArgs['amount'];
    otherAmountThreshold: SwapInstructionDataArgs['otherAmountThreshold'];
    sqrtPriceLimit: SwapInstructionDataArgs['sqrtPriceLimit'];
    amountSpecifiedIsInput: SwapInstructionDataArgs['amountSpecifiedIsInput'];
    aToB: SwapInstructionDataArgs['aToB'];
};
declare function getSwapInstruction<TAccountTokenProgram extends string, TAccountTokenAuthority extends string, TAccountWhirlpool extends string, TAccountTokenOwnerAccountA extends string, TAccountTokenVaultA extends string, TAccountTokenOwnerAccountB extends string, TAccountTokenVaultB extends string, TAccountTickArray0 extends string, TAccountTickArray1 extends string, TAccountTickArray2 extends string, TAccountOracle extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: SwapInput<TAccountTokenProgram, TAccountTokenAuthority, TAccountWhirlpool, TAccountTokenOwnerAccountA, TAccountTokenVaultA, TAccountTokenOwnerAccountB, TAccountTokenVaultB, TAccountTickArray0, TAccountTickArray1, TAccountTickArray2, TAccountOracle>, config?: {
    programAddress?: TProgramAddress;
}): SwapInstruction<TProgramAddress, TAccountTokenProgram, TAccountTokenAuthority, TAccountWhirlpool, TAccountTokenOwnerAccountA, TAccountTokenVaultA, TAccountTokenOwnerAccountB, TAccountTokenVaultB, TAccountTickArray0, TAccountTickArray1, TAccountTickArray2, TAccountOracle>;
type ParsedSwapInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        tokenProgram: TAccountMetas[0];
        tokenAuthority: TAccountMetas[1];
        whirlpool: TAccountMetas[2];
        tokenOwnerAccountA: TAccountMetas[3];
        tokenVaultA: TAccountMetas[4];
        tokenOwnerAccountB: TAccountMetas[5];
        tokenVaultB: TAccountMetas[6];
        tickArray0: TAccountMetas[7];
        tickArray1: TAccountMetas[8];
        tickArray2: TAccountMetas[9];
        oracle: TAccountMetas[10];
    };
    data: SwapInstructionData;
};
declare function parseSwapInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedSwapInstruction<TProgram, TAccountMetas>;

declare const SWAP_V2_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getSwapV2DiscriminatorBytes(): ReadonlyUint8Array;
type SwapV2Instruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountTokenProgramA extends string | IAccountMeta<string> = string, TAccountTokenProgramB extends string | IAccountMeta<string> = string, TAccountMemoProgram extends string | IAccountMeta<string> = string, TAccountTokenAuthority extends string | IAccountMeta<string> = string, TAccountWhirlpool extends string | IAccountMeta<string> = string, TAccountTokenMintA extends string | IAccountMeta<string> = string, TAccountTokenMintB extends string | IAccountMeta<string> = string, TAccountTokenOwnerAccountA extends string | IAccountMeta<string> = string, TAccountTokenVaultA extends string | IAccountMeta<string> = string, TAccountTokenOwnerAccountB extends string | IAccountMeta<string> = string, TAccountTokenVaultB extends string | IAccountMeta<string> = string, TAccountTickArray0 extends string | IAccountMeta<string> = string, TAccountTickArray1 extends string | IAccountMeta<string> = string, TAccountTickArray2 extends string | IAccountMeta<string> = string, TAccountOracle extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountTokenProgramA extends string ? ReadonlyAccount<TAccountTokenProgramA> : TAccountTokenProgramA,
    TAccountTokenProgramB extends string ? ReadonlyAccount<TAccountTokenProgramB> : TAccountTokenProgramB,
    TAccountMemoProgram extends string ? ReadonlyAccount<TAccountMemoProgram> : TAccountMemoProgram,
    TAccountTokenAuthority extends string ? ReadonlySignerAccount<TAccountTokenAuthority> & IAccountSignerMeta<TAccountTokenAuthority> : TAccountTokenAuthority,
    TAccountWhirlpool extends string ? WritableAccount<TAccountWhirlpool> : TAccountWhirlpool,
    TAccountTokenMintA extends string ? ReadonlyAccount<TAccountTokenMintA> : TAccountTokenMintA,
    TAccountTokenMintB extends string ? ReadonlyAccount<TAccountTokenMintB> : TAccountTokenMintB,
    TAccountTokenOwnerAccountA extends string ? WritableAccount<TAccountTokenOwnerAccountA> : TAccountTokenOwnerAccountA,
    TAccountTokenVaultA extends string ? WritableAccount<TAccountTokenVaultA> : TAccountTokenVaultA,
    TAccountTokenOwnerAccountB extends string ? WritableAccount<TAccountTokenOwnerAccountB> : TAccountTokenOwnerAccountB,
    TAccountTokenVaultB extends string ? WritableAccount<TAccountTokenVaultB> : TAccountTokenVaultB,
    TAccountTickArray0 extends string ? WritableAccount<TAccountTickArray0> : TAccountTickArray0,
    TAccountTickArray1 extends string ? WritableAccount<TAccountTickArray1> : TAccountTickArray1,
    TAccountTickArray2 extends string ? WritableAccount<TAccountTickArray2> : TAccountTickArray2,
    TAccountOracle extends string ? WritableAccount<TAccountOracle> : TAccountOracle,
    ...TRemainingAccounts
]>;
type SwapV2InstructionData = {
    discriminator: ReadonlyUint8Array;
    amount: bigint;
    otherAmountThreshold: bigint;
    sqrtPriceLimit: bigint;
    amountSpecifiedIsInput: boolean;
    aToB: boolean;
    remainingAccountsInfo: Option<RemainingAccountsInfo>;
};
type SwapV2InstructionDataArgs = {
    amount: number | bigint;
    otherAmountThreshold: number | bigint;
    sqrtPriceLimit: number | bigint;
    amountSpecifiedIsInput: boolean;
    aToB: boolean;
    remainingAccountsInfo: OptionOrNullable<RemainingAccountsInfoArgs>;
};
declare function getSwapV2InstructionDataEncoder(): Encoder<SwapV2InstructionDataArgs>;
declare function getSwapV2InstructionDataDecoder(): Decoder<SwapV2InstructionData>;
declare function getSwapV2InstructionDataCodec(): Codec<SwapV2InstructionDataArgs, SwapV2InstructionData>;
type SwapV2Input<TAccountTokenProgramA extends string = string, TAccountTokenProgramB extends string = string, TAccountMemoProgram extends string = string, TAccountTokenAuthority extends string = string, TAccountWhirlpool extends string = string, TAccountTokenMintA extends string = string, TAccountTokenMintB extends string = string, TAccountTokenOwnerAccountA extends string = string, TAccountTokenVaultA extends string = string, TAccountTokenOwnerAccountB extends string = string, TAccountTokenVaultB extends string = string, TAccountTickArray0 extends string = string, TAccountTickArray1 extends string = string, TAccountTickArray2 extends string = string, TAccountOracle extends string = string> = {
    tokenProgramA: Address<TAccountTokenProgramA>;
    tokenProgramB: Address<TAccountTokenProgramB>;
    memoProgram: Address<TAccountMemoProgram>;
    tokenAuthority: TransactionSigner<TAccountTokenAuthority>;
    whirlpool: Address<TAccountWhirlpool>;
    tokenMintA: Address<TAccountTokenMintA>;
    tokenMintB: Address<TAccountTokenMintB>;
    tokenOwnerAccountA: Address<TAccountTokenOwnerAccountA>;
    tokenVaultA: Address<TAccountTokenVaultA>;
    tokenOwnerAccountB: Address<TAccountTokenOwnerAccountB>;
    tokenVaultB: Address<TAccountTokenVaultB>;
    tickArray0: Address<TAccountTickArray0>;
    tickArray1: Address<TAccountTickArray1>;
    tickArray2: Address<TAccountTickArray2>;
    oracle: Address<TAccountOracle>;
    amount: SwapV2InstructionDataArgs['amount'];
    otherAmountThreshold: SwapV2InstructionDataArgs['otherAmountThreshold'];
    sqrtPriceLimit: SwapV2InstructionDataArgs['sqrtPriceLimit'];
    amountSpecifiedIsInput: SwapV2InstructionDataArgs['amountSpecifiedIsInput'];
    aToB: SwapV2InstructionDataArgs['aToB'];
    remainingAccountsInfo: SwapV2InstructionDataArgs['remainingAccountsInfo'];
};
declare function getSwapV2Instruction<TAccountTokenProgramA extends string, TAccountTokenProgramB extends string, TAccountMemoProgram extends string, TAccountTokenAuthority extends string, TAccountWhirlpool extends string, TAccountTokenMintA extends string, TAccountTokenMintB extends string, TAccountTokenOwnerAccountA extends string, TAccountTokenVaultA extends string, TAccountTokenOwnerAccountB extends string, TAccountTokenVaultB extends string, TAccountTickArray0 extends string, TAccountTickArray1 extends string, TAccountTickArray2 extends string, TAccountOracle extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: SwapV2Input<TAccountTokenProgramA, TAccountTokenProgramB, TAccountMemoProgram, TAccountTokenAuthority, TAccountWhirlpool, TAccountTokenMintA, TAccountTokenMintB, TAccountTokenOwnerAccountA, TAccountTokenVaultA, TAccountTokenOwnerAccountB, TAccountTokenVaultB, TAccountTickArray0, TAccountTickArray1, TAccountTickArray2, TAccountOracle>, config?: {
    programAddress?: TProgramAddress;
}): SwapV2Instruction<TProgramAddress, TAccountTokenProgramA, TAccountTokenProgramB, TAccountMemoProgram, TAccountTokenAuthority, TAccountWhirlpool, TAccountTokenMintA, TAccountTokenMintB, TAccountTokenOwnerAccountA, TAccountTokenVaultA, TAccountTokenOwnerAccountB, TAccountTokenVaultB, TAccountTickArray0, TAccountTickArray1, TAccountTickArray2, TAccountOracle>;
type ParsedSwapV2Instruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        tokenProgramA: TAccountMetas[0];
        tokenProgramB: TAccountMetas[1];
        memoProgram: TAccountMetas[2];
        tokenAuthority: TAccountMetas[3];
        whirlpool: TAccountMetas[4];
        tokenMintA: TAccountMetas[5];
        tokenMintB: TAccountMetas[6];
        tokenOwnerAccountA: TAccountMetas[7];
        tokenVaultA: TAccountMetas[8];
        tokenOwnerAccountB: TAccountMetas[9];
        tokenVaultB: TAccountMetas[10];
        tickArray0: TAccountMetas[11];
        tickArray1: TAccountMetas[12];
        tickArray2: TAccountMetas[13];
        oracle: TAccountMetas[14];
    };
    data: SwapV2InstructionData;
};
declare function parseSwapV2Instruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedSwapV2Instruction<TProgram, TAccountMetas>;

declare const TRANSFER_LOCKED_POSITION_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getTransferLockedPositionDiscriminatorBytes(): ReadonlyUint8Array;
type TransferLockedPositionInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountPositionAuthority extends string | IAccountMeta<string> = string, TAccountReceiver extends string | IAccountMeta<string> = string, TAccountPosition extends string | IAccountMeta<string> = string, TAccountPositionMint extends string | IAccountMeta<string> = string, TAccountPositionTokenAccount extends string | IAccountMeta<string> = string, TAccountDestinationTokenAccount extends string | IAccountMeta<string> = string, TAccountLockConfig extends string | IAccountMeta<string> = string, TAccountToken2022Program extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountPositionAuthority extends string ? ReadonlySignerAccount<TAccountPositionAuthority> & IAccountSignerMeta<TAccountPositionAuthority> : TAccountPositionAuthority,
    TAccountReceiver extends string ? WritableAccount<TAccountReceiver> : TAccountReceiver,
    TAccountPosition extends string ? ReadonlyAccount<TAccountPosition> : TAccountPosition,
    TAccountPositionMint extends string ? ReadonlyAccount<TAccountPositionMint> : TAccountPositionMint,
    TAccountPositionTokenAccount extends string ? WritableAccount<TAccountPositionTokenAccount> : TAccountPositionTokenAccount,
    TAccountDestinationTokenAccount extends string ? WritableAccount<TAccountDestinationTokenAccount> : TAccountDestinationTokenAccount,
    TAccountLockConfig extends string ? WritableAccount<TAccountLockConfig> : TAccountLockConfig,
    TAccountToken2022Program extends string ? ReadonlyAccount<TAccountToken2022Program> : TAccountToken2022Program,
    ...TRemainingAccounts
]>;
type TransferLockedPositionInstructionData = {
    discriminator: ReadonlyUint8Array;
};
type TransferLockedPositionInstructionDataArgs = {};
declare function getTransferLockedPositionInstructionDataEncoder(): Encoder<TransferLockedPositionInstructionDataArgs>;
declare function getTransferLockedPositionInstructionDataDecoder(): Decoder<TransferLockedPositionInstructionData>;
declare function getTransferLockedPositionInstructionDataCodec(): Codec<TransferLockedPositionInstructionDataArgs, TransferLockedPositionInstructionData>;
type TransferLockedPositionInput<TAccountPositionAuthority extends string = string, TAccountReceiver extends string = string, TAccountPosition extends string = string, TAccountPositionMint extends string = string, TAccountPositionTokenAccount extends string = string, TAccountDestinationTokenAccount extends string = string, TAccountLockConfig extends string = string, TAccountToken2022Program extends string = string> = {
    positionAuthority: TransactionSigner<TAccountPositionAuthority>;
    receiver: Address<TAccountReceiver>;
    position: Address<TAccountPosition>;
    positionMint: Address<TAccountPositionMint>;
    positionTokenAccount: Address<TAccountPositionTokenAccount>;
    destinationTokenAccount: Address<TAccountDestinationTokenAccount>;
    lockConfig: Address<TAccountLockConfig>;
    token2022Program: Address<TAccountToken2022Program>;
};
declare function getTransferLockedPositionInstruction<TAccountPositionAuthority extends string, TAccountReceiver extends string, TAccountPosition extends string, TAccountPositionMint extends string, TAccountPositionTokenAccount extends string, TAccountDestinationTokenAccount extends string, TAccountLockConfig extends string, TAccountToken2022Program extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: TransferLockedPositionInput<TAccountPositionAuthority, TAccountReceiver, TAccountPosition, TAccountPositionMint, TAccountPositionTokenAccount, TAccountDestinationTokenAccount, TAccountLockConfig, TAccountToken2022Program>, config?: {
    programAddress?: TProgramAddress;
}): TransferLockedPositionInstruction<TProgramAddress, TAccountPositionAuthority, TAccountReceiver, TAccountPosition, TAccountPositionMint, TAccountPositionTokenAccount, TAccountDestinationTokenAccount, TAccountLockConfig, TAccountToken2022Program>;
type ParsedTransferLockedPositionInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        positionAuthority: TAccountMetas[0];
        receiver: TAccountMetas[1];
        position: TAccountMetas[2];
        positionMint: TAccountMetas[3];
        positionTokenAccount: TAccountMetas[4];
        destinationTokenAccount: TAccountMetas[5];
        lockConfig: TAccountMetas[6];
        token2022Program: TAccountMetas[7];
    };
    data: TransferLockedPositionInstructionData;
};
declare function parseTransferLockedPositionInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedTransferLockedPositionInstruction<TProgram, TAccountMetas>;

declare const TWO_HOP_SWAP_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getTwoHopSwapDiscriminatorBytes(): ReadonlyUint8Array;
type TwoHopSwapInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountTokenProgram extends string | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA', TAccountTokenAuthority extends string | IAccountMeta<string> = string, TAccountWhirlpoolOne extends string | IAccountMeta<string> = string, TAccountWhirlpoolTwo extends string | IAccountMeta<string> = string, TAccountTokenOwnerAccountOneA extends string | IAccountMeta<string> = string, TAccountTokenVaultOneA extends string | IAccountMeta<string> = string, TAccountTokenOwnerAccountOneB extends string | IAccountMeta<string> = string, TAccountTokenVaultOneB extends string | IAccountMeta<string> = string, TAccountTokenOwnerAccountTwoA extends string | IAccountMeta<string> = string, TAccountTokenVaultTwoA extends string | IAccountMeta<string> = string, TAccountTokenOwnerAccountTwoB extends string | IAccountMeta<string> = string, TAccountTokenVaultTwoB extends string | IAccountMeta<string> = string, TAccountTickArrayOne0 extends string | IAccountMeta<string> = string, TAccountTickArrayOne1 extends string | IAccountMeta<string> = string, TAccountTickArrayOne2 extends string | IAccountMeta<string> = string, TAccountTickArrayTwo0 extends string | IAccountMeta<string> = string, TAccountTickArrayTwo1 extends string | IAccountMeta<string> = string, TAccountTickArrayTwo2 extends string | IAccountMeta<string> = string, TAccountOracleOne extends string | IAccountMeta<string> = string, TAccountOracleTwo extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountTokenProgram extends string ? ReadonlyAccount<TAccountTokenProgram> : TAccountTokenProgram,
    TAccountTokenAuthority extends string ? ReadonlySignerAccount<TAccountTokenAuthority> & IAccountSignerMeta<TAccountTokenAuthority> : TAccountTokenAuthority,
    TAccountWhirlpoolOne extends string ? WritableAccount<TAccountWhirlpoolOne> : TAccountWhirlpoolOne,
    TAccountWhirlpoolTwo extends string ? WritableAccount<TAccountWhirlpoolTwo> : TAccountWhirlpoolTwo,
    TAccountTokenOwnerAccountOneA extends string ? WritableAccount<TAccountTokenOwnerAccountOneA> : TAccountTokenOwnerAccountOneA,
    TAccountTokenVaultOneA extends string ? WritableAccount<TAccountTokenVaultOneA> : TAccountTokenVaultOneA,
    TAccountTokenOwnerAccountOneB extends string ? WritableAccount<TAccountTokenOwnerAccountOneB> : TAccountTokenOwnerAccountOneB,
    TAccountTokenVaultOneB extends string ? WritableAccount<TAccountTokenVaultOneB> : TAccountTokenVaultOneB,
    TAccountTokenOwnerAccountTwoA extends string ? WritableAccount<TAccountTokenOwnerAccountTwoA> : TAccountTokenOwnerAccountTwoA,
    TAccountTokenVaultTwoA extends string ? WritableAccount<TAccountTokenVaultTwoA> : TAccountTokenVaultTwoA,
    TAccountTokenOwnerAccountTwoB extends string ? WritableAccount<TAccountTokenOwnerAccountTwoB> : TAccountTokenOwnerAccountTwoB,
    TAccountTokenVaultTwoB extends string ? WritableAccount<TAccountTokenVaultTwoB> : TAccountTokenVaultTwoB,
    TAccountTickArrayOne0 extends string ? WritableAccount<TAccountTickArrayOne0> : TAccountTickArrayOne0,
    TAccountTickArrayOne1 extends string ? WritableAccount<TAccountTickArrayOne1> : TAccountTickArrayOne1,
    TAccountTickArrayOne2 extends string ? WritableAccount<TAccountTickArrayOne2> : TAccountTickArrayOne2,
    TAccountTickArrayTwo0 extends string ? WritableAccount<TAccountTickArrayTwo0> : TAccountTickArrayTwo0,
    TAccountTickArrayTwo1 extends string ? WritableAccount<TAccountTickArrayTwo1> : TAccountTickArrayTwo1,
    TAccountTickArrayTwo2 extends string ? WritableAccount<TAccountTickArrayTwo2> : TAccountTickArrayTwo2,
    TAccountOracleOne extends string ? ReadonlyAccount<TAccountOracleOne> : TAccountOracleOne,
    TAccountOracleTwo extends string ? ReadonlyAccount<TAccountOracleTwo> : TAccountOracleTwo,
    ...TRemainingAccounts
]>;
type TwoHopSwapInstructionData = {
    discriminator: ReadonlyUint8Array;
    amount: bigint;
    otherAmountThreshold: bigint;
    amountSpecifiedIsInput: boolean;
    aToBOne: boolean;
    aToBTwo: boolean;
    sqrtPriceLimitOne: bigint;
    sqrtPriceLimitTwo: bigint;
};
type TwoHopSwapInstructionDataArgs = {
    amount: number | bigint;
    otherAmountThreshold: number | bigint;
    amountSpecifiedIsInput: boolean;
    aToBOne: boolean;
    aToBTwo: boolean;
    sqrtPriceLimitOne: number | bigint;
    sqrtPriceLimitTwo: number | bigint;
};
declare function getTwoHopSwapInstructionDataEncoder(): Encoder<TwoHopSwapInstructionDataArgs>;
declare function getTwoHopSwapInstructionDataDecoder(): Decoder<TwoHopSwapInstructionData>;
declare function getTwoHopSwapInstructionDataCodec(): Codec<TwoHopSwapInstructionDataArgs, TwoHopSwapInstructionData>;
type TwoHopSwapInput<TAccountTokenProgram extends string = string, TAccountTokenAuthority extends string = string, TAccountWhirlpoolOne extends string = string, TAccountWhirlpoolTwo extends string = string, TAccountTokenOwnerAccountOneA extends string = string, TAccountTokenVaultOneA extends string = string, TAccountTokenOwnerAccountOneB extends string = string, TAccountTokenVaultOneB extends string = string, TAccountTokenOwnerAccountTwoA extends string = string, TAccountTokenVaultTwoA extends string = string, TAccountTokenOwnerAccountTwoB extends string = string, TAccountTokenVaultTwoB extends string = string, TAccountTickArrayOne0 extends string = string, TAccountTickArrayOne1 extends string = string, TAccountTickArrayOne2 extends string = string, TAccountTickArrayTwo0 extends string = string, TAccountTickArrayTwo1 extends string = string, TAccountTickArrayTwo2 extends string = string, TAccountOracleOne extends string = string, TAccountOracleTwo extends string = string> = {
    tokenProgram?: Address<TAccountTokenProgram>;
    tokenAuthority: TransactionSigner<TAccountTokenAuthority>;
    whirlpoolOne: Address<TAccountWhirlpoolOne>;
    whirlpoolTwo: Address<TAccountWhirlpoolTwo>;
    tokenOwnerAccountOneA: Address<TAccountTokenOwnerAccountOneA>;
    tokenVaultOneA: Address<TAccountTokenVaultOneA>;
    tokenOwnerAccountOneB: Address<TAccountTokenOwnerAccountOneB>;
    tokenVaultOneB: Address<TAccountTokenVaultOneB>;
    tokenOwnerAccountTwoA: Address<TAccountTokenOwnerAccountTwoA>;
    tokenVaultTwoA: Address<TAccountTokenVaultTwoA>;
    tokenOwnerAccountTwoB: Address<TAccountTokenOwnerAccountTwoB>;
    tokenVaultTwoB: Address<TAccountTokenVaultTwoB>;
    tickArrayOne0: Address<TAccountTickArrayOne0>;
    tickArrayOne1: Address<TAccountTickArrayOne1>;
    tickArrayOne2: Address<TAccountTickArrayOne2>;
    tickArrayTwo0: Address<TAccountTickArrayTwo0>;
    tickArrayTwo1: Address<TAccountTickArrayTwo1>;
    tickArrayTwo2: Address<TAccountTickArrayTwo2>;
    oracleOne: Address<TAccountOracleOne>;
    oracleTwo: Address<TAccountOracleTwo>;
    amount: TwoHopSwapInstructionDataArgs['amount'];
    otherAmountThreshold: TwoHopSwapInstructionDataArgs['otherAmountThreshold'];
    amountSpecifiedIsInput: TwoHopSwapInstructionDataArgs['amountSpecifiedIsInput'];
    aToBOne: TwoHopSwapInstructionDataArgs['aToBOne'];
    aToBTwo: TwoHopSwapInstructionDataArgs['aToBTwo'];
    sqrtPriceLimitOne: TwoHopSwapInstructionDataArgs['sqrtPriceLimitOne'];
    sqrtPriceLimitTwo: TwoHopSwapInstructionDataArgs['sqrtPriceLimitTwo'];
};
declare function getTwoHopSwapInstruction<TAccountTokenProgram extends string, TAccountTokenAuthority extends string, TAccountWhirlpoolOne extends string, TAccountWhirlpoolTwo extends string, TAccountTokenOwnerAccountOneA extends string, TAccountTokenVaultOneA extends string, TAccountTokenOwnerAccountOneB extends string, TAccountTokenVaultOneB extends string, TAccountTokenOwnerAccountTwoA extends string, TAccountTokenVaultTwoA extends string, TAccountTokenOwnerAccountTwoB extends string, TAccountTokenVaultTwoB extends string, TAccountTickArrayOne0 extends string, TAccountTickArrayOne1 extends string, TAccountTickArrayOne2 extends string, TAccountTickArrayTwo0 extends string, TAccountTickArrayTwo1 extends string, TAccountTickArrayTwo2 extends string, TAccountOracleOne extends string, TAccountOracleTwo extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: TwoHopSwapInput<TAccountTokenProgram, TAccountTokenAuthority, TAccountWhirlpoolOne, TAccountWhirlpoolTwo, TAccountTokenOwnerAccountOneA, TAccountTokenVaultOneA, TAccountTokenOwnerAccountOneB, TAccountTokenVaultOneB, TAccountTokenOwnerAccountTwoA, TAccountTokenVaultTwoA, TAccountTokenOwnerAccountTwoB, TAccountTokenVaultTwoB, TAccountTickArrayOne0, TAccountTickArrayOne1, TAccountTickArrayOne2, TAccountTickArrayTwo0, TAccountTickArrayTwo1, TAccountTickArrayTwo2, TAccountOracleOne, TAccountOracleTwo>, config?: {
    programAddress?: TProgramAddress;
}): TwoHopSwapInstruction<TProgramAddress, TAccountTokenProgram, TAccountTokenAuthority, TAccountWhirlpoolOne, TAccountWhirlpoolTwo, TAccountTokenOwnerAccountOneA, TAccountTokenVaultOneA, TAccountTokenOwnerAccountOneB, TAccountTokenVaultOneB, TAccountTokenOwnerAccountTwoA, TAccountTokenVaultTwoA, TAccountTokenOwnerAccountTwoB, TAccountTokenVaultTwoB, TAccountTickArrayOne0, TAccountTickArrayOne1, TAccountTickArrayOne2, TAccountTickArrayTwo0, TAccountTickArrayTwo1, TAccountTickArrayTwo2, TAccountOracleOne, TAccountOracleTwo>;
type ParsedTwoHopSwapInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        tokenProgram: TAccountMetas[0];
        tokenAuthority: TAccountMetas[1];
        whirlpoolOne: TAccountMetas[2];
        whirlpoolTwo: TAccountMetas[3];
        tokenOwnerAccountOneA: TAccountMetas[4];
        tokenVaultOneA: TAccountMetas[5];
        tokenOwnerAccountOneB: TAccountMetas[6];
        tokenVaultOneB: TAccountMetas[7];
        tokenOwnerAccountTwoA: TAccountMetas[8];
        tokenVaultTwoA: TAccountMetas[9];
        tokenOwnerAccountTwoB: TAccountMetas[10];
        tokenVaultTwoB: TAccountMetas[11];
        tickArrayOne0: TAccountMetas[12];
        tickArrayOne1: TAccountMetas[13];
        tickArrayOne2: TAccountMetas[14];
        tickArrayTwo0: TAccountMetas[15];
        tickArrayTwo1: TAccountMetas[16];
        tickArrayTwo2: TAccountMetas[17];
        oracleOne: TAccountMetas[18];
        oracleTwo: TAccountMetas[19];
    };
    data: TwoHopSwapInstructionData;
};
declare function parseTwoHopSwapInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedTwoHopSwapInstruction<TProgram, TAccountMetas>;

declare const TWO_HOP_SWAP_V2_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getTwoHopSwapV2DiscriminatorBytes(): ReadonlyUint8Array;
type TwoHopSwapV2Instruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountWhirlpoolOne extends string | IAccountMeta<string> = string, TAccountWhirlpoolTwo extends string | IAccountMeta<string> = string, TAccountTokenMintInput extends string | IAccountMeta<string> = string, TAccountTokenMintIntermediate extends string | IAccountMeta<string> = string, TAccountTokenMintOutput extends string | IAccountMeta<string> = string, TAccountTokenProgramInput extends string | IAccountMeta<string> = string, TAccountTokenProgramIntermediate extends string | IAccountMeta<string> = string, TAccountTokenProgramOutput extends string | IAccountMeta<string> = string, TAccountTokenOwnerAccountInput extends string | IAccountMeta<string> = string, TAccountTokenVaultOneInput extends string | IAccountMeta<string> = string, TAccountTokenVaultOneIntermediate extends string | IAccountMeta<string> = string, TAccountTokenVaultTwoIntermediate extends string | IAccountMeta<string> = string, TAccountTokenVaultTwoOutput extends string | IAccountMeta<string> = string, TAccountTokenOwnerAccountOutput extends string | IAccountMeta<string> = string, TAccountTokenAuthority extends string | IAccountMeta<string> = string, TAccountTickArrayOne0 extends string | IAccountMeta<string> = string, TAccountTickArrayOne1 extends string | IAccountMeta<string> = string, TAccountTickArrayOne2 extends string | IAccountMeta<string> = string, TAccountTickArrayTwo0 extends string | IAccountMeta<string> = string, TAccountTickArrayTwo1 extends string | IAccountMeta<string> = string, TAccountTickArrayTwo2 extends string | IAccountMeta<string> = string, TAccountOracleOne extends string | IAccountMeta<string> = string, TAccountOracleTwo extends string | IAccountMeta<string> = string, TAccountMemoProgram extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountWhirlpoolOne extends string ? WritableAccount<TAccountWhirlpoolOne> : TAccountWhirlpoolOne,
    TAccountWhirlpoolTwo extends string ? WritableAccount<TAccountWhirlpoolTwo> : TAccountWhirlpoolTwo,
    TAccountTokenMintInput extends string ? ReadonlyAccount<TAccountTokenMintInput> : TAccountTokenMintInput,
    TAccountTokenMintIntermediate extends string ? ReadonlyAccount<TAccountTokenMintIntermediate> : TAccountTokenMintIntermediate,
    TAccountTokenMintOutput extends string ? ReadonlyAccount<TAccountTokenMintOutput> : TAccountTokenMintOutput,
    TAccountTokenProgramInput extends string ? ReadonlyAccount<TAccountTokenProgramInput> : TAccountTokenProgramInput,
    TAccountTokenProgramIntermediate extends string ? ReadonlyAccount<TAccountTokenProgramIntermediate> : TAccountTokenProgramIntermediate,
    TAccountTokenProgramOutput extends string ? ReadonlyAccount<TAccountTokenProgramOutput> : TAccountTokenProgramOutput,
    TAccountTokenOwnerAccountInput extends string ? WritableAccount<TAccountTokenOwnerAccountInput> : TAccountTokenOwnerAccountInput,
    TAccountTokenVaultOneInput extends string ? WritableAccount<TAccountTokenVaultOneInput> : TAccountTokenVaultOneInput,
    TAccountTokenVaultOneIntermediate extends string ? WritableAccount<TAccountTokenVaultOneIntermediate> : TAccountTokenVaultOneIntermediate,
    TAccountTokenVaultTwoIntermediate extends string ? WritableAccount<TAccountTokenVaultTwoIntermediate> : TAccountTokenVaultTwoIntermediate,
    TAccountTokenVaultTwoOutput extends string ? WritableAccount<TAccountTokenVaultTwoOutput> : TAccountTokenVaultTwoOutput,
    TAccountTokenOwnerAccountOutput extends string ? WritableAccount<TAccountTokenOwnerAccountOutput> : TAccountTokenOwnerAccountOutput,
    TAccountTokenAuthority extends string ? ReadonlySignerAccount<TAccountTokenAuthority> & IAccountSignerMeta<TAccountTokenAuthority> : TAccountTokenAuthority,
    TAccountTickArrayOne0 extends string ? WritableAccount<TAccountTickArrayOne0> : TAccountTickArrayOne0,
    TAccountTickArrayOne1 extends string ? WritableAccount<TAccountTickArrayOne1> : TAccountTickArrayOne1,
    TAccountTickArrayOne2 extends string ? WritableAccount<TAccountTickArrayOne2> : TAccountTickArrayOne2,
    TAccountTickArrayTwo0 extends string ? WritableAccount<TAccountTickArrayTwo0> : TAccountTickArrayTwo0,
    TAccountTickArrayTwo1 extends string ? WritableAccount<TAccountTickArrayTwo1> : TAccountTickArrayTwo1,
    TAccountTickArrayTwo2 extends string ? WritableAccount<TAccountTickArrayTwo2> : TAccountTickArrayTwo2,
    TAccountOracleOne extends string ? WritableAccount<TAccountOracleOne> : TAccountOracleOne,
    TAccountOracleTwo extends string ? WritableAccount<TAccountOracleTwo> : TAccountOracleTwo,
    TAccountMemoProgram extends string ? ReadonlyAccount<TAccountMemoProgram> : TAccountMemoProgram,
    ...TRemainingAccounts
]>;
type TwoHopSwapV2InstructionData = {
    discriminator: ReadonlyUint8Array;
    amount: bigint;
    otherAmountThreshold: bigint;
    amountSpecifiedIsInput: boolean;
    aToBOne: boolean;
    aToBTwo: boolean;
    sqrtPriceLimitOne: bigint;
    sqrtPriceLimitTwo: bigint;
    remainingAccountsInfo: Option<RemainingAccountsInfo>;
};
type TwoHopSwapV2InstructionDataArgs = {
    amount: number | bigint;
    otherAmountThreshold: number | bigint;
    amountSpecifiedIsInput: boolean;
    aToBOne: boolean;
    aToBTwo: boolean;
    sqrtPriceLimitOne: number | bigint;
    sqrtPriceLimitTwo: number | bigint;
    remainingAccountsInfo: OptionOrNullable<RemainingAccountsInfoArgs>;
};
declare function getTwoHopSwapV2InstructionDataEncoder(): Encoder<TwoHopSwapV2InstructionDataArgs>;
declare function getTwoHopSwapV2InstructionDataDecoder(): Decoder<TwoHopSwapV2InstructionData>;
declare function getTwoHopSwapV2InstructionDataCodec(): Codec<TwoHopSwapV2InstructionDataArgs, TwoHopSwapV2InstructionData>;
type TwoHopSwapV2Input<TAccountWhirlpoolOne extends string = string, TAccountWhirlpoolTwo extends string = string, TAccountTokenMintInput extends string = string, TAccountTokenMintIntermediate extends string = string, TAccountTokenMintOutput extends string = string, TAccountTokenProgramInput extends string = string, TAccountTokenProgramIntermediate extends string = string, TAccountTokenProgramOutput extends string = string, TAccountTokenOwnerAccountInput extends string = string, TAccountTokenVaultOneInput extends string = string, TAccountTokenVaultOneIntermediate extends string = string, TAccountTokenVaultTwoIntermediate extends string = string, TAccountTokenVaultTwoOutput extends string = string, TAccountTokenOwnerAccountOutput extends string = string, TAccountTokenAuthority extends string = string, TAccountTickArrayOne0 extends string = string, TAccountTickArrayOne1 extends string = string, TAccountTickArrayOne2 extends string = string, TAccountTickArrayTwo0 extends string = string, TAccountTickArrayTwo1 extends string = string, TAccountTickArrayTwo2 extends string = string, TAccountOracleOne extends string = string, TAccountOracleTwo extends string = string, TAccountMemoProgram extends string = string> = {
    whirlpoolOne: Address<TAccountWhirlpoolOne>;
    whirlpoolTwo: Address<TAccountWhirlpoolTwo>;
    tokenMintInput: Address<TAccountTokenMintInput>;
    tokenMintIntermediate: Address<TAccountTokenMintIntermediate>;
    tokenMintOutput: Address<TAccountTokenMintOutput>;
    tokenProgramInput: Address<TAccountTokenProgramInput>;
    tokenProgramIntermediate: Address<TAccountTokenProgramIntermediate>;
    tokenProgramOutput: Address<TAccountTokenProgramOutput>;
    tokenOwnerAccountInput: Address<TAccountTokenOwnerAccountInput>;
    tokenVaultOneInput: Address<TAccountTokenVaultOneInput>;
    tokenVaultOneIntermediate: Address<TAccountTokenVaultOneIntermediate>;
    tokenVaultTwoIntermediate: Address<TAccountTokenVaultTwoIntermediate>;
    tokenVaultTwoOutput: Address<TAccountTokenVaultTwoOutput>;
    tokenOwnerAccountOutput: Address<TAccountTokenOwnerAccountOutput>;
    tokenAuthority: TransactionSigner<TAccountTokenAuthority>;
    tickArrayOne0: Address<TAccountTickArrayOne0>;
    tickArrayOne1: Address<TAccountTickArrayOne1>;
    tickArrayOne2: Address<TAccountTickArrayOne2>;
    tickArrayTwo0: Address<TAccountTickArrayTwo0>;
    tickArrayTwo1: Address<TAccountTickArrayTwo1>;
    tickArrayTwo2: Address<TAccountTickArrayTwo2>;
    oracleOne: Address<TAccountOracleOne>;
    oracleTwo: Address<TAccountOracleTwo>;
    memoProgram: Address<TAccountMemoProgram>;
    amount: TwoHopSwapV2InstructionDataArgs['amount'];
    otherAmountThreshold: TwoHopSwapV2InstructionDataArgs['otherAmountThreshold'];
    amountSpecifiedIsInput: TwoHopSwapV2InstructionDataArgs['amountSpecifiedIsInput'];
    aToBOne: TwoHopSwapV2InstructionDataArgs['aToBOne'];
    aToBTwo: TwoHopSwapV2InstructionDataArgs['aToBTwo'];
    sqrtPriceLimitOne: TwoHopSwapV2InstructionDataArgs['sqrtPriceLimitOne'];
    sqrtPriceLimitTwo: TwoHopSwapV2InstructionDataArgs['sqrtPriceLimitTwo'];
    remainingAccountsInfo: TwoHopSwapV2InstructionDataArgs['remainingAccountsInfo'];
};
declare function getTwoHopSwapV2Instruction<TAccountWhirlpoolOne extends string, TAccountWhirlpoolTwo extends string, TAccountTokenMintInput extends string, TAccountTokenMintIntermediate extends string, TAccountTokenMintOutput extends string, TAccountTokenProgramInput extends string, TAccountTokenProgramIntermediate extends string, TAccountTokenProgramOutput extends string, TAccountTokenOwnerAccountInput extends string, TAccountTokenVaultOneInput extends string, TAccountTokenVaultOneIntermediate extends string, TAccountTokenVaultTwoIntermediate extends string, TAccountTokenVaultTwoOutput extends string, TAccountTokenOwnerAccountOutput extends string, TAccountTokenAuthority extends string, TAccountTickArrayOne0 extends string, TAccountTickArrayOne1 extends string, TAccountTickArrayOne2 extends string, TAccountTickArrayTwo0 extends string, TAccountTickArrayTwo1 extends string, TAccountTickArrayTwo2 extends string, TAccountOracleOne extends string, TAccountOracleTwo extends string, TAccountMemoProgram extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: TwoHopSwapV2Input<TAccountWhirlpoolOne, TAccountWhirlpoolTwo, TAccountTokenMintInput, TAccountTokenMintIntermediate, TAccountTokenMintOutput, TAccountTokenProgramInput, TAccountTokenProgramIntermediate, TAccountTokenProgramOutput, TAccountTokenOwnerAccountInput, TAccountTokenVaultOneInput, TAccountTokenVaultOneIntermediate, TAccountTokenVaultTwoIntermediate, TAccountTokenVaultTwoOutput, TAccountTokenOwnerAccountOutput, TAccountTokenAuthority, TAccountTickArrayOne0, TAccountTickArrayOne1, TAccountTickArrayOne2, TAccountTickArrayTwo0, TAccountTickArrayTwo1, TAccountTickArrayTwo2, TAccountOracleOne, TAccountOracleTwo, TAccountMemoProgram>, config?: {
    programAddress?: TProgramAddress;
}): TwoHopSwapV2Instruction<TProgramAddress, TAccountWhirlpoolOne, TAccountWhirlpoolTwo, TAccountTokenMintInput, TAccountTokenMintIntermediate, TAccountTokenMintOutput, TAccountTokenProgramInput, TAccountTokenProgramIntermediate, TAccountTokenProgramOutput, TAccountTokenOwnerAccountInput, TAccountTokenVaultOneInput, TAccountTokenVaultOneIntermediate, TAccountTokenVaultTwoIntermediate, TAccountTokenVaultTwoOutput, TAccountTokenOwnerAccountOutput, TAccountTokenAuthority, TAccountTickArrayOne0, TAccountTickArrayOne1, TAccountTickArrayOne2, TAccountTickArrayTwo0, TAccountTickArrayTwo1, TAccountTickArrayTwo2, TAccountOracleOne, TAccountOracleTwo, TAccountMemoProgram>;
type ParsedTwoHopSwapV2Instruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        whirlpoolOne: TAccountMetas[0];
        whirlpoolTwo: TAccountMetas[1];
        tokenMintInput: TAccountMetas[2];
        tokenMintIntermediate: TAccountMetas[3];
        tokenMintOutput: TAccountMetas[4];
        tokenProgramInput: TAccountMetas[5];
        tokenProgramIntermediate: TAccountMetas[6];
        tokenProgramOutput: TAccountMetas[7];
        tokenOwnerAccountInput: TAccountMetas[8];
        tokenVaultOneInput: TAccountMetas[9];
        tokenVaultOneIntermediate: TAccountMetas[10];
        tokenVaultTwoIntermediate: TAccountMetas[11];
        tokenVaultTwoOutput: TAccountMetas[12];
        tokenOwnerAccountOutput: TAccountMetas[13];
        tokenAuthority: TAccountMetas[14];
        tickArrayOne0: TAccountMetas[15];
        tickArrayOne1: TAccountMetas[16];
        tickArrayOne2: TAccountMetas[17];
        tickArrayTwo0: TAccountMetas[18];
        tickArrayTwo1: TAccountMetas[19];
        tickArrayTwo2: TAccountMetas[20];
        oracleOne: TAccountMetas[21];
        oracleTwo: TAccountMetas[22];
        memoProgram: TAccountMetas[23];
    };
    data: TwoHopSwapV2InstructionData;
};
declare function parseTwoHopSwapV2Instruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedTwoHopSwapV2Instruction<TProgram, TAccountMetas>;

declare const UPDATE_FEES_AND_REWARDS_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
declare function getUpdateFeesAndRewardsDiscriminatorBytes(): ReadonlyUint8Array;
type UpdateFeesAndRewardsInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountWhirlpool extends string | IAccountMeta<string> = string, TAccountPosition extends string | IAccountMeta<string> = string, TAccountTickArrayLower extends string | IAccountMeta<string> = string, TAccountTickArrayUpper extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountWhirlpool extends string ? WritableAccount<TAccountWhirlpool> : TAccountWhirlpool,
    TAccountPosition extends string ? WritableAccount<TAccountPosition> : TAccountPosition,
    TAccountTickArrayLower extends string ? ReadonlyAccount<TAccountTickArrayLower> : TAccountTickArrayLower,
    TAccountTickArrayUpper extends string ? ReadonlyAccount<TAccountTickArrayUpper> : TAccountTickArrayUpper,
    ...TRemainingAccounts
]>;
type UpdateFeesAndRewardsInstructionData = {
    discriminator: ReadonlyUint8Array;
};
type UpdateFeesAndRewardsInstructionDataArgs = {};
declare function getUpdateFeesAndRewardsInstructionDataEncoder(): Encoder<UpdateFeesAndRewardsInstructionDataArgs>;
declare function getUpdateFeesAndRewardsInstructionDataDecoder(): Decoder<UpdateFeesAndRewardsInstructionData>;
declare function getUpdateFeesAndRewardsInstructionDataCodec(): Codec<UpdateFeesAndRewardsInstructionDataArgs, UpdateFeesAndRewardsInstructionData>;
type UpdateFeesAndRewardsInput<TAccountWhirlpool extends string = string, TAccountPosition extends string = string, TAccountTickArrayLower extends string = string, TAccountTickArrayUpper extends string = string> = {
    whirlpool: Address<TAccountWhirlpool>;
    position: Address<TAccountPosition>;
    tickArrayLower: Address<TAccountTickArrayLower>;
    tickArrayUpper: Address<TAccountTickArrayUpper>;
};
declare function getUpdateFeesAndRewardsInstruction<TAccountWhirlpool extends string, TAccountPosition extends string, TAccountTickArrayLower extends string, TAccountTickArrayUpper extends string, TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS>(input: UpdateFeesAndRewardsInput<TAccountWhirlpool, TAccountPosition, TAccountTickArrayLower, TAccountTickArrayUpper>, config?: {
    programAddress?: TProgramAddress;
}): UpdateFeesAndRewardsInstruction<TProgramAddress, TAccountWhirlpool, TAccountPosition, TAccountTickArrayLower, TAccountTickArrayUpper>;
type ParsedUpdateFeesAndRewardsInstruction<TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        whirlpool: TAccountMetas[0];
        position: TAccountMetas[1];
        tickArrayLower: TAccountMetas[2];
        tickArrayUpper: TAccountMetas[3];
    };
    data: UpdateFeesAndRewardsInstructionData;
};
declare function parseUpdateFeesAndRewardsInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedUpdateFeesAndRewardsInstruction<TProgram, TAccountMetas>;

type AdaptiveFeeTierFilter = GetProgramAccountsMemcmpFilter & {
    readonly __kind: unique symbol;
};
declare function adaptiveFeeTierWhirlpoolsConfigFilter(address: Address): AdaptiveFeeTierFilter;
declare function adaptiveFeeTierFeeTierIndexFilter(feeTierIndex: number): AdaptiveFeeTierFilter;
declare function adaptiveFeeTierTickSpacingFilter(tickSpacing: number): AdaptiveFeeTierFilter;
declare function adaptiveFeeTierInitializePoolAuthorityFilter(address: Address): AdaptiveFeeTierFilter;
declare function adaptiveFeeTierDelegatedFeeAuthorityFilter(address: Address): AdaptiveFeeTierFilter;
declare function adaptiveFeeTierDefaultBaseFeeRateFilter(feeRate: number): AdaptiveFeeTierFilter;
declare function adaptiveFeeTierFilterPeriodFilter(filterPeriod: number): AdaptiveFeeTierFilter;
declare function adaptiveFeeTierDecayPeriodFilter(decayPeriod: number): AdaptiveFeeTierFilter;
declare function adaptiveFeeTierReductionFactorFilter(reductionFactor: number): AdaptiveFeeTierFilter;
declare function adaptiveFeeTierAdaptiveFeeControlFactorFilter(adaptiveFeeControlFactor: number): AdaptiveFeeTierFilter;
declare function adaptiveFeeTierMaxVolatilityFilter(maxVolatility: number): AdaptiveFeeTierFilter;
declare function adaptiveFeeTierTickGroupSizeFilter(tickGroupSize: number): AdaptiveFeeTierFilter;
declare function adaptiveFeeTierMajorSwapThresholdTicksFilter(majorSwapThresholdTicks: number): AdaptiveFeeTierFilter;
declare function fetchAllAdaptiveFeeTierWithFilter(rpc: Rpc<GetProgramAccountsApi>, ...filters: AdaptiveFeeTierFilter[]): Promise<Account<AdaptiveFeeTier>[]>;

type FeeTierFilter = GetProgramAccountsMemcmpFilter & {
    readonly __kind: unique symbol;
};
declare function feeTierWhirlpoolsConfigFilter(address: Address): FeeTierFilter;
declare function feeTierTickSpacingFilter(tickSpacing: number): FeeTierFilter;
declare function feeTierFeeRateFilter(defaultFeeRate: number): FeeTierFilter;
declare function fetchAllFeeTierWithFilter(rpc: Rpc<GetProgramAccountsApi>, ...filters: FeeTierFilter[]): Promise<Account<FeeTier>[]>;

type OracleFilter = GetProgramAccountsMemcmpFilter & {
    readonly __kind: unique symbol;
};
declare function oracleWhirlpoolFilter(address: Address): OracleFilter;
declare function oracleTradeEnableTimestampFilter(timestamp: number | bigint): OracleFilter;
declare function oracleFilterPeriodFilter(filterPeriod: number): OracleFilter;
declare function oracleDecayPeriodFilter(decayPeriod: number): OracleFilter;
declare function oracleReductionFactorFilter(reductionFactor: number): OracleFilter;
declare function oracleAdaptiveFeeControlFactorFilter(adaptiveFeeControlFactor: number): OracleFilter;
declare function oracleMaxVolatilityFilter(maxVolatility: number): OracleFilter;
declare function oracleTickGroupSizeFilter(tickGroupSize: number): OracleFilter;
declare function oracleMajorSwapThresholdTicksFilter(majorSwapThresholdTicks: number): OracleFilter;
declare function fetchAllOracleWithFilter(rpc: Rpc<GetProgramAccountsApi>, ...filters: OracleFilter[]): Promise<Account<Oracle>[]>;

type PositionFilter = GetProgramAccountsMemcmpFilter & {
    readonly __kind: unique symbol;
};
declare function positionWhirlpoolFilter(address: Address): PositionFilter;
declare function positionMintFilter(address: Address): PositionFilter;
declare function positionTickLowerIndexFilter(tickLowerIndex: number): PositionFilter;
declare function positionTickUpperIndexFilter(tickUpperIndex: number): PositionFilter;
declare function fetchAllPositionWithFilter(rpc: Rpc<GetProgramAccountsApi>, ...filters: PositionFilter[]): Promise<Account<Position>[]>;

type PositionBundleFilter = GetProgramAccountsMemcmpFilter & {
    readonly __kind: unique symbol;
};
declare function positionBundleMintFilter(address: Address): PositionBundleFilter;
declare function fetchAllPositionBundleWithFilter(rpc: Rpc<GetProgramAccountsApi>, ...filters: PositionBundleFilter[]): Promise<Account<PositionBundle>[]>;

type TickArrayFilter = GetProgramAccountsMemcmpFilter & {
    readonly __kind: unique symbol;
};
declare function tickArrayStartTickIndexFilter(startTickIndex: number): TickArrayFilter;
declare function tickArrayWhirlpoolFilter(address: Address): TickArrayFilter;
declare function fetchAllTickArrayWithFilter(rpc: Rpc<GetProgramAccountsApi>, ...filters: TickArrayFilter[]): Promise<Account<TickArray>[]>;

type TokenBadgeFilter = GetProgramAccountsMemcmpFilter & {
    readonly __kind: unique symbol;
};
declare function tokenBadgeWhirlpoolsConfigFilter(address: Address): TokenBadgeFilter;
declare function tokenBadgeTokenMintFilter(address: Address): TokenBadgeFilter;
declare function fetchAllTokenBadgeWithFilter(rpc: Rpc<GetProgramAccountsApi>, ...filters: TokenBadgeFilter[]): Promise<Account<TokenBadge>[]>;

type WhirlpoolFilter = GetProgramAccountsMemcmpFilter & {
    readonly __kind: unique symbol;
};
declare function whirlpoolWhirlpoolConfigFilter(address: Address): WhirlpoolFilter;
declare function whirlpoolTickSpacingFilter(tickSpacing: number): WhirlpoolFilter;
declare function whirlpoolFeeRateFilter(defaultFeeRate: number): WhirlpoolFilter;
declare function whirlpoolProtocolFeeRateFilter(protocolFeeRate: number): WhirlpoolFilter;
declare function whirlpoolTokenMintAFilter(tokenMintA: Address): WhirlpoolFilter;
declare function whirlpoolTokenVaultAFilter(tokenVaultA: Address): WhirlpoolFilter;
declare function whirlpoolTokenMintBFilter(tokenMintB: Address): WhirlpoolFilter;
declare function whirlpoolTokenVaultBFilter(tokenVaultB: Address): WhirlpoolFilter;
declare function whirlpoolRewardMint1Filter(rewardMint1: Address): WhirlpoolFilter;
declare function whirlpoolRewardVault1Filter(rewardVault1: Address): WhirlpoolFilter;
declare function whirlpoolRewardMint2Filter(rewardMint2: Address): WhirlpoolFilter;
declare function whirlpoolRewardVault2Filter(rewardVault2: Address): WhirlpoolFilter;
declare function whirlpoolRewardMint3Filter(rewardMint3: Address): WhirlpoolFilter;
declare function whirlpoolRewardVault3Filter(rewardVault3: Address): WhirlpoolFilter;
declare function fetchAllWhirlpoolWithFilter(rpc: Rpc<GetProgramAccountsApi>, ...filters: WhirlpoolFilter[]): Promise<Account<Whirlpool>[]>;

type WhirlpoolsConfigFilter = GetProgramAccountsMemcmpFilter & {
    readonly __kind: unique symbol;
};
declare function whirlpoolsConfigFeeAuthorityFilter(feeAuthority: Address): WhirlpoolsConfigFilter;
declare function whirlpoolsConfigCollectProtocolFeesAuthorityFilter(collectProtocolFeesAuthority: Address): WhirlpoolsConfigFilter;
declare function whirlpoolsConfigRewardEmissionsSuperAuthorityFilter(rewardEmissionsSuperAuthority: Address): WhirlpoolsConfigFilter;
declare function whirlpoolsConfigDefaultProtocolFeeRateFilter(defaultFeeRate: number): WhirlpoolsConfigFilter;
declare function fetchAllWhirlpoolsConfigWithFilter(rpc: Rpc<GetProgramAccountsApi>, ...filters: WhirlpoolsConfigFilter[]): Promise<Account<WhirlpoolsConfig>[]>;

type WhirlpoolsConfigExtensionFilter = GetProgramAccountsMemcmpFilter & {
    readonly __kind: unique symbol;
};
declare function whirlpoolsConfigExtensionWhirlpoolsConfigFilter(address: Address): WhirlpoolsConfigExtensionFilter;
declare function whirlpoolsConfigExtensionConfigExtensionAuthorityFilter(configExtensionAuthority: Address): WhirlpoolsConfigExtensionFilter;
declare function whirlpoolsConfigExtensionConfigTokenBadgeAuthorityFilter(configTokenBadgeAuthority: Address): WhirlpoolsConfigExtensionFilter;
declare function fetchAllWhirlpoolsConfigExtensionWithFilter(rpc: Rpc<GetProgramAccountsApi>, ...filters: WhirlpoolsConfigExtensionFilter[]): Promise<Account<WhirlpoolsConfigExtension>[]>;

declare function getFeeTierAddress(whirlpoolsConfig: Address, feeTierIndex: number): Promise<ProgramDerivedAddress>;

declare function getOracleAddress(whirlpool: Address): Promise<ProgramDerivedAddress>;

declare function getPositionAddress(positionMint: Address): Promise<ProgramDerivedAddress>;

declare function getPositionBundleAddress(positionBundleMint: Address): Promise<ProgramDerivedAddress>;
declare function getBundledPositionAddress(positionBundleAddress: Address, bundleIndex: number): Promise<ProgramDerivedAddress>;

declare function getTickArrayAddress(whirlpool: Address, startTickIndex: number): Promise<ProgramDerivedAddress>;

declare function getTokenBadgeAddress(whirlpoolsConfig: Address, tokenMint: Address): Promise<ProgramDerivedAddress>;

declare function getWhirlpoolAddress(whirlpoolsConfig: Address, tokenMintA: Address, tokenMintB: Address, feeTierIndex: number): Promise<ProgramDerivedAddress>;

declare function getWhirlpoolsConfigExtensionAddress(configAddress: Address): Promise<ProgramDerivedAddress>;

export { ADAPTIVE_FEE_TIER_DISCRIMINATOR, AccountsType, type AccountsTypeArgs, type AdaptiveFeeConstants, type AdaptiveFeeConstantsArgs, type AdaptiveFeeTier, type AdaptiveFeeTierArgs, type AdaptiveFeeVariables, type AdaptiveFeeVariablesArgs, CLOSE_BUNDLED_POSITION_DISCRIMINATOR, CLOSE_POSITION_DISCRIMINATOR, CLOSE_POSITION_WITH_TOKEN_EXTENSIONS_DISCRIMINATOR, COLLECT_FEES_DISCRIMINATOR, COLLECT_FEES_V2_DISCRIMINATOR, COLLECT_PROTOCOL_FEES_DISCRIMINATOR, COLLECT_PROTOCOL_FEES_V2_DISCRIMINATOR, COLLECT_REWARD_DISCRIMINATOR, COLLECT_REWARD_V2_DISCRIMINATOR, type CloseBundledPositionInput, type CloseBundledPositionInstruction, type CloseBundledPositionInstructionData, type CloseBundledPositionInstructionDataArgs, type ClosePositionInput, type ClosePositionInstruction, type ClosePositionInstructionData, type ClosePositionInstructionDataArgs, type ClosePositionWithTokenExtensionsInput, type ClosePositionWithTokenExtensionsInstruction, type ClosePositionWithTokenExtensionsInstructionData, type ClosePositionWithTokenExtensionsInstructionDataArgs, type CollectFeesInput, type CollectFeesInstruction, type CollectFeesInstructionData, type CollectFeesInstructionDataArgs, type CollectFeesV2Input, type CollectFeesV2Instruction, type CollectFeesV2InstructionData, type CollectFeesV2InstructionDataArgs, type CollectProtocolFeesInput, type CollectProtocolFeesInstruction, type CollectProtocolFeesInstructionData, type CollectProtocolFeesInstructionDataArgs, type CollectProtocolFeesV2Input, type CollectProtocolFeesV2Instruction, type CollectProtocolFeesV2InstructionData, type CollectProtocolFeesV2InstructionDataArgs, type CollectRewardInput, type CollectRewardInstruction, type CollectRewardInstructionData, type CollectRewardInstructionDataArgs, type CollectRewardV2Input, type CollectRewardV2Instruction, type CollectRewardV2InstructionData, type CollectRewardV2InstructionDataArgs, DECREASE_LIQUIDITY_DISCRIMINATOR, DECREASE_LIQUIDITY_V2_DISCRIMINATOR, DELETE_POSITION_BUNDLE_DISCRIMINATOR, DELETE_TOKEN_BADGE_DISCRIMINATOR, type DecreaseLiquidityInput, type DecreaseLiquidityInstruction, type DecreaseLiquidityInstructionData, type DecreaseLiquidityInstructionDataArgs, type DecreaseLiquidityV2Input, type DecreaseLiquidityV2Instruction, type DecreaseLiquidityV2InstructionData, type DecreaseLiquidityV2InstructionDataArgs, type DeletePositionBundleInput, type DeletePositionBundleInstruction, type DeletePositionBundleInstructionData, type DeletePositionBundleInstructionDataArgs, type DeleteTokenBadgeInput, type DeleteTokenBadgeInstruction, type DeleteTokenBadgeInstructionData, type DeleteTokenBadgeInstructionDataArgs, FEE_TIER_DISCRIMINATOR, type FeeTier, type FeeTierArgs, INCREASE_LIQUIDITY_DISCRIMINATOR, INCREASE_LIQUIDITY_V2_DISCRIMINATOR, INITIALIZE_ADAPTIVE_FEE_TIER_DISCRIMINATOR, INITIALIZE_CONFIG_DISCRIMINATOR, INITIALIZE_CONFIG_EXTENSION_DISCRIMINATOR, INITIALIZE_FEE_TIER_DISCRIMINATOR, INITIALIZE_POOL_DISCRIMINATOR, INITIALIZE_POOL_V2_DISCRIMINATOR, INITIALIZE_POOL_WITH_ADAPTIVE_FEE_DISCRIMINATOR, INITIALIZE_POSITION_BUNDLE_DISCRIMINATOR, INITIALIZE_POSITION_BUNDLE_WITH_METADATA_DISCRIMINATOR, INITIALIZE_REWARD_DISCRIMINATOR, INITIALIZE_REWARD_V2_DISCRIMINATOR, INITIALIZE_TICK_ARRAY_DISCRIMINATOR, INITIALIZE_TOKEN_BADGE_DISCRIMINATOR, type IncreaseLiquidityInput, type IncreaseLiquidityInstruction, type IncreaseLiquidityInstructionData, type IncreaseLiquidityInstructionDataArgs, type IncreaseLiquidityV2Input, type IncreaseLiquidityV2Instruction, type IncreaseLiquidityV2InstructionData, type IncreaseLiquidityV2InstructionDataArgs, type InitializeAdaptiveFeeTierInput, type InitializeAdaptiveFeeTierInstruction, type InitializeAdaptiveFeeTierInstructionData, type InitializeAdaptiveFeeTierInstructionDataArgs, type InitializeConfigExtensionInput, type InitializeConfigExtensionInstruction, type InitializeConfigExtensionInstructionData, type InitializeConfigExtensionInstructionDataArgs, type InitializeConfigInput, type InitializeConfigInstruction, type InitializeConfigInstructionData, type InitializeConfigInstructionDataArgs, type InitializeFeeTierInput, type InitializeFeeTierInstruction, type InitializeFeeTierInstructionData, type InitializeFeeTierInstructionDataArgs, type InitializePoolInput, type InitializePoolInstruction, type InitializePoolInstructionData, type InitializePoolInstructionDataArgs, type InitializePoolV2Input, type InitializePoolV2Instruction, type InitializePoolV2InstructionData, type InitializePoolV2InstructionDataArgs, type InitializePoolWithAdaptiveFeeInput, type InitializePoolWithAdaptiveFeeInstruction, type InitializePoolWithAdaptiveFeeInstructionData, type InitializePoolWithAdaptiveFeeInstructionDataArgs, type InitializePositionBundleInput, type InitializePositionBundleInstruction, type InitializePositionBundleInstructionData, type InitializePositionBundleInstructionDataArgs, type InitializePositionBundleWithMetadataInput, type InitializePositionBundleWithMetadataInstruction, type InitializePositionBundleWithMetadataInstructionData, type InitializePositionBundleWithMetadataInstructionDataArgs, type InitializeRewardInput, type InitializeRewardInstruction, type InitializeRewardInstructionData, type InitializeRewardInstructionDataArgs, type InitializeRewardV2Input, type InitializeRewardV2Instruction, type InitializeRewardV2InstructionData, type InitializeRewardV2InstructionDataArgs, type InitializeTickArrayInput, type InitializeTickArrayInstruction, type InitializeTickArrayInstructionData, type InitializeTickArrayInstructionDataArgs, type InitializeTokenBadgeInput, type InitializeTokenBadgeInstruction, type InitializeTokenBadgeInstructionData, type InitializeTokenBadgeInstructionDataArgs, LOCK_CONFIG_DISCRIMINATOR, LOCK_POSITION_DISCRIMINATOR, type LockConfig, type LockConfigArgs, type LockPositionInput, type LockPositionInstruction, type LockPositionInstructionData, type LockPositionInstructionDataArgs, LockType, type LockTypeArgs, LockTypeLabel, type LockTypeLabelArgs, OPEN_BUNDLED_POSITION_DISCRIMINATOR, OPEN_POSITION_DISCRIMINATOR, OPEN_POSITION_WITH_METADATA_DISCRIMINATOR, OPEN_POSITION_WITH_TOKEN_EXTENSIONS_DISCRIMINATOR, ORACLE_DISCRIMINATOR, type OpenBundledPositionInput, type OpenBundledPositionInstruction, type OpenBundledPositionInstructionData, type OpenBundledPositionInstructionDataArgs, type OpenPositionInput, type OpenPositionInstruction, type OpenPositionInstructionData, type OpenPositionInstructionDataArgs, type OpenPositionWithMetadataInput, type OpenPositionWithMetadataInstruction, type OpenPositionWithMetadataInstructionData, type OpenPositionWithMetadataInstructionDataArgs, type OpenPositionWithTokenExtensionsInput, type OpenPositionWithTokenExtensionsInstruction, type OpenPositionWithTokenExtensionsInstructionData, type OpenPositionWithTokenExtensionsInstructionDataArgs, type Oracle, type OracleArgs, POSITION_BUNDLE_DISCRIMINATOR, POSITION_DISCRIMINATOR, type ParsedCloseBundledPositionInstruction, type ParsedClosePositionInstruction, type ParsedClosePositionWithTokenExtensionsInstruction, type ParsedCollectFeesInstruction, type ParsedCollectFeesV2Instruction, type ParsedCollectProtocolFeesInstruction, type ParsedCollectProtocolFeesV2Instruction, type ParsedCollectRewardInstruction, type ParsedCollectRewardV2Instruction, type ParsedDecreaseLiquidityInstruction, type ParsedDecreaseLiquidityV2Instruction, type ParsedDeletePositionBundleInstruction, type ParsedDeleteTokenBadgeInstruction, type ParsedIncreaseLiquidityInstruction, type ParsedIncreaseLiquidityV2Instruction, type ParsedInitializeAdaptiveFeeTierInstruction, type ParsedInitializeConfigExtensionInstruction, type ParsedInitializeConfigInstruction, type ParsedInitializeFeeTierInstruction, type ParsedInitializePoolInstruction, type ParsedInitializePoolV2Instruction, type ParsedInitializePoolWithAdaptiveFeeInstruction, type ParsedInitializePositionBundleInstruction, type ParsedInitializePositionBundleWithMetadataInstruction, type ParsedInitializeRewardInstruction, type ParsedInitializeRewardV2Instruction, type ParsedInitializeTickArrayInstruction, type ParsedInitializeTokenBadgeInstruction, type ParsedLockPositionInstruction, type ParsedOpenBundledPositionInstruction, type ParsedOpenPositionInstruction, type ParsedOpenPositionWithMetadataInstruction, type ParsedOpenPositionWithTokenExtensionsInstruction, type ParsedResetPositionRangeInstruction, type ParsedSetCollectProtocolFeesAuthorityInstruction, type ParsedSetConfigExtensionAuthorityInstruction, type ParsedSetDefaultBaseFeeRateInstruction, type ParsedSetDefaultFeeRateInstruction, type ParsedSetDefaultProtocolFeeRateInstruction, type ParsedSetDelegatedFeeAuthorityInstruction, type ParsedSetFeeAuthorityInstruction, type ParsedSetFeeRateByDelegatedFeeAuthorityInstruction, type ParsedSetFeeRateInstruction, type ParsedSetInitializePoolAuthorityInstruction, type ParsedSetPresetAdaptiveFeeConstantsInstruction, type ParsedSetProtocolFeeRateInstruction, type ParsedSetRewardAuthorityBySuperAuthorityInstruction, type ParsedSetRewardAuthorityInstruction, type ParsedSetRewardEmissionsInstruction, type ParsedSetRewardEmissionsSuperAuthorityInstruction, type ParsedSetRewardEmissionsV2Instruction, type ParsedSetTokenBadgeAuthorityInstruction, type ParsedSwapInstruction, type ParsedSwapV2Instruction, type ParsedTransferLockedPositionInstruction, type ParsedTwoHopSwapInstruction, type ParsedTwoHopSwapV2Instruction, type ParsedUpdateFeesAndRewardsInstruction, type ParsedWhirlpoolInstruction, type Position, type PositionArgs, type PositionBundle, type PositionBundleArgs, type PositionBundleFilter, type PositionRewardInfo, type PositionRewardInfoArgs, RESET_POSITION_RANGE_DISCRIMINATOR, type RemainingAccountsInfo, type RemainingAccountsInfoArgs, type RemainingAccountsSlice, type RemainingAccountsSliceArgs, type ResetPositionRangeInput, type ResetPositionRangeInstruction, type ResetPositionRangeInstructionData, type ResetPositionRangeInstructionDataArgs, SET_COLLECT_PROTOCOL_FEES_AUTHORITY_DISCRIMINATOR, SET_CONFIG_EXTENSION_AUTHORITY_DISCRIMINATOR, SET_DEFAULT_BASE_FEE_RATE_DISCRIMINATOR, SET_DEFAULT_FEE_RATE_DISCRIMINATOR, SET_DEFAULT_PROTOCOL_FEE_RATE_DISCRIMINATOR, SET_DELEGATED_FEE_AUTHORITY_DISCRIMINATOR, SET_FEE_AUTHORITY_DISCRIMINATOR, SET_FEE_RATE_BY_DELEGATED_FEE_AUTHORITY_DISCRIMINATOR, SET_FEE_RATE_DISCRIMINATOR, SET_INITIALIZE_POOL_AUTHORITY_DISCRIMINATOR, SET_PRESET_ADAPTIVE_FEE_CONSTANTS_DISCRIMINATOR, SET_PROTOCOL_FEE_RATE_DISCRIMINATOR, SET_REWARD_AUTHORITY_BY_SUPER_AUTHORITY_DISCRIMINATOR, SET_REWARD_AUTHORITY_DISCRIMINATOR, SET_REWARD_EMISSIONS_DISCRIMINATOR, SET_REWARD_EMISSIONS_SUPER_AUTHORITY_DISCRIMINATOR, SET_REWARD_EMISSIONS_V2_DISCRIMINATOR, SET_TOKEN_BADGE_AUTHORITY_DISCRIMINATOR, SWAP_DISCRIMINATOR, SWAP_V2_DISCRIMINATOR, type SetCollectProtocolFeesAuthorityInput, type SetCollectProtocolFeesAuthorityInstruction, type SetCollectProtocolFeesAuthorityInstructionData, type SetCollectProtocolFeesAuthorityInstructionDataArgs, type SetConfigExtensionAuthorityInput, type SetConfigExtensionAuthorityInstruction, type SetConfigExtensionAuthorityInstructionData, type SetConfigExtensionAuthorityInstructionDataArgs, type SetDefaultBaseFeeRateInput, type SetDefaultBaseFeeRateInstruction, type SetDefaultBaseFeeRateInstructionData, type SetDefaultBaseFeeRateInstructionDataArgs, type SetDefaultFeeRateInput, type SetDefaultFeeRateInstruction, type SetDefaultFeeRateInstructionData, type SetDefaultFeeRateInstructionDataArgs, type SetDefaultProtocolFeeRateInput, type SetDefaultProtocolFeeRateInstruction, type SetDefaultProtocolFeeRateInstructionData, type SetDefaultProtocolFeeRateInstructionDataArgs, type SetDelegatedFeeAuthorityInput, type SetDelegatedFeeAuthorityInstruction, type SetDelegatedFeeAuthorityInstructionData, type SetDelegatedFeeAuthorityInstructionDataArgs, type SetFeeAuthorityInput, type SetFeeAuthorityInstruction, type SetFeeAuthorityInstructionData, type SetFeeAuthorityInstructionDataArgs, type SetFeeRateByDelegatedFeeAuthorityInput, type SetFeeRateByDelegatedFeeAuthorityInstruction, type SetFeeRateByDelegatedFeeAuthorityInstructionData, type SetFeeRateByDelegatedFeeAuthorityInstructionDataArgs, type SetFeeRateInput, type SetFeeRateInstruction, type SetFeeRateInstructionData, type SetFeeRateInstructionDataArgs, type SetInitializePoolAuthorityInput, type SetInitializePoolAuthorityInstruction, type SetInitializePoolAuthorityInstructionData, type SetInitializePoolAuthorityInstructionDataArgs, type SetPresetAdaptiveFeeConstantsInput, type SetPresetAdaptiveFeeConstantsInstruction, type SetPresetAdaptiveFeeConstantsInstructionData, type SetPresetAdaptiveFeeConstantsInstructionDataArgs, type SetProtocolFeeRateInput, type SetProtocolFeeRateInstruction, type SetProtocolFeeRateInstructionData, type SetProtocolFeeRateInstructionDataArgs, type SetRewardAuthorityBySuperAuthorityInput, type SetRewardAuthorityBySuperAuthorityInstruction, type SetRewardAuthorityBySuperAuthorityInstructionData, type SetRewardAuthorityBySuperAuthorityInstructionDataArgs, type SetRewardAuthorityInput, type SetRewardAuthorityInstruction, type SetRewardAuthorityInstructionData, type SetRewardAuthorityInstructionDataArgs, type SetRewardEmissionsInput, type SetRewardEmissionsInstruction, type SetRewardEmissionsInstructionData, type SetRewardEmissionsInstructionDataArgs, type SetRewardEmissionsSuperAuthorityInput, type SetRewardEmissionsSuperAuthorityInstruction, type SetRewardEmissionsSuperAuthorityInstructionData, type SetRewardEmissionsSuperAuthorityInstructionDataArgs, type SetRewardEmissionsV2Input, type SetRewardEmissionsV2Instruction, type SetRewardEmissionsV2InstructionData, type SetRewardEmissionsV2InstructionDataArgs, type SetTokenBadgeAuthorityInput, type SetTokenBadgeAuthorityInstruction, type SetTokenBadgeAuthorityInstructionData, type SetTokenBadgeAuthorityInstructionDataArgs, type SwapInput, type SwapInstruction, type SwapInstructionData, type SwapInstructionDataArgs, type SwapV2Input, type SwapV2Instruction, type SwapV2InstructionData, type SwapV2InstructionDataArgs, TICK_ARRAY_DISCRIMINATOR, TOKEN_BADGE_DISCRIMINATOR, TRANSFER_LOCKED_POSITION_DISCRIMINATOR, TWO_HOP_SWAP_DISCRIMINATOR, TWO_HOP_SWAP_V2_DISCRIMINATOR, type Tick, type TickArgs, type TickArray, type TickArrayArgs, type TickArrayFilter, type TokenBadge, type TokenBadgeArgs, type TokenBadgeFilter, type TransferLockedPositionInput, type TransferLockedPositionInstruction, type TransferLockedPositionInstructionData, type TransferLockedPositionInstructionDataArgs, type TwoHopSwapInput, type TwoHopSwapInstruction, type TwoHopSwapInstructionData, type TwoHopSwapInstructionDataArgs, type TwoHopSwapV2Input, type TwoHopSwapV2Instruction, type TwoHopSwapV2InstructionData, type TwoHopSwapV2InstructionDataArgs, UPDATE_FEES_AND_REWARDS_DISCRIMINATOR, type UpdateFeesAndRewardsInput, type UpdateFeesAndRewardsInstruction, type UpdateFeesAndRewardsInstructionData, type UpdateFeesAndRewardsInstructionDataArgs, WHIRLPOOLS_CONFIG_DISCRIMINATOR, WHIRLPOOLS_CONFIG_EXTENSION_DISCRIMINATOR, WHIRLPOOL_DISCRIMINATOR, WHIRLPOOL_ERROR__AMOUNT_CALC_OVERFLOW, WHIRLPOOL_ERROR__AMOUNT_IN_ABOVE_MAXIMUM, WHIRLPOOL_ERROR__AMOUNT_OUT_BELOW_MINIMUM, WHIRLPOOL_ERROR__AMOUNT_REMAINING_OVERFLOW, WHIRLPOOL_ERROR__BUNDLED_POSITION_ALREADY_CLOSED, WHIRLPOOL_ERROR__BUNDLED_POSITION_ALREADY_OPENED, WHIRLPOOL_ERROR__CLOSE_POSITION_NOT_EMPTY, WHIRLPOOL_ERROR__DIFFERENT_WHIRLPOOL_TICK_ARRAY_ACCOUNT, WHIRLPOOL_ERROR__DIVIDE_BY_ZERO, WHIRLPOOL_ERROR__DUPLICATE_TWO_HOP_POOL, WHIRLPOOL_ERROR__FEE_RATE_MAX_EXCEEDED, WHIRLPOOL_ERROR__FULL_RANGE_ONLY_POOL, WHIRLPOOL_ERROR__INTERMEDIATE_TOKEN_AMOUNT_MISMATCH, WHIRLPOOL_ERROR__INVALID_ADAPTIVE_FEE_CONSTANTS, WHIRLPOOL_ERROR__INVALID_BUNDLE_INDEX, WHIRLPOOL_ERROR__INVALID_ENUM, WHIRLPOOL_ERROR__INVALID_FEE_TIER_INDEX, WHIRLPOOL_ERROR__INVALID_INTERMEDIARY_MINT, WHIRLPOOL_ERROR__INVALID_POSITION_TOKEN_AMOUNT, WHIRLPOOL_ERROR__INVALID_REWARD_INDEX, WHIRLPOOL_ERROR__INVALID_SQRT_PRICE_LIMIT_DIRECTION, WHIRLPOOL_ERROR__INVALID_START_TICK, WHIRLPOOL_ERROR__INVALID_TICK_ARRAY_SEQUENCE, WHIRLPOOL_ERROR__INVALID_TICK_INDEX, WHIRLPOOL_ERROR__INVALID_TICK_SPACING, WHIRLPOOL_ERROR__INVALID_TIMESTAMP, WHIRLPOOL_ERROR__INVALID_TIMESTAMP_CONVERSION, WHIRLPOOL_ERROR__INVALID_TOKEN_MINT_ORDER, WHIRLPOOL_ERROR__INVALID_TRADE_ENABLE_TIMESTAMP, WHIRLPOOL_ERROR__LIQUIDITY_NET_ERROR, WHIRLPOOL_ERROR__LIQUIDITY_OVERFLOW, WHIRLPOOL_ERROR__LIQUIDITY_TOO_HIGH, WHIRLPOOL_ERROR__LIQUIDITY_UNDERFLOW, WHIRLPOOL_ERROR__LIQUIDITY_ZERO, WHIRLPOOL_ERROR__MISSING_OR_INVALID_DELEGATE, WHIRLPOOL_ERROR__MULTIPLICATION_OVERFLOW, WHIRLPOOL_ERROR__MULTIPLICATION_SHIFT_RIGHT_OVERFLOW, WHIRLPOOL_ERROR__MUL_DIV_INVALID_INPUT, WHIRLPOOL_ERROR__MUL_DIV_OVERFLOW, WHIRLPOOL_ERROR__NO_EXTRA_ACCOUNTS_FOR_TRANSFER_HOOK, WHIRLPOOL_ERROR__NUMBER_CAST_ERROR, WHIRLPOOL_ERROR__NUMBER_DOWN_CAST_ERROR, WHIRLPOOL_ERROR__OPERATION_NOT_ALLOWED_ON_LOCKED_POSITION, WHIRLPOOL_ERROR__PARTIAL_FILL_ERROR, WHIRLPOOL_ERROR__POSITION_BUNDLE_NOT_DELETABLE, WHIRLPOOL_ERROR__POSITION_NOT_LOCKABLE, WHIRLPOOL_ERROR__PROTOCOL_FEE_RATE_MAX_EXCEEDED, WHIRLPOOL_ERROR__REMAINING_ACCOUNTS_DUPLICATED_ACCOUNTS_TYPE, WHIRLPOOL_ERROR__REMAINING_ACCOUNTS_INSUFFICIENT, WHIRLPOOL_ERROR__REMAINING_ACCOUNTS_INVALID_SLICE, WHIRLPOOL_ERROR__REWARD_NOT_INITIALIZED, WHIRLPOOL_ERROR__REWARD_VAULT_AMOUNT_INSUFFICIENT, WHIRLPOOL_ERROR__SAME_TICK_RANGE_NOT_ALLOWED, WHIRLPOOL_ERROR__SQRT_PRICE_OUT_OF_BOUNDS, WHIRLPOOL_ERROR__TICK_ARRAY_EXIST_IN_POOL, WHIRLPOOL_ERROR__TICK_ARRAY_INDEX_OUTOF_BOUNDS, WHIRLPOOL_ERROR__TICK_ARRAY_SEQUENCE_INVALID_INDEX, WHIRLPOOL_ERROR__TICK_NOT_FOUND, WHIRLPOOL_ERROR__TOKEN_MAX_EXCEEDED, WHIRLPOOL_ERROR__TOKEN_MIN_SUBCEEDED, WHIRLPOOL_ERROR__TOO_MANY_SUPPLEMENTAL_TICK_ARRAYS, WHIRLPOOL_ERROR__TRADE_IS_NOT_ENABLED, WHIRLPOOL_ERROR__TRANSFER_FEE_CALCULATION_ERROR, WHIRLPOOL_ERROR__UNSUPPORTED_TOKEN_MINT, WHIRLPOOL_ERROR__ZERO_TRADABLE_AMOUNT, WHIRLPOOL_PROGRAM_ADDRESS, type Whirlpool, WhirlpoolAccount, type WhirlpoolArgs, type WhirlpoolError, type WhirlpoolFilter, WhirlpoolInstruction, type WhirlpoolRewardInfo, type WhirlpoolRewardInfoArgs, type WhirlpoolsConfig, type WhirlpoolsConfigArgs, type WhirlpoolsConfigExtension, type WhirlpoolsConfigExtensionArgs, type WhirlpoolsConfigExtensionFilter, type WhirlpoolsConfigFilter, adaptiveFeeTierAdaptiveFeeControlFactorFilter, adaptiveFeeTierDecayPeriodFilter, adaptiveFeeTierDefaultBaseFeeRateFilter, adaptiveFeeTierDelegatedFeeAuthorityFilter, adaptiveFeeTierFeeTierIndexFilter, adaptiveFeeTierFilterPeriodFilter, adaptiveFeeTierInitializePoolAuthorityFilter, adaptiveFeeTierMajorSwapThresholdTicksFilter, adaptiveFeeTierMaxVolatilityFilter, adaptiveFeeTierReductionFactorFilter, adaptiveFeeTierTickGroupSizeFilter, adaptiveFeeTierTickSpacingFilter, adaptiveFeeTierWhirlpoolsConfigFilter, decodeAdaptiveFeeTier, decodeFeeTier, decodeLockConfig, decodeOracle, decodePosition, decodePositionBundle, decodeTickArray, decodeTokenBadge, decodeWhirlpool, decodeWhirlpoolsConfig, decodeWhirlpoolsConfigExtension, feeTierFeeRateFilter, feeTierTickSpacingFilter, feeTierWhirlpoolsConfigFilter, fetchAdaptiveFeeTier, fetchAllAdaptiveFeeTier, fetchAllAdaptiveFeeTierWithFilter, fetchAllFeeTier, fetchAllFeeTierWithFilter, fetchAllLockConfig, fetchAllMaybeAdaptiveFeeTier, fetchAllMaybeFeeTier, fetchAllMaybeLockConfig, fetchAllMaybeOracle, fetchAllMaybePosition, fetchAllMaybePositionBundle, fetchAllMaybeTickArray, fetchAllMaybeTokenBadge, fetchAllMaybeWhirlpool, fetchAllMaybeWhirlpoolsConfig, fetchAllMaybeWhirlpoolsConfigExtension, fetchAllOracle, fetchAllOracleWithFilter, fetchAllPosition, fetchAllPositionBundle, fetchAllPositionBundleWithFilter, fetchAllPositionWithFilter, fetchAllTickArray, fetchAllTickArrayWithFilter, fetchAllTokenBadge, fetchAllTokenBadgeWithFilter, fetchAllWhirlpool, fetchAllWhirlpoolWithFilter, fetchAllWhirlpoolsConfig, fetchAllWhirlpoolsConfigExtension, fetchAllWhirlpoolsConfigExtensionWithFilter, fetchAllWhirlpoolsConfigWithFilter, fetchFeeTier, fetchLockConfig, fetchMaybeAdaptiveFeeTier, fetchMaybeFeeTier, fetchMaybeLockConfig, fetchMaybeOracle, fetchMaybePosition, fetchMaybePositionBundle, fetchMaybeTickArray, fetchMaybeTokenBadge, fetchMaybeWhirlpool, fetchMaybeWhirlpoolsConfig, fetchMaybeWhirlpoolsConfigExtension, fetchOracle, fetchPosition, fetchPositionBundle, fetchTickArray, fetchTokenBadge, fetchWhirlpool, fetchWhirlpoolsConfig, fetchWhirlpoolsConfigExtension, getAccountsTypeCodec, getAccountsTypeDecoder, getAccountsTypeEncoder, getAdaptiveFeeConstantsCodec, getAdaptiveFeeConstantsDecoder, getAdaptiveFeeConstantsEncoder, getAdaptiveFeeTierCodec, getAdaptiveFeeTierDecoder, getAdaptiveFeeTierDiscriminatorBytes, getAdaptiveFeeTierEncoder, getAdaptiveFeeTierSize, getAdaptiveFeeVariablesCodec, getAdaptiveFeeVariablesDecoder, getAdaptiveFeeVariablesEncoder, getBundledPositionAddress, getCloseBundledPositionDiscriminatorBytes, getCloseBundledPositionInstruction, getCloseBundledPositionInstructionDataCodec, getCloseBundledPositionInstructionDataDecoder, getCloseBundledPositionInstructionDataEncoder, getClosePositionDiscriminatorBytes, getClosePositionInstruction, getClosePositionInstructionDataCodec, getClosePositionInstructionDataDecoder, getClosePositionInstructionDataEncoder, getClosePositionWithTokenExtensionsDiscriminatorBytes, getClosePositionWithTokenExtensionsInstruction, getClosePositionWithTokenExtensionsInstructionDataCodec, getClosePositionWithTokenExtensionsInstructionDataDecoder, getClosePositionWithTokenExtensionsInstructionDataEncoder, getCollectFeesDiscriminatorBytes, getCollectFeesInstruction, getCollectFeesInstructionDataCodec, getCollectFeesInstructionDataDecoder, getCollectFeesInstructionDataEncoder, getCollectFeesV2DiscriminatorBytes, getCollectFeesV2Instruction, getCollectFeesV2InstructionDataCodec, getCollectFeesV2InstructionDataDecoder, getCollectFeesV2InstructionDataEncoder, getCollectProtocolFeesDiscriminatorBytes, getCollectProtocolFeesInstruction, getCollectProtocolFeesInstructionDataCodec, getCollectProtocolFeesInstructionDataDecoder, getCollectProtocolFeesInstructionDataEncoder, getCollectProtocolFeesV2DiscriminatorBytes, getCollectProtocolFeesV2Instruction, getCollectProtocolFeesV2InstructionDataCodec, getCollectProtocolFeesV2InstructionDataDecoder, getCollectProtocolFeesV2InstructionDataEncoder, getCollectRewardDiscriminatorBytes, getCollectRewardInstruction, getCollectRewardInstructionDataCodec, getCollectRewardInstructionDataDecoder, getCollectRewardInstructionDataEncoder, getCollectRewardV2DiscriminatorBytes, getCollectRewardV2Instruction, getCollectRewardV2InstructionDataCodec, getCollectRewardV2InstructionDataDecoder, getCollectRewardV2InstructionDataEncoder, getDecreaseLiquidityDiscriminatorBytes, getDecreaseLiquidityInstruction, getDecreaseLiquidityInstructionDataCodec, getDecreaseLiquidityInstructionDataDecoder, getDecreaseLiquidityInstructionDataEncoder, getDecreaseLiquidityV2DiscriminatorBytes, getDecreaseLiquidityV2Instruction, getDecreaseLiquidityV2InstructionDataCodec, getDecreaseLiquidityV2InstructionDataDecoder, getDecreaseLiquidityV2InstructionDataEncoder, getDeletePositionBundleDiscriminatorBytes, getDeletePositionBundleInstruction, getDeletePositionBundleInstructionDataCodec, getDeletePositionBundleInstructionDataDecoder, getDeletePositionBundleInstructionDataEncoder, getDeleteTokenBadgeDiscriminatorBytes, getDeleteTokenBadgeInstruction, getDeleteTokenBadgeInstructionDataCodec, getDeleteTokenBadgeInstructionDataDecoder, getDeleteTokenBadgeInstructionDataEncoder, getFeeTierAddress, getFeeTierCodec, getFeeTierDecoder, getFeeTierDiscriminatorBytes, getFeeTierEncoder, getFeeTierSize, getIncreaseLiquidityDiscriminatorBytes, getIncreaseLiquidityInstruction, getIncreaseLiquidityInstructionDataCodec, getIncreaseLiquidityInstructionDataDecoder, getIncreaseLiquidityInstructionDataEncoder, getIncreaseLiquidityV2DiscriminatorBytes, getIncreaseLiquidityV2Instruction, getIncreaseLiquidityV2InstructionDataCodec, getIncreaseLiquidityV2InstructionDataDecoder, getIncreaseLiquidityV2InstructionDataEncoder, getInitializeAdaptiveFeeTierDiscriminatorBytes, getInitializeAdaptiveFeeTierInstruction, getInitializeAdaptiveFeeTierInstructionDataCodec, getInitializeAdaptiveFeeTierInstructionDataDecoder, getInitializeAdaptiveFeeTierInstructionDataEncoder, getInitializeConfigDiscriminatorBytes, getInitializeConfigExtensionDiscriminatorBytes, getInitializeConfigExtensionInstruction, getInitializeConfigExtensionInstructionDataCodec, getInitializeConfigExtensionInstructionDataDecoder, getInitializeConfigExtensionInstructionDataEncoder, getInitializeConfigInstruction, getInitializeConfigInstructionDataCodec, getInitializeConfigInstructionDataDecoder, getInitializeConfigInstructionDataEncoder, getInitializeFeeTierDiscriminatorBytes, getInitializeFeeTierInstruction, getInitializeFeeTierInstructionDataCodec, getInitializeFeeTierInstructionDataDecoder, getInitializeFeeTierInstructionDataEncoder, getInitializePoolDiscriminatorBytes, getInitializePoolInstruction, getInitializePoolInstructionDataCodec, getInitializePoolInstructionDataDecoder, getInitializePoolInstructionDataEncoder, getInitializePoolV2DiscriminatorBytes, getInitializePoolV2Instruction, getInitializePoolV2InstructionDataCodec, getInitializePoolV2InstructionDataDecoder, getInitializePoolV2InstructionDataEncoder, getInitializePoolWithAdaptiveFeeDiscriminatorBytes, getInitializePoolWithAdaptiveFeeInstruction, getInitializePoolWithAdaptiveFeeInstructionDataCodec, getInitializePoolWithAdaptiveFeeInstructionDataDecoder, getInitializePoolWithAdaptiveFeeInstructionDataEncoder, getInitializePositionBundleDiscriminatorBytes, getInitializePositionBundleInstruction, getInitializePositionBundleInstructionDataCodec, getInitializePositionBundleInstructionDataDecoder, getInitializePositionBundleInstructionDataEncoder, getInitializePositionBundleWithMetadataDiscriminatorBytes, getInitializePositionBundleWithMetadataInstruction, getInitializePositionBundleWithMetadataInstructionDataCodec, getInitializePositionBundleWithMetadataInstructionDataDecoder, getInitializePositionBundleWithMetadataInstructionDataEncoder, getInitializeRewardDiscriminatorBytes, getInitializeRewardInstruction, getInitializeRewardInstructionDataCodec, getInitializeRewardInstructionDataDecoder, getInitializeRewardInstructionDataEncoder, getInitializeRewardV2DiscriminatorBytes, getInitializeRewardV2Instruction, getInitializeRewardV2InstructionDataCodec, getInitializeRewardV2InstructionDataDecoder, getInitializeRewardV2InstructionDataEncoder, getInitializeTickArrayDiscriminatorBytes, getInitializeTickArrayInstruction, getInitializeTickArrayInstructionDataCodec, getInitializeTickArrayInstructionDataDecoder, getInitializeTickArrayInstructionDataEncoder, getInitializeTokenBadgeDiscriminatorBytes, getInitializeTokenBadgeInstruction, getInitializeTokenBadgeInstructionDataCodec, getInitializeTokenBadgeInstructionDataDecoder, getInitializeTokenBadgeInstructionDataEncoder, getLockConfigCodec, getLockConfigDecoder, getLockConfigDiscriminatorBytes, getLockConfigEncoder, getLockConfigSize, getLockPositionDiscriminatorBytes, getLockPositionInstruction, getLockPositionInstructionDataCodec, getLockPositionInstructionDataDecoder, getLockPositionInstructionDataEncoder, getLockTypeCodec, getLockTypeDecoder, getLockTypeEncoder, getLockTypeLabelCodec, getLockTypeLabelDecoder, getLockTypeLabelEncoder, getOpenBundledPositionDiscriminatorBytes, getOpenBundledPositionInstruction, getOpenBundledPositionInstructionDataCodec, getOpenBundledPositionInstructionDataDecoder, getOpenBundledPositionInstructionDataEncoder, getOpenPositionDiscriminatorBytes, getOpenPositionInstruction, getOpenPositionInstructionDataCodec, getOpenPositionInstructionDataDecoder, getOpenPositionInstructionDataEncoder, getOpenPositionWithMetadataDiscriminatorBytes, getOpenPositionWithMetadataInstruction, getOpenPositionWithMetadataInstructionDataCodec, getOpenPositionWithMetadataInstructionDataDecoder, getOpenPositionWithMetadataInstructionDataEncoder, getOpenPositionWithTokenExtensionsDiscriminatorBytes, getOpenPositionWithTokenExtensionsInstruction, getOpenPositionWithTokenExtensionsInstructionDataCodec, getOpenPositionWithTokenExtensionsInstructionDataDecoder, getOpenPositionWithTokenExtensionsInstructionDataEncoder, getOracleAddress, getOracleCodec, getOracleDecoder, getOracleDiscriminatorBytes, getOracleEncoder, getOracleSize, getPositionAddress, getPositionBundleAddress, getPositionBundleCodec, getPositionBundleDecoder, getPositionBundleDiscriminatorBytes, getPositionBundleEncoder, getPositionBundleSize, getPositionCodec, getPositionDecoder, getPositionDiscriminatorBytes, getPositionEncoder, getPositionRewardInfoCodec, getPositionRewardInfoDecoder, getPositionRewardInfoEncoder, getPositionSize, getRemainingAccountsInfoCodec, getRemainingAccountsInfoDecoder, getRemainingAccountsInfoEncoder, getRemainingAccountsSliceCodec, getRemainingAccountsSliceDecoder, getRemainingAccountsSliceEncoder, getResetPositionRangeDiscriminatorBytes, getResetPositionRangeInstruction, getResetPositionRangeInstructionDataCodec, getResetPositionRangeInstructionDataDecoder, getResetPositionRangeInstructionDataEncoder, getSetCollectProtocolFeesAuthorityDiscriminatorBytes, getSetCollectProtocolFeesAuthorityInstruction, getSetCollectProtocolFeesAuthorityInstructionDataCodec, getSetCollectProtocolFeesAuthorityInstructionDataDecoder, getSetCollectProtocolFeesAuthorityInstructionDataEncoder, getSetConfigExtensionAuthorityDiscriminatorBytes, getSetConfigExtensionAuthorityInstruction, getSetConfigExtensionAuthorityInstructionDataCodec, getSetConfigExtensionAuthorityInstructionDataDecoder, getSetConfigExtensionAuthorityInstructionDataEncoder, getSetDefaultBaseFeeRateDiscriminatorBytes, getSetDefaultBaseFeeRateInstruction, getSetDefaultBaseFeeRateInstructionDataCodec, getSetDefaultBaseFeeRateInstructionDataDecoder, getSetDefaultBaseFeeRateInstructionDataEncoder, getSetDefaultFeeRateDiscriminatorBytes, getSetDefaultFeeRateInstruction, getSetDefaultFeeRateInstructionDataCodec, getSetDefaultFeeRateInstructionDataDecoder, getSetDefaultFeeRateInstructionDataEncoder, getSetDefaultProtocolFeeRateDiscriminatorBytes, getSetDefaultProtocolFeeRateInstruction, getSetDefaultProtocolFeeRateInstructionDataCodec, getSetDefaultProtocolFeeRateInstructionDataDecoder, getSetDefaultProtocolFeeRateInstructionDataEncoder, getSetDelegatedFeeAuthorityDiscriminatorBytes, getSetDelegatedFeeAuthorityInstruction, getSetDelegatedFeeAuthorityInstructionDataCodec, getSetDelegatedFeeAuthorityInstructionDataDecoder, getSetDelegatedFeeAuthorityInstructionDataEncoder, getSetFeeAuthorityDiscriminatorBytes, getSetFeeAuthorityInstruction, getSetFeeAuthorityInstructionDataCodec, getSetFeeAuthorityInstructionDataDecoder, getSetFeeAuthorityInstructionDataEncoder, getSetFeeRateByDelegatedFeeAuthorityDiscriminatorBytes, getSetFeeRateByDelegatedFeeAuthorityInstruction, getSetFeeRateByDelegatedFeeAuthorityInstructionDataCodec, getSetFeeRateByDelegatedFeeAuthorityInstructionDataDecoder, getSetFeeRateByDelegatedFeeAuthorityInstructionDataEncoder, getSetFeeRateDiscriminatorBytes, getSetFeeRateInstruction, getSetFeeRateInstructionDataCodec, getSetFeeRateInstructionDataDecoder, getSetFeeRateInstructionDataEncoder, getSetInitializePoolAuthorityDiscriminatorBytes, getSetInitializePoolAuthorityInstruction, getSetInitializePoolAuthorityInstructionDataCodec, getSetInitializePoolAuthorityInstructionDataDecoder, getSetInitializePoolAuthorityInstructionDataEncoder, getSetPresetAdaptiveFeeConstantsDiscriminatorBytes, getSetPresetAdaptiveFeeConstantsInstruction, getSetPresetAdaptiveFeeConstantsInstructionDataCodec, getSetPresetAdaptiveFeeConstantsInstructionDataDecoder, getSetPresetAdaptiveFeeConstantsInstructionDataEncoder, getSetProtocolFeeRateDiscriminatorBytes, getSetProtocolFeeRateInstruction, getSetProtocolFeeRateInstructionDataCodec, getSetProtocolFeeRateInstructionDataDecoder, getSetProtocolFeeRateInstructionDataEncoder, getSetRewardAuthorityBySuperAuthorityDiscriminatorBytes, getSetRewardAuthorityBySuperAuthorityInstruction, getSetRewardAuthorityBySuperAuthorityInstructionDataCodec, getSetRewardAuthorityBySuperAuthorityInstructionDataDecoder, getSetRewardAuthorityBySuperAuthorityInstructionDataEncoder, getSetRewardAuthorityDiscriminatorBytes, getSetRewardAuthorityInstruction, getSetRewardAuthorityInstructionDataCodec, getSetRewardAuthorityInstructionDataDecoder, getSetRewardAuthorityInstructionDataEncoder, getSetRewardEmissionsDiscriminatorBytes, getSetRewardEmissionsInstruction, getSetRewardEmissionsInstructionDataCodec, getSetRewardEmissionsInstructionDataDecoder, getSetRewardEmissionsInstructionDataEncoder, getSetRewardEmissionsSuperAuthorityDiscriminatorBytes, getSetRewardEmissionsSuperAuthorityInstruction, getSetRewardEmissionsSuperAuthorityInstructionDataCodec, getSetRewardEmissionsSuperAuthorityInstructionDataDecoder, getSetRewardEmissionsSuperAuthorityInstructionDataEncoder, getSetRewardEmissionsV2DiscriminatorBytes, getSetRewardEmissionsV2Instruction, getSetRewardEmissionsV2InstructionDataCodec, getSetRewardEmissionsV2InstructionDataDecoder, getSetRewardEmissionsV2InstructionDataEncoder, getSetTokenBadgeAuthorityDiscriminatorBytes, getSetTokenBadgeAuthorityInstruction, getSetTokenBadgeAuthorityInstructionDataCodec, getSetTokenBadgeAuthorityInstructionDataDecoder, getSetTokenBadgeAuthorityInstructionDataEncoder, getSwapDiscriminatorBytes, getSwapInstruction, getSwapInstructionDataCodec, getSwapInstructionDataDecoder, getSwapInstructionDataEncoder, getSwapV2DiscriminatorBytes, getSwapV2Instruction, getSwapV2InstructionDataCodec, getSwapV2InstructionDataDecoder, getSwapV2InstructionDataEncoder, getTickArrayAddress, getTickArrayCodec, getTickArrayDecoder, getTickArrayDiscriminatorBytes, getTickArrayEncoder, getTickArraySize, getTickCodec, getTickDecoder, getTickEncoder, getTokenBadgeAddress, getTokenBadgeCodec, getTokenBadgeDecoder, getTokenBadgeDiscriminatorBytes, getTokenBadgeEncoder, getTokenBadgeSize, getTransferLockedPositionDiscriminatorBytes, getTransferLockedPositionInstruction, getTransferLockedPositionInstructionDataCodec, getTransferLockedPositionInstructionDataDecoder, getTransferLockedPositionInstructionDataEncoder, getTwoHopSwapDiscriminatorBytes, getTwoHopSwapInstruction, getTwoHopSwapInstructionDataCodec, getTwoHopSwapInstructionDataDecoder, getTwoHopSwapInstructionDataEncoder, getTwoHopSwapV2DiscriminatorBytes, getTwoHopSwapV2Instruction, getTwoHopSwapV2InstructionDataCodec, getTwoHopSwapV2InstructionDataDecoder, getTwoHopSwapV2InstructionDataEncoder, getUpdateFeesAndRewardsDiscriminatorBytes, getUpdateFeesAndRewardsInstruction, getUpdateFeesAndRewardsInstructionDataCodec, getUpdateFeesAndRewardsInstructionDataDecoder, getUpdateFeesAndRewardsInstructionDataEncoder, getWhirlpoolAddress, getWhirlpoolCodec, getWhirlpoolDecoder, getWhirlpoolDiscriminatorBytes, getWhirlpoolEncoder, getWhirlpoolErrorMessage, getWhirlpoolRewardInfoCodec, getWhirlpoolRewardInfoDecoder, getWhirlpoolRewardInfoEncoder, getWhirlpoolSize, getWhirlpoolsConfigCodec, getWhirlpoolsConfigDecoder, getWhirlpoolsConfigDiscriminatorBytes, getWhirlpoolsConfigEncoder, getWhirlpoolsConfigExtensionAddress, getWhirlpoolsConfigExtensionCodec, getWhirlpoolsConfigExtensionDecoder, getWhirlpoolsConfigExtensionDiscriminatorBytes, getWhirlpoolsConfigExtensionEncoder, getWhirlpoolsConfigExtensionSize, getWhirlpoolsConfigSize, identifyWhirlpoolAccount, identifyWhirlpoolInstruction, isWhirlpoolError, oracleAdaptiveFeeControlFactorFilter, oracleDecayPeriodFilter, oracleFilterPeriodFilter, oracleMajorSwapThresholdTicksFilter, oracleMaxVolatilityFilter, oracleReductionFactorFilter, oracleTickGroupSizeFilter, oracleTradeEnableTimestampFilter, oracleWhirlpoolFilter, parseCloseBundledPositionInstruction, parseClosePositionInstruction, parseClosePositionWithTokenExtensionsInstruction, parseCollectFeesInstruction, parseCollectFeesV2Instruction, parseCollectProtocolFeesInstruction, parseCollectProtocolFeesV2Instruction, parseCollectRewardInstruction, parseCollectRewardV2Instruction, parseDecreaseLiquidityInstruction, parseDecreaseLiquidityV2Instruction, parseDeletePositionBundleInstruction, parseDeleteTokenBadgeInstruction, parseIncreaseLiquidityInstruction, parseIncreaseLiquidityV2Instruction, parseInitializeAdaptiveFeeTierInstruction, parseInitializeConfigExtensionInstruction, parseInitializeConfigInstruction, parseInitializeFeeTierInstruction, parseInitializePoolInstruction, parseInitializePoolV2Instruction, parseInitializePoolWithAdaptiveFeeInstruction, parseInitializePositionBundleInstruction, parseInitializePositionBundleWithMetadataInstruction, parseInitializeRewardInstruction, parseInitializeRewardV2Instruction, parseInitializeTickArrayInstruction, parseInitializeTokenBadgeInstruction, parseLockPositionInstruction, parseOpenBundledPositionInstruction, parseOpenPositionInstruction, parseOpenPositionWithMetadataInstruction, parseOpenPositionWithTokenExtensionsInstruction, parseResetPositionRangeInstruction, parseSetCollectProtocolFeesAuthorityInstruction, parseSetConfigExtensionAuthorityInstruction, parseSetDefaultBaseFeeRateInstruction, parseSetDefaultFeeRateInstruction, parseSetDefaultProtocolFeeRateInstruction, parseSetDelegatedFeeAuthorityInstruction, parseSetFeeAuthorityInstruction, parseSetFeeRateByDelegatedFeeAuthorityInstruction, parseSetFeeRateInstruction, parseSetInitializePoolAuthorityInstruction, parseSetPresetAdaptiveFeeConstantsInstruction, parseSetProtocolFeeRateInstruction, parseSetRewardAuthorityBySuperAuthorityInstruction, parseSetRewardAuthorityInstruction, parseSetRewardEmissionsInstruction, parseSetRewardEmissionsSuperAuthorityInstruction, parseSetRewardEmissionsV2Instruction, parseSetTokenBadgeAuthorityInstruction, parseSwapInstruction, parseSwapV2Instruction, parseTransferLockedPositionInstruction, parseTwoHopSwapInstruction, parseTwoHopSwapV2Instruction, parseUpdateFeesAndRewardsInstruction, positionBundleMintFilter, positionMintFilter, positionTickLowerIndexFilter, positionTickUpperIndexFilter, positionWhirlpoolFilter, tickArrayStartTickIndexFilter, tickArrayWhirlpoolFilter, tokenBadgeTokenMintFilter, tokenBadgeWhirlpoolsConfigFilter, whirlpoolFeeRateFilter, whirlpoolProtocolFeeRateFilter, whirlpoolRewardMint1Filter, whirlpoolRewardMint2Filter, whirlpoolRewardMint3Filter, whirlpoolRewardVault1Filter, whirlpoolRewardVault2Filter, whirlpoolRewardVault3Filter, whirlpoolTickSpacingFilter, whirlpoolTokenMintAFilter, whirlpoolTokenMintBFilter, whirlpoolTokenVaultAFilter, whirlpoolTokenVaultBFilter, whirlpoolWhirlpoolConfigFilter, whirlpoolsConfigCollectProtocolFeesAuthorityFilter, whirlpoolsConfigDefaultProtocolFeeRateFilter, whirlpoolsConfigExtensionConfigExtensionAuthorityFilter, whirlpoolsConfigExtensionConfigTokenBadgeAuthorityFilter, whirlpoolsConfigExtensionWhirlpoolsConfigFilter, whirlpoolsConfigFeeAuthorityFilter, whirlpoolsConfigRewardEmissionsSuperAuthorityFilter };
