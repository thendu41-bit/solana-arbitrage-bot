/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type ReadonlyAccount, type ReadonlySignerAccount, type TransactionSigner, type WritableAccount, type WritableSignerAccount } from '@solana/kit';
import { ADDRESS_LOOKUP_TABLE_PROGRAM_ADDRESS } from '../programs';
import { type IInstructionWithByteDelta } from '../shared';
export declare const EXTEND_LOOKUP_TABLE_DISCRIMINATOR = 2;
export declare function getExtendLookupTableDiscriminatorBytes(): import("@solana/kit").ReadonlyUint8Array;
export type ExtendLookupTableInstruction<TProgram extends string = typeof ADDRESS_LOOKUP_TABLE_PROGRAM_ADDRESS, TAccountAddress extends string | IAccountMeta<string> = string, TAccountAuthority extends string | IAccountMeta<string> = string, TAccountPayer extends string | IAccountMeta<string> = string, TAccountSystemProgram extends string | IAccountMeta<string> = '11111111111111111111111111111111', TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountAddress extends string ? WritableAccount<TAccountAddress> : TAccountAddress,
    TAccountAuthority extends string ? ReadonlySignerAccount<TAccountAuthority> & IAccountSignerMeta<TAccountAuthority> : TAccountAuthority,
    TAccountPayer extends string ? WritableSignerAccount<TAccountPayer> & IAccountSignerMeta<TAccountPayer> : TAccountPayer,
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    ...TRemainingAccounts
]>;
export type ExtendLookupTableInstructionData = {
    discriminator: number;
    addresses: Array<Address>;
};
export type ExtendLookupTableInstructionDataArgs = {
    addresses: Array<Address>;
};
export declare function getExtendLookupTableInstructionDataEncoder(): Encoder<ExtendLookupTableInstructionDataArgs>;
export declare function getExtendLookupTableInstructionDataDecoder(): Decoder<ExtendLookupTableInstructionData>;
export declare function getExtendLookupTableInstructionDataCodec(): Codec<ExtendLookupTableInstructionDataArgs, ExtendLookupTableInstructionData>;
export type ExtendLookupTableInput<TAccountAddress extends string = string, TAccountAuthority extends string = string, TAccountPayer extends string = string, TAccountSystemProgram extends string = string> = {
    address: Address<TAccountAddress>;
    authority: TransactionSigner<TAccountAuthority>;
    payer: TransactionSigner<TAccountPayer>;
    systemProgram?: Address<TAccountSystemProgram>;
    addresses: ExtendLookupTableInstructionDataArgs['addresses'];
};
export declare function getExtendLookupTableInstruction<TAccountAddress extends string, TAccountAuthority extends string, TAccountPayer extends string, TAccountSystemProgram extends string, TProgramAddress extends Address = typeof ADDRESS_LOOKUP_TABLE_PROGRAM_ADDRESS>(input: ExtendLookupTableInput<TAccountAddress, TAccountAuthority, TAccountPayer, TAccountSystemProgram>, config?: {
    programAddress?: TProgramAddress;
}): ExtendLookupTableInstruction<TProgramAddress, TAccountAddress, TAccountAuthority, TAccountPayer, TAccountSystemProgram> & IInstructionWithByteDelta;
export type ParsedExtendLookupTableInstruction<TProgram extends string = typeof ADDRESS_LOOKUP_TABLE_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        address: TAccountMetas[0];
        authority: TAccountMetas[1];
        payer: TAccountMetas[2];
        systemProgram: TAccountMetas[3];
    };
    data: ExtendLookupTableInstructionData;
};
export declare function parseExtendLookupTableInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedExtendLookupTableInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=extendLookupTable.d.ts.map