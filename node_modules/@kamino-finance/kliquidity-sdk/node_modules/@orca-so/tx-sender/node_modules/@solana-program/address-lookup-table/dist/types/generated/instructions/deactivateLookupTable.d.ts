/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type ReadonlySignerAccount, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { ADDRESS_LOOKUP_TABLE_PROGRAM_ADDRESS } from '../programs';
export declare const DEACTIVATE_LOOKUP_TABLE_DISCRIMINATOR = 3;
export declare function getDeactivateLookupTableDiscriminatorBytes(): import("@solana/kit").ReadonlyUint8Array;
export type DeactivateLookupTableInstruction<TProgram extends string = typeof ADDRESS_LOOKUP_TABLE_PROGRAM_ADDRESS, TAccountAddress extends string | IAccountMeta<string> = string, TAccountAuthority extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountAddress extends string ? WritableAccount<TAccountAddress> : TAccountAddress,
    TAccountAuthority extends string ? ReadonlySignerAccount<TAccountAuthority> & IAccountSignerMeta<TAccountAuthority> : TAccountAuthority,
    ...TRemainingAccounts
]>;
export type DeactivateLookupTableInstructionData = {
    discriminator: number;
};
export type DeactivateLookupTableInstructionDataArgs = {};
export declare function getDeactivateLookupTableInstructionDataEncoder(): Encoder<DeactivateLookupTableInstructionDataArgs>;
export declare function getDeactivateLookupTableInstructionDataDecoder(): Decoder<DeactivateLookupTableInstructionData>;
export declare function getDeactivateLookupTableInstructionDataCodec(): Codec<DeactivateLookupTableInstructionDataArgs, DeactivateLookupTableInstructionData>;
export type DeactivateLookupTableInput<TAccountAddress extends string = string, TAccountAuthority extends string = string> = {
    address: Address<TAccountAddress>;
    authority: TransactionSigner<TAccountAuthority>;
};
export declare function getDeactivateLookupTableInstruction<TAccountAddress extends string, TAccountAuthority extends string, TProgramAddress extends Address = typeof ADDRESS_LOOKUP_TABLE_PROGRAM_ADDRESS>(input: DeactivateLookupTableInput<TAccountAddress, TAccountAuthority>, config?: {
    programAddress?: TProgramAddress;
}): DeactivateLookupTableInstruction<TProgramAddress, TAccountAddress, TAccountAuthority>;
export type ParsedDeactivateLookupTableInstruction<TProgram extends string = typeof ADDRESS_LOOKUP_TABLE_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        address: TAccountMetas[0];
        authority: TAccountMetas[1];
    };
    data: DeactivateLookupTableInstructionData;
};
export declare function parseDeactivateLookupTableInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedDeactivateLookupTableInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=deactivateLookupTable.d.ts.map