import { Address, AccountMeta, AccountSignerMeta, Instruction, TransactionSigner } from "@solana/kit";
import BN from "bn.js";
export declare const DISCRIMINATOR: Buffer<ArrayBuffer>;
export interface WithdrawArgs {
    sharesAmount: BN;
}
export interface WithdrawAccounts {
    withdrawFromAvailable: {
        user: TransactionSigner;
        vaultState: Address;
        tokenVault: Address;
        baseVaultAuthority: Address;
        userTokenAta: Address;
        tokenMint: Address;
        userSharesAta: Address;
        sharesMint: Address;
        tokenProgram: Address;
        sharesTokenProgram: Address;
        klendProgram: Address;
        eventAuthority: Address;
        program: Address;
    };
    withdrawFromReserveAccounts: {
        vaultState: Address;
        reserve: Address;
        ctokenVault: Address;
        lendingMarket: Address;
        lendingMarketAuthority: Address;
        reserveLiquiditySupply: Address;
        reserveCollateralMint: Address;
        reserveCollateralTokenProgram: Address;
        instructionSysvarAccount: Address;
    };
    eventAuthority: Address;
    program: Address;
}
export declare const layout: import("buffer-layout").Layout<WithdrawArgs>;
export declare function withdraw(args: WithdrawArgs, accounts: WithdrawAccounts, remainingAccounts?: Array<AccountMeta | AccountSignerMeta>, programAddress?: Address): Instruction<string, readonly (AccountMeta<string> | import("@solana/kit").AccountLookupMeta<string, string>)[]>;
//# sourceMappingURL=withdraw.d.ts.map