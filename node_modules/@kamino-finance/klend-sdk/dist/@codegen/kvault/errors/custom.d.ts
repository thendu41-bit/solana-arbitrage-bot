export type CustomError = DepositAmountsZero | SharesIssuedAmountDoesNotMatch | MathOverflow | IntegerOverflow | WithdrawAmountBelowMinimum | TooMuchLiquidityToWithdraw | ReserveAlreadyExists | ReserveNotPartOfAllocations | CouldNotDeserializeAccountAsReserve | ReserveNotProvidedInTheAccounts | ReserveAccountAndKeyMismatch | OutOfRangeOfReserveIndex | CannotFindReserveInAllocations | InvestAmountBelowMinimum | AdminAuthorityIncorrect | BaseVaultAuthorityIncorrect | BaseVaultAuthorityBumpIncorrect | TokenMintIncorrect | TokenMintDecimalsIncorrect | TokenVaultIncorrect | SharesMintDecimalsIncorrect | SharesMintIncorrect | InitialAccountingIncorrect | ReserveIsStale | NotEnoughLiquidityDisinvestedToSendToUser | BPSValueTooBig | DepositAmountBelowMinimum | ReserveSpaceExhausted | CannotWithdrawFromEmptyVault | TokensDepositedAmountDoesNotMatch | AmountToWithdrawDoesNotMatch | LiquidityToWithdrawDoesNotMatch | UserReceivedAmountDoesNotMatch | SharesBurnedAmountDoesNotMatch | DisinvestedLiquidityAmountDoesNotMatch | SharesMintedAmountDoesNotMatch | AUMDecreasedAfterInvest | AUMBelowPendingFees | DepositAmountsZeroShares | WithdrawResultsInZeroShares | CannotWithdrawZeroShares | ManagementFeeGreaterThanMaxAllowed | VaultAUMZero | MissingReserveForBatchRefresh | MinWithdrawAmountTooBig | InvestTooSoon | WrongAdminOrAllocationAdmin | ReserveHasNonZeroAllocationOrCTokens | DepositAmountGreaterThanRequestedAmount;
export declare class DepositAmountsZero extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7000;
    readonly code = 7000;
    readonly name = "DepositAmountsZero";
    readonly msg = "DepositAmountsZero";
    constructor(logs?: string[] | undefined);
}
export declare class SharesIssuedAmountDoesNotMatch extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7001;
    readonly code = 7001;
    readonly name = "SharesIssuedAmountDoesNotMatch";
    readonly msg = "SharesIssuedAmountDoesNotMatch";
    constructor(logs?: string[] | undefined);
}
export declare class MathOverflow extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7002;
    readonly code = 7002;
    readonly name = "MathOverflow";
    readonly msg = "MathOverflow";
    constructor(logs?: string[] | undefined);
}
export declare class IntegerOverflow extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7003;
    readonly code = 7003;
    readonly name = "IntegerOverflow";
    readonly msg = "IntegerOverflow";
    constructor(logs?: string[] | undefined);
}
export declare class WithdrawAmountBelowMinimum extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7004;
    readonly code = 7004;
    readonly name = "WithdrawAmountBelowMinimum";
    readonly msg = "Withdrawn amount is below minimum";
    constructor(logs?: string[] | undefined);
}
export declare class TooMuchLiquidityToWithdraw extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7005;
    readonly code = 7005;
    readonly name = "TooMuchLiquidityToWithdraw";
    readonly msg = "TooMuchLiquidityToWithdraw";
    constructor(logs?: string[] | undefined);
}
export declare class ReserveAlreadyExists extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7006;
    readonly code = 7006;
    readonly name = "ReserveAlreadyExists";
    readonly msg = "ReserveAlreadyExists";
    constructor(logs?: string[] | undefined);
}
export declare class ReserveNotPartOfAllocations extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7007;
    readonly code = 7007;
    readonly name = "ReserveNotPartOfAllocations";
    readonly msg = "ReserveNotPartOfAllocations";
    constructor(logs?: string[] | undefined);
}
export declare class CouldNotDeserializeAccountAsReserve extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7008;
    readonly code = 7008;
    readonly name = "CouldNotDeserializeAccountAsReserve";
    readonly msg = "CouldNotDeserializeAccountAsReserve";
    constructor(logs?: string[] | undefined);
}
export declare class ReserveNotProvidedInTheAccounts extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7009;
    readonly code = 7009;
    readonly name = "ReserveNotProvidedInTheAccounts";
    readonly msg = "ReserveNotProvidedInTheAccounts";
    constructor(logs?: string[] | undefined);
}
export declare class ReserveAccountAndKeyMismatch extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7010;
    readonly code = 7010;
    readonly name = "ReserveAccountAndKeyMismatch";
    readonly msg = "ReserveAccountAndKeyMismatch";
    constructor(logs?: string[] | undefined);
}
export declare class OutOfRangeOfReserveIndex extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7011;
    readonly code = 7011;
    readonly name = "OutOfRangeOfReserveIndex";
    readonly msg = "OutOfRangeOfReserveIndex";
    constructor(logs?: string[] | undefined);
}
export declare class CannotFindReserveInAllocations extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7012;
    readonly code = 7012;
    readonly name = "CannotFindReserveInAllocations";
    readonly msg = "OutOfRangeOfReserveIndex";
    constructor(logs?: string[] | undefined);
}
export declare class InvestAmountBelowMinimum extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7013;
    readonly code = 7013;
    readonly name = "InvestAmountBelowMinimum";
    readonly msg = "Invested amount is below minimum";
    constructor(logs?: string[] | undefined);
}
export declare class AdminAuthorityIncorrect extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7014;
    readonly code = 7014;
    readonly name = "AdminAuthorityIncorrect";
    readonly msg = "AdminAuthorityIncorrect";
    constructor(logs?: string[] | undefined);
}
export declare class BaseVaultAuthorityIncorrect extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7015;
    readonly code = 7015;
    readonly name = "BaseVaultAuthorityIncorrect";
    readonly msg = "BaseVaultAuthorityIncorrect";
    constructor(logs?: string[] | undefined);
}
export declare class BaseVaultAuthorityBumpIncorrect extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7016;
    readonly code = 7016;
    readonly name = "BaseVaultAuthorityBumpIncorrect";
    readonly msg = "BaseVaultAuthorityBumpIncorrect";
    constructor(logs?: string[] | undefined);
}
export declare class TokenMintIncorrect extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7017;
    readonly code = 7017;
    readonly name = "TokenMintIncorrect";
    readonly msg = "TokenMintIncorrect";
    constructor(logs?: string[] | undefined);
}
export declare class TokenMintDecimalsIncorrect extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7018;
    readonly code = 7018;
    readonly name = "TokenMintDecimalsIncorrect";
    readonly msg = "TokenMintDecimalsIncorrect";
    constructor(logs?: string[] | undefined);
}
export declare class TokenVaultIncorrect extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7019;
    readonly code = 7019;
    readonly name = "TokenVaultIncorrect";
    readonly msg = "TokenVaultIncorrect";
    constructor(logs?: string[] | undefined);
}
export declare class SharesMintDecimalsIncorrect extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7020;
    readonly code = 7020;
    readonly name = "SharesMintDecimalsIncorrect";
    readonly msg = "SharesMintDecimalsIncorrect";
    constructor(logs?: string[] | undefined);
}
export declare class SharesMintIncorrect extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7021;
    readonly code = 7021;
    readonly name = "SharesMintIncorrect";
    readonly msg = "SharesMintIncorrect";
    constructor(logs?: string[] | undefined);
}
export declare class InitialAccountingIncorrect extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7022;
    readonly code = 7022;
    readonly name = "InitialAccountingIncorrect";
    readonly msg = "InitialAccountingIncorrect";
    constructor(logs?: string[] | undefined);
}
export declare class ReserveIsStale extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7023;
    readonly code = 7023;
    readonly name = "ReserveIsStale";
    readonly msg = "Reserve is stale and must be refreshed before any operation";
    constructor(logs?: string[] | undefined);
}
export declare class NotEnoughLiquidityDisinvestedToSendToUser extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7024;
    readonly code = 7024;
    readonly name = "NotEnoughLiquidityDisinvestedToSendToUser";
    readonly msg = "Not enough liquidity disinvested to send to user";
    constructor(logs?: string[] | undefined);
}
export declare class BPSValueTooBig extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7025;
    readonly code = 7025;
    readonly name = "BPSValueTooBig";
    readonly msg = "BPS value is greater than 10000";
    constructor(logs?: string[] | undefined);
}
export declare class DepositAmountBelowMinimum extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7026;
    readonly code = 7026;
    readonly name = "DepositAmountBelowMinimum";
    readonly msg = "Deposited amount is below minimum";
    constructor(logs?: string[] | undefined);
}
export declare class ReserveSpaceExhausted extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7027;
    readonly code = 7027;
    readonly name = "ReserveSpaceExhausted";
    readonly msg = "Vault have no space for new reserves";
    constructor(logs?: string[] | undefined);
}
export declare class CannotWithdrawFromEmptyVault extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7028;
    readonly code = 7028;
    readonly name = "CannotWithdrawFromEmptyVault";
    readonly msg = "Cannot withdraw from empty vault";
    constructor(logs?: string[] | undefined);
}
export declare class TokensDepositedAmountDoesNotMatch extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7029;
    readonly code = 7029;
    readonly name = "TokensDepositedAmountDoesNotMatch";
    readonly msg = "TokensDepositedAmountDoesNotMatch";
    constructor(logs?: string[] | undefined);
}
export declare class AmountToWithdrawDoesNotMatch extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7030;
    readonly code = 7030;
    readonly name = "AmountToWithdrawDoesNotMatch";
    readonly msg = "Amount to withdraw does not match";
    constructor(logs?: string[] | undefined);
}
export declare class LiquidityToWithdrawDoesNotMatch extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7031;
    readonly code = 7031;
    readonly name = "LiquidityToWithdrawDoesNotMatch";
    readonly msg = "Liquidity to withdraw does not match";
    constructor(logs?: string[] | undefined);
}
export declare class UserReceivedAmountDoesNotMatch extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7032;
    readonly code = 7032;
    readonly name = "UserReceivedAmountDoesNotMatch";
    readonly msg = "User received amount does not match";
    constructor(logs?: string[] | undefined);
}
export declare class SharesBurnedAmountDoesNotMatch extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7033;
    readonly code = 7033;
    readonly name = "SharesBurnedAmountDoesNotMatch";
    readonly msg = "Shares burned amount does not match";
    constructor(logs?: string[] | undefined);
}
export declare class DisinvestedLiquidityAmountDoesNotMatch extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7034;
    readonly code = 7034;
    readonly name = "DisinvestedLiquidityAmountDoesNotMatch";
    readonly msg = "Disinvested liquidity amount does not match";
    constructor(logs?: string[] | undefined);
}
export declare class SharesMintedAmountDoesNotMatch extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7035;
    readonly code = 7035;
    readonly name = "SharesMintedAmountDoesNotMatch";
    readonly msg = "SharesMintedAmountDoesNotMatch";
    constructor(logs?: string[] | undefined);
}
export declare class AUMDecreasedAfterInvest extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7036;
    readonly code = 7036;
    readonly name = "AUMDecreasedAfterInvest";
    readonly msg = "AUM decreased after invest";
    constructor(logs?: string[] | undefined);
}
export declare class AUMBelowPendingFees extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7037;
    readonly code = 7037;
    readonly name = "AUMBelowPendingFees";
    readonly msg = "AUM is below pending fees";
    constructor(logs?: string[] | undefined);
}
export declare class DepositAmountsZeroShares extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7038;
    readonly code = 7038;
    readonly name = "DepositAmountsZeroShares";
    readonly msg = "Deposit amount results in 0 shares";
    constructor(logs?: string[] | undefined);
}
export declare class WithdrawResultsInZeroShares extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7039;
    readonly code = 7039;
    readonly name = "WithdrawResultsInZeroShares";
    readonly msg = "Withdraw amount results in 0 shares";
    constructor(logs?: string[] | undefined);
}
export declare class CannotWithdrawZeroShares extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7040;
    readonly code = 7040;
    readonly name = "CannotWithdrawZeroShares";
    readonly msg = "Cannot withdraw zero shares";
    constructor(logs?: string[] | undefined);
}
export declare class ManagementFeeGreaterThanMaxAllowed extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7041;
    readonly code = 7041;
    readonly name = "ManagementFeeGreaterThanMaxAllowed";
    readonly msg = "Management fee is greater than maximum allowed";
    constructor(logs?: string[] | undefined);
}
export declare class VaultAUMZero extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7042;
    readonly code = 7042;
    readonly name = "VaultAUMZero";
    readonly msg = "Vault assets under management are empty";
    constructor(logs?: string[] | undefined);
}
export declare class MissingReserveForBatchRefresh extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7043;
    readonly code = 7043;
    readonly name = "MissingReserveForBatchRefresh";
    readonly msg = "Missing reserve for batch refresh";
    constructor(logs?: string[] | undefined);
}
export declare class MinWithdrawAmountTooBig extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7044;
    readonly code = 7044;
    readonly name = "MinWithdrawAmountTooBig";
    readonly msg = "Min withdraw amount is too big";
    constructor(logs?: string[] | undefined);
}
export declare class InvestTooSoon extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7045;
    readonly code = 7045;
    readonly name = "InvestTooSoon";
    readonly msg = "Invest is called too soon after last invest";
    constructor(logs?: string[] | undefined);
}
export declare class WrongAdminOrAllocationAdmin extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7046;
    readonly code = 7046;
    readonly name = "WrongAdminOrAllocationAdmin";
    readonly msg = "Wrong admin or allocation admin";
    constructor(logs?: string[] | undefined);
}
export declare class ReserveHasNonZeroAllocationOrCTokens extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7047;
    readonly code = 7047;
    readonly name = "ReserveHasNonZeroAllocationOrCTokens";
    readonly msg = "Reserve has non-zero allocation or ctokens so cannot be removed";
    constructor(logs?: string[] | undefined);
}
export declare class DepositAmountGreaterThanRequestedAmount extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 7048;
    readonly code = 7048;
    readonly name = "DepositAmountGreaterThanRequestedAmount";
    readonly msg = "Deposit amount is greater than requested amount";
    constructor(logs?: string[] | undefined);
}
export declare function fromCode(code: number, logs?: string[]): CustomError | null;
//# sourceMappingURL=custom.d.ts.map