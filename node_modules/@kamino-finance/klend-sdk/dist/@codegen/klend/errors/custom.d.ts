export type CustomError = InvalidMarketAuthority | InvalidMarketOwner | InvalidAccountOwner | InvalidAmount | InvalidConfig | InvalidSigner | InvalidAccountInput | MathOverflow | InsufficientLiquidity | ReserveStale | WithdrawTooSmall | WithdrawTooLarge | BorrowTooSmall | BorrowTooLarge | RepayTooSmall | LiquidationTooSmall | ObligationHealthy | ObligationStale | ObligationReserveLimit | InvalidObligationOwner | ObligationDepositsEmpty | ObligationBorrowsEmpty | ObligationDepositsZero | ObligationBorrowsZero | InvalidObligationCollateral | InvalidObligationLiquidity | ObligationCollateralEmpty | ObligationLiquidityEmpty | NegativeInterestRate | InvalidOracleConfig | InsufficientProtocolFeesToRedeem | FlashBorrowCpi | NoFlashRepayFound | InvalidFlashRepay | FlashRepayCpi | MultipleFlashBorrows | FlashLoansDisabled | SwitchboardV2Error | CouldNotDeserializeScope | PriceTooOld | PriceTooDivergentFromTwap | InvalidTwapPrice | GlobalEmergencyMode | InvalidFlag | PriceNotValid | PriceIsBiggerThanHeuristic | PriceIsLowerThanHeuristic | PriceIsZero | PriceConfidenceTooWide | IntegerOverflow | NoFarmForReserve | IncorrectInstructionInPosition | NoPriceFound | InvalidTwapConfig | InvalidPythPriceAccount | InvalidSwitchboardAccount | InvalidScopePriceAccount | ObligationCollateralLtvZero | InvalidObligationSeedsValue | DeprecatedInvalidObligationId | InvalidBorrowRateCurvePoint | InvalidUtilizationRate | CannotSocializeObligationWithCollateral | ObligationEmpty | WithdrawalCapReached | LastTimestampGreaterThanCurrent | LiquidationRewardTooSmall | IsolatedAssetTierViolation | InconsistentElevationGroup | InvalidElevationGroup | InvalidElevationGroupConfig | UnhealthyElevationGroupLtv | ElevationGroupNewLoansDisabled | ReserveDeprecated | ReferrerAccountNotInitialized | ReferrerAccountMintMissmatch | ReferrerAccountWrongAddress | ReferrerAccountReferrerMissmatch | ReferrerAccountMissing | InsufficientReferralFeesToRedeem | CpiDisabled | ShortUrlNotAsciiAlphanumeric | ReserveObsolete | ElevationGroupAlreadyActivated | ObligationInObsoleteReserve | ReferrerStateOwnerMismatch | UserMetadataOwnerAlreadySet | CollateralNonLiquidatable | BorrowingDisabled | BorrowLimitExceeded | DepositLimitExceeded | BorrowingDisabledOutsideElevationGroup | NetValueRemainingTooSmall | WorseLtvBlocked | LiabilitiesBiggerThanAssets | ReserveTokenBalanceMismatch | ReserveVaultBalanceMismatch | ReserveAccountingMismatch | BorrowingAboveUtilizationRateDisabled | LiquidationBorrowFactorPriority | LiquidationLowestLiquidationLtvPriority | ElevationGroupBorrowLimitExceeded | ElevationGroupWithoutDebtReserve | ElevationGroupMaxCollateralReserveZero | ElevationGroupHasAnotherDebtReserve | ElevationGroupDebtReserveAsCollateral | ObligationCollateralExceedsElevationGroupLimit | ObligationElevationGroupMultipleDebtReserve | UnsupportedTokenExtension | InvalidTokenAccount | DepositDisabledOutsideElevationGroup | CannotCalculateReferralAmountDueToSlotsMismatch | ObligationOwnersMustMatch | ObligationsMustMatch | LendingMarketsMustMatch | ObligationCurrentlyMarkedForDeleveraging | MaximumWithdrawValueZero | ZeroMaxLtvAssetsInDeposits | LowestLtvAssetsPriority | WorseLtvThanUnhealthyLtv | FarmAccountsMissing | RepayTooSmallForFullLiquidation | InsufficientRepayAmount | OrderIndexOutOfBounds | InvalidOrderConfiguration | OrderConfigurationNotSupportedByObligation | OperationNotPermittedWithCurrentObligationOrders | OperationNotPermittedMarketImmutable | OrderCreationDisabled | NoUpgradeAuthority;
export declare class InvalidMarketAuthority extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6000;
    readonly code = 6000;
    readonly name = "InvalidMarketAuthority";
    readonly msg = "Market authority is invalid";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidMarketOwner extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6001;
    readonly code = 6001;
    readonly name = "InvalidMarketOwner";
    readonly msg = "Market owner is invalid";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidAccountOwner extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6002;
    readonly code = 6002;
    readonly name = "InvalidAccountOwner";
    readonly msg = "Input account owner is not the program address";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidAmount extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6003;
    readonly code = 6003;
    readonly name = "InvalidAmount";
    readonly msg = "Input amount is invalid";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidConfig extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6004;
    readonly code = 6004;
    readonly name = "InvalidConfig";
    readonly msg = "Input config value is invalid";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidSigner extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6005;
    readonly code = 6005;
    readonly name = "InvalidSigner";
    readonly msg = "Input account must be a signer";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidAccountInput extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6006;
    readonly code = 6006;
    readonly name = "InvalidAccountInput";
    readonly msg = "Invalid account input";
    constructor(logs?: string[] | undefined);
}
export declare class MathOverflow extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6007;
    readonly code = 6007;
    readonly name = "MathOverflow";
    readonly msg = "Math operation overflow";
    constructor(logs?: string[] | undefined);
}
export declare class InsufficientLiquidity extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6008;
    readonly code = 6008;
    readonly name = "InsufficientLiquidity";
    readonly msg = "Insufficient liquidity available";
    constructor(logs?: string[] | undefined);
}
export declare class ReserveStale extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6009;
    readonly code = 6009;
    readonly name = "ReserveStale";
    readonly msg = "Reserve state needs to be refreshed";
    constructor(logs?: string[] | undefined);
}
export declare class WithdrawTooSmall extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6010;
    readonly code = 6010;
    readonly name = "WithdrawTooSmall";
    readonly msg = "Withdraw amount too small";
    constructor(logs?: string[] | undefined);
}
export declare class WithdrawTooLarge extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6011;
    readonly code = 6011;
    readonly name = "WithdrawTooLarge";
    readonly msg = "Withdraw amount too large";
    constructor(logs?: string[] | undefined);
}
export declare class BorrowTooSmall extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6012;
    readonly code = 6012;
    readonly name = "BorrowTooSmall";
    readonly msg = "Borrow amount too small to receive liquidity after fees";
    constructor(logs?: string[] | undefined);
}
export declare class BorrowTooLarge extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6013;
    readonly code = 6013;
    readonly name = "BorrowTooLarge";
    readonly msg = "Borrow amount too large for deposited collateral";
    constructor(logs?: string[] | undefined);
}
export declare class RepayTooSmall extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6014;
    readonly code = 6014;
    readonly name = "RepayTooSmall";
    readonly msg = "Repay amount too small to transfer liquidity";
    constructor(logs?: string[] | undefined);
}
export declare class LiquidationTooSmall extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6015;
    readonly code = 6015;
    readonly name = "LiquidationTooSmall";
    readonly msg = "Liquidation amount too small to receive collateral";
    constructor(logs?: string[] | undefined);
}
export declare class ObligationHealthy extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6016;
    readonly code = 6016;
    readonly name = "ObligationHealthy";
    readonly msg = "Cannot liquidate healthy obligations";
    constructor(logs?: string[] | undefined);
}
export declare class ObligationStale extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6017;
    readonly code = 6017;
    readonly name = "ObligationStale";
    readonly msg = "Obligation state needs to be refreshed";
    constructor(logs?: string[] | undefined);
}
export declare class ObligationReserveLimit extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6018;
    readonly code = 6018;
    readonly name = "ObligationReserveLimit";
    readonly msg = "Obligation reserve limit exceeded";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidObligationOwner extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6019;
    readonly code = 6019;
    readonly name = "InvalidObligationOwner";
    readonly msg = "Obligation owner is invalid";
    constructor(logs?: string[] | undefined);
}
export declare class ObligationDepositsEmpty extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6020;
    readonly code = 6020;
    readonly name = "ObligationDepositsEmpty";
    readonly msg = "Obligation deposits are empty";
    constructor(logs?: string[] | undefined);
}
export declare class ObligationBorrowsEmpty extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6021;
    readonly code = 6021;
    readonly name = "ObligationBorrowsEmpty";
    readonly msg = "Obligation borrows are empty";
    constructor(logs?: string[] | undefined);
}
export declare class ObligationDepositsZero extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6022;
    readonly code = 6022;
    readonly name = "ObligationDepositsZero";
    readonly msg = "Obligation deposits have zero value";
    constructor(logs?: string[] | undefined);
}
export declare class ObligationBorrowsZero extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6023;
    readonly code = 6023;
    readonly name = "ObligationBorrowsZero";
    readonly msg = "Obligation borrows have zero value";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidObligationCollateral extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6024;
    readonly code = 6024;
    readonly name = "InvalidObligationCollateral";
    readonly msg = "Invalid obligation collateral";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidObligationLiquidity extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6025;
    readonly code = 6025;
    readonly name = "InvalidObligationLiquidity";
    readonly msg = "Invalid obligation liquidity";
    constructor(logs?: string[] | undefined);
}
export declare class ObligationCollateralEmpty extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6026;
    readonly code = 6026;
    readonly name = "ObligationCollateralEmpty";
    readonly msg = "Obligation collateral is empty";
    constructor(logs?: string[] | undefined);
}
export declare class ObligationLiquidityEmpty extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6027;
    readonly code = 6027;
    readonly name = "ObligationLiquidityEmpty";
    readonly msg = "Obligation liquidity is empty";
    constructor(logs?: string[] | undefined);
}
export declare class NegativeInterestRate extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6028;
    readonly code = 6028;
    readonly name = "NegativeInterestRate";
    readonly msg = "Interest rate is negative";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidOracleConfig extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6029;
    readonly code = 6029;
    readonly name = "InvalidOracleConfig";
    readonly msg = "Input oracle config is invalid";
    constructor(logs?: string[] | undefined);
}
export declare class InsufficientProtocolFeesToRedeem extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6030;
    readonly code = 6030;
    readonly name = "InsufficientProtocolFeesToRedeem";
    readonly msg = "Insufficient protocol fees to claim or no liquidity available";
    constructor(logs?: string[] | undefined);
}
export declare class FlashBorrowCpi extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6031;
    readonly code = 6031;
    readonly name = "FlashBorrowCpi";
    readonly msg = "No cpi flash borrows allowed";
    constructor(logs?: string[] | undefined);
}
export declare class NoFlashRepayFound extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6032;
    readonly code = 6032;
    readonly name = "NoFlashRepayFound";
    readonly msg = "No corresponding repay found for flash borrow";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidFlashRepay extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6033;
    readonly code = 6033;
    readonly name = "InvalidFlashRepay";
    readonly msg = "Invalid repay found";
    constructor(logs?: string[] | undefined);
}
export declare class FlashRepayCpi extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6034;
    readonly code = 6034;
    readonly name = "FlashRepayCpi";
    readonly msg = "No cpi flash repays allowed";
    constructor(logs?: string[] | undefined);
}
export declare class MultipleFlashBorrows extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6035;
    readonly code = 6035;
    readonly name = "MultipleFlashBorrows";
    readonly msg = "Multiple flash borrows not allowed in the same transaction";
    constructor(logs?: string[] | undefined);
}
export declare class FlashLoansDisabled extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6036;
    readonly code = 6036;
    readonly name = "FlashLoansDisabled";
    readonly msg = "Flash loans are disabled for this reserve";
    constructor(logs?: string[] | undefined);
}
export declare class SwitchboardV2Error extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6037;
    readonly code = 6037;
    readonly name = "SwitchboardV2Error";
    readonly msg = "Switchboard error";
    constructor(logs?: string[] | undefined);
}
export declare class CouldNotDeserializeScope extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6038;
    readonly code = 6038;
    readonly name = "CouldNotDeserializeScope";
    readonly msg = "Cannot deserialize the scope price account";
    constructor(logs?: string[] | undefined);
}
export declare class PriceTooOld extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6039;
    readonly code = 6039;
    readonly name = "PriceTooOld";
    readonly msg = "Price too old";
    constructor(logs?: string[] | undefined);
}
export declare class PriceTooDivergentFromTwap extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6040;
    readonly code = 6040;
    readonly name = "PriceTooDivergentFromTwap";
    readonly msg = "Price too divergent from twap";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidTwapPrice extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6041;
    readonly code = 6041;
    readonly name = "InvalidTwapPrice";
    readonly msg = "Invalid twap price";
    constructor(logs?: string[] | undefined);
}
export declare class GlobalEmergencyMode extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6042;
    readonly code = 6042;
    readonly name = "GlobalEmergencyMode";
    readonly msg = "Emergency mode is enabled";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidFlag extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6043;
    readonly code = 6043;
    readonly name = "InvalidFlag";
    readonly msg = "Invalid lending market config";
    constructor(logs?: string[] | undefined);
}
export declare class PriceNotValid extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6044;
    readonly code = 6044;
    readonly name = "PriceNotValid";
    readonly msg = "Price is not valid";
    constructor(logs?: string[] | undefined);
}
export declare class PriceIsBiggerThanHeuristic extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6045;
    readonly code = 6045;
    readonly name = "PriceIsBiggerThanHeuristic";
    readonly msg = "Price is bigger than allowed by heuristic";
    constructor(logs?: string[] | undefined);
}
export declare class PriceIsLowerThanHeuristic extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6046;
    readonly code = 6046;
    readonly name = "PriceIsLowerThanHeuristic";
    readonly msg = "Price lower than allowed by heuristic";
    constructor(logs?: string[] | undefined);
}
export declare class PriceIsZero extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6047;
    readonly code = 6047;
    readonly name = "PriceIsZero";
    readonly msg = "Price is zero";
    constructor(logs?: string[] | undefined);
}
export declare class PriceConfidenceTooWide extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6048;
    readonly code = 6048;
    readonly name = "PriceConfidenceTooWide";
    readonly msg = "Price confidence too wide";
    constructor(logs?: string[] | undefined);
}
export declare class IntegerOverflow extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6049;
    readonly code = 6049;
    readonly name = "IntegerOverflow";
    readonly msg = "Conversion between integers failed";
    constructor(logs?: string[] | undefined);
}
export declare class NoFarmForReserve extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6050;
    readonly code = 6050;
    readonly name = "NoFarmForReserve";
    readonly msg = "This reserve does not have a farm";
    constructor(logs?: string[] | undefined);
}
export declare class IncorrectInstructionInPosition extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6051;
    readonly code = 6051;
    readonly name = "IncorrectInstructionInPosition";
    readonly msg = "Wrong instruction at expected position";
    constructor(logs?: string[] | undefined);
}
export declare class NoPriceFound extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6052;
    readonly code = 6052;
    readonly name = "NoPriceFound";
    readonly msg = "No price found";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidTwapConfig extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6053;
    readonly code = 6053;
    readonly name = "InvalidTwapConfig";
    readonly msg = "Invalid Twap configuration: Twap is enabled but one of the enabled price doesn't have a twap";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidPythPriceAccount extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6054;
    readonly code = 6054;
    readonly name = "InvalidPythPriceAccount";
    readonly msg = "Pyth price account does not match configuration";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidSwitchboardAccount extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6055;
    readonly code = 6055;
    readonly name = "InvalidSwitchboardAccount";
    readonly msg = "Switchboard account(s) do not match configuration";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidScopePriceAccount extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6056;
    readonly code = 6056;
    readonly name = "InvalidScopePriceAccount";
    readonly msg = "Scope price account does not match configuration";
    constructor(logs?: string[] | undefined);
}
export declare class ObligationCollateralLtvZero extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6057;
    readonly code = 6057;
    readonly name = "ObligationCollateralLtvZero";
    readonly msg = "The obligation has one collateral with an LTV set to 0. Withdraw it before withdrawing other collaterals";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidObligationSeedsValue extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6058;
    readonly code = 6058;
    readonly name = "InvalidObligationSeedsValue";
    readonly msg = "Seeds must be default pubkeys for tag 0, and mint addresses for tag 1 or 2";
    constructor(logs?: string[] | undefined);
}
export declare class DeprecatedInvalidObligationId extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6059;
    readonly code = 6059;
    readonly name = "DeprecatedInvalidObligationId";
    readonly msg = "[DEPRECATED] Obligation id must be 0";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidBorrowRateCurvePoint extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6060;
    readonly code = 6060;
    readonly name = "InvalidBorrowRateCurvePoint";
    readonly msg = "Invalid borrow rate curve point";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidUtilizationRate extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6061;
    readonly code = 6061;
    readonly name = "InvalidUtilizationRate";
    readonly msg = "Invalid utilization rate";
    constructor(logs?: string[] | undefined);
}
export declare class CannotSocializeObligationWithCollateral extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6062;
    readonly code = 6062;
    readonly name = "CannotSocializeObligationWithCollateral";
    readonly msg = "Obligation hasn't been fully liquidated and debt cannot be socialized.";
    constructor(logs?: string[] | undefined);
}
export declare class ObligationEmpty extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6063;
    readonly code = 6063;
    readonly name = "ObligationEmpty";
    readonly msg = "Obligation has no borrows or deposits.";
    constructor(logs?: string[] | undefined);
}
export declare class WithdrawalCapReached extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6064;
    readonly code = 6064;
    readonly name = "WithdrawalCapReached";
    readonly msg = "Withdrawal cap is reached";
    constructor(logs?: string[] | undefined);
}
export declare class LastTimestampGreaterThanCurrent extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6065;
    readonly code = 6065;
    readonly name = "LastTimestampGreaterThanCurrent";
    readonly msg = "The last interval start timestamp is greater than the current timestamp";
    constructor(logs?: string[] | undefined);
}
export declare class LiquidationRewardTooSmall extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6066;
    readonly code = 6066;
    readonly name = "LiquidationRewardTooSmall";
    readonly msg = "The reward amount is less than the minimum acceptable received liquidity";
    constructor(logs?: string[] | undefined);
}
export declare class IsolatedAssetTierViolation extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6067;
    readonly code = 6067;
    readonly name = "IsolatedAssetTierViolation";
    readonly msg = "Isolated Asset Tier Violation";
    constructor(logs?: string[] | undefined);
}
export declare class InconsistentElevationGroup extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6068;
    readonly code = 6068;
    readonly name = "InconsistentElevationGroup";
    readonly msg = "The obligation's elevation group and the reserve's are not the same";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidElevationGroup extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6069;
    readonly code = 6069;
    readonly name = "InvalidElevationGroup";
    readonly msg = "The elevation group chosen for the reserve does not exist in the lending market";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidElevationGroupConfig extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6070;
    readonly code = 6070;
    readonly name = "InvalidElevationGroupConfig";
    readonly msg = "The elevation group updated has wrong parameters set";
    constructor(logs?: string[] | undefined);
}
export declare class UnhealthyElevationGroupLtv extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6071;
    readonly code = 6071;
    readonly name = "UnhealthyElevationGroupLtv";
    readonly msg = "The current obligation must have most or all its debt repaid before changing the elevation group";
    constructor(logs?: string[] | undefined);
}
export declare class ElevationGroupNewLoansDisabled extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6072;
    readonly code = 6072;
    readonly name = "ElevationGroupNewLoansDisabled";
    readonly msg = "Elevation group does not accept any new loans or any new borrows/withdrawals";
    constructor(logs?: string[] | undefined);
}
export declare class ReserveDeprecated extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6073;
    readonly code = 6073;
    readonly name = "ReserveDeprecated";
    readonly msg = "Reserve was deprecated, no longer usable";
    constructor(logs?: string[] | undefined);
}
export declare class ReferrerAccountNotInitialized extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6074;
    readonly code = 6074;
    readonly name = "ReferrerAccountNotInitialized";
    readonly msg = "Referrer account not initialized";
    constructor(logs?: string[] | undefined);
}
export declare class ReferrerAccountMintMissmatch extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6075;
    readonly code = 6075;
    readonly name = "ReferrerAccountMintMissmatch";
    readonly msg = "Referrer account mint does not match the operation reserve mint";
    constructor(logs?: string[] | undefined);
}
export declare class ReferrerAccountWrongAddress extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6076;
    readonly code = 6076;
    readonly name = "ReferrerAccountWrongAddress";
    readonly msg = "Referrer account address is not a valid program address";
    constructor(logs?: string[] | undefined);
}
export declare class ReferrerAccountReferrerMissmatch extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6077;
    readonly code = 6077;
    readonly name = "ReferrerAccountReferrerMissmatch";
    readonly msg = "Referrer account referrer does not match the owner referrer";
    constructor(logs?: string[] | undefined);
}
export declare class ReferrerAccountMissing extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6078;
    readonly code = 6078;
    readonly name = "ReferrerAccountMissing";
    readonly msg = "Referrer account missing for obligation with referrer";
    constructor(logs?: string[] | undefined);
}
export declare class InsufficientReferralFeesToRedeem extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6079;
    readonly code = 6079;
    readonly name = "InsufficientReferralFeesToRedeem";
    readonly msg = "Insufficient referral fees to claim or no liquidity available";
    constructor(logs?: string[] | undefined);
}
export declare class CpiDisabled extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6080;
    readonly code = 6080;
    readonly name = "CpiDisabled";
    readonly msg = "CPI disabled for this instruction";
    constructor(logs?: string[] | undefined);
}
export declare class ShortUrlNotAsciiAlphanumeric extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6081;
    readonly code = 6081;
    readonly name = "ShortUrlNotAsciiAlphanumeric";
    readonly msg = "Referrer short_url is not ascii alphanumeric";
    constructor(logs?: string[] | undefined);
}
export declare class ReserveObsolete extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6082;
    readonly code = 6082;
    readonly name = "ReserveObsolete";
    readonly msg = "Reserve is marked as obsolete";
    constructor(logs?: string[] | undefined);
}
export declare class ElevationGroupAlreadyActivated extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6083;
    readonly code = 6083;
    readonly name = "ElevationGroupAlreadyActivated";
    readonly msg = "Obligation already part of the same elevation group";
    constructor(logs?: string[] | undefined);
}
export declare class ObligationInObsoleteReserve extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6084;
    readonly code = 6084;
    readonly name = "ObligationInObsoleteReserve";
    readonly msg = "Obligation has a deposit or borrow in an obsolete reserve";
    constructor(logs?: string[] | undefined);
}
export declare class ReferrerStateOwnerMismatch extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6085;
    readonly code = 6085;
    readonly name = "ReferrerStateOwnerMismatch";
    readonly msg = "Referrer state owner does not match the given signer";
    constructor(logs?: string[] | undefined);
}
export declare class UserMetadataOwnerAlreadySet extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6086;
    readonly code = 6086;
    readonly name = "UserMetadataOwnerAlreadySet";
    readonly msg = "User metadata owner is already set";
    constructor(logs?: string[] | undefined);
}
export declare class CollateralNonLiquidatable extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6087;
    readonly code = 6087;
    readonly name = "CollateralNonLiquidatable";
    readonly msg = "This collateral cannot be liquidated (LTV set to 0)";
    constructor(logs?: string[] | undefined);
}
export declare class BorrowingDisabled extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6088;
    readonly code = 6088;
    readonly name = "BorrowingDisabled";
    readonly msg = "Borrowing is disabled";
    constructor(logs?: string[] | undefined);
}
export declare class BorrowLimitExceeded extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6089;
    readonly code = 6089;
    readonly name = "BorrowLimitExceeded";
    readonly msg = "Cannot borrow above borrow limit";
    constructor(logs?: string[] | undefined);
}
export declare class DepositLimitExceeded extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6090;
    readonly code = 6090;
    readonly name = "DepositLimitExceeded";
    readonly msg = "Cannot deposit above deposit limit";
    constructor(logs?: string[] | undefined);
}
export declare class BorrowingDisabledOutsideElevationGroup extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6091;
    readonly code = 6091;
    readonly name = "BorrowingDisabledOutsideElevationGroup";
    readonly msg = "Reserve does not accept any new borrows outside elevation group";
    constructor(logs?: string[] | undefined);
}
export declare class NetValueRemainingTooSmall extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6092;
    readonly code = 6092;
    readonly name = "NetValueRemainingTooSmall";
    readonly msg = "Net value remaining too small";
    constructor(logs?: string[] | undefined);
}
export declare class WorseLtvBlocked extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6093;
    readonly code = 6093;
    readonly name = "WorseLtvBlocked";
    readonly msg = "Cannot get the obligation in a worse position";
    constructor(logs?: string[] | undefined);
}
export declare class LiabilitiesBiggerThanAssets extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6094;
    readonly code = 6094;
    readonly name = "LiabilitiesBiggerThanAssets";
    readonly msg = "Cannot have more liabilities than assets in a position";
    constructor(logs?: string[] | undefined);
}
export declare class ReserveTokenBalanceMismatch extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6095;
    readonly code = 6095;
    readonly name = "ReserveTokenBalanceMismatch";
    readonly msg = "Reserve state and token account cannot drift";
    constructor(logs?: string[] | undefined);
}
export declare class ReserveVaultBalanceMismatch extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6096;
    readonly code = 6096;
    readonly name = "ReserveVaultBalanceMismatch";
    readonly msg = "Reserve token account has been unexpectedly modified";
    constructor(logs?: string[] | undefined);
}
export declare class ReserveAccountingMismatch extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6097;
    readonly code = 6097;
    readonly name = "ReserveAccountingMismatch";
    readonly msg = "Reserve internal state accounting has been unexpectedly modified";
    constructor(logs?: string[] | undefined);
}
export declare class BorrowingAboveUtilizationRateDisabled extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6098;
    readonly code = 6098;
    readonly name = "BorrowingAboveUtilizationRateDisabled";
    readonly msg = "Borrowing above set utilization rate is disabled";
    constructor(logs?: string[] | undefined);
}
export declare class LiquidationBorrowFactorPriority extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6099;
    readonly code = 6099;
    readonly name = "LiquidationBorrowFactorPriority";
    readonly msg = "Liquidation must prioritize the debt with the highest borrow factor";
    constructor(logs?: string[] | undefined);
}
export declare class LiquidationLowestLiquidationLtvPriority extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6100;
    readonly code = 6100;
    readonly name = "LiquidationLowestLiquidationLtvPriority";
    readonly msg = "Liquidation must prioritize the collateral with the lowest liquidation LTV";
    constructor(logs?: string[] | undefined);
}
export declare class ElevationGroupBorrowLimitExceeded extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6101;
    readonly code = 6101;
    readonly name = "ElevationGroupBorrowLimitExceeded";
    readonly msg = "Elevation group borrow limit exceeded";
    constructor(logs?: string[] | undefined);
}
export declare class ElevationGroupWithoutDebtReserve extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6102;
    readonly code = 6102;
    readonly name = "ElevationGroupWithoutDebtReserve";
    readonly msg = "The elevation group does not have a debt reserve defined";
    constructor(logs?: string[] | undefined);
}
export declare class ElevationGroupMaxCollateralReserveZero extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6103;
    readonly code = 6103;
    readonly name = "ElevationGroupMaxCollateralReserveZero";
    readonly msg = "The elevation group does not allow any collateral reserves";
    constructor(logs?: string[] | undefined);
}
export declare class ElevationGroupHasAnotherDebtReserve extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6104;
    readonly code = 6104;
    readonly name = "ElevationGroupHasAnotherDebtReserve";
    readonly msg = "In elevation group attempt to borrow from a reserve that is not the debt reserve";
    constructor(logs?: string[] | undefined);
}
export declare class ElevationGroupDebtReserveAsCollateral extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6105;
    readonly code = 6105;
    readonly name = "ElevationGroupDebtReserveAsCollateral";
    readonly msg = "The elevation group's debt reserve cannot be used as a collateral reserve";
    constructor(logs?: string[] | undefined);
}
export declare class ObligationCollateralExceedsElevationGroupLimit extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6106;
    readonly code = 6106;
    readonly name = "ObligationCollateralExceedsElevationGroupLimit";
    readonly msg = "Obligation have more collateral than the maximum allowed by the elevation group";
    constructor(logs?: string[] | undefined);
}
export declare class ObligationElevationGroupMultipleDebtReserve extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6107;
    readonly code = 6107;
    readonly name = "ObligationElevationGroupMultipleDebtReserve";
    readonly msg = "Obligation is an elevation group but have more than one debt reserve";
    constructor(logs?: string[] | undefined);
}
export declare class UnsupportedTokenExtension extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6108;
    readonly code = 6108;
    readonly name = "UnsupportedTokenExtension";
    readonly msg = "Mint has a token (2022) extension that is not supported";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidTokenAccount extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6109;
    readonly code = 6109;
    readonly name = "InvalidTokenAccount";
    readonly msg = "Can't have an spl token mint with a t22 account";
    constructor(logs?: string[] | undefined);
}
export declare class DepositDisabledOutsideElevationGroup extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6110;
    readonly code = 6110;
    readonly name = "DepositDisabledOutsideElevationGroup";
    readonly msg = "Can't deposit into this reserve outside elevation group";
    constructor(logs?: string[] | undefined);
}
export declare class CannotCalculateReferralAmountDueToSlotsMismatch extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6111;
    readonly code = 6111;
    readonly name = "CannotCalculateReferralAmountDueToSlotsMismatch";
    readonly msg = "Cannot calculate referral amount due to slots mismatch";
    constructor(logs?: string[] | undefined);
}
export declare class ObligationOwnersMustMatch extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6112;
    readonly code = 6112;
    readonly name = "ObligationOwnersMustMatch";
    readonly msg = "Obligation owners must match";
    constructor(logs?: string[] | undefined);
}
export declare class ObligationsMustMatch extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6113;
    readonly code = 6113;
    readonly name = "ObligationsMustMatch";
    readonly msg = "Obligations must match";
    constructor(logs?: string[] | undefined);
}
export declare class LendingMarketsMustMatch extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6114;
    readonly code = 6114;
    readonly name = "LendingMarketsMustMatch";
    readonly msg = "Lending markets must match";
    constructor(logs?: string[] | undefined);
}
export declare class ObligationCurrentlyMarkedForDeleveraging extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6115;
    readonly code = 6115;
    readonly name = "ObligationCurrentlyMarkedForDeleveraging";
    readonly msg = "Obligation is already marked for deleveraging";
    constructor(logs?: string[] | undefined);
}
export declare class MaximumWithdrawValueZero extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6116;
    readonly code = 6116;
    readonly name = "MaximumWithdrawValueZero";
    readonly msg = "Maximum withdrawable value of this collateral is zero, LTV needs improved";
    constructor(logs?: string[] | undefined);
}
export declare class ZeroMaxLtvAssetsInDeposits extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6117;
    readonly code = 6117;
    readonly name = "ZeroMaxLtvAssetsInDeposits";
    readonly msg = "No max LTV 0 assets allowed in deposits for repay and withdraw";
    constructor(logs?: string[] | undefined);
}
export declare class LowestLtvAssetsPriority extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6118;
    readonly code = 6118;
    readonly name = "LowestLtvAssetsPriority";
    readonly msg = "Withdrawing must prioritize the collateral with the lowest reserve max-LTV";
    constructor(logs?: string[] | undefined);
}
export declare class WorseLtvThanUnhealthyLtv extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6119;
    readonly code = 6119;
    readonly name = "WorseLtvThanUnhealthyLtv";
    readonly msg = "Cannot get the obligation liquidatable";
    constructor(logs?: string[] | undefined);
}
export declare class FarmAccountsMissing extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6120;
    readonly code = 6120;
    readonly name = "FarmAccountsMissing";
    readonly msg = "Farm accounts to refresh are missing";
    constructor(logs?: string[] | undefined);
}
export declare class RepayTooSmallForFullLiquidation extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6121;
    readonly code = 6121;
    readonly name = "RepayTooSmallForFullLiquidation";
    readonly msg = "Repay amount is too small to satisfy the mandatory full liquidation";
    constructor(logs?: string[] | undefined);
}
export declare class InsufficientRepayAmount extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6122;
    readonly code = 6122;
    readonly name = "InsufficientRepayAmount";
    readonly msg = "Liquidator provided repay amount lower than required by liquidation rules";
    constructor(logs?: string[] | undefined);
}
export declare class OrderIndexOutOfBounds extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6123;
    readonly code = 6123;
    readonly name = "OrderIndexOutOfBounds";
    readonly msg = "Obligation order of the given index cannot exist";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidOrderConfiguration extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6124;
    readonly code = 6124;
    readonly name = "InvalidOrderConfiguration";
    readonly msg = "Given order configuration has wrong parameters";
    constructor(logs?: string[] | undefined);
}
export declare class OrderConfigurationNotSupportedByObligation extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6125;
    readonly code = 6125;
    readonly name = "OrderConfigurationNotSupportedByObligation";
    readonly msg = "Given order configuration cannot be used with the current state of the obligation";
    constructor(logs?: string[] | undefined);
}
export declare class OperationNotPermittedWithCurrentObligationOrders extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6126;
    readonly code = 6126;
    readonly name = "OperationNotPermittedWithCurrentObligationOrders";
    readonly msg = "Single debt, single collateral obligation orders have to be cancelled before changing the deposit/borrow count";
    constructor(logs?: string[] | undefined);
}
export declare class OperationNotPermittedMarketImmutable extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6127;
    readonly code = 6127;
    readonly name = "OperationNotPermittedMarketImmutable";
    readonly msg = "Cannot update lending market because it is set as immutable";
    constructor(logs?: string[] | undefined);
}
export declare class OrderCreationDisabled extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6128;
    readonly code = 6128;
    readonly name = "OrderCreationDisabled";
    readonly msg = "Creation of new orders is disabled";
    constructor(logs?: string[] | undefined);
}
export declare class NoUpgradeAuthority extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6129;
    readonly code = 6129;
    readonly name = "NoUpgradeAuthority";
    readonly msg = "Cannot initialize global config because there is no upgrade authority to the program";
    constructor(logs?: string[] | undefined);
}
export declare function fromCode(code: number, logs?: string[]): CustomError | null;
//# sourceMappingURL=custom.d.ts.map