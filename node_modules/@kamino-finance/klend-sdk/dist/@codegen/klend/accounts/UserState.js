"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserState = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
const kit_1 = require("@solana/kit");
/* eslint-enable @typescript-eslint/no-unused-vars */
const bn_js_1 = __importDefault(require("bn.js")); // eslint-disable-line @typescript-eslint/no-unused-vars
const borsh = __importStar(require("@coral-xyz/borsh")); // eslint-disable-line @typescript-eslint/no-unused-vars
const utils_1 = require("../utils"); // eslint-disable-line @typescript-eslint/no-unused-vars
const programId_1 = require("../programId");
class UserState {
    userId;
    farmState;
    owner;
    /** Indicate if this user state is part of a delegated farm */
    isFarmDelegated;
    padding0;
    /**
     * Rewards tally used for computation of gained rewards
     * (scaled from `Decimal` representation).
     */
    rewardsTallyScaled;
    /** Number of reward tokens ready for claim */
    rewardsIssuedUnclaimed;
    lastClaimTs;
    /**
     * User stake deposited and usable, generating rewards and fees.
     * (scaled from `Decimal` representation).
     */
    activeStakeScaled;
    /**
     * User stake deposited but not usable and not generating rewards yet.
     * (scaled from `Decimal` representation).
     */
    pendingDepositStakeScaled;
    /**
     * After this timestamp, pending user stake can be moved to user stake
     * Initialized to now() + delayed user stake period
     */
    pendingDepositStakeTs;
    /**
     * User deposits unstaked, pending for withdrawal, not usable and not generating rewards.
     * (scaled from `Decimal` representation).
     */
    pendingWithdrawalUnstakeScaled;
    /** After this timestamp, user can withdraw their deposit. */
    pendingWithdrawalUnstakeTs;
    /** User bump used for account address validation */
    bump;
    /** Delegatee used for initialisation - useful to check against */
    delegatee;
    lastStakeTs;
    padding1;
    static discriminator = Buffer.from([
        72, 177, 85, 249, 76, 167, 186, 126,
    ]);
    static layout = borsh.struct([
        borsh.u64("userId"),
        (0, utils_1.borshAddress)("farmState"),
        (0, utils_1.borshAddress)("owner"),
        borsh.u8("isFarmDelegated"),
        borsh.array(borsh.u8(), 7, "padding0"),
        borsh.array(borsh.u128(), 10, "rewardsTallyScaled"),
        borsh.array(borsh.u64(), 10, "rewardsIssuedUnclaimed"),
        borsh.array(borsh.u64(), 10, "lastClaimTs"),
        borsh.u128("activeStakeScaled"),
        borsh.u128("pendingDepositStakeScaled"),
        borsh.u64("pendingDepositStakeTs"),
        borsh.u128("pendingWithdrawalUnstakeScaled"),
        borsh.u64("pendingWithdrawalUnstakeTs"),
        borsh.u64("bump"),
        (0, utils_1.borshAddress)("delegatee"),
        borsh.u64("lastStakeTs"),
        borsh.array(borsh.u64(), 50, "padding1"),
    ]);
    constructor(fields) {
        this.userId = fields.userId;
        this.farmState = fields.farmState;
        this.owner = fields.owner;
        this.isFarmDelegated = fields.isFarmDelegated;
        this.padding0 = fields.padding0;
        this.rewardsTallyScaled = fields.rewardsTallyScaled;
        this.rewardsIssuedUnclaimed = fields.rewardsIssuedUnclaimed;
        this.lastClaimTs = fields.lastClaimTs;
        this.activeStakeScaled = fields.activeStakeScaled;
        this.pendingDepositStakeScaled = fields.pendingDepositStakeScaled;
        this.pendingDepositStakeTs = fields.pendingDepositStakeTs;
        this.pendingWithdrawalUnstakeScaled = fields.pendingWithdrawalUnstakeScaled;
        this.pendingWithdrawalUnstakeTs = fields.pendingWithdrawalUnstakeTs;
        this.bump = fields.bump;
        this.delegatee = fields.delegatee;
        this.lastStakeTs = fields.lastStakeTs;
        this.padding1 = fields.padding1;
    }
    static async fetch(rpc, address, programId = programId_1.PROGRAM_ID) {
        const info = await (0, kit_1.fetchEncodedAccount)(rpc, address);
        if (!info.exists) {
            return null;
        }
        if (info.programAddress !== programId) {
            throw new Error(`UserStateFields account ${address} belongs to wrong program ${info.programAddress}, expected ${programId}`);
        }
        return this.decode(Buffer.from(info.data));
    }
    static async fetchMultiple(rpc, addresses, programId = programId_1.PROGRAM_ID) {
        const infos = await (0, kit_1.fetchEncodedAccounts)(rpc, addresses);
        return infos.map((info) => {
            if (!info.exists) {
                return null;
            }
            if (info.programAddress !== programId) {
                throw new Error(`UserStateFields account ${info.address} belongs to wrong program ${info.programAddress}, expected ${programId}`);
            }
            return this.decode(Buffer.from(info.data));
        });
    }
    static decode(data) {
        if (!data.slice(0, 8).equals(UserState.discriminator)) {
            throw new Error("invalid account discriminator");
        }
        const dec = UserState.layout.decode(data.slice(8));
        return new UserState({
            userId: dec.userId,
            farmState: dec.farmState,
            owner: dec.owner,
            isFarmDelegated: dec.isFarmDelegated,
            padding0: dec.padding0,
            rewardsTallyScaled: dec.rewardsTallyScaled,
            rewardsIssuedUnclaimed: dec.rewardsIssuedUnclaimed,
            lastClaimTs: dec.lastClaimTs,
            activeStakeScaled: dec.activeStakeScaled,
            pendingDepositStakeScaled: dec.pendingDepositStakeScaled,
            pendingDepositStakeTs: dec.pendingDepositStakeTs,
            pendingWithdrawalUnstakeScaled: dec.pendingWithdrawalUnstakeScaled,
            pendingWithdrawalUnstakeTs: dec.pendingWithdrawalUnstakeTs,
            bump: dec.bump,
            delegatee: dec.delegatee,
            lastStakeTs: dec.lastStakeTs,
            padding1: dec.padding1,
        });
    }
    toJSON() {
        return {
            userId: this.userId.toString(),
            farmState: this.farmState,
            owner: this.owner,
            isFarmDelegated: this.isFarmDelegated,
            padding0: this.padding0,
            rewardsTallyScaled: this.rewardsTallyScaled.map((item) => item.toString()),
            rewardsIssuedUnclaimed: this.rewardsIssuedUnclaimed.map((item) => item.toString()),
            lastClaimTs: this.lastClaimTs.map((item) => item.toString()),
            activeStakeScaled: this.activeStakeScaled.toString(),
            pendingDepositStakeScaled: this.pendingDepositStakeScaled.toString(),
            pendingDepositStakeTs: this.pendingDepositStakeTs.toString(),
            pendingWithdrawalUnstakeScaled: this.pendingWithdrawalUnstakeScaled.toString(),
            pendingWithdrawalUnstakeTs: this.pendingWithdrawalUnstakeTs.toString(),
            bump: this.bump.toString(),
            delegatee: this.delegatee,
            lastStakeTs: this.lastStakeTs.toString(),
            padding1: this.padding1.map((item) => item.toString()),
        };
    }
    static fromJSON(obj) {
        return new UserState({
            userId: new bn_js_1.default(obj.userId),
            farmState: (0, kit_1.address)(obj.farmState),
            owner: (0, kit_1.address)(obj.owner),
            isFarmDelegated: obj.isFarmDelegated,
            padding0: obj.padding0,
            rewardsTallyScaled: obj.rewardsTallyScaled.map((item) => new bn_js_1.default(item)),
            rewardsIssuedUnclaimed: obj.rewardsIssuedUnclaimed.map((item) => new bn_js_1.default(item)),
            lastClaimTs: obj.lastClaimTs.map((item) => new bn_js_1.default(item)),
            activeStakeScaled: new bn_js_1.default(obj.activeStakeScaled),
            pendingDepositStakeScaled: new bn_js_1.default(obj.pendingDepositStakeScaled),
            pendingDepositStakeTs: new bn_js_1.default(obj.pendingDepositStakeTs),
            pendingWithdrawalUnstakeScaled: new bn_js_1.default(obj.pendingWithdrawalUnstakeScaled),
            pendingWithdrawalUnstakeTs: new bn_js_1.default(obj.pendingWithdrawalUnstakeTs),
            bump: new bn_js_1.default(obj.bump),
            delegatee: (0, kit_1.address)(obj.delegatee),
            lastStakeTs: new bn_js_1.default(obj.lastStakeTs),
            padding1: obj.padding1.map((item) => new bn_js_1.default(item)),
        });
    }
}
exports.UserState = UserState;
//# sourceMappingURL=UserState.js.map