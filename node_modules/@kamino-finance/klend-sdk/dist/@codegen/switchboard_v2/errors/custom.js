"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OracleQueueMismatch = exports.IntegerUnderflowError = exports.NoAggregatorJobsFound = exports.LeaseInactiveError = exports.InsufficientStakeError = exports.InvalidExpirationError = exports.NoResultsError = exports.InvalidUpdatePeriodError = exports.IntegerOverflowError = exports.AggregatorJobChecksumMismatch = exports.AggregatorInvalidBatchSizeError = exports.AggregatorLockedError = exports.ExcessiveCrankRowsError = exports.QueueAtCapacity = exports.PermissionDenied = exports.DecimalConversionError = exports.LeaseAccountNotFound = exports.EscrowAccountNotFound = exports.PermissionAccountDeriveFailure = exports.LeaseAccountDeriveFailure = exports.PermissionAccountNotFound = exports.AggregatorAccountNotFound = exports.PdaDeriveError = exports.CrankEmptyError = exports.InvalidEscrowAccount = exports.IncorrectTokenAccountMint = exports.AggregatorLeaseInsufficientFunds = exports.CrankMaxCapacityError = exports.OracleMismatchError = exports.MissingOracleAccountsError = exports.UnauthorizedStateUpdateError = exports.ProtoDeserializeError = exports.OracleAlreadyRespondedError = exports.IllegalOracleIdxError = exports.AggregatorClosedError = exports.AggregatorIllegalRoundCloseCall = exports.AggregatorIllegalRoundOpenCall = exports.PubkeyNotFoundError = exports.ArrayUnderflowError = exports.ArrayOverflowError = exports.MissingRequiredSignature = exports.AccountLoaderMissingSignature = exports.InvalidStrDecimalConversion = exports.AggregatorInvalidSaveResult = exports.AggregatorCurrentRoundClosed = exports.TooManyAggregatorJobs = exports.InvalidAggregatorRound = exports.IncorrectProgramOwnerError = exports.QueueOperationError = exports.ArrayOperationError = void 0;
exports.InsufficientTokenBalance = exports.VrfLiteOwnedByPool = exports.VrfPoolMiss = exports.VrfPoolRequestTooSoon = exports.AccountCloseNotReady = exports.VrfAccountNotFound = exports.VrfPoolEmpty = exports.VrfPoolFull = exports.VrfLiteHasExistingPool = exports.InvalidSliderAccount = exports.BufferRelayerIllegalRoundOpenCall = exports.JobNotInitialized = exports.JobDataLocked = exports.JobChunksExceeded = exports.JobSizeExceeded = exports.InvalidVrfRound = exports.FuckingImpossibleError = exports.AccountDiscriminatorMismatch = exports.VoterStakeRegistryError = exports.InvalidJobAccountError = exports.InvalidTokenAccountKeyError = exports.InvalidMintError = exports.MissingRequiredAccountsError = exports.NoopError = exports.InvalidSpawnRecordOwner = exports.MissingOptionalAccount = exports.InvalidGovernanceAccountError = exports.InvalidGovernancePidError = exports.InvalidVrfProducerError = exports.VrfInsufficientVerificationError = exports.VrfRequestAlreadyLaunchedError = exports.VrfTooManyVerifyCallsError = exports.VrfInvalidPubkeyError = exports.VrfCallbackAlreadyCalledError = exports.VrfCallbackParamsError = exports.VrfCallbackError = exports.VrfVerifyError = exports.VrfInvalidProofSubmissionError = exports.VrfInvalidRequestError = exports.IndexOutOfBoundsError = exports.CrankNoElementsReadyError = exports.InvalidCrankAccountError = exports.InvalidLeaseAccountEscrowError = exports.InvalideHistoryAccountError = exports.ExcessiveLeaseWithdrawlError = exports.InvalidTokenAccountMintError = exports.InvalidAuthorityError = exports.InsufficientOracleQueueError = exports.InvalidBufferAccountError = exports.OracleWalletMismatchError = void 0;
exports.fromCode = fromCode;
class ArrayOperationError extends Error {
    logs;
    static code = 6000;
    code = 6000;
    name = "ArrayOperationError";
    msg = "Illegal operation on a Switchboard array.";
    constructor(logs) {
        super("6000: Illegal operation on a Switchboard array.");
        this.logs = logs;
    }
}
exports.ArrayOperationError = ArrayOperationError;
class QueueOperationError extends Error {
    logs;
    static code = 6001;
    code = 6001;
    name = "QueueOperationError";
    msg = "Illegal operation on a Switchboard queue.";
    constructor(logs) {
        super("6001: Illegal operation on a Switchboard queue.");
        this.logs = logs;
    }
}
exports.QueueOperationError = QueueOperationError;
class IncorrectProgramOwnerError extends Error {
    logs;
    static code = 6002;
    code = 6002;
    name = "IncorrectProgramOwnerError";
    msg = "An account required to be owned by the program has a different owner.";
    constructor(logs) {
        super("6002: An account required to be owned by the program has a different owner.");
        this.logs = logs;
    }
}
exports.IncorrectProgramOwnerError = IncorrectProgramOwnerError;
class InvalidAggregatorRound extends Error {
    logs;
    static code = 6003;
    code = 6003;
    name = "InvalidAggregatorRound";
    msg = "Aggregator is not currently populated with a valid round.";
    constructor(logs) {
        super("6003: Aggregator is not currently populated with a valid round.");
        this.logs = logs;
    }
}
exports.InvalidAggregatorRound = InvalidAggregatorRound;
class TooManyAggregatorJobs extends Error {
    logs;
    static code = 6004;
    code = 6004;
    name = "TooManyAggregatorJobs";
    msg = "Aggregator cannot fit any more jobs.";
    constructor(logs) {
        super("6004: Aggregator cannot fit any more jobs.");
        this.logs = logs;
    }
}
exports.TooManyAggregatorJobs = TooManyAggregatorJobs;
class AggregatorCurrentRoundClosed extends Error {
    logs;
    static code = 6005;
    code = 6005;
    name = "AggregatorCurrentRoundClosed";
    msg = "Aggregator's current round is closed. No results are being accepted.";
    constructor(logs) {
        super("6005: Aggregator's current round is closed. No results are being accepted.");
        this.logs = logs;
    }
}
exports.AggregatorCurrentRoundClosed = AggregatorCurrentRoundClosed;
class AggregatorInvalidSaveResult extends Error {
    logs;
    static code = 6006;
    code = 6006;
    name = "AggregatorInvalidSaveResult";
    msg = "Aggregator received an invalid save result instruction.";
    constructor(logs) {
        super("6006: Aggregator received an invalid save result instruction.");
        this.logs = logs;
    }
}
exports.AggregatorInvalidSaveResult = AggregatorInvalidSaveResult;
class InvalidStrDecimalConversion extends Error {
    logs;
    static code = 6007;
    code = 6007;
    name = "InvalidStrDecimalConversion";
    msg = "Failed to convert string to decimal format.";
    constructor(logs) {
        super("6007: Failed to convert string to decimal format.");
        this.logs = logs;
    }
}
exports.InvalidStrDecimalConversion = InvalidStrDecimalConversion;
class AccountLoaderMissingSignature extends Error {
    logs;
    static code = 6008;
    code = 6008;
    name = "AccountLoaderMissingSignature";
    msg = "AccountLoader account is missing a required signature.";
    constructor(logs) {
        super("6008: AccountLoader account is missing a required signature.");
        this.logs = logs;
    }
}
exports.AccountLoaderMissingSignature = AccountLoaderMissingSignature;
class MissingRequiredSignature extends Error {
    logs;
    static code = 6009;
    code = 6009;
    name = "MissingRequiredSignature";
    msg = "Account is missing a required signature.";
    constructor(logs) {
        super("6009: Account is missing a required signature.");
        this.logs = logs;
    }
}
exports.MissingRequiredSignature = MissingRequiredSignature;
class ArrayOverflowError extends Error {
    logs;
    static code = 6010;
    code = 6010;
    name = "ArrayOverflowError";
    msg = "The attempted action will overflow a zero-copy account array.";
    constructor(logs) {
        super("6010: The attempted action will overflow a zero-copy account array.");
        this.logs = logs;
    }
}
exports.ArrayOverflowError = ArrayOverflowError;
class ArrayUnderflowError extends Error {
    logs;
    static code = 6011;
    code = 6011;
    name = "ArrayUnderflowError";
    msg = "The attempted action will underflow a zero-copy account array.";
    constructor(logs) {
        super("6011: The attempted action will underflow a zero-copy account array.");
        this.logs = logs;
    }
}
exports.ArrayUnderflowError = ArrayUnderflowError;
class PubkeyNotFoundError extends Error {
    logs;
    static code = 6012;
    code = 6012;
    name = "PubkeyNotFoundError";
    msg = "The queried public key was not found.";
    constructor(logs) {
        super("6012: The queried public key was not found.");
        this.logs = logs;
    }
}
exports.PubkeyNotFoundError = PubkeyNotFoundError;
class AggregatorIllegalRoundOpenCall extends Error {
    logs;
    static code = 6013;
    code = 6013;
    name = "AggregatorIllegalRoundOpenCall";
    msg = "Aggregator round open called too early.";
    constructor(logs) {
        super("6013: Aggregator round open called too early.");
        this.logs = logs;
    }
}
exports.AggregatorIllegalRoundOpenCall = AggregatorIllegalRoundOpenCall;
class AggregatorIllegalRoundCloseCall extends Error {
    logs;
    static code = 6014;
    code = 6014;
    name = "AggregatorIllegalRoundCloseCall";
    msg = "Aggregator round close called too early.";
    constructor(logs) {
        super("6014: Aggregator round close called too early.");
        this.logs = logs;
    }
}
exports.AggregatorIllegalRoundCloseCall = AggregatorIllegalRoundCloseCall;
class AggregatorClosedError extends Error {
    logs;
    static code = 6015;
    code = 6015;
    name = "AggregatorClosedError";
    msg = "Aggregator is closed. Illegal action.";
    constructor(logs) {
        super("6015: Aggregator is closed. Illegal action.");
        this.logs = logs;
    }
}
exports.AggregatorClosedError = AggregatorClosedError;
class IllegalOracleIdxError extends Error {
    logs;
    static code = 6016;
    code = 6016;
    name = "IllegalOracleIdxError";
    msg = "Illegal oracle index.";
    constructor(logs) {
        super("6016: Illegal oracle index.");
        this.logs = logs;
    }
}
exports.IllegalOracleIdxError = IllegalOracleIdxError;
class OracleAlreadyRespondedError extends Error {
    logs;
    static code = 6017;
    code = 6017;
    name = "OracleAlreadyRespondedError";
    msg = "The provided oracle has already responded this round.";
    constructor(logs) {
        super("6017: The provided oracle has already responded this round.");
        this.logs = logs;
    }
}
exports.OracleAlreadyRespondedError = OracleAlreadyRespondedError;
class ProtoDeserializeError extends Error {
    logs;
    static code = 6018;
    code = 6018;
    name = "ProtoDeserializeError";
    msg = "Failed to deserialize protocol buffer.";
    constructor(logs) {
        super("6018: Failed to deserialize protocol buffer.");
        this.logs = logs;
    }
}
exports.ProtoDeserializeError = ProtoDeserializeError;
class UnauthorizedStateUpdateError extends Error {
    logs;
    static code = 6019;
    code = 6019;
    name = "UnauthorizedStateUpdateError";
    msg = "Unauthorized program state modification attempted.";
    constructor(logs) {
        super("6019: Unauthorized program state modification attempted.");
        this.logs = logs;
    }
}
exports.UnauthorizedStateUpdateError = UnauthorizedStateUpdateError;
class MissingOracleAccountsError extends Error {
    logs;
    static code = 6020;
    code = 6020;
    name = "MissingOracleAccountsError";
    msg = "Not enough oracle accounts provided to closeRounds.";
    constructor(logs) {
        super("6020: Not enough oracle accounts provided to closeRounds.");
        this.logs = logs;
    }
}
exports.MissingOracleAccountsError = MissingOracleAccountsError;
class OracleMismatchError extends Error {
    logs;
    static code = 6021;
    code = 6021;
    name = "OracleMismatchError";
    msg = "An unexpected oracle account was provided for the transaction.";
    constructor(logs) {
        super("6021: An unexpected oracle account was provided for the transaction.");
        this.logs = logs;
    }
}
exports.OracleMismatchError = OracleMismatchError;
class CrankMaxCapacityError extends Error {
    logs;
    static code = 6022;
    code = 6022;
    name = "CrankMaxCapacityError";
    msg = "Attempted to push to a Crank that's at capacity";
    constructor(logs) {
        super("6022: Attempted to push to a Crank that's at capacity");
        this.logs = logs;
    }
}
exports.CrankMaxCapacityError = CrankMaxCapacityError;
class AggregatorLeaseInsufficientFunds extends Error {
    logs;
    static code = 6023;
    code = 6023;
    name = "AggregatorLeaseInsufficientFunds";
    msg = "Aggregator update call attempted but attached lease has insufficient funds.";
    constructor(logs) {
        super("6023: Aggregator update call attempted but attached lease has insufficient funds.");
        this.logs = logs;
    }
}
exports.AggregatorLeaseInsufficientFunds = AggregatorLeaseInsufficientFunds;
class IncorrectTokenAccountMint extends Error {
    logs;
    static code = 6024;
    code = 6024;
    name = "IncorrectTokenAccountMint";
    msg = "The provided token account does not point to the Switchboard token mint.";
    constructor(logs) {
        super("6024: The provided token account does not point to the Switchboard token mint.");
        this.logs = logs;
    }
}
exports.IncorrectTokenAccountMint = IncorrectTokenAccountMint;
class InvalidEscrowAccount extends Error {
    logs;
    static code = 6025;
    code = 6025;
    name = "InvalidEscrowAccount";
    msg = "An invalid escrow account was provided.";
    constructor(logs) {
        super("6025: An invalid escrow account was provided.");
        this.logs = logs;
    }
}
exports.InvalidEscrowAccount = InvalidEscrowAccount;
class CrankEmptyError extends Error {
    logs;
    static code = 6026;
    code = 6026;
    name = "CrankEmptyError";
    msg = "Crank empty. Pop failed.";
    constructor(logs) {
        super("6026: Crank empty. Pop failed.");
        this.logs = logs;
    }
}
exports.CrankEmptyError = CrankEmptyError;
class PdaDeriveError extends Error {
    logs;
    static code = 6027;
    code = 6027;
    name = "PdaDeriveError";
    msg = "Failed to derive a PDA from the provided seed.";
    constructor(logs) {
        super("6027: Failed to derive a PDA from the provided seed.");
        this.logs = logs;
    }
}
exports.PdaDeriveError = PdaDeriveError;
class AggregatorAccountNotFound extends Error {
    logs;
    static code = 6028;
    code = 6028;
    name = "AggregatorAccountNotFound";
    msg = "Aggregator account missing from provided account list.";
    constructor(logs) {
        super("6028: Aggregator account missing from provided account list.");
        this.logs = logs;
    }
}
exports.AggregatorAccountNotFound = AggregatorAccountNotFound;
class PermissionAccountNotFound extends Error {
    logs;
    static code = 6029;
    code = 6029;
    name = "PermissionAccountNotFound";
    msg = "Permission account missing from provided account list.";
    constructor(logs) {
        super("6029: Permission account missing from provided account list.");
        this.logs = logs;
    }
}
exports.PermissionAccountNotFound = PermissionAccountNotFound;
class LeaseAccountDeriveFailure extends Error {
    logs;
    static code = 6030;
    code = 6030;
    name = "LeaseAccountDeriveFailure";
    msg = "Failed to derive a lease account.";
    constructor(logs) {
        super("6030: Failed to derive a lease account.");
        this.logs = logs;
    }
}
exports.LeaseAccountDeriveFailure = LeaseAccountDeriveFailure;
class PermissionAccountDeriveFailure extends Error {
    logs;
    static code = 6031;
    code = 6031;
    name = "PermissionAccountDeriveFailure";
    msg = "Failed to derive a permission account.";
    constructor(logs) {
        super("6031: Failed to derive a permission account.");
        this.logs = logs;
    }
}
exports.PermissionAccountDeriveFailure = PermissionAccountDeriveFailure;
class EscrowAccountNotFound extends Error {
    logs;
    static code = 6032;
    code = 6032;
    name = "EscrowAccountNotFound";
    msg = "Escrow account missing from provided account list.";
    constructor(logs) {
        super("6032: Escrow account missing from provided account list.");
        this.logs = logs;
    }
}
exports.EscrowAccountNotFound = EscrowAccountNotFound;
class LeaseAccountNotFound extends Error {
    logs;
    static code = 6033;
    code = 6033;
    name = "LeaseAccountNotFound";
    msg = "Lease account missing from provided account list.";
    constructor(logs) {
        super("6033: Lease account missing from provided account list.");
        this.logs = logs;
    }
}
exports.LeaseAccountNotFound = LeaseAccountNotFound;
class DecimalConversionError extends Error {
    logs;
    static code = 6034;
    code = 6034;
    name = "DecimalConversionError";
    msg = "Decimal conversion method failed.";
    constructor(logs) {
        super("6034: Decimal conversion method failed.");
        this.logs = logs;
    }
}
exports.DecimalConversionError = DecimalConversionError;
class PermissionDenied extends Error {
    logs;
    static code = 6035;
    code = 6035;
    name = "PermissionDenied";
    msg = "Permission account is missing required flags for the given action.";
    constructor(logs) {
        super("6035: Permission account is missing required flags for the given action.");
        this.logs = logs;
    }
}
exports.PermissionDenied = PermissionDenied;
class QueueAtCapacity extends Error {
    logs;
    static code = 6036;
    code = 6036;
    name = "QueueAtCapacity";
    msg = "Oracle queue is at lease capacity.";
    constructor(logs) {
        super("6036: Oracle queue is at lease capacity.");
        this.logs = logs;
    }
}
exports.QueueAtCapacity = QueueAtCapacity;
class ExcessiveCrankRowsError extends Error {
    logs;
    static code = 6037;
    code = 6037;
    name = "ExcessiveCrankRowsError";
    msg = "Data feed is already pushed on a crank.";
    constructor(logs) {
        super("6037: Data feed is already pushed on a crank.");
        this.logs = logs;
    }
}
exports.ExcessiveCrankRowsError = ExcessiveCrankRowsError;
class AggregatorLockedError extends Error {
    logs;
    static code = 6038;
    code = 6038;
    name = "AggregatorLockedError";
    msg = "Aggregator is locked, no setting modifications or job additions allowed.";
    constructor(logs) {
        super("6038: Aggregator is locked, no setting modifications or job additions allowed.");
        this.logs = logs;
    }
}
exports.AggregatorLockedError = AggregatorLockedError;
class AggregatorInvalidBatchSizeError extends Error {
    logs;
    static code = 6039;
    code = 6039;
    name = "AggregatorInvalidBatchSizeError";
    msg = "Aggregator invalid batch size.";
    constructor(logs) {
        super("6039: Aggregator invalid batch size.");
        this.logs = logs;
    }
}
exports.AggregatorInvalidBatchSizeError = AggregatorInvalidBatchSizeError;
class AggregatorJobChecksumMismatch extends Error {
    logs;
    static code = 6040;
    code = 6040;
    name = "AggregatorJobChecksumMismatch";
    msg = "Oracle provided an incorrect aggregator job checksum.";
    constructor(logs) {
        super("6040: Oracle provided an incorrect aggregator job checksum.");
        this.logs = logs;
    }
}
exports.AggregatorJobChecksumMismatch = AggregatorJobChecksumMismatch;
class IntegerOverflowError extends Error {
    logs;
    static code = 6041;
    code = 6041;
    name = "IntegerOverflowError";
    msg = "An integer overflow occurred.";
    constructor(logs) {
        super("6041: An integer overflow occurred.");
        this.logs = logs;
    }
}
exports.IntegerOverflowError = IntegerOverflowError;
class InvalidUpdatePeriodError extends Error {
    logs;
    static code = 6042;
    code = 6042;
    name = "InvalidUpdatePeriodError";
    msg = "Minimum update period is 5 seconds.";
    constructor(logs) {
        super("6042: Minimum update period is 5 seconds.");
        this.logs = logs;
    }
}
exports.InvalidUpdatePeriodError = InvalidUpdatePeriodError;
class NoResultsError extends Error {
    logs;
    static code = 6043;
    code = 6043;
    name = "NoResultsError";
    msg = "Aggregator round evaluation attempted with no results.";
    constructor(logs) {
        super("6043: Aggregator round evaluation attempted with no results.");
        this.logs = logs;
    }
}
exports.NoResultsError = NoResultsError;
class InvalidExpirationError extends Error {
    logs;
    static code = 6044;
    code = 6044;
    name = "InvalidExpirationError";
    msg = "An expiration constraint was broken.";
    constructor(logs) {
        super("6044: An expiration constraint was broken.");
        this.logs = logs;
    }
}
exports.InvalidExpirationError = InvalidExpirationError;
class InsufficientStakeError extends Error {
    logs;
    static code = 6045;
    code = 6045;
    name = "InsufficientStakeError";
    msg = "An account provided insufficient stake for action.";
    constructor(logs) {
        super("6045: An account provided insufficient stake for action.");
        this.logs = logs;
    }
}
exports.InsufficientStakeError = InsufficientStakeError;
class LeaseInactiveError extends Error {
    logs;
    static code = 6046;
    code = 6046;
    name = "LeaseInactiveError";
    msg = "The provided lease account is not active.";
    constructor(logs) {
        super("6046: The provided lease account is not active.");
        this.logs = logs;
    }
}
exports.LeaseInactiveError = LeaseInactiveError;
class NoAggregatorJobsFound extends Error {
    logs;
    static code = 6047;
    code = 6047;
    name = "NoAggregatorJobsFound";
    msg = "No jobs are currently included in the aggregator.";
    constructor(logs) {
        super("6047: No jobs are currently included in the aggregator.");
        this.logs = logs;
    }
}
exports.NoAggregatorJobsFound = NoAggregatorJobsFound;
class IntegerUnderflowError extends Error {
    logs;
    static code = 6048;
    code = 6048;
    name = "IntegerUnderflowError";
    msg = "An integer underflow occurred.";
    constructor(logs) {
        super("6048: An integer underflow occurred.");
        this.logs = logs;
    }
}
exports.IntegerUnderflowError = IntegerUnderflowError;
class OracleQueueMismatch extends Error {
    logs;
    static code = 6049;
    code = 6049;
    name = "OracleQueueMismatch";
    msg = "An invalid oracle queue account was provided.";
    constructor(logs) {
        super("6049: An invalid oracle queue account was provided.");
        this.logs = logs;
    }
}
exports.OracleQueueMismatch = OracleQueueMismatch;
class OracleWalletMismatchError extends Error {
    logs;
    static code = 6050;
    code = 6050;
    name = "OracleWalletMismatchError";
    msg = "An unexpected oracle wallet account was provided for the transaction.";
    constructor(logs) {
        super("6050: An unexpected oracle wallet account was provided for the transaction.");
        this.logs = logs;
    }
}
exports.OracleWalletMismatchError = OracleWalletMismatchError;
class InvalidBufferAccountError extends Error {
    logs;
    static code = 6051;
    code = 6051;
    name = "InvalidBufferAccountError";
    msg = "An invalid buffer account was provided.";
    constructor(logs) {
        super("6051: An invalid buffer account was provided.");
        this.logs = logs;
    }
}
exports.InvalidBufferAccountError = InvalidBufferAccountError;
class InsufficientOracleQueueError extends Error {
    logs;
    static code = 6052;
    code = 6052;
    name = "InsufficientOracleQueueError";
    msg = "Insufficient oracle queue size.";
    constructor(logs) {
        super("6052: Insufficient oracle queue size.");
        this.logs = logs;
    }
}
exports.InsufficientOracleQueueError = InsufficientOracleQueueError;
class InvalidAuthorityError extends Error {
    logs;
    static code = 6053;
    code = 6053;
    name = "InvalidAuthorityError";
    msg = "Invalid authority account provided.";
    constructor(logs) {
        super("6053: Invalid authority account provided.");
        this.logs = logs;
    }
}
exports.InvalidAuthorityError = InvalidAuthorityError;
class InvalidTokenAccountMintError extends Error {
    logs;
    static code = 6054;
    code = 6054;
    name = "InvalidTokenAccountMintError";
    msg = "A provided token wallet is associated with an incorrect mint.";
    constructor(logs) {
        super("6054: A provided token wallet is associated with an incorrect mint.");
        this.logs = logs;
    }
}
exports.InvalidTokenAccountMintError = InvalidTokenAccountMintError;
class ExcessiveLeaseWithdrawlError extends Error {
    logs;
    static code = 6055;
    code = 6055;
    name = "ExcessiveLeaseWithdrawlError";
    msg = "You must leave enough funds to perform at least 1 update in the lease.";
    constructor(logs) {
        super("6055: You must leave enough funds to perform at least 1 update in the lease.");
        this.logs = logs;
    }
}
exports.ExcessiveLeaseWithdrawlError = ExcessiveLeaseWithdrawlError;
class InvalideHistoryAccountError extends Error {
    logs;
    static code = 6056;
    code = 6056;
    name = "InvalideHistoryAccountError";
    msg = "Invalid history account provided.";
    constructor(logs) {
        super("6056: Invalid history account provided.");
        this.logs = logs;
    }
}
exports.InvalideHistoryAccountError = InvalideHistoryAccountError;
class InvalidLeaseAccountEscrowError extends Error {
    logs;
    static code = 6057;
    code = 6057;
    name = "InvalidLeaseAccountEscrowError";
    msg = "Invalid lease account escrow.";
    constructor(logs) {
        super("6057: Invalid lease account escrow.");
        this.logs = logs;
    }
}
exports.InvalidLeaseAccountEscrowError = InvalidLeaseAccountEscrowError;
class InvalidCrankAccountError extends Error {
    logs;
    static code = 6058;
    code = 6058;
    name = "InvalidCrankAccountError";
    msg = "Invalid crank provided.";
    constructor(logs) {
        super("6058: Invalid crank provided.");
        this.logs = logs;
    }
}
exports.InvalidCrankAccountError = InvalidCrankAccountError;
class CrankNoElementsReadyError extends Error {
    logs;
    static code = 6059;
    code = 6059;
    name = "CrankNoElementsReadyError";
    msg = "No elements ready to be popped.";
    constructor(logs) {
        super("6059: No elements ready to be popped.");
        this.logs = logs;
    }
}
exports.CrankNoElementsReadyError = CrankNoElementsReadyError;
class IndexOutOfBoundsError extends Error {
    logs;
    static code = 6060;
    code = 6060;
    name = "IndexOutOfBoundsError";
    msg = "Index out of bounds";
    constructor(logs) {
        super("6060: Index out of bounds");
        this.logs = logs;
    }
}
exports.IndexOutOfBoundsError = IndexOutOfBoundsError;
class VrfInvalidRequestError extends Error {
    logs;
    static code = 6061;
    code = 6061;
    name = "VrfInvalidRequestError";
    msg = "Invalid vrf request params";
    constructor(logs) {
        super("6061: Invalid vrf request params");
        this.logs = logs;
    }
}
exports.VrfInvalidRequestError = VrfInvalidRequestError;
class VrfInvalidProofSubmissionError extends Error {
    logs;
    static code = 6062;
    code = 6062;
    name = "VrfInvalidProofSubmissionError";
    msg = "Vrf proof failed to verify";
    constructor(logs) {
        super("6062: Vrf proof failed to verify");
        this.logs = logs;
    }
}
exports.VrfInvalidProofSubmissionError = VrfInvalidProofSubmissionError;
class VrfVerifyError extends Error {
    logs;
    static code = 6063;
    code = 6063;
    name = "VrfVerifyError";
    msg = "Error in verifying vrf proof.";
    constructor(logs) {
        super("6063: Error in verifying vrf proof.");
        this.logs = logs;
    }
}
exports.VrfVerifyError = VrfVerifyError;
class VrfCallbackError extends Error {
    logs;
    static code = 6064;
    code = 6064;
    name = "VrfCallbackError";
    msg = "Vrf callback function failed.";
    constructor(logs) {
        super("6064: Vrf callback function failed.");
        this.logs = logs;
    }
}
exports.VrfCallbackError = VrfCallbackError;
class VrfCallbackParamsError extends Error {
    logs;
    static code = 6065;
    code = 6065;
    name = "VrfCallbackParamsError";
    msg = "Invalid vrf callback params provided.";
    constructor(logs) {
        super("6065: Invalid vrf callback params provided.");
        this.logs = logs;
    }
}
exports.VrfCallbackParamsError = VrfCallbackParamsError;
class VrfCallbackAlreadyCalledError extends Error {
    logs;
    static code = 6066;
    code = 6066;
    name = "VrfCallbackAlreadyCalledError";
    msg = "Vrf callback has already been triggered.";
    constructor(logs) {
        super("6066: Vrf callback has already been triggered.");
        this.logs = logs;
    }
}
exports.VrfCallbackAlreadyCalledError = VrfCallbackAlreadyCalledError;
class VrfInvalidPubkeyError extends Error {
    logs;
    static code = 6067;
    code = 6067;
    name = "VrfInvalidPubkeyError";
    msg = "The provided pubkey is invalid to use in ecvrf proofs";
    constructor(logs) {
        super("6067: The provided pubkey is invalid to use in ecvrf proofs");
        this.logs = logs;
    }
}
exports.VrfInvalidPubkeyError = VrfInvalidPubkeyError;
class VrfTooManyVerifyCallsError extends Error {
    logs;
    static code = 6068;
    code = 6068;
    name = "VrfTooManyVerifyCallsError";
    msg = "Number of required verify calls exceeded";
    constructor(logs) {
        super("6068: Number of required verify calls exceeded");
        this.logs = logs;
    }
}
exports.VrfTooManyVerifyCallsError = VrfTooManyVerifyCallsError;
class VrfRequestAlreadyLaunchedError extends Error {
    logs;
    static code = 6069;
    code = 6069;
    name = "VrfRequestAlreadyLaunchedError";
    msg = "Vrf request is already pending";
    constructor(logs) {
        super("6069: Vrf request is already pending");
        this.logs = logs;
    }
}
exports.VrfRequestAlreadyLaunchedError = VrfRequestAlreadyLaunchedError;
class VrfInsufficientVerificationError extends Error {
    logs;
    static code = 6070;
    code = 6070;
    name = "VrfInsufficientVerificationError";
    msg = "Insufficient amount of proofs collected for VRF callback";
    constructor(logs) {
        super("6070: Insufficient amount of proofs collected for VRF callback");
        this.logs = logs;
    }
}
exports.VrfInsufficientVerificationError = VrfInsufficientVerificationError;
class InvalidVrfProducerError extends Error {
    logs;
    static code = 6071;
    code = 6071;
    name = "InvalidVrfProducerError";
    msg = "An incorrect oracle attempted to submit a proof";
    constructor(logs) {
        super("6071: An incorrect oracle attempted to submit a proof");
        this.logs = logs;
    }
}
exports.InvalidVrfProducerError = InvalidVrfProducerError;
class InvalidGovernancePidError extends Error {
    logs;
    static code = 6072;
    code = 6072;
    name = "InvalidGovernancePidError";
    msg = "Invalid SPLGovernance Account Supplied";
    constructor(logs) {
        super("6072: Invalid SPLGovernance Account Supplied");
        this.logs = logs;
    }
}
exports.InvalidGovernancePidError = InvalidGovernancePidError;
class InvalidGovernanceAccountError extends Error {
    logs;
    static code = 6073;
    code = 6073;
    name = "InvalidGovernanceAccountError";
    msg = "An Invalid Governance Account was supplied";
    constructor(logs) {
        super("6073: An Invalid Governance Account was supplied");
        this.logs = logs;
    }
}
exports.InvalidGovernanceAccountError = InvalidGovernanceAccountError;
class MissingOptionalAccount extends Error {
    logs;
    static code = 6074;
    code = 6074;
    name = "MissingOptionalAccount";
    msg = "Expected an optional account";
    constructor(logs) {
        super("6074: Expected an optional account");
        this.logs = logs;
    }
}
exports.MissingOptionalAccount = MissingOptionalAccount;
class InvalidSpawnRecordOwner extends Error {
    logs;
    static code = 6075;
    code = 6075;
    name = "InvalidSpawnRecordOwner";
    msg = "Invalid Owner for Spawn Record";
    constructor(logs) {
        super("6075: Invalid Owner for Spawn Record");
        this.logs = logs;
    }
}
exports.InvalidSpawnRecordOwner = InvalidSpawnRecordOwner;
class NoopError extends Error {
    logs;
    static code = 6076;
    code = 6076;
    name = "NoopError";
    msg = "Noop error";
    constructor(logs) {
        super("6076: Noop error");
        this.logs = logs;
    }
}
exports.NoopError = NoopError;
class MissingRequiredAccountsError extends Error {
    logs;
    static code = 6077;
    code = 6077;
    name = "MissingRequiredAccountsError";
    msg = "A required instruction account was not included";
    constructor(logs) {
        super("6077: A required instruction account was not included");
        this.logs = logs;
    }
}
exports.MissingRequiredAccountsError = MissingRequiredAccountsError;
class InvalidMintError extends Error {
    logs;
    static code = 6078;
    code = 6078;
    name = "InvalidMintError";
    msg = "Invalid mint account passed for instruction";
    constructor(logs) {
        super("6078: Invalid mint account passed for instruction");
        this.logs = logs;
    }
}
exports.InvalidMintError = InvalidMintError;
class InvalidTokenAccountKeyError extends Error {
    logs;
    static code = 6079;
    code = 6079;
    name = "InvalidTokenAccountKeyError";
    msg = "An invalid token account was passed into the instruction";
    constructor(logs) {
        super("6079: An invalid token account was passed into the instruction");
        this.logs = logs;
    }
}
exports.InvalidTokenAccountKeyError = InvalidTokenAccountKeyError;
class InvalidJobAccountError extends Error {
    logs;
    static code = 6080;
    code = 6080;
    name = "InvalidJobAccountError";
    constructor(logs) {
        super("6080: ");
        this.logs = logs;
    }
}
exports.InvalidJobAccountError = InvalidJobAccountError;
class VoterStakeRegistryError extends Error {
    logs;
    static code = 6081;
    code = 6081;
    name = "VoterStakeRegistryError";
    constructor(logs) {
        super("6081: ");
        this.logs = logs;
    }
}
exports.VoterStakeRegistryError = VoterStakeRegistryError;
class AccountDiscriminatorMismatch extends Error {
    logs;
    static code = 6082;
    code = 6082;
    name = "AccountDiscriminatorMismatch";
    msg = "Account discriminator did not match.";
    constructor(logs) {
        super("6082: Account discriminator did not match.");
        this.logs = logs;
    }
}
exports.AccountDiscriminatorMismatch = AccountDiscriminatorMismatch;
class FuckingImpossibleError extends Error {
    logs;
    static code = 6083;
    code = 6083;
    name = "FuckingImpossibleError";
    msg = "This error is fucking impossible.";
    constructor(logs) {
        super("6083: This error is fucking impossible.");
        this.logs = logs;
    }
}
exports.FuckingImpossibleError = FuckingImpossibleError;
class InvalidVrfRound extends Error {
    logs;
    static code = 6084;
    code = 6084;
    name = "InvalidVrfRound";
    msg = "Responding to the wrong VRF round";
    constructor(logs) {
        super("6084: Responding to the wrong VRF round");
        this.logs = logs;
    }
}
exports.InvalidVrfRound = InvalidVrfRound;
class JobSizeExceeded extends Error {
    logs;
    static code = 6085;
    code = 6085;
    name = "JobSizeExceeded";
    msg = "Job size has exceeded the max of 6400 bytes";
    constructor(logs) {
        super("6085: Job size has exceeded the max of 6400 bytes");
        this.logs = logs;
    }
}
exports.JobSizeExceeded = JobSizeExceeded;
class JobChunksExceeded extends Error {
    logs;
    static code = 6086;
    code = 6086;
    name = "JobChunksExceeded";
    msg = "Job loading can only support a maximum of 8 chunks";
    constructor(logs) {
        super("6086: Job loading can only support a maximum of 8 chunks");
        this.logs = logs;
    }
}
exports.JobChunksExceeded = JobChunksExceeded;
class JobDataLocked extends Error {
    logs;
    static code = 6087;
    code = 6087;
    name = "JobDataLocked";
    msg = "Job has finished initializing and is immutable";
    constructor(logs) {
        super("6087: Job has finished initializing and is immutable");
        this.logs = logs;
    }
}
exports.JobDataLocked = JobDataLocked;
class JobNotInitialized extends Error {
    logs;
    static code = 6088;
    code = 6088;
    name = "JobNotInitialized";
    msg = "Job account has not finished initializing";
    constructor(logs) {
        super("6088: Job account has not finished initializing");
        this.logs = logs;
    }
}
exports.JobNotInitialized = JobNotInitialized;
class BufferRelayerIllegalRoundOpenCall extends Error {
    logs;
    static code = 6089;
    code = 6089;
    name = "BufferRelayerIllegalRoundOpenCall";
    msg = "BufferRelayer round open called too early.";
    constructor(logs) {
        super("6089: BufferRelayer round open called too early.");
        this.logs = logs;
    }
}
exports.BufferRelayerIllegalRoundOpenCall = BufferRelayerIllegalRoundOpenCall;
class InvalidSliderAccount extends Error {
    logs;
    static code = 6090;
    code = 6090;
    name = "InvalidSliderAccount";
    msg = "Invalid slider account.";
    constructor(logs) {
        super("6090: Invalid slider account.");
        this.logs = logs;
    }
}
exports.InvalidSliderAccount = InvalidSliderAccount;
class VrfLiteHasExistingPool extends Error {
    logs;
    static code = 6091;
    code = 6091;
    name = "VrfLiteHasExistingPool";
    msg = "VRF lite account belongs to an existing pool.";
    constructor(logs) {
        super("6091: VRF lite account belongs to an existing pool.");
        this.logs = logs;
    }
}
exports.VrfLiteHasExistingPool = VrfLiteHasExistingPool;
class VrfPoolFull extends Error {
    logs;
    static code = 6092;
    code = 6092;
    name = "VrfPoolFull";
    msg = "VRF pool is at max capacity.";
    constructor(logs) {
        super("6092: VRF pool is at max capacity.");
        this.logs = logs;
    }
}
exports.VrfPoolFull = VrfPoolFull;
class VrfPoolEmpty extends Error {
    logs;
    static code = 6093;
    code = 6093;
    name = "VrfPoolEmpty";
    msg = "VRF pool is empty.";
    constructor(logs) {
        super("6093: VRF pool is empty.");
        this.logs = logs;
    }
}
exports.VrfPoolEmpty = VrfPoolEmpty;
class VrfAccountNotFound extends Error {
    logs;
    static code = 6094;
    code = 6094;
    name = "VrfAccountNotFound";
    msg = "Failed to find VRF account in remaining accounts array.";
    constructor(logs) {
        super("6094: Failed to find VRF account in remaining accounts array.");
        this.logs = logs;
    }
}
exports.VrfAccountNotFound = VrfAccountNotFound;
class AccountCloseNotReady extends Error {
    logs;
    static code = 6095;
    code = 6095;
    name = "AccountCloseNotReady";
    msg = "Account is not ready to be closed.";
    constructor(logs) {
        super("6095: Account is not ready to be closed.");
        this.logs = logs;
    }
}
exports.AccountCloseNotReady = AccountCloseNotReady;
class VrfPoolRequestTooSoon extends Error {
    logs;
    static code = 6096;
    code = 6096;
    name = "VrfPoolRequestTooSoon";
    msg = "VRF requested too soon.";
    constructor(logs) {
        super("6096: VRF requested too soon.");
        this.logs = logs;
    }
}
exports.VrfPoolRequestTooSoon = VrfPoolRequestTooSoon;
class VrfPoolMiss extends Error {
    logs;
    static code = 6097;
    code = 6097;
    name = "VrfPoolMiss";
    msg = "VRF pool miss.";
    constructor(logs) {
        super("6097: VRF pool miss.");
        this.logs = logs;
    }
}
exports.VrfPoolMiss = VrfPoolMiss;
class VrfLiteOwnedByPool extends Error {
    logs;
    static code = 6098;
    code = 6098;
    name = "VrfLiteOwnedByPool";
    msg = "VRF lite belongs to a pool.";
    constructor(logs) {
        super("6098: VRF lite belongs to a pool.");
        this.logs = logs;
    }
}
exports.VrfLiteOwnedByPool = VrfLiteOwnedByPool;
class InsufficientTokenBalance extends Error {
    logs;
    static code = 6099;
    code = 6099;
    name = "InsufficientTokenBalance";
    msg = "Escrow has insufficient funds to perform this action.";
    constructor(logs) {
        super("6099: Escrow has insufficient funds to perform this action.");
        this.logs = logs;
    }
}
exports.InsufficientTokenBalance = InsufficientTokenBalance;
function fromCode(code, logs) {
    switch (code) {
        case 6000:
            return new ArrayOperationError(logs);
        case 6001:
            return new QueueOperationError(logs);
        case 6002:
            return new IncorrectProgramOwnerError(logs);
        case 6003:
            return new InvalidAggregatorRound(logs);
        case 6004:
            return new TooManyAggregatorJobs(logs);
        case 6005:
            return new AggregatorCurrentRoundClosed(logs);
        case 6006:
            return new AggregatorInvalidSaveResult(logs);
        case 6007:
            return new InvalidStrDecimalConversion(logs);
        case 6008:
            return new AccountLoaderMissingSignature(logs);
        case 6009:
            return new MissingRequiredSignature(logs);
        case 6010:
            return new ArrayOverflowError(logs);
        case 6011:
            return new ArrayUnderflowError(logs);
        case 6012:
            return new PubkeyNotFoundError(logs);
        case 6013:
            return new AggregatorIllegalRoundOpenCall(logs);
        case 6014:
            return new AggregatorIllegalRoundCloseCall(logs);
        case 6015:
            return new AggregatorClosedError(logs);
        case 6016:
            return new IllegalOracleIdxError(logs);
        case 6017:
            return new OracleAlreadyRespondedError(logs);
        case 6018:
            return new ProtoDeserializeError(logs);
        case 6019:
            return new UnauthorizedStateUpdateError(logs);
        case 6020:
            return new MissingOracleAccountsError(logs);
        case 6021:
            return new OracleMismatchError(logs);
        case 6022:
            return new CrankMaxCapacityError(logs);
        case 6023:
            return new AggregatorLeaseInsufficientFunds(logs);
        case 6024:
            return new IncorrectTokenAccountMint(logs);
        case 6025:
            return new InvalidEscrowAccount(logs);
        case 6026:
            return new CrankEmptyError(logs);
        case 6027:
            return new PdaDeriveError(logs);
        case 6028:
            return new AggregatorAccountNotFound(logs);
        case 6029:
            return new PermissionAccountNotFound(logs);
        case 6030:
            return new LeaseAccountDeriveFailure(logs);
        case 6031:
            return new PermissionAccountDeriveFailure(logs);
        case 6032:
            return new EscrowAccountNotFound(logs);
        case 6033:
            return new LeaseAccountNotFound(logs);
        case 6034:
            return new DecimalConversionError(logs);
        case 6035:
            return new PermissionDenied(logs);
        case 6036:
            return new QueueAtCapacity(logs);
        case 6037:
            return new ExcessiveCrankRowsError(logs);
        case 6038:
            return new AggregatorLockedError(logs);
        case 6039:
            return new AggregatorInvalidBatchSizeError(logs);
        case 6040:
            return new AggregatorJobChecksumMismatch(logs);
        case 6041:
            return new IntegerOverflowError(logs);
        case 6042:
            return new InvalidUpdatePeriodError(logs);
        case 6043:
            return new NoResultsError(logs);
        case 6044:
            return new InvalidExpirationError(logs);
        case 6045:
            return new InsufficientStakeError(logs);
        case 6046:
            return new LeaseInactiveError(logs);
        case 6047:
            return new NoAggregatorJobsFound(logs);
        case 6048:
            return new IntegerUnderflowError(logs);
        case 6049:
            return new OracleQueueMismatch(logs);
        case 6050:
            return new OracleWalletMismatchError(logs);
        case 6051:
            return new InvalidBufferAccountError(logs);
        case 6052:
            return new InsufficientOracleQueueError(logs);
        case 6053:
            return new InvalidAuthorityError(logs);
        case 6054:
            return new InvalidTokenAccountMintError(logs);
        case 6055:
            return new ExcessiveLeaseWithdrawlError(logs);
        case 6056:
            return new InvalideHistoryAccountError(logs);
        case 6057:
            return new InvalidLeaseAccountEscrowError(logs);
        case 6058:
            return new InvalidCrankAccountError(logs);
        case 6059:
            return new CrankNoElementsReadyError(logs);
        case 6060:
            return new IndexOutOfBoundsError(logs);
        case 6061:
            return new VrfInvalidRequestError(logs);
        case 6062:
            return new VrfInvalidProofSubmissionError(logs);
        case 6063:
            return new VrfVerifyError(logs);
        case 6064:
            return new VrfCallbackError(logs);
        case 6065:
            return new VrfCallbackParamsError(logs);
        case 6066:
            return new VrfCallbackAlreadyCalledError(logs);
        case 6067:
            return new VrfInvalidPubkeyError(logs);
        case 6068:
            return new VrfTooManyVerifyCallsError(logs);
        case 6069:
            return new VrfRequestAlreadyLaunchedError(logs);
        case 6070:
            return new VrfInsufficientVerificationError(logs);
        case 6071:
            return new InvalidVrfProducerError(logs);
        case 6072:
            return new InvalidGovernancePidError(logs);
        case 6073:
            return new InvalidGovernanceAccountError(logs);
        case 6074:
            return new MissingOptionalAccount(logs);
        case 6075:
            return new InvalidSpawnRecordOwner(logs);
        case 6076:
            return new NoopError(logs);
        case 6077:
            return new MissingRequiredAccountsError(logs);
        case 6078:
            return new InvalidMintError(logs);
        case 6079:
            return new InvalidTokenAccountKeyError(logs);
        case 6080:
            return new InvalidJobAccountError(logs);
        case 6081:
            return new VoterStakeRegistryError(logs);
        case 6082:
            return new AccountDiscriminatorMismatch(logs);
        case 6083:
            return new FuckingImpossibleError(logs);
        case 6084:
            return new InvalidVrfRound(logs);
        case 6085:
            return new JobSizeExceeded(logs);
        case 6086:
            return new JobChunksExceeded(logs);
        case 6087:
            return new JobDataLocked(logs);
        case 6088:
            return new JobNotInitialized(logs);
        case 6089:
            return new BufferRelayerIllegalRoundOpenCall(logs);
        case 6090:
            return new InvalidSliderAccount(logs);
        case 6091:
            return new VrfLiteHasExistingPool(logs);
        case 6092:
            return new VrfPoolFull(logs);
        case 6093:
            return new VrfPoolEmpty(logs);
        case 6094:
            return new VrfAccountNotFound(logs);
        case 6095:
            return new AccountCloseNotReady(logs);
        case 6096:
            return new VrfPoolRequestTooSoon(logs);
        case 6097:
            return new VrfPoolMiss(logs);
        case 6098:
            return new VrfLiteOwnedByPool(logs);
        case 6099:
            return new InsufficientTokenBalance(logs);
    }
    return null;
}
//# sourceMappingURL=custom.js.map