import * as types from "../types";
import * as borsh from "@coral-xyz/borsh";
export interface ActionAuthorityJSON {
    kind: "ActionAuthority";
}
export declare class ActionAuthority {
    static readonly discriminator = 0;
    static readonly kind = "ActionAuthority";
    readonly discriminator = 0;
    readonly kind = "ActionAuthority";
    toJSON(): ActionAuthorityJSON;
    toEncodable(): {
        ActionAuthority: {};
    };
}
export interface LookupTableJSON {
    kind: "LookupTable";
}
export declare class LookupTable {
    static readonly discriminator = 1;
    static readonly kind = "LookupTable";
    readonly discriminator = 1;
    readonly kind = "LookupTable";
    toJSON(): LookupTableJSON;
    toEncodable(): {
        LookupTable: {};
    };
}
export interface PendingAdminJSON {
    kind: "PendingAdmin";
}
export declare class PendingAdmin {
    static readonly discriminator = 2;
    static readonly kind = "PendingAdmin";
    readonly discriminator = 2;
    readonly kind = "PendingAdmin";
    toJSON(): PendingAdminJSON;
    toEncodable(): {
        PendingAdmin: {};
    };
}
export declare function fromDecoded(obj: any): types.PoolConfigFieldKind;
export declare function fromJSON(obj: types.PoolConfigFieldJSON): types.PoolConfigFieldKind;
export declare function layout(property?: string): borsh.EnumLayout<unknown>;
//# sourceMappingURL=PoolConfigField.d.ts.map