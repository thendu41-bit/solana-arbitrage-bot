"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnstakeTicket = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
const kit_1 = require("@solana/kit");
/* eslint-enable @typescript-eslint/no-unused-vars */
const bn_js_1 = __importDefault(require("bn.js")); // eslint-disable-line @typescript-eslint/no-unused-vars
const borsh = __importStar(require("@coral-xyz/borsh")); // eslint-disable-line @typescript-eslint/no-unused-vars
const utils_1 = require("../utils"); // eslint-disable-line @typescript-eslint/no-unused-vars
const programId_1 = require("../programId");
class UnstakeTicket {
    authority;
    poolState;
    obligationMetadata;
    initialUsol;
    remainingUsol;
    minimumEpochToBurn;
    padding0;
    padding;
    static discriminator = Buffer.from([
        131, 84, 209, 38, 145, 157, 181, 127,
    ]);
    static layout = borsh.struct([
        (0, utils_1.borshAddress)("authority"),
        (0, utils_1.borshAddress)("poolState"),
        (0, utils_1.borshAddress)("obligationMetadata"),
        borsh.u64("initialUsol"),
        borsh.u64("remainingUsol"),
        borsh.u64("minimumEpochToBurn"),
        borsh.array(borsh.u64(), 1, "padding0"),
        borsh.array(borsh.u128(), 16, "padding"),
    ]);
    constructor(fields) {
        this.authority = fields.authority;
        this.poolState = fields.poolState;
        this.obligationMetadata = fields.obligationMetadata;
        this.initialUsol = fields.initialUsol;
        this.remainingUsol = fields.remainingUsol;
        this.minimumEpochToBurn = fields.minimumEpochToBurn;
        this.padding0 = fields.padding0;
        this.padding = fields.padding;
    }
    static async fetch(rpc, address, programId = programId_1.PROGRAM_ID) {
        const info = await (0, kit_1.fetchEncodedAccount)(rpc, address);
        if (!info.exists) {
            return null;
        }
        if (info.programAddress !== programId) {
            throw new Error("account doesn't belong to this program");
        }
        return this.decode(Buffer.from(info.data));
    }
    static async fetchMultiple(rpc, addresses, programId = programId_1.PROGRAM_ID) {
        const infos = await (0, kit_1.fetchEncodedAccounts)(rpc, addresses);
        return infos.map((info) => {
            if (!info.exists) {
                return null;
            }
            if (info.programAddress !== programId) {
                throw new Error("account doesn't belong to this program");
            }
            return this.decode(Buffer.from(info.data));
        });
    }
    static decode(data) {
        if (!data.slice(0, 8).equals(UnstakeTicket.discriminator)) {
            throw new Error("invalid account discriminator");
        }
        const dec = UnstakeTicket.layout.decode(data.slice(8));
        return new UnstakeTicket({
            authority: dec.authority,
            poolState: dec.poolState,
            obligationMetadata: dec.obligationMetadata,
            initialUsol: dec.initialUsol,
            remainingUsol: dec.remainingUsol,
            minimumEpochToBurn: dec.minimumEpochToBurn,
            padding0: dec.padding0,
            padding: dec.padding,
        });
    }
    toJSON() {
        return {
            authority: this.authority,
            poolState: this.poolState,
            obligationMetadata: this.obligationMetadata,
            initialUsol: this.initialUsol.toString(),
            remainingUsol: this.remainingUsol.toString(),
            minimumEpochToBurn: this.minimumEpochToBurn.toString(),
            padding0: this.padding0.map((item) => item.toString()),
            padding: this.padding.map((item) => item.toString()),
        };
    }
    static fromJSON(obj) {
        return new UnstakeTicket({
            authority: (0, kit_1.address)(obj.authority),
            poolState: (0, kit_1.address)(obj.poolState),
            obligationMetadata: (0, kit_1.address)(obj.obligationMetadata),
            initialUsol: new bn_js_1.default(obj.initialUsol),
            remainingUsol: new bn_js_1.default(obj.remainingUsol),
            minimumEpochToBurn: new bn_js_1.default(obj.minimumEpochToBurn),
            padding0: obj.padding0.map((item) => new bn_js_1.default(item)),
            padding: obj.padding.map((item) => new bn_js_1.default(item)),
        });
    }
}
exports.UnstakeTicket = UnstakeTicket;
//# sourceMappingURL=UnstakeTicket.js.map