"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PoolState = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
const kit_1 = require("@solana/kit");
/* eslint-enable @typescript-eslint/no-unused-vars */
const bn_js_1 = __importDefault(require("bn.js")); // eslint-disable-line @typescript-eslint/no-unused-vars
const borsh = __importStar(require("@coral-xyz/borsh")); // eslint-disable-line @typescript-eslint/no-unused-vars
const utils_1 = require("../utils"); // eslint-disable-line @typescript-eslint/no-unused-vars
const programId_1 = require("../programId");
class PoolState {
    admin;
    pendingAdmin;
    basePoolAuthority;
    basePoolAuthorityBump;
    unstakingSolMint;
    wsolVault;
    actionAuthority;
    poolLookupTable;
    sharesIssued;
    wsolUnstaking;
    wsolInVault;
    padding;
    static discriminator = Buffer.from([
        247, 237, 227, 245, 215, 195, 222, 70,
    ]);
    static layout = borsh.struct([
        (0, utils_1.borshAddress)("admin"),
        (0, utils_1.borshAddress)("pendingAdmin"),
        (0, utils_1.borshAddress)("basePoolAuthority"),
        borsh.u64("basePoolAuthorityBump"),
        (0, utils_1.borshAddress)("unstakingSolMint"),
        (0, utils_1.borshAddress)("wsolVault"),
        (0, utils_1.borshAddress)("actionAuthority"),
        (0, utils_1.borshAddress)("poolLookupTable"),
        borsh.u64("sharesIssued"),
        borsh.u64("wsolUnstaking"),
        borsh.u64("wsolInVault"),
        borsh.array(borsh.u128(), 256, "padding"),
    ]);
    constructor(fields) {
        this.admin = fields.admin;
        this.pendingAdmin = fields.pendingAdmin;
        this.basePoolAuthority = fields.basePoolAuthority;
        this.basePoolAuthorityBump = fields.basePoolAuthorityBump;
        this.unstakingSolMint = fields.unstakingSolMint;
        this.wsolVault = fields.wsolVault;
        this.actionAuthority = fields.actionAuthority;
        this.poolLookupTable = fields.poolLookupTable;
        this.sharesIssued = fields.sharesIssued;
        this.wsolUnstaking = fields.wsolUnstaking;
        this.wsolInVault = fields.wsolInVault;
        this.padding = fields.padding;
    }
    static async fetch(rpc, address, programId = programId_1.PROGRAM_ID) {
        const info = await (0, kit_1.fetchEncodedAccount)(rpc, address);
        if (!info.exists) {
            return null;
        }
        if (info.programAddress !== programId) {
            throw new Error("account doesn't belong to this program");
        }
        return this.decode(Buffer.from(info.data));
    }
    static async fetchMultiple(rpc, addresses, programId = programId_1.PROGRAM_ID) {
        const infos = await (0, kit_1.fetchEncodedAccounts)(rpc, addresses);
        return infos.map((info) => {
            if (!info.exists) {
                return null;
            }
            if (info.programAddress !== programId) {
                throw new Error("account doesn't belong to this program");
            }
            return this.decode(Buffer.from(info.data));
        });
    }
    static decode(data) {
        if (!data.slice(0, 8).equals(PoolState.discriminator)) {
            throw new Error("invalid account discriminator");
        }
        const dec = PoolState.layout.decode(data.slice(8));
        return new PoolState({
            admin: dec.admin,
            pendingAdmin: dec.pendingAdmin,
            basePoolAuthority: dec.basePoolAuthority,
            basePoolAuthorityBump: dec.basePoolAuthorityBump,
            unstakingSolMint: dec.unstakingSolMint,
            wsolVault: dec.wsolVault,
            actionAuthority: dec.actionAuthority,
            poolLookupTable: dec.poolLookupTable,
            sharesIssued: dec.sharesIssued,
            wsolUnstaking: dec.wsolUnstaking,
            wsolInVault: dec.wsolInVault,
            padding: dec.padding,
        });
    }
    toJSON() {
        return {
            admin: this.admin,
            pendingAdmin: this.pendingAdmin,
            basePoolAuthority: this.basePoolAuthority,
            basePoolAuthorityBump: this.basePoolAuthorityBump.toString(),
            unstakingSolMint: this.unstakingSolMint,
            wsolVault: this.wsolVault,
            actionAuthority: this.actionAuthority,
            poolLookupTable: this.poolLookupTable,
            sharesIssued: this.sharesIssued.toString(),
            wsolUnstaking: this.wsolUnstaking.toString(),
            wsolInVault: this.wsolInVault.toString(),
            padding: this.padding.map((item) => item.toString()),
        };
    }
    static fromJSON(obj) {
        return new PoolState({
            admin: (0, kit_1.address)(obj.admin),
            pendingAdmin: (0, kit_1.address)(obj.pendingAdmin),
            basePoolAuthority: (0, kit_1.address)(obj.basePoolAuthority),
            basePoolAuthorityBump: new bn_js_1.default(obj.basePoolAuthorityBump),
            unstakingSolMint: (0, kit_1.address)(obj.unstakingSolMint),
            wsolVault: (0, kit_1.address)(obj.wsolVault),
            actionAuthority: (0, kit_1.address)(obj.actionAuthority),
            poolLookupTable: (0, kit_1.address)(obj.poolLookupTable),
            sharesIssued: new bn_js_1.default(obj.sharesIssued),
            wsolUnstaking: new bn_js_1.default(obj.wsolUnstaking),
            wsolInVault: new bn_js_1.default(obj.wsolInVault),
            padding: obj.padding.map((item) => new bn_js_1.default(item)),
        });
    }
}
exports.PoolState = PoolState;
//# sourceMappingURL=PoolState.js.map