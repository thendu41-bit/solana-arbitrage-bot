export type CustomError = IntegerOverflow | ConversionFailed | StakePoolError | InvalidStakePoolAccounts | StakePoolDeserializeError | InvalidStakePoolProgram | InvalidStakePoolSize | InvalidStakeAccountProgram | InvalidStakeAccountSize | InvalidStakeAccountCandidate | UnexpectedSolToDestake | UnexpectedSolToCollect | InvalidStakedSolProgram | CannotDepositZeroStakedSol | CannotMintZeroShares | CannotBurnZeroShares | CannotCollectZeroSol | NotEnoughWsol | NotEnoughSharesIssued | NotEnoughSharesInTicket | NotEnoughStakedSolToDeposit | PoolFeeCannotBe100Percent | LessSharesThanExpected | LessWsolThanExpected | InvalidFeeAccount | UnsupportedFeeAccountExtension | CannotBurnBeforeTicketAllows | WrongTicketAuthority | InvalidPendingAdmin | CollectingMoreThanUnstaking | CannotSplitZeroShares | WrongTicketPoolState;
export declare class IntegerOverflow extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 8000;
    readonly code = 8000;
    readonly name = "IntegerOverflow";
    readonly msg = "IntegerOverflow";
    constructor(logs?: string[] | undefined);
}
export declare class ConversionFailed extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 8001;
    readonly code = 8001;
    readonly name = "ConversionFailed";
    readonly msg = "ConversionFailed";
    constructor(logs?: string[] | undefined);
}
export declare class StakePoolError extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 8002;
    readonly code = 8002;
    readonly name = "StakePoolError";
    readonly msg = "Stake pool specific error";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidStakePoolAccounts extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 8003;
    readonly code = 8003;
    readonly name = "InvalidStakePoolAccounts";
    readonly msg = "Passed stake pool accounts are not valid";
    constructor(logs?: string[] | undefined);
}
export declare class StakePoolDeserializeError extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 8004;
    readonly code = 8004;
    readonly name = "StakePoolDeserializeError";
    readonly msg = "Stake pool deserialization error";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidStakePoolProgram extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 8005;
    readonly code = 8005;
    readonly name = "InvalidStakePoolProgram";
    readonly msg = "Stake pool invalid program";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidStakePoolSize extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 8006;
    readonly code = 8006;
    readonly name = "InvalidStakePoolSize";
    readonly msg = "Stake pool invalid size";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidStakeAccountProgram extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 8007;
    readonly code = 8007;
    readonly name = "InvalidStakeAccountProgram";
    readonly msg = "Stake account invalid program";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidStakeAccountSize extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 8008;
    readonly code = 8008;
    readonly name = "InvalidStakeAccountSize";
    readonly msg = "Stake account invalid size";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidStakeAccountCandidate extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 8009;
    readonly code = 8009;
    readonly name = "InvalidStakeAccountCandidate";
    readonly msg = "Stake account candidates should be uninitialized accounts";
    constructor(logs?: string[] | undefined);
}
export declare class UnexpectedSolToDestake extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 8010;
    readonly code = 8010;
    readonly name = "UnexpectedSolToDestake";
    readonly msg = "Simulation and actual cpi call have different results for withdrawing sol from stake pool";
    constructor(logs?: string[] | undefined);
}
export declare class UnexpectedSolToCollect extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 8011;
    readonly code = 8011;
    readonly name = "UnexpectedSolToCollect";
    readonly msg = "Simulation and actual cpi call have different results for collecting sol from stake account";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidStakedSolProgram extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 8012;
    readonly code = 8012;
    readonly name = "InvalidStakedSolProgram";
    readonly msg = "Staked sol program not support";
    constructor(logs?: string[] | undefined);
}
export declare class CannotDepositZeroStakedSol extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 8013;
    readonly code = 8013;
    readonly name = "CannotDepositZeroStakedSol";
    readonly msg = "Cannot deposit 0 staked sol";
    constructor(logs?: string[] | undefined);
}
export declare class CannotMintZeroShares extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 8014;
    readonly code = 8014;
    readonly name = "CannotMintZeroShares";
    readonly msg = "Cannot mint 0 shares";
    constructor(logs?: string[] | undefined);
}
export declare class CannotBurnZeroShares extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 8015;
    readonly code = 8015;
    readonly name = "CannotBurnZeroShares";
    readonly msg = "Cannot burn 0 shares";
    constructor(logs?: string[] | undefined);
}
export declare class CannotCollectZeroSol extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 8016;
    readonly code = 8016;
    readonly name = "CannotCollectZeroSol";
    readonly msg = "Cannot collect 0";
    constructor(logs?: string[] | undefined);
}
export declare class NotEnoughWsol extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 8017;
    readonly code = 8017;
    readonly name = "NotEnoughWsol";
    readonly msg = "Not enough wsol in vault";
    constructor(logs?: string[] | undefined);
}
export declare class NotEnoughSharesIssued extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 8018;
    readonly code = 8018;
    readonly name = "NotEnoughSharesIssued";
    readonly msg = "Not enough shares issued";
    constructor(logs?: string[] | undefined);
}
export declare class NotEnoughSharesInTicket extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 8019;
    readonly code = 8019;
    readonly name = "NotEnoughSharesInTicket";
    readonly msg = "Not enough shares left for ticket";
    constructor(logs?: string[] | undefined);
}
export declare class NotEnoughStakedSolToDeposit extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 8020;
    readonly code = 8020;
    readonly name = "NotEnoughStakedSolToDeposit";
    readonly msg = "Not enough staked sol to deposit (must be at least equivalent to minimum pool delegation)";
    constructor(logs?: string[] | undefined);
}
export declare class PoolFeeCannotBe100Percent extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 8021;
    readonly code = 8021;
    readonly name = "PoolFeeCannotBe100Percent";
    readonly msg = "We cannot compute the inverse with fee when value is 100%";
    constructor(logs?: string[] | undefined);
}
export declare class LessSharesThanExpected extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 8022;
    readonly code = 8022;
    readonly name = "LessSharesThanExpected";
    readonly msg = "Received less shares than minimum expected";
    constructor(logs?: string[] | undefined);
}
export declare class LessWsolThanExpected extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 8023;
    readonly code = 8023;
    readonly name = "LessWsolThanExpected";
    readonly msg = "Received less wsol than minimum expected";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidFeeAccount extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 8024;
    readonly code = 8024;
    readonly name = "InvalidFeeAccount";
    readonly msg = "Manager fee account passed is not valid (wrong token program / account not initialized / wrong mint)";
    constructor(logs?: string[] | undefined);
}
export declare class UnsupportedFeeAccountExtension extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 8025;
    readonly code = 8025;
    readonly name = "UnsupportedFeeAccountExtension";
    readonly msg = "Manager fee account passed has unsupported extensions by standard stake pool";
    constructor(logs?: string[] | undefined);
}
export declare class CannotBurnBeforeTicketAllows extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 8026;
    readonly code = 8026;
    readonly name = "CannotBurnBeforeTicketAllows";
    readonly msg = "Cannot burn shares before unstake ticket allows";
    constructor(logs?: string[] | undefined);
}
export declare class WrongTicketAuthority extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 8027;
    readonly code = 8027;
    readonly name = "WrongTicketAuthority";
    readonly msg = "Cannot burn shares from a ticket if user is not the burn authority";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidPendingAdmin extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 8028;
    readonly code = 8028;
    readonly name = "InvalidPendingAdmin";
    readonly msg = "Invalid pending admin";
    constructor(logs?: string[] | undefined);
}
export declare class CollectingMoreThanUnstaking extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 8029;
    readonly code = 8029;
    readonly name = "CollectingMoreThanUnstaking";
    readonly msg = "We are trying to collect more SOL than there is unstaking";
    constructor(logs?: string[] | undefined);
}
export declare class CannotSplitZeroShares extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 8030;
    readonly code = 8030;
    readonly name = "CannotSplitZeroShares";
    readonly msg = "Cannot split 0 shares";
    constructor(logs?: string[] | undefined);
}
export declare class WrongTicketPoolState extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 8031;
    readonly code = 8031;
    readonly name = "WrongTicketPoolState";
    readonly msg = "Cannot burn shares from a ticket if it's not linked to the pool";
    constructor(logs?: string[] | undefined);
}
export declare function fromCode(code: number, logs?: string[]): CustomError | null;
//# sourceMappingURL=custom.d.ts.map