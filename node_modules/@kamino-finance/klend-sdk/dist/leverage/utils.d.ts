import { Kamino, StrategyWithAddress } from '@kamino-finance/kliquidity-sdk';
import { KaminoMarket, KaminoReserve } from '../classes';
import { Address, Instruction, GetAccountInfoApi, Rpc, GetTokenAccountBalanceApi, TransactionSigner } from '@solana/kit';
import Decimal from 'decimal.js';
import { PriceAinBProvider, SwapQuote, SwapIxsProvider } from './types';
export interface KaminoSwapperIxBuilder {
    (input: DepositAmountsForSwap, tokenAMint: Address, tokenBMint: Address, owner: TransactionSigner, slippage: Decimal, allKeys: Address[]): Promise<[Instruction[], Address[]]>;
}
export interface DepositAmountsForSwap {
    requiredAAmountToDeposit: Decimal;
    requiredBAmountToDeposit: Decimal;
    tokenAToSwapAmount: Decimal;
    tokenBToSwapAmount: Decimal;
}
export declare function getTokenToKtokenSwapper<QuoteResponse>(kaminoMarket: KaminoMarket, kamino: Kamino, depositor: TransactionSigner, slippagePct: Decimal, swapper: SwapIxsProvider<QuoteResponse>, priceAinB: PriceAinBProvider, includeAtaIxs?: boolean): Promise<SwapIxsProvider<QuoteResponse>>;
export declare function getKtokenDepositIxs<QuoteResponse>(rpc: Rpc<GetAccountInfoApi & GetTokenAccountBalanceApi>, kamino: Kamino, depositor: TransactionSigner, depositTokenMint: Address, ktokenMint: Address, amountToDeposit: Decimal, slippageBps: Decimal, amountExpectedDepositAtaBalance: Decimal, swapper: SwapIxsProvider<QuoteResponse>, priceAinB: PriceAinBProvider, includeAtaIxs: boolean | undefined, klendAccounts: Array<Address>, quote: SwapQuote<QuoteResponse>): Promise<import("@kamino-finance/kliquidity-sdk").InstructionsWithLookupTables>;
export declare function getKtokenToTokenSwapper<QuoteResponse>(kaminoMarket: KaminoMarket, kamino: Kamino, depositor: TransactionSigner, swapper: SwapIxsProvider<QuoteResponse>): Promise<SwapIxsProvider<QuoteResponse>>;
export declare function getKtokenWithdrawIxs(kamino: Kamino, withdrawer: TransactionSigner, kaminoStrategy: StrategyWithAddress, amountToWithdraw: Decimal): Promise<import("@kamino-finance/kliquidity-sdk").WithdrawShares>;
export declare function getKtokenWithdrawEstimatesAndPrice(kamino: Kamino, kaminoStrategy: StrategyWithAddress, amountToWithdraw: Decimal): Promise<Decimal[]>;
export declare function swapProviderToKaminoSwapProvider<QuoteResponse>(swapper: SwapIxsProvider<QuoteResponse>, klendAccounts: Array<Address>, swapQuote: SwapQuote<QuoteResponse>): KaminoSwapperIxBuilder;
export declare const getExpectedTokenBalanceAfterBorrow: (rpc: Rpc<GetAccountInfoApi & GetTokenAccountBalanceApi>, mint: Address, owner: Address, amountToBorrowLamports: Decimal, amountToBorrowMintDecimals: number) => Promise<Decimal>;
export declare const isBorrowingEnabled: (reserve: KaminoReserve) => boolean;
//# sourceMappingURL=utils.d.ts.map