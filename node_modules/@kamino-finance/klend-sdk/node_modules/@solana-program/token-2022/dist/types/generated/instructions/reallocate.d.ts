/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type AccountSignerMeta, type Address, type Codec, type Decoder, type Encoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type ReadonlyAccount, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount, type WritableSignerAccount } from '@solana/kit';
import { TOKEN_2022_PROGRAM_ADDRESS } from '../programs';
import { type ExtensionType, type ExtensionTypeArgs } from '../types';
export declare const REALLOCATE_DISCRIMINATOR = 29;
export declare function getReallocateDiscriminatorBytes(): ReadonlyUint8Array;
export type ReallocateInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountToken extends string | AccountMeta<string> = string, TAccountPayer extends string | AccountMeta<string> = string, TAccountSystemProgram extends string | AccountMeta<string> = '11111111111111111111111111111111', TAccountOwner extends string | AccountMeta<string> = string, TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountToken extends string ? WritableAccount<TAccountToken> : TAccountToken,
    TAccountPayer extends string ? WritableSignerAccount<TAccountPayer> & AccountSignerMeta<TAccountPayer> : TAccountPayer,
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    TAccountOwner extends string ? ReadonlyAccount<TAccountOwner> : TAccountOwner,
    ...TRemainingAccounts
]>;
export type ReallocateInstructionData = {
    discriminator: number;
    /** New extension types to include in the reallocated account. */
    newExtensionTypes: Array<ExtensionType>;
};
export type ReallocateInstructionDataArgs = {
    /** New extension types to include in the reallocated account. */
    newExtensionTypes: Array<ExtensionTypeArgs>;
};
export declare function getReallocateInstructionDataEncoder(): Encoder<ReallocateInstructionDataArgs>;
export declare function getReallocateInstructionDataDecoder(): Decoder<ReallocateInstructionData>;
export declare function getReallocateInstructionDataCodec(): Codec<ReallocateInstructionDataArgs, ReallocateInstructionData>;
export type ReallocateInput<TAccountToken extends string = string, TAccountPayer extends string = string, TAccountSystemProgram extends string = string, TAccountOwner extends string = string> = {
    /** The token account to reallocate. */
    token: Address<TAccountToken>;
    /** The payer account to fund reallocation. */
    payer: TransactionSigner<TAccountPayer>;
    /** System program for reallocation funding. */
    systemProgram?: Address<TAccountSystemProgram>;
    /** The account's owner or its multisignature account. */
    owner: Address<TAccountOwner> | TransactionSigner<TAccountOwner>;
    newExtensionTypes: ReallocateInstructionDataArgs['newExtensionTypes'];
    multiSigners?: Array<TransactionSigner>;
};
export declare function getReallocateInstruction<TAccountToken extends string, TAccountPayer extends string, TAccountSystemProgram extends string, TAccountOwner extends string, TProgramAddress extends Address = typeof TOKEN_2022_PROGRAM_ADDRESS>(input: ReallocateInput<TAccountToken, TAccountPayer, TAccountSystemProgram, TAccountOwner>, config?: {
    programAddress?: TProgramAddress;
}): ReallocateInstruction<TProgramAddress, TAccountToken, TAccountPayer, TAccountSystemProgram, (typeof input)['owner'] extends TransactionSigner<TAccountOwner> ? ReadonlySignerAccount<TAccountOwner> & AccountSignerMeta<TAccountOwner> : TAccountOwner>;
export type ParsedReallocateInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** The token account to reallocate. */
        token: TAccountMetas[0];
        /** The payer account to fund reallocation. */
        payer: TAccountMetas[1];
        /** System program for reallocation funding. */
        systemProgram: TAccountMetas[2];
        /** The account's owner or its multisignature account. */
        owner: TAccountMetas[3];
    };
    data: ReallocateInstructionData;
};
export declare function parseReallocateInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedReallocateInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=reallocate.d.ts.map