/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type AccountSignerMeta, type Address, type FixedSizeCodec, type FixedSizeDecoder, type FixedSizeEncoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type Option, type OptionOrNullable, type ReadonlyAccount, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { TOKEN_2022_PROGRAM_ADDRESS } from '../programs';
export declare const UPDATE_GROUP_POINTER_DISCRIMINATOR = 40;
export declare function getUpdateGroupPointerDiscriminatorBytes(): ReadonlyUint8Array;
export declare const UPDATE_GROUP_POINTER_GROUP_POINTER_DISCRIMINATOR = 1;
export declare function getUpdateGroupPointerGroupPointerDiscriminatorBytes(): ReadonlyUint8Array;
export type UpdateGroupPointerInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMint extends string | AccountMeta<string> = string, TAccountGroupPointerAuthority extends string | AccountMeta<string> = string, TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountMint extends string ? WritableAccount<TAccountMint> : TAccountMint,
    TAccountGroupPointerAuthority extends string ? ReadonlyAccount<TAccountGroupPointerAuthority> : TAccountGroupPointerAuthority,
    ...TRemainingAccounts
]>;
export type UpdateGroupPointerInstructionData = {
    discriminator: number;
    groupPointerDiscriminator: number;
    /** The new account address that holds the group configurations. */
    groupAddress: Option<Address>;
};
export type UpdateGroupPointerInstructionDataArgs = {
    /** The new account address that holds the group configurations. */
    groupAddress: OptionOrNullable<Address>;
};
export declare function getUpdateGroupPointerInstructionDataEncoder(): FixedSizeEncoder<UpdateGroupPointerInstructionDataArgs>;
export declare function getUpdateGroupPointerInstructionDataDecoder(): FixedSizeDecoder<UpdateGroupPointerInstructionData>;
export declare function getUpdateGroupPointerInstructionDataCodec(): FixedSizeCodec<UpdateGroupPointerInstructionDataArgs, UpdateGroupPointerInstructionData>;
export type UpdateGroupPointerInput<TAccountMint extends string = string, TAccountGroupPointerAuthority extends string = string> = {
    /** The mint to initialize. */
    mint: Address<TAccountMint>;
    /** The group pointer authority or its multisignature account. */
    groupPointerAuthority: Address<TAccountGroupPointerAuthority> | TransactionSigner<TAccountGroupPointerAuthority>;
    groupAddress: UpdateGroupPointerInstructionDataArgs['groupAddress'];
    multiSigners?: Array<TransactionSigner>;
};
export declare function getUpdateGroupPointerInstruction<TAccountMint extends string, TAccountGroupPointerAuthority extends string, TProgramAddress extends Address = typeof TOKEN_2022_PROGRAM_ADDRESS>(input: UpdateGroupPointerInput<TAccountMint, TAccountGroupPointerAuthority>, config?: {
    programAddress?: TProgramAddress;
}): UpdateGroupPointerInstruction<TProgramAddress, TAccountMint, (typeof input)['groupPointerAuthority'] extends TransactionSigner<TAccountGroupPointerAuthority> ? ReadonlySignerAccount<TAccountGroupPointerAuthority> & AccountSignerMeta<TAccountGroupPointerAuthority> : TAccountGroupPointerAuthority>;
export type ParsedUpdateGroupPointerInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** The mint to initialize. */
        mint: TAccountMetas[0];
        /** The group pointer authority or its multisignature account. */
        groupPointerAuthority: TAccountMetas[1];
    };
    data: UpdateGroupPointerInstructionData;
};
export declare function parseUpdateGroupPointerInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedUpdateGroupPointerInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=updateGroupPointer.d.ts.map