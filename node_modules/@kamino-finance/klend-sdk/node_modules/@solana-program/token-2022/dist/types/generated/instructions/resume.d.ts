/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type AccountSignerMeta, type Address, type FixedSizeCodec, type FixedSizeDecoder, type FixedSizeEncoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type ReadonlyAccount, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { TOKEN_2022_PROGRAM_ADDRESS } from '../programs';
export declare const RESUME_DISCRIMINATOR = 44;
export declare function getResumeDiscriminatorBytes(): ReadonlyUint8Array;
export declare const RESUME_PAUSABLE_DISCRIMINATOR = 2;
export declare function getResumePausableDiscriminatorBytes(): ReadonlyUint8Array;
export type ResumeInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMint extends string | AccountMeta<string> = string, TAccountAuthority extends string | AccountMeta<string> = string, TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountMint extends string ? WritableAccount<TAccountMint> : TAccountMint,
    TAccountAuthority extends string ? ReadonlyAccount<TAccountAuthority> : TAccountAuthority,
    ...TRemainingAccounts
]>;
export type ResumeInstructionData = {
    discriminator: number;
    pausableDiscriminator: number;
};
export type ResumeInstructionDataArgs = {};
export declare function getResumeInstructionDataEncoder(): FixedSizeEncoder<ResumeInstructionDataArgs>;
export declare function getResumeInstructionDataDecoder(): FixedSizeDecoder<ResumeInstructionData>;
export declare function getResumeInstructionDataCodec(): FixedSizeCodec<ResumeInstructionDataArgs, ResumeInstructionData>;
export type ResumeInput<TAccountMint extends string = string, TAccountAuthority extends string = string> = {
    /** The mint. */
    mint: Address<TAccountMint>;
    /** The pausable authority that can resume the mint. */
    authority: Address<TAccountAuthority> | TransactionSigner<TAccountAuthority>;
};
export declare function getResumeInstruction<TAccountMint extends string, TAccountAuthority extends string, TProgramAddress extends Address = typeof TOKEN_2022_PROGRAM_ADDRESS>(input: ResumeInput<TAccountMint, TAccountAuthority>, config?: {
    programAddress?: TProgramAddress;
}): ResumeInstruction<TProgramAddress, TAccountMint, (typeof input)['authority'] extends TransactionSigner<TAccountAuthority> ? ReadonlySignerAccount<TAccountAuthority> & AccountSignerMeta<TAccountAuthority> : TAccountAuthority>;
export type ParsedResumeInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** The mint. */
        mint: TAccountMetas[0];
        /** The pausable authority that can resume the mint. */
        authority: TAccountMetas[1];
    };
    data: ResumeInstructionData;
};
export declare function parseResumeInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedResumeInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=resume.d.ts.map