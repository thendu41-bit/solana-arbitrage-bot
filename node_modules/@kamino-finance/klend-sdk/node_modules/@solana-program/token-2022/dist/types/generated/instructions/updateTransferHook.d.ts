/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type AccountSignerMeta, type Address, type FixedSizeCodec, type FixedSizeDecoder, type FixedSizeEncoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type Option, type OptionOrNullable, type ReadonlyAccount, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { TOKEN_2022_PROGRAM_ADDRESS } from '../programs';
export declare const UPDATE_TRANSFER_HOOK_DISCRIMINATOR = 36;
export declare function getUpdateTransferHookDiscriminatorBytes(): ReadonlyUint8Array;
export declare const UPDATE_TRANSFER_HOOK_TRANSFER_HOOK_DISCRIMINATOR = 1;
export declare function getUpdateTransferHookTransferHookDiscriminatorBytes(): ReadonlyUint8Array;
export type UpdateTransferHookInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMint extends string | AccountMeta<string> = string, TAccountAuthority extends string | AccountMeta<string> = string, TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountMint extends string ? WritableAccount<TAccountMint> : TAccountMint,
    TAccountAuthority extends string ? ReadonlyAccount<TAccountAuthority> : TAccountAuthority,
    ...TRemainingAccounts
]>;
export type UpdateTransferHookInstructionData = {
    discriminator: number;
    transferHookDiscriminator: number;
    /** The program id that performs logic during transfers */
    programId: Option<Address>;
};
export type UpdateTransferHookInstructionDataArgs = {
    /** The program id that performs logic during transfers */
    programId: OptionOrNullable<Address>;
};
export declare function getUpdateTransferHookInstructionDataEncoder(): FixedSizeEncoder<UpdateTransferHookInstructionDataArgs>;
export declare function getUpdateTransferHookInstructionDataDecoder(): FixedSizeDecoder<UpdateTransferHookInstructionData>;
export declare function getUpdateTransferHookInstructionDataCodec(): FixedSizeCodec<UpdateTransferHookInstructionDataArgs, UpdateTransferHookInstructionData>;
export type UpdateTransferHookInput<TAccountMint extends string = string, TAccountAuthority extends string = string> = {
    /** The mint. */
    mint: Address<TAccountMint>;
    /** The transfer hook authority. */
    authority: Address<TAccountAuthority> | TransactionSigner<TAccountAuthority>;
    programId: UpdateTransferHookInstructionDataArgs['programId'];
    multiSigners?: Array<TransactionSigner>;
};
export declare function getUpdateTransferHookInstruction<TAccountMint extends string, TAccountAuthority extends string, TProgramAddress extends Address = typeof TOKEN_2022_PROGRAM_ADDRESS>(input: UpdateTransferHookInput<TAccountMint, TAccountAuthority>, config?: {
    programAddress?: TProgramAddress;
}): UpdateTransferHookInstruction<TProgramAddress, TAccountMint, (typeof input)['authority'] extends TransactionSigner<TAccountAuthority> ? ReadonlySignerAccount<TAccountAuthority> & AccountSignerMeta<TAccountAuthority> : TAccountAuthority>;
export type ParsedUpdateTransferHookInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** The mint. */
        mint: TAccountMetas[0];
        /** The transfer hook authority. */
        authority: TAccountMetas[1];
    };
    data: UpdateTransferHookInstructionData;
};
export declare function parseUpdateTransferHookInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedUpdateTransferHookInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=updateTransferHook.d.ts.map