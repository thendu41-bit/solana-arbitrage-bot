/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type AccountSignerMeta, type Address, type FixedSizeCodec, type FixedSizeDecoder, type FixedSizeEncoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type ReadonlyAccount, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { TOKEN_2022_PROGRAM_ADDRESS } from '../programs';
export declare const DISABLE_MEMO_TRANSFERS_DISCRIMINATOR = 30;
export declare function getDisableMemoTransfersDiscriminatorBytes(): ReadonlyUint8Array;
export declare const DISABLE_MEMO_TRANSFERS_MEMO_TRANSFERS_DISCRIMINATOR = 1;
export declare function getDisableMemoTransfersMemoTransfersDiscriminatorBytes(): ReadonlyUint8Array;
export type DisableMemoTransfersInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountToken extends string | AccountMeta<string> = string, TAccountOwner extends string | AccountMeta<string> = string, TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountToken extends string ? WritableAccount<TAccountToken> : TAccountToken,
    TAccountOwner extends string ? ReadonlyAccount<TAccountOwner> : TAccountOwner,
    ...TRemainingAccounts
]>;
export type DisableMemoTransfersInstructionData = {
    discriminator: number;
    memoTransfersDiscriminator: number;
};
export type DisableMemoTransfersInstructionDataArgs = {};
export declare function getDisableMemoTransfersInstructionDataEncoder(): FixedSizeEncoder<DisableMemoTransfersInstructionDataArgs>;
export declare function getDisableMemoTransfersInstructionDataDecoder(): FixedSizeDecoder<DisableMemoTransfersInstructionData>;
export declare function getDisableMemoTransfersInstructionDataCodec(): FixedSizeCodec<DisableMemoTransfersInstructionDataArgs, DisableMemoTransfersInstructionData>;
export type DisableMemoTransfersInput<TAccountToken extends string = string, TAccountOwner extends string = string> = {
    /** The token account to update. */
    token: Address<TAccountToken>;
    /** The account's owner or its multisignature account. */
    owner: Address<TAccountOwner> | TransactionSigner<TAccountOwner>;
    multiSigners?: Array<TransactionSigner>;
};
export declare function getDisableMemoTransfersInstruction<TAccountToken extends string, TAccountOwner extends string, TProgramAddress extends Address = typeof TOKEN_2022_PROGRAM_ADDRESS>(input: DisableMemoTransfersInput<TAccountToken, TAccountOwner>, config?: {
    programAddress?: TProgramAddress;
}): DisableMemoTransfersInstruction<TProgramAddress, TAccountToken, (typeof input)['owner'] extends TransactionSigner<TAccountOwner> ? ReadonlySignerAccount<TAccountOwner> & AccountSignerMeta<TAccountOwner> : TAccountOwner>;
export type ParsedDisableMemoTransfersInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** The token account to update. */
        token: TAccountMetas[0];
        /** The account's owner or its multisignature account. */
        owner: TAccountMetas[1];
    };
    data: DisableMemoTransfersInstructionData;
};
export declare function parseDisableMemoTransfersInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedDisableMemoTransfersInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=disableMemoTransfers.d.ts.map