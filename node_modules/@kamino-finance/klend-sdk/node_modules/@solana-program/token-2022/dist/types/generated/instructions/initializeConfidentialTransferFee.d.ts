/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type Address, type FixedSizeCodec, type FixedSizeDecoder, type FixedSizeEncoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type Option, type OptionOrNullable, type ReadonlyUint8Array, type WritableAccount } from '@solana/kit';
import { TOKEN_2022_PROGRAM_ADDRESS } from '../programs';
export declare const INITIALIZE_CONFIDENTIAL_TRANSFER_FEE_DISCRIMINATOR = 37;
export declare function getInitializeConfidentialTransferFeeDiscriminatorBytes(): ReadonlyUint8Array;
export declare const INITIALIZE_CONFIDENTIAL_TRANSFER_FEE_CONFIDENTIAL_TRANSFER_FEE_DISCRIMINATOR = 0;
export declare function getInitializeConfidentialTransferFeeConfidentialTransferFeeDiscriminatorBytes(): ReadonlyUint8Array;
export type InitializeConfidentialTransferFeeInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMint extends string | AccountMeta<string> = string, TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountMint extends string ? WritableAccount<TAccountMint> : TAccountMint,
    ...TRemainingAccounts
]>;
export type InitializeConfidentialTransferFeeInstructionData = {
    discriminator: number;
    confidentialTransferFeeDiscriminator: number;
    /** Optional authority to set the withdraw withheld authority ElGamal key */
    authority: Option<Address>;
    /** Withheld fees from accounts must be encrypted with this ElGamal key */
    withdrawWithheldAuthorityElGamalPubkey: Option<Address>;
};
export type InitializeConfidentialTransferFeeInstructionDataArgs = {
    /** Optional authority to set the withdraw withheld authority ElGamal key */
    authority: OptionOrNullable<Address>;
    /** Withheld fees from accounts must be encrypted with this ElGamal key */
    withdrawWithheldAuthorityElGamalPubkey: OptionOrNullable<Address>;
};
export declare function getInitializeConfidentialTransferFeeInstructionDataEncoder(): FixedSizeEncoder<InitializeConfidentialTransferFeeInstructionDataArgs>;
export declare function getInitializeConfidentialTransferFeeInstructionDataDecoder(): FixedSizeDecoder<InitializeConfidentialTransferFeeInstructionData>;
export declare function getInitializeConfidentialTransferFeeInstructionDataCodec(): FixedSizeCodec<InitializeConfidentialTransferFeeInstructionDataArgs, InitializeConfidentialTransferFeeInstructionData>;
export type InitializeConfidentialTransferFeeInput<TAccountMint extends string = string> = {
    /** The SPL Token mint. */
    mint: Address<TAccountMint>;
    authority: InitializeConfidentialTransferFeeInstructionDataArgs['authority'];
    withdrawWithheldAuthorityElGamalPubkey: InitializeConfidentialTransferFeeInstructionDataArgs['withdrawWithheldAuthorityElGamalPubkey'];
};
export declare function getInitializeConfidentialTransferFeeInstruction<TAccountMint extends string, TProgramAddress extends Address = typeof TOKEN_2022_PROGRAM_ADDRESS>(input: InitializeConfidentialTransferFeeInput<TAccountMint>, config?: {
    programAddress?: TProgramAddress;
}): InitializeConfidentialTransferFeeInstruction<TProgramAddress, TAccountMint>;
export type ParsedInitializeConfidentialTransferFeeInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** The SPL Token mint. */
        mint: TAccountMetas[0];
    };
    data: InitializeConfidentialTransferFeeInstructionData;
};
export declare function parseInitializeConfidentialTransferFeeInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedInitializeConfidentialTransferFeeInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=initializeConfidentialTransferFee.d.ts.map