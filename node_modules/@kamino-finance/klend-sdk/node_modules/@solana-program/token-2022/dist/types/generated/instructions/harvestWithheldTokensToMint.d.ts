/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type Address, type FixedSizeCodec, type FixedSizeDecoder, type FixedSizeEncoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type ReadonlyUint8Array, type WritableAccount } from '@solana/kit';
import { TOKEN_2022_PROGRAM_ADDRESS } from '../programs';
export declare const HARVEST_WITHHELD_TOKENS_TO_MINT_DISCRIMINATOR = 26;
export declare function getHarvestWithheldTokensToMintDiscriminatorBytes(): ReadonlyUint8Array;
export declare const HARVEST_WITHHELD_TOKENS_TO_MINT_TRANSFER_FEE_DISCRIMINATOR = 4;
export declare function getHarvestWithheldTokensToMintTransferFeeDiscriminatorBytes(): ReadonlyUint8Array;
export type HarvestWithheldTokensToMintInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMint extends string | AccountMeta<string> = string, TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountMint extends string ? WritableAccount<TAccountMint> : TAccountMint,
    ...TRemainingAccounts
]>;
export type HarvestWithheldTokensToMintInstructionData = {
    discriminator: number;
    transferFeeDiscriminator: number;
};
export type HarvestWithheldTokensToMintInstructionDataArgs = {};
export declare function getHarvestWithheldTokensToMintInstructionDataEncoder(): FixedSizeEncoder<HarvestWithheldTokensToMintInstructionDataArgs>;
export declare function getHarvestWithheldTokensToMintInstructionDataDecoder(): FixedSizeDecoder<HarvestWithheldTokensToMintInstructionData>;
export declare function getHarvestWithheldTokensToMintInstructionDataCodec(): FixedSizeCodec<HarvestWithheldTokensToMintInstructionDataArgs, HarvestWithheldTokensToMintInstructionData>;
export type HarvestWithheldTokensToMintInput<TAccountMint extends string = string> = {
    /** The token mint. */
    mint: Address<TAccountMint>;
    sources: Array<Address>;
};
export declare function getHarvestWithheldTokensToMintInstruction<TAccountMint extends string, TProgramAddress extends Address = typeof TOKEN_2022_PROGRAM_ADDRESS>(input: HarvestWithheldTokensToMintInput<TAccountMint>, config?: {
    programAddress?: TProgramAddress;
}): HarvestWithheldTokensToMintInstruction<TProgramAddress, TAccountMint>;
export type ParsedHarvestWithheldTokensToMintInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** The token mint. */
        mint: TAccountMetas[0];
    };
    data: HarvestWithheldTokensToMintInstructionData;
};
export declare function parseHarvestWithheldTokensToMintInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedHarvestWithheldTokensToMintInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=harvestWithheldTokensToMint.d.ts.map