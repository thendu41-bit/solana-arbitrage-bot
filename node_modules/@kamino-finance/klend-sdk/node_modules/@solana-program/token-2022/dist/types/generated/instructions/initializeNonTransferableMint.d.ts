/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type Address, type FixedSizeCodec, type FixedSizeDecoder, type FixedSizeEncoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type ReadonlyUint8Array, type WritableAccount } from '@solana/kit';
import { TOKEN_2022_PROGRAM_ADDRESS } from '../programs';
export declare const INITIALIZE_NON_TRANSFERABLE_MINT_DISCRIMINATOR = 32;
export declare function getInitializeNonTransferableMintDiscriminatorBytes(): ReadonlyUint8Array;
export type InitializeNonTransferableMintInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMint extends string | AccountMeta<string> = string, TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountMint extends string ? WritableAccount<TAccountMint> : TAccountMint,
    ...TRemainingAccounts
]>;
export type InitializeNonTransferableMintInstructionData = {
    discriminator: number;
};
export type InitializeNonTransferableMintInstructionDataArgs = {};
export declare function getInitializeNonTransferableMintInstructionDataEncoder(): FixedSizeEncoder<InitializeNonTransferableMintInstructionDataArgs>;
export declare function getInitializeNonTransferableMintInstructionDataDecoder(): FixedSizeDecoder<InitializeNonTransferableMintInstructionData>;
export declare function getInitializeNonTransferableMintInstructionDataCodec(): FixedSizeCodec<InitializeNonTransferableMintInstructionDataArgs, InitializeNonTransferableMintInstructionData>;
export type InitializeNonTransferableMintInput<TAccountMint extends string = string> = {
    /** The mint account to initialize. */
    mint: Address<TAccountMint>;
};
export declare function getInitializeNonTransferableMintInstruction<TAccountMint extends string, TProgramAddress extends Address = typeof TOKEN_2022_PROGRAM_ADDRESS>(input: InitializeNonTransferableMintInput<TAccountMint>, config?: {
    programAddress?: TProgramAddress;
}): InitializeNonTransferableMintInstruction<TProgramAddress, TAccountMint>;
export type ParsedInitializeNonTransferableMintInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** The mint account to initialize. */
        mint: TAccountMetas[0];
    };
    data: InitializeNonTransferableMintInstructionData;
};
export declare function parseInitializeNonTransferableMintInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedInitializeNonTransferableMintInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=initializeNonTransferableMint.d.ts.map