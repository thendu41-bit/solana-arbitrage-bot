/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type Address, type FixedSizeCodec, type FixedSizeDecoder, type FixedSizeEncoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type Option, type OptionOrNullable, type ReadonlyUint8Array, type WritableAccount } from '@solana/kit';
import { TOKEN_2022_PROGRAM_ADDRESS } from '../programs';
export declare const INITIALIZE_GROUP_POINTER_DISCRIMINATOR = 40;
export declare function getInitializeGroupPointerDiscriminatorBytes(): ReadonlyUint8Array;
export declare const INITIALIZE_GROUP_POINTER_GROUP_POINTER_DISCRIMINATOR = 0;
export declare function getInitializeGroupPointerGroupPointerDiscriminatorBytes(): ReadonlyUint8Array;
export type InitializeGroupPointerInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMint extends string | AccountMeta<string> = string, TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountMint extends string ? WritableAccount<TAccountMint> : TAccountMint,
    ...TRemainingAccounts
]>;
export type InitializeGroupPointerInstructionData = {
    discriminator: number;
    groupPointerDiscriminator: number;
    /** The public key for the account that can update the group address. */
    authority: Option<Address>;
    /** The account address that holds the group. */
    groupAddress: Option<Address>;
};
export type InitializeGroupPointerInstructionDataArgs = {
    /** The public key for the account that can update the group address. */
    authority: OptionOrNullable<Address>;
    /** The account address that holds the group. */
    groupAddress: OptionOrNullable<Address>;
};
export declare function getInitializeGroupPointerInstructionDataEncoder(): FixedSizeEncoder<InitializeGroupPointerInstructionDataArgs>;
export declare function getInitializeGroupPointerInstructionDataDecoder(): FixedSizeDecoder<InitializeGroupPointerInstructionData>;
export declare function getInitializeGroupPointerInstructionDataCodec(): FixedSizeCodec<InitializeGroupPointerInstructionDataArgs, InitializeGroupPointerInstructionData>;
export type InitializeGroupPointerInput<TAccountMint extends string = string> = {
    /** The mint to initialize. */
    mint: Address<TAccountMint>;
    authority: InitializeGroupPointerInstructionDataArgs['authority'];
    groupAddress: InitializeGroupPointerInstructionDataArgs['groupAddress'];
};
export declare function getInitializeGroupPointerInstruction<TAccountMint extends string, TProgramAddress extends Address = typeof TOKEN_2022_PROGRAM_ADDRESS>(input: InitializeGroupPointerInput<TAccountMint>, config?: {
    programAddress?: TProgramAddress;
}): InitializeGroupPointerInstruction<TProgramAddress, TAccountMint>;
export type ParsedInitializeGroupPointerInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** The mint to initialize. */
        mint: TAccountMetas[0];
    };
    data: InitializeGroupPointerInstructionData;
};
export declare function parseInitializeGroupPointerInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedInitializeGroupPointerInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=initializeGroupPointer.d.ts.map