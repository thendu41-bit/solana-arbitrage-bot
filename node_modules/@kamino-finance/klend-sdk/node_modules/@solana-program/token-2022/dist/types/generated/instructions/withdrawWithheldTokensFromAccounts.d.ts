/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type AccountSignerMeta, type Address, type FixedSizeCodec, type FixedSizeDecoder, type FixedSizeEncoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type ReadonlyAccount, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { TOKEN_2022_PROGRAM_ADDRESS } from '../programs';
export declare const WITHDRAW_WITHHELD_TOKENS_FROM_ACCOUNTS_DISCRIMINATOR = 26;
export declare function getWithdrawWithheldTokensFromAccountsDiscriminatorBytes(): ReadonlyUint8Array;
export declare const WITHDRAW_WITHHELD_TOKENS_FROM_ACCOUNTS_TRANSFER_FEE_DISCRIMINATOR = 3;
export declare function getWithdrawWithheldTokensFromAccountsTransferFeeDiscriminatorBytes(): ReadonlyUint8Array;
export type WithdrawWithheldTokensFromAccountsInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMint extends string | AccountMeta<string> = string, TAccountFeeReceiver extends string | AccountMeta<string> = string, TAccountWithdrawWithheldAuthority extends string | AccountMeta<string> = string, TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountMint extends string ? ReadonlyAccount<TAccountMint> : TAccountMint,
    TAccountFeeReceiver extends string ? WritableAccount<TAccountFeeReceiver> : TAccountFeeReceiver,
    TAccountWithdrawWithheldAuthority extends string ? ReadonlyAccount<TAccountWithdrawWithheldAuthority> : TAccountWithdrawWithheldAuthority,
    ...TRemainingAccounts
]>;
export type WithdrawWithheldTokensFromAccountsInstructionData = {
    discriminator: number;
    transferFeeDiscriminator: number;
    /** Number of token accounts harvested. */
    numTokenAccounts: number;
};
export type WithdrawWithheldTokensFromAccountsInstructionDataArgs = {
    /** Number of token accounts harvested. */
    numTokenAccounts: number;
};
export declare function getWithdrawWithheldTokensFromAccountsInstructionDataEncoder(): FixedSizeEncoder<WithdrawWithheldTokensFromAccountsInstructionDataArgs>;
export declare function getWithdrawWithheldTokensFromAccountsInstructionDataDecoder(): FixedSizeDecoder<WithdrawWithheldTokensFromAccountsInstructionData>;
export declare function getWithdrawWithheldTokensFromAccountsInstructionDataCodec(): FixedSizeCodec<WithdrawWithheldTokensFromAccountsInstructionDataArgs, WithdrawWithheldTokensFromAccountsInstructionData>;
export type WithdrawWithheldTokensFromAccountsInput<TAccountMint extends string = string, TAccountFeeReceiver extends string = string, TAccountWithdrawWithheldAuthority extends string = string> = {
    /** The token mint. Must include the `TransferFeeConfig` extension. */
    mint: Address<TAccountMint>;
    /**
     * The fee receiver account. Must include the `TransferFeeAmount`
     * extension associated with the provided mint.
     */
    feeReceiver: Address<TAccountFeeReceiver>;
    /** The mint's `withdraw_withheld_authority` or its multisignature account. */
    withdrawWithheldAuthority: Address<TAccountWithdrawWithheldAuthority> | TransactionSigner<TAccountWithdrawWithheldAuthority>;
    numTokenAccounts: WithdrawWithheldTokensFromAccountsInstructionDataArgs['numTokenAccounts'];
    multiSigners?: Array<TransactionSigner>;
    sources: Array<Address>;
};
export declare function getWithdrawWithheldTokensFromAccountsInstruction<TAccountMint extends string, TAccountFeeReceiver extends string, TAccountWithdrawWithheldAuthority extends string, TProgramAddress extends Address = typeof TOKEN_2022_PROGRAM_ADDRESS>(input: WithdrawWithheldTokensFromAccountsInput<TAccountMint, TAccountFeeReceiver, TAccountWithdrawWithheldAuthority>, config?: {
    programAddress?: TProgramAddress;
}): WithdrawWithheldTokensFromAccountsInstruction<TProgramAddress, TAccountMint, TAccountFeeReceiver, (typeof input)['withdrawWithheldAuthority'] extends TransactionSigner<TAccountWithdrawWithheldAuthority> ? ReadonlySignerAccount<TAccountWithdrawWithheldAuthority> & AccountSignerMeta<TAccountWithdrawWithheldAuthority> : TAccountWithdrawWithheldAuthority>;
export type ParsedWithdrawWithheldTokensFromAccountsInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** The token mint. Must include the `TransferFeeConfig` extension. */
        mint: TAccountMetas[0];
        /**
         * The fee receiver account. Must include the `TransferFeeAmount`
         * extension associated with the provided mint.
         */
        feeReceiver: TAccountMetas[1];
        /** The mint's `withdraw_withheld_authority` or its multisignature account. */
        withdrawWithheldAuthority: TAccountMetas[2];
    };
    data: WithdrawWithheldTokensFromAccountsInstructionData;
};
export declare function parseWithdrawWithheldTokensFromAccountsInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedWithdrawWithheldTokensFromAccountsInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=withdrawWithheldTokensFromAccounts.d.ts.map