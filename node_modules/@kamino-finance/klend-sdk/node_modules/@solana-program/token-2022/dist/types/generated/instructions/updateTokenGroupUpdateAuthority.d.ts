/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type AccountSignerMeta, type Address, type Codec, type Decoder, type Encoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type Option, type OptionOrNullable, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { TOKEN_2022_PROGRAM_ADDRESS } from '../programs';
export declare const UPDATE_TOKEN_GROUP_UPDATE_AUTHORITY_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
export declare function getUpdateTokenGroupUpdateAuthorityDiscriminatorBytes(): ReadonlyUint8Array;
export type UpdateTokenGroupUpdateAuthorityInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountGroup extends string | AccountMeta<string> = string, TAccountUpdateAuthority extends string | AccountMeta<string> = string, TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountGroup extends string ? WritableAccount<TAccountGroup> : TAccountGroup,
    TAccountUpdateAuthority extends string ? ReadonlySignerAccount<TAccountUpdateAuthority> & AccountSignerMeta<TAccountUpdateAuthority> : TAccountUpdateAuthority,
    ...TRemainingAccounts
]>;
export type UpdateTokenGroupUpdateAuthorityInstructionData = {
    discriminator: ReadonlyUint8Array;
    /** New authority for the group, or unset if `None` */
    newUpdateAuthority: Option<Address>;
};
export type UpdateTokenGroupUpdateAuthorityInstructionDataArgs = {
    /** New authority for the group, or unset if `None` */
    newUpdateAuthority: OptionOrNullable<Address>;
};
export declare function getUpdateTokenGroupUpdateAuthorityInstructionDataEncoder(): Encoder<UpdateTokenGroupUpdateAuthorityInstructionDataArgs>;
export declare function getUpdateTokenGroupUpdateAuthorityInstructionDataDecoder(): Decoder<UpdateTokenGroupUpdateAuthorityInstructionData>;
export declare function getUpdateTokenGroupUpdateAuthorityInstructionDataCodec(): Codec<UpdateTokenGroupUpdateAuthorityInstructionDataArgs, UpdateTokenGroupUpdateAuthorityInstructionData>;
export type UpdateTokenGroupUpdateAuthorityInput<TAccountGroup extends string = string, TAccountUpdateAuthority extends string = string> = {
    group: Address<TAccountGroup>;
    /** Current update authority */
    updateAuthority: TransactionSigner<TAccountUpdateAuthority>;
    newUpdateAuthority: UpdateTokenGroupUpdateAuthorityInstructionDataArgs['newUpdateAuthority'];
};
export declare function getUpdateTokenGroupUpdateAuthorityInstruction<TAccountGroup extends string, TAccountUpdateAuthority extends string, TProgramAddress extends Address = typeof TOKEN_2022_PROGRAM_ADDRESS>(input: UpdateTokenGroupUpdateAuthorityInput<TAccountGroup, TAccountUpdateAuthority>, config?: {
    programAddress?: TProgramAddress;
}): UpdateTokenGroupUpdateAuthorityInstruction<TProgramAddress, TAccountGroup, TAccountUpdateAuthority>;
export type ParsedUpdateTokenGroupUpdateAuthorityInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        group: TAccountMetas[0];
        /** Current update authority */
        updateAuthority: TAccountMetas[1];
    };
    data: UpdateTokenGroupUpdateAuthorityInstructionData;
};
export declare function parseUpdateTokenGroupUpdateAuthorityInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedUpdateTokenGroupUpdateAuthorityInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=updateTokenGroupUpdateAuthority.d.ts.map