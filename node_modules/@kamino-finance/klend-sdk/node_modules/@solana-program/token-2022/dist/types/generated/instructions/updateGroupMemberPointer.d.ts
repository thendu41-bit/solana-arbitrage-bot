/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type AccountSignerMeta, type Address, type FixedSizeCodec, type FixedSizeDecoder, type FixedSizeEncoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type Option, type OptionOrNullable, type ReadonlyAccount, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { TOKEN_2022_PROGRAM_ADDRESS } from '../programs';
export declare const UPDATE_GROUP_MEMBER_POINTER_DISCRIMINATOR = 41;
export declare function getUpdateGroupMemberPointerDiscriminatorBytes(): ReadonlyUint8Array;
export declare const UPDATE_GROUP_MEMBER_POINTER_GROUP_MEMBER_POINTER_DISCRIMINATOR = 1;
export declare function getUpdateGroupMemberPointerGroupMemberPointerDiscriminatorBytes(): ReadonlyUint8Array;
export type UpdateGroupMemberPointerInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMint extends string | AccountMeta<string> = string, TAccountGroupMemberPointerAuthority extends string | AccountMeta<string> = string, TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountMint extends string ? WritableAccount<TAccountMint> : TAccountMint,
    TAccountGroupMemberPointerAuthority extends string ? ReadonlyAccount<TAccountGroupMemberPointerAuthority> : TAccountGroupMemberPointerAuthority,
    ...TRemainingAccounts
]>;
export type UpdateGroupMemberPointerInstructionData = {
    discriminator: number;
    groupMemberPointerDiscriminator: number;
    /** The new account address that holds the member. */
    memberAddress: Option<Address>;
};
export type UpdateGroupMemberPointerInstructionDataArgs = {
    /** The new account address that holds the member. */
    memberAddress: OptionOrNullable<Address>;
};
export declare function getUpdateGroupMemberPointerInstructionDataEncoder(): FixedSizeEncoder<UpdateGroupMemberPointerInstructionDataArgs>;
export declare function getUpdateGroupMemberPointerInstructionDataDecoder(): FixedSizeDecoder<UpdateGroupMemberPointerInstructionData>;
export declare function getUpdateGroupMemberPointerInstructionDataCodec(): FixedSizeCodec<UpdateGroupMemberPointerInstructionDataArgs, UpdateGroupMemberPointerInstructionData>;
export type UpdateGroupMemberPointerInput<TAccountMint extends string = string, TAccountGroupMemberPointerAuthority extends string = string> = {
    /** The mint to initialize. */
    mint: Address<TAccountMint>;
    /** The group member pointer authority or its multisignature account. */
    groupMemberPointerAuthority: Address<TAccountGroupMemberPointerAuthority> | TransactionSigner<TAccountGroupMemberPointerAuthority>;
    memberAddress: UpdateGroupMemberPointerInstructionDataArgs['memberAddress'];
    multiSigners?: Array<TransactionSigner>;
};
export declare function getUpdateGroupMemberPointerInstruction<TAccountMint extends string, TAccountGroupMemberPointerAuthority extends string, TProgramAddress extends Address = typeof TOKEN_2022_PROGRAM_ADDRESS>(input: UpdateGroupMemberPointerInput<TAccountMint, TAccountGroupMemberPointerAuthority>, config?: {
    programAddress?: TProgramAddress;
}): UpdateGroupMemberPointerInstruction<TProgramAddress, TAccountMint, (typeof input)['groupMemberPointerAuthority'] extends TransactionSigner<TAccountGroupMemberPointerAuthority> ? ReadonlySignerAccount<TAccountGroupMemberPointerAuthority> & AccountSignerMeta<TAccountGroupMemberPointerAuthority> : TAccountGroupMemberPointerAuthority>;
export type ParsedUpdateGroupMemberPointerInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** The mint to initialize. */
        mint: TAccountMetas[0];
        /** The group member pointer authority or its multisignature account. */
        groupMemberPointerAuthority: TAccountMetas[1];
    };
    data: UpdateGroupMemberPointerInstructionData;
};
export declare function parseUpdateGroupMemberPointerInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedUpdateGroupMemberPointerInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=updateGroupMemberPointer.d.ts.map