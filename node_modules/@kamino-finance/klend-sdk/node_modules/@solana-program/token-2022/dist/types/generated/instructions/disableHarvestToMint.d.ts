/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type AccountSignerMeta, type Address, type FixedSizeCodec, type FixedSizeDecoder, type FixedSizeEncoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type ReadonlyAccount, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { TOKEN_2022_PROGRAM_ADDRESS } from '../programs';
export declare const DISABLE_HARVEST_TO_MINT_DISCRIMINATOR = 37;
export declare function getDisableHarvestToMintDiscriminatorBytes(): ReadonlyUint8Array;
export declare const DISABLE_HARVEST_TO_MINT_CONFIDENTIAL_TRANSFER_FEE_DISCRIMINATOR = 5;
export declare function getDisableHarvestToMintConfidentialTransferFeeDiscriminatorBytes(): ReadonlyUint8Array;
export type DisableHarvestToMintInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMint extends string | AccountMeta<string> = string, TAccountAuthority extends string | AccountMeta<string> = string, TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountMint extends string ? WritableAccount<TAccountMint> : TAccountMint,
    TAccountAuthority extends string ? ReadonlyAccount<TAccountAuthority> : TAccountAuthority,
    ...TRemainingAccounts
]>;
export type DisableHarvestToMintInstructionData = {
    discriminator: number;
    confidentialTransferFeeDiscriminator: number;
};
export type DisableHarvestToMintInstructionDataArgs = {};
export declare function getDisableHarvestToMintInstructionDataEncoder(): FixedSizeEncoder<DisableHarvestToMintInstructionDataArgs>;
export declare function getDisableHarvestToMintInstructionDataDecoder(): FixedSizeDecoder<DisableHarvestToMintInstructionData>;
export declare function getDisableHarvestToMintInstructionDataCodec(): FixedSizeCodec<DisableHarvestToMintInstructionDataArgs, DisableHarvestToMintInstructionData>;
export type DisableHarvestToMintInput<TAccountMint extends string = string, TAccountAuthority extends string = string> = {
    /** The token mint. */
    mint: Address<TAccountMint>;
    /** The confidential transfer fee authority */
    authority: Address<TAccountAuthority> | TransactionSigner<TAccountAuthority>;
    multiSigners?: Array<TransactionSigner>;
};
export declare function getDisableHarvestToMintInstruction<TAccountMint extends string, TAccountAuthority extends string, TProgramAddress extends Address = typeof TOKEN_2022_PROGRAM_ADDRESS>(input: DisableHarvestToMintInput<TAccountMint, TAccountAuthority>, config?: {
    programAddress?: TProgramAddress;
}): DisableHarvestToMintInstruction<TProgramAddress, TAccountMint, (typeof input)['authority'] extends TransactionSigner<TAccountAuthority> ? ReadonlySignerAccount<TAccountAuthority> & AccountSignerMeta<TAccountAuthority> : TAccountAuthority>;
export type ParsedDisableHarvestToMintInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** The token mint. */
        mint: TAccountMetas[0];
        /** The confidential transfer fee authority */
        authority: TAccountMetas[1];
    };
    data: DisableHarvestToMintInstructionData;
};
export declare function parseDisableHarvestToMintInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedDisableHarvestToMintInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=disableHarvestToMint.d.ts.map