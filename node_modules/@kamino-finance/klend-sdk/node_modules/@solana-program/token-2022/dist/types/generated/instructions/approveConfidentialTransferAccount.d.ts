/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type AccountSignerMeta, type Address, type FixedSizeCodec, type FixedSizeDecoder, type FixedSizeEncoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type ReadonlyAccount, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { TOKEN_2022_PROGRAM_ADDRESS } from '../programs';
export declare const APPROVE_CONFIDENTIAL_TRANSFER_ACCOUNT_DISCRIMINATOR = 27;
export declare function getApproveConfidentialTransferAccountDiscriminatorBytes(): ReadonlyUint8Array;
export declare const APPROVE_CONFIDENTIAL_TRANSFER_ACCOUNT_CONFIDENTIAL_TRANSFER_DISCRIMINATOR = 3;
export declare function getApproveConfidentialTransferAccountConfidentialTransferDiscriminatorBytes(): ReadonlyUint8Array;
export type ApproveConfidentialTransferAccountInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountToken extends string | AccountMeta<string> = string, TAccountMint extends string | AccountMeta<string> = string, TAccountAuthority extends string | AccountMeta<string> = string, TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountToken extends string ? WritableAccount<TAccountToken> : TAccountToken,
    TAccountMint extends string ? ReadonlyAccount<TAccountMint> : TAccountMint,
    TAccountAuthority extends string ? ReadonlySignerAccount<TAccountAuthority> & AccountSignerMeta<TAccountAuthority> : TAccountAuthority,
    ...TRemainingAccounts
]>;
export type ApproveConfidentialTransferAccountInstructionData = {
    discriminator: number;
    confidentialTransferDiscriminator: number;
};
export type ApproveConfidentialTransferAccountInstructionDataArgs = {};
export declare function getApproveConfidentialTransferAccountInstructionDataEncoder(): FixedSizeEncoder<ApproveConfidentialTransferAccountInstructionDataArgs>;
export declare function getApproveConfidentialTransferAccountInstructionDataDecoder(): FixedSizeDecoder<ApproveConfidentialTransferAccountInstructionData>;
export declare function getApproveConfidentialTransferAccountInstructionDataCodec(): FixedSizeCodec<ApproveConfidentialTransferAccountInstructionDataArgs, ApproveConfidentialTransferAccountInstructionData>;
export type ApproveConfidentialTransferAccountInput<TAccountToken extends string = string, TAccountMint extends string = string, TAccountAuthority extends string = string> = {
    /** The SPL Token account to approve. */
    token: Address<TAccountToken>;
    /** The corresponding SPL Token mint. */
    mint: Address<TAccountMint>;
    /** Confidential transfer mint authority. */
    authority: TransactionSigner<TAccountAuthority>;
};
export declare function getApproveConfidentialTransferAccountInstruction<TAccountToken extends string, TAccountMint extends string, TAccountAuthority extends string, TProgramAddress extends Address = typeof TOKEN_2022_PROGRAM_ADDRESS>(input: ApproveConfidentialTransferAccountInput<TAccountToken, TAccountMint, TAccountAuthority>, config?: {
    programAddress?: TProgramAddress;
}): ApproveConfidentialTransferAccountInstruction<TProgramAddress, TAccountToken, TAccountMint, TAccountAuthority>;
export type ParsedApproveConfidentialTransferAccountInstruction<TProgram extends string = typeof TOKEN_2022_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** The SPL Token account to approve. */
        token: TAccountMetas[0];
        /** The corresponding SPL Token mint. */
        mint: TAccountMetas[1];
        /** Confidential transfer mint authority. */
        authority: TAccountMetas[2];
    };
    data: ApproveConfidentialTransferAccountInstructionData;
};
export declare function parseApproveConfidentialTransferAccountInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedApproveConfidentialTransferAccountInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=approveConfidentialTransferAccount.d.ts.map