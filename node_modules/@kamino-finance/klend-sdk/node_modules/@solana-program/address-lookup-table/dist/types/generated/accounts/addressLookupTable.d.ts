/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { fetchEncodedAccount, fetchEncodedAccounts, type Account, type Address, type Codec, type Decoder, type EncodedAccount, type Encoder, type FetchAccountConfig, type FetchAccountsConfig, type MaybeAccount, type MaybeEncodedAccount, type Option, type OptionOrNullable } from '@solana/kit';
import { AddressLookupTableSeeds } from '../pdas';
export declare const ADDRESS_LOOKUP_TABLE_DISCRIMINATOR = 1;
export declare function getAddressLookupTableDiscriminatorBytes(): import("@solana/kit").ReadonlyUint8Array;
export type AddressLookupTable = {
    discriminator: number;
    deactivationSlot: bigint;
    lastExtendedSlot: bigint;
    lastExtendedSlotStartIndex: number;
    authority: Option<Address>;
    padding: number;
    addresses: Array<Address>;
};
export type AddressLookupTableArgs = {
    deactivationSlot: number | bigint;
    lastExtendedSlot: number | bigint;
    lastExtendedSlotStartIndex: number;
    authority: OptionOrNullable<Address>;
    addresses: Array<Address>;
};
export declare function getAddressLookupTableEncoder(): Encoder<AddressLookupTableArgs>;
export declare function getAddressLookupTableDecoder(): Decoder<AddressLookupTable>;
export declare function getAddressLookupTableCodec(): Codec<AddressLookupTableArgs, AddressLookupTable>;
export declare function decodeAddressLookupTable<TAddress extends string = string>(encodedAccount: EncodedAccount<TAddress>): Account<AddressLookupTable, TAddress>;
export declare function decodeAddressLookupTable<TAddress extends string = string>(encodedAccount: MaybeEncodedAccount<TAddress>): MaybeAccount<AddressLookupTable, TAddress>;
export declare function fetchAddressLookupTable<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<Account<AddressLookupTable, TAddress>>;
export declare function fetchMaybeAddressLookupTable<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<MaybeAccount<AddressLookupTable, TAddress>>;
export declare function fetchAllAddressLookupTable(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<Account<AddressLookupTable>[]>;
export declare function fetchAllMaybeAddressLookupTable(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<MaybeAccount<AddressLookupTable>[]>;
export declare function fetchAddressLookupTableFromSeeds(rpc: Parameters<typeof fetchEncodedAccount>[0], seeds: AddressLookupTableSeeds, config?: FetchAccountConfig & {
    programAddress?: Address;
}): Promise<Account<AddressLookupTable>>;
export declare function fetchMaybeAddressLookupTableFromSeeds(rpc: Parameters<typeof fetchEncodedAccount>[0], seeds: AddressLookupTableSeeds, config?: FetchAccountConfig & {
    programAddress?: Address;
}): Promise<MaybeAccount<AddressLookupTable>>;
//# sourceMappingURL=addressLookupTable.d.ts.map