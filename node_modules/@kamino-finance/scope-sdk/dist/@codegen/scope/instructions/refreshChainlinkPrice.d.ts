import { Address, IAccountMeta, IInstruction, TransactionSigner } from "@solana/kit";
export interface RefreshChainlinkPriceArgs {
    token: number;
    serializedChainlinkReport: Uint8Array;
}
export interface RefreshChainlinkPriceAccounts {
    /** The account that signs the transaction. */
    user: TransactionSigner;
    oraclePrices: Address;
    oracleMappings: Address;
    oracleTwaps: Address;
    /**
     * The Verifier Account stores the DON's public keys and other verification parameters.
     * This account must match the PDA derived from the verifier program.
     */
    verifierAccount: Address;
    /** The Access Controller Account */
    accessController: Address;
    /** The Config Account is a PDA derived from a signed report */
    configAccount: Address;
    /** The Verifier Program ID specifies the target Chainlink Data Streams Verifier Program. */
    verifierProgramId: Address;
}
export declare const layout: import("buffer-layout").Layout<unknown>;
export declare function refreshChainlinkPrice(args: RefreshChainlinkPriceArgs, accounts: RefreshChainlinkPriceAccounts, programAddress?: Address): IInstruction<string, readonly (IAccountMeta<string> | import("@solana/kit").IAccountLookupMeta<string, string>)[]>;
//# sourceMappingURL=refreshChainlinkPrice.d.ts.map