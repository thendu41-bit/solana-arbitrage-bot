import BN from "bn.js";
import * as types from "../types";
export interface DatedPriceFields {
    price: types.PriceFields;
    lastUpdatedSlot: BN;
    unixTimestamp: BN;
    genericData: Array<number>;
}
export interface DatedPriceJSON {
    price: types.PriceJSON;
    lastUpdatedSlot: string;
    unixTimestamp: string;
    genericData: Array<number>;
}
export declare class DatedPrice {
    readonly price: types.Price;
    readonly lastUpdatedSlot: BN;
    readonly unixTimestamp: BN;
    readonly genericData: Array<number>;
    constructor(fields: DatedPriceFields);
    static layout(property?: string): import("buffer-layout").Layout<unknown>;
    static fromDecoded(obj: any): types.DatedPrice;
    static toEncodable(fields: DatedPriceFields): {
        price: {
            value: BN;
            exp: BN;
        };
        lastUpdatedSlot: BN;
        unixTimestamp: BN;
        genericData: number[];
    };
    toJSON(): DatedPriceJSON;
    static fromJSON(obj: DatedPriceJSON): DatedPrice;
    toEncodable(): {
        price: {
            value: BN;
            exp: BN;
        };
        lastUpdatedSlot: BN;
        unixTimestamp: BN;
        genericData: number[];
    };
}
//# sourceMappingURL=DatedPrice.d.ts.map