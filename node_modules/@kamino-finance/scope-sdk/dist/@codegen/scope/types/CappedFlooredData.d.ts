import * as types from "../types";
export interface CappedFlooredDataFields {
    sourceEntry: number;
    capEntry: number | null;
    floorEntry: number | null;
}
export interface CappedFlooredDataJSON {
    sourceEntry: number;
    capEntry: number | null;
    floorEntry: number | null;
}
export declare class CappedFlooredData {
    readonly sourceEntry: number;
    readonly capEntry: number | null;
    readonly floorEntry: number | null;
    constructor(fields: CappedFlooredDataFields);
    static layout(property?: string): import("buffer-layout").Layout<unknown>;
    static fromDecoded(obj: any): types.CappedFlooredData;
    static toEncodable(fields: CappedFlooredDataFields): {
        sourceEntry: number;
        capEntry: number | null;
        floorEntry: number | null;
    };
    toJSON(): CappedFlooredDataJSON;
    static fromJSON(obj: CappedFlooredDataJSON): CappedFlooredData;
    toEncodable(): {
        sourceEntry: number;
        capEntry: number | null;
        floorEntry: number | null;
    };
}
//# sourceMappingURL=CappedFlooredData.d.ts.map