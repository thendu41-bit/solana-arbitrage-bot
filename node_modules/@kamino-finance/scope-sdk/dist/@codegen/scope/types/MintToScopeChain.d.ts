import { Address } from "@solana/kit";
import * as types from "../types";
export interface MintToScopeChainFields {
    mint: Address;
    scopeChain: Array<number>;
}
export interface MintToScopeChainJSON {
    mint: string;
    scopeChain: Array<number>;
}
export declare class MintToScopeChain {
    readonly mint: Address;
    readonly scopeChain: Array<number>;
    constructor(fields: MintToScopeChainFields);
    static layout(property?: string): import("buffer-layout").Layout<unknown>;
    static fromDecoded(obj: any): types.MintToScopeChain;
    static toEncodable(fields: MintToScopeChainFields): {
        mint: Address;
        scopeChain: number[];
    };
    toJSON(): MintToScopeChainJSON;
    static fromJSON(obj: MintToScopeChainJSON): MintToScopeChain;
    toEncodable(): {
        mint: Address;
        scopeChain: number[];
    };
}
//# sourceMappingURL=MintToScopeChain.d.ts.map