import { Address } from "@solana/kit";
import BN from "bn.js";
import * as types from "../types";
export interface ValidatorSystemFields {
    validatorList: types.ListFields;
    managerAuthority: Address;
    totalValidatorScore: number;
    /** sum of all active lamports staked */
    totalActiveBalance: BN;
    /** allow & auto-add validator when a user deposits a stake-account of a non-listed validator */
    autoAddValidatorEnabled: number;
}
export interface ValidatorSystemJSON {
    validatorList: types.ListJSON;
    managerAuthority: string;
    totalValidatorScore: number;
    /** sum of all active lamports staked */
    totalActiveBalance: string;
    /** allow & auto-add validator when a user deposits a stake-account of a non-listed validator */
    autoAddValidatorEnabled: number;
}
export declare class ValidatorSystem {
    readonly validatorList: types.List;
    readonly managerAuthority: Address;
    readonly totalValidatorScore: number;
    /** sum of all active lamports staked */
    readonly totalActiveBalance: BN;
    /** allow & auto-add validator when a user deposits a stake-account of a non-listed validator */
    readonly autoAddValidatorEnabled: number;
    constructor(fields: ValidatorSystemFields);
    static layout(property?: string): import("buffer-layout").Layout<unknown>;
    static fromDecoded(obj: any): types.ValidatorSystem;
    static toEncodable(fields: ValidatorSystemFields): {
        validatorList: {
            account: Address;
            itemSize: number;
            count: number;
            newAccount: Address;
            copiedCount: number;
        };
        managerAuthority: Address;
        totalValidatorScore: number;
        totalActiveBalance: BN;
        autoAddValidatorEnabled: number;
    };
    toJSON(): ValidatorSystemJSON;
    static fromJSON(obj: ValidatorSystemJSON): ValidatorSystem;
    toEncodable(): {
        validatorList: {
            account: Address;
            itemSize: number;
            count: number;
            newAccount: Address;
            copiedCount: number;
        };
        managerAuthority: Address;
        totalValidatorScore: number;
        totalActiveBalance: BN;
        autoAddValidatorEnabled: number;
    };
}
//# sourceMappingURL=ValidatorSystem.d.ts.map