import BN from "bn.js";
import * as types from "../types";
export interface TokenMetadataFields {
    name: Array<number>;
    maxAgePriceSlots: BN;
    groupIdsBitset: BN;
    reserved: Array<BN>;
}
export interface TokenMetadataJSON {
    name: Array<number>;
    maxAgePriceSlots: string;
    groupIdsBitset: string;
    reserved: Array<string>;
}
export declare class TokenMetadata {
    readonly name: Array<number>;
    readonly maxAgePriceSlots: BN;
    readonly groupIdsBitset: BN;
    readonly reserved: Array<BN>;
    constructor(fields: TokenMetadataFields);
    static layout(property?: string): import("buffer-layout").Layout<unknown>;
    static fromDecoded(obj: any): types.TokenMetadata;
    static toEncodable(fields: TokenMetadataFields): {
        name: number[];
        maxAgePriceSlots: BN;
        groupIdsBitset: BN;
        reserved: BN[];
    };
    toJSON(): TokenMetadataJSON;
    static fromJSON(obj: TokenMetadataJSON): TokenMetadata;
    toEncodable(): {
        name: number[];
        maxAgePriceSlots: BN;
        groupIdsBitset: BN;
        reserved: BN[];
    };
}
//# sourceMappingURL=TokenMetadata.d.ts.map