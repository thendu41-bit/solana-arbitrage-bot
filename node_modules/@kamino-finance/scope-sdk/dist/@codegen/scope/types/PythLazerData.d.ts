import * as types from "../types";
export interface PythLazerDataFields {
    feedId: number;
    exponent: number;
    confidenceFactor: number;
}
export interface PythLazerDataJSON {
    feedId: number;
    exponent: number;
    confidenceFactor: number;
}
export declare class PythLazerData {
    readonly feedId: number;
    readonly exponent: number;
    readonly confidenceFactor: number;
    constructor(fields: PythLazerDataFields);
    static layout(property?: string): import("buffer-layout").Layout<unknown>;
    static fromDecoded(obj: any): types.PythLazerData;
    static toEncodable(fields: PythLazerDataFields): {
        feedId: number;
        exponent: number;
        confidenceFactor: number;
    };
    toJSON(): PythLazerDataJSON;
    static fromJSON(obj: PythLazerDataJSON): PythLazerData;
    toEncodable(): {
        feedId: number;
        exponent: number;
        confidenceFactor: number;
    };
}
//# sourceMappingURL=PythLazerData.d.ts.map