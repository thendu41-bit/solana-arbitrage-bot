export type CustomError = IntegerOverflow | ConversionFailure | MathOverflow | OutOfRangeIntegralConversion | UnexpectedAccount | PriceNotValid | AccountsAndTokenMismatch | BadTokenNb | BadTokenType | SwitchboardV2Error | InvalidAccountDiscriminator | UnableToDeserializeAccount | BadScopeChainOrPrices | RefreshInCPI | RefreshWithUnexpectedIxs | InvalidTokenUpdateMode | UnableToDerivePDA | BadTimestamp | BadSlot | PriceAccountNotExpected | TwapSourceIndexOutOfRange | TwapSampleTooFrequent | UnexpectedJlpConfiguration | TwapNotEnoughSamplesInPeriod | EmptyTokenList | StakeFeeTooHigh | KTokenUnderlyingPriceNotValid | KTokenHoldingsCalculationError | CannotResizeAccount | FixedPriceInvalid | SwitchboardOnDemandError | ConfidenceIntervalCheckFailed | InvalidGenericData | NoChainlinkReportData | InvalidChainlinkReportData | MostRecentOfInvalidSourceIndices | MostRecentOfInvalidMaxDivergence | MostRecentOfInvalidMaxAge | MostRecentOfMaxAgeViolated | MostRecentOfMaxDivergenceBpsViolated | PythLazerVerifyIxFailed | PythLazerInvalidFeedID | PythLazerInvalidExponent | PythLazerInvalidConfidenceFactor | PythLazerInvalidMessagePayload | PythLazerInvalidChannel | PythLazerInvalidFeedsLength | PythLazerInvalidFeedId | PythLazerPriceNotPresent | PythLazerBestBidPriceNotPresent | PythLazerBestAskPriceNotPresent | PythLazerInvalidAskBidPrices | ExpectedPriceAccount | WrongAccountOwner | CompositeOracleInvalidSourceIndex | CappedFlooredBothCapAndFloorAreNone;
export declare class IntegerOverflow extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6000;
    readonly code = 6000;
    readonly name = "IntegerOverflow";
    readonly msg = "Integer overflow";
    constructor(logs?: string[] | undefined);
}
export declare class ConversionFailure extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6001;
    readonly code = 6001;
    readonly name = "ConversionFailure";
    readonly msg = "Conversion failure";
    constructor(logs?: string[] | undefined);
}
export declare class MathOverflow extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6002;
    readonly code = 6002;
    readonly name = "MathOverflow";
    readonly msg = "Mathematical operation with overflow";
    constructor(logs?: string[] | undefined);
}
export declare class OutOfRangeIntegralConversion extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6003;
    readonly code = 6003;
    readonly name = "OutOfRangeIntegralConversion";
    readonly msg = "Out of range integral conversion attempted";
    constructor(logs?: string[] | undefined);
}
export declare class UnexpectedAccount extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6004;
    readonly code = 6004;
    readonly name = "UnexpectedAccount";
    readonly msg = "Unexpected account in instruction";
    constructor(logs?: string[] | undefined);
}
export declare class PriceNotValid extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6005;
    readonly code = 6005;
    readonly name = "PriceNotValid";
    readonly msg = "Price is not valid";
    constructor(logs?: string[] | undefined);
}
export declare class AccountsAndTokenMismatch extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6006;
    readonly code = 6006;
    readonly name = "AccountsAndTokenMismatch";
    readonly msg = "The number of tokens is different from the number of received accounts";
    constructor(logs?: string[] | undefined);
}
export declare class BadTokenNb extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6007;
    readonly code = 6007;
    readonly name = "BadTokenNb";
    readonly msg = "The token index received is out of range";
    constructor(logs?: string[] | undefined);
}
export declare class BadTokenType extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6008;
    readonly code = 6008;
    readonly name = "BadTokenType";
    readonly msg = "The token type received is invalid";
    constructor(logs?: string[] | undefined);
}
export declare class SwitchboardV2Error extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6009;
    readonly code = 6009;
    readonly name = "SwitchboardV2Error";
    readonly msg = "There was an error with the Switchboard V2 retrieval";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidAccountDiscriminator extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6010;
    readonly code = 6010;
    readonly name = "InvalidAccountDiscriminator";
    readonly msg = "Invalid account discriminator";
    constructor(logs?: string[] | undefined);
}
export declare class UnableToDeserializeAccount extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6011;
    readonly code = 6011;
    readonly name = "UnableToDeserializeAccount";
    readonly msg = "Unable to deserialize account";
    constructor(logs?: string[] | undefined);
}
export declare class BadScopeChainOrPrices extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6012;
    readonly code = 6012;
    readonly name = "BadScopeChainOrPrices";
    readonly msg = "Error while computing price with ScopeChain";
    constructor(logs?: string[] | undefined);
}
export declare class RefreshInCPI extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6013;
    readonly code = 6013;
    readonly name = "RefreshInCPI";
    readonly msg = "Refresh price instruction called in a CPI";
    constructor(logs?: string[] | undefined);
}
export declare class RefreshWithUnexpectedIxs extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6014;
    readonly code = 6014;
    readonly name = "RefreshWithUnexpectedIxs";
    readonly msg = "Refresh price instruction preceded by unexpected ixs";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidTokenUpdateMode extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6015;
    readonly code = 6015;
    readonly name = "InvalidTokenUpdateMode";
    readonly msg = "Invalid token metadata update mode";
    constructor(logs?: string[] | undefined);
}
export declare class UnableToDerivePDA extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6016;
    readonly code = 6016;
    readonly name = "UnableToDerivePDA";
    readonly msg = "Unable to derive PDA address";
    constructor(logs?: string[] | undefined);
}
export declare class BadTimestamp extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6017;
    readonly code = 6017;
    readonly name = "BadTimestamp";
    readonly msg = "Invalid timestamp";
    constructor(logs?: string[] | undefined);
}
export declare class BadSlot extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6018;
    readonly code = 6018;
    readonly name = "BadSlot";
    readonly msg = "Invalid slot";
    constructor(logs?: string[] | undefined);
}
export declare class PriceAccountNotExpected extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6019;
    readonly code = 6019;
    readonly name = "PriceAccountNotExpected";
    readonly msg = "TWAP price account is different than Scope ID";
    constructor(logs?: string[] | undefined);
}
export declare class TwapSourceIndexOutOfRange extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6020;
    readonly code = 6020;
    readonly name = "TwapSourceIndexOutOfRange";
    readonly msg = "TWAP source index out of range";
    constructor(logs?: string[] | undefined);
}
export declare class TwapSampleTooFrequent extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6021;
    readonly code = 6021;
    readonly name = "TwapSampleTooFrequent";
    readonly msg = "TWAP sample is too close to the previous one";
    constructor(logs?: string[] | undefined);
}
export declare class UnexpectedJlpConfiguration extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6022;
    readonly code = 6022;
    readonly name = "UnexpectedJlpConfiguration";
    readonly msg = "Unexpected JLP configuration";
    constructor(logs?: string[] | undefined);
}
export declare class TwapNotEnoughSamplesInPeriod extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6023;
    readonly code = 6023;
    readonly name = "TwapNotEnoughSamplesInPeriod";
    readonly msg = "Not enough price samples in period to compute TWAP";
    constructor(logs?: string[] | undefined);
}
export declare class EmptyTokenList extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6024;
    readonly code = 6024;
    readonly name = "EmptyTokenList";
    readonly msg = "The provided token list to refresh is empty";
    constructor(logs?: string[] | undefined);
}
export declare class StakeFeeTooHigh extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6025;
    readonly code = 6025;
    readonly name = "StakeFeeTooHigh";
    readonly msg = "The stake pool fee is higher than the maximum allowed";
    constructor(logs?: string[] | undefined);
}
export declare class KTokenUnderlyingPriceNotValid extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6026;
    readonly code = 6026;
    readonly name = "KTokenUnderlyingPriceNotValid";
    readonly msg = "Cannot get a valid price for the tokens composing the Ktoken";
    constructor(logs?: string[] | undefined);
}
export declare class KTokenHoldingsCalculationError extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6027;
    readonly code = 6027;
    readonly name = "KTokenHoldingsCalculationError";
    readonly msg = "Error while computing the Ktoken pool holdings";
    constructor(logs?: string[] | undefined);
}
export declare class CannotResizeAccount extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6028;
    readonly code = 6028;
    readonly name = "CannotResizeAccount";
    readonly msg = "Cannot resize the account we only allow it to grow in size";
    constructor(logs?: string[] | undefined);
}
export declare class FixedPriceInvalid extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6029;
    readonly code = 6029;
    readonly name = "FixedPriceInvalid";
    readonly msg = "The provided fixed price is invalid";
    constructor(logs?: string[] | undefined);
}
export declare class SwitchboardOnDemandError extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6030;
    readonly code = 6030;
    readonly name = "SwitchboardOnDemandError";
    readonly msg = "Switchboard On Demand price derive error";
    constructor(logs?: string[] | undefined);
}
export declare class ConfidenceIntervalCheckFailed extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6031;
    readonly code = 6031;
    readonly name = "ConfidenceIntervalCheckFailed";
    readonly msg = "Confidence interval check failed";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidGenericData extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6032;
    readonly code = 6032;
    readonly name = "InvalidGenericData";
    readonly msg = "Invalid generic data";
    constructor(logs?: string[] | undefined);
}
export declare class NoChainlinkReportData extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6033;
    readonly code = 6033;
    readonly name = "NoChainlinkReportData";
    readonly msg = "No valid Chainlink report data found";
    constructor(logs?: string[] | undefined);
}
export declare class InvalidChainlinkReportData extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6034;
    readonly code = 6034;
    readonly name = "InvalidChainlinkReportData";
    readonly msg = "Invalid Chainlink report data format";
    constructor(logs?: string[] | undefined);
}
export declare class MostRecentOfInvalidSourceIndices extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6035;
    readonly code = 6035;
    readonly name = "MostRecentOfInvalidSourceIndices";
    readonly msg = "MostRecentOf config must contain at least one valid source index";
    constructor(logs?: string[] | undefined);
}
export declare class MostRecentOfInvalidMaxDivergence extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6036;
    readonly code = 6036;
    readonly name = "MostRecentOfInvalidMaxDivergence";
    readonly msg = "Invalid max divergence (bps) for MostRecentOf oracle";
    constructor(logs?: string[] | undefined);
}
export declare class MostRecentOfInvalidMaxAge extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6037;
    readonly code = 6037;
    readonly name = "MostRecentOfInvalidMaxAge";
    readonly msg = "Invalid max age (s) for MostRecentOf oracle";
    constructor(logs?: string[] | undefined);
}
export declare class MostRecentOfMaxAgeViolated extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6038;
    readonly code = 6038;
    readonly name = "MostRecentOfMaxAgeViolated";
    readonly msg = "Max age diff constraint violated for MostRecentOf oracle";
    constructor(logs?: string[] | undefined);
}
export declare class MostRecentOfMaxDivergenceBpsViolated extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6039;
    readonly code = 6039;
    readonly name = "MostRecentOfMaxDivergenceBpsViolated";
    readonly msg = "Max divergence bps constraint violated for MostRecentOf oracle";
    constructor(logs?: string[] | undefined);
}
export declare class PythLazerVerifyIxFailed extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6040;
    readonly code = 6040;
    readonly name = "PythLazerVerifyIxFailed";
    readonly msg = "The invoked pyth lazer verify instruction failed";
    constructor(logs?: string[] | undefined);
}
export declare class PythLazerInvalidFeedID extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6041;
    readonly code = 6041;
    readonly name = "PythLazerInvalidFeedID";
    readonly msg = "Invalid feed id passed in to PythLazer oracle";
    constructor(logs?: string[] | undefined);
}
export declare class PythLazerInvalidExponent extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6042;
    readonly code = 6042;
    readonly name = "PythLazerInvalidExponent";
    readonly msg = "Invalid exponent passed in to PythLazer oracle";
    constructor(logs?: string[] | undefined);
}
export declare class PythLazerInvalidConfidenceFactor extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6043;
    readonly code = 6043;
    readonly name = "PythLazerInvalidConfidenceFactor";
    readonly msg = "Invalid confidence factor passed in to PythLazer oracle";
    constructor(logs?: string[] | undefined);
}
export declare class PythLazerInvalidMessagePayload extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6044;
    readonly code = 6044;
    readonly name = "PythLazerInvalidMessagePayload";
    readonly msg = "Received an invalid message payload in the PythLazer oracle when refreshing price";
    constructor(logs?: string[] | undefined);
}
export declare class PythLazerInvalidChannel extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6045;
    readonly code = 6045;
    readonly name = "PythLazerInvalidChannel";
    readonly msg = "Received an invalid channel in the PythLazer payload when refreshing price";
    constructor(logs?: string[] | undefined);
}
export declare class PythLazerInvalidFeedsLength extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6046;
    readonly code = 6046;
    readonly name = "PythLazerInvalidFeedsLength";
    readonly msg = "Payload should have a single feed in the PythLazer payload when refreshing price";
    constructor(logs?: string[] | undefined);
}
export declare class PythLazerInvalidFeedId extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6047;
    readonly code = 6047;
    readonly name = "PythLazerInvalidFeedId";
    readonly msg = "Invalid feed id in the PythLazer payload when refreshing price";
    constructor(logs?: string[] | undefined);
}
export declare class PythLazerPriceNotPresent extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6048;
    readonly code = 6048;
    readonly name = "PythLazerPriceNotPresent";
    readonly msg = "Property fields in the feed of the PythLazer payload do not contain a price";
    constructor(logs?: string[] | undefined);
}
export declare class PythLazerBestBidPriceNotPresent extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6049;
    readonly code = 6049;
    readonly name = "PythLazerBestBidPriceNotPresent";
    readonly msg = "Property fields in the feed of the PythLazer payload do not contain a best bid price";
    constructor(logs?: string[] | undefined);
}
export declare class PythLazerBestAskPriceNotPresent extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6050;
    readonly code = 6050;
    readonly name = "PythLazerBestAskPriceNotPresent";
    readonly msg = "Property fields in the feed of the PythLazer payload do not contain a best ask price";
    constructor(logs?: string[] | undefined);
}
export declare class PythLazerInvalidAskBidPrices extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6051;
    readonly code = 6051;
    readonly name = "PythLazerInvalidAskBidPrices";
    readonly msg = "Invalid ask/bid prices provided in the feed of the PythLazer payload";
    constructor(logs?: string[] | undefined);
}
export declare class ExpectedPriceAccount extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6052;
    readonly code = 6052;
    readonly name = "ExpectedPriceAccount";
    readonly msg = "Price account expected when updating mapping";
    constructor(logs?: string[] | undefined);
}
export declare class WrongAccountOwner extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6053;
    readonly code = 6053;
    readonly name = "WrongAccountOwner";
    readonly msg = "Provided account has a different owner than expected";
    constructor(logs?: string[] | undefined);
}
export declare class CompositeOracleInvalidSourceIndex extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6054;
    readonly code = 6054;
    readonly name = "CompositeOracleInvalidSourceIndex";
    readonly msg = "Provided source index is invalid";
    constructor(logs?: string[] | undefined);
}
export declare class CappedFlooredBothCapAndFloorAreNone extends Error {
    readonly logs?: string[] | undefined;
    static readonly code = 6055;
    readonly code = 6055;
    readonly name = "CappedFlooredBothCapAndFloorAreNone";
    readonly msg = "Can't set both cap and floor to None for CappedFloored oracle";
    constructor(logs?: string[] | undefined);
}
export declare function fromCode(code: number, logs?: string[]): CustomError | null;
//# sourceMappingURL=custom.d.ts.map