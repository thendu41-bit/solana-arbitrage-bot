import { Address, GetAccountInfoApi, GetMultipleAccountsApi, Rpc } from "@solana/kit";
import * as types from "../types";
export interface OraclePricesFields {
    oracleMappings: Address;
    prices: Array<types.DatedPriceFields>;
}
export interface OraclePricesJSON {
    oracleMappings: string;
    prices: Array<types.DatedPriceJSON>;
}
export declare class OraclePrices {
    readonly oracleMappings: Address;
    readonly prices: Array<types.DatedPrice>;
    static readonly discriminator: Buffer<ArrayBuffer>;
    static readonly layout: import("buffer-layout").Layout<OraclePrices>;
    constructor(fields: OraclePricesFields);
    static fetch(rpc: Rpc<GetAccountInfoApi>, address: Address, programId?: Address): Promise<OraclePrices | null>;
    static fetchMultiple(rpc: Rpc<GetMultipleAccountsApi>, addresses: Address[], programId?: Address): Promise<Array<OraclePrices | null>>;
    static decode(data: Buffer): OraclePrices;
    toJSON(): OraclePricesJSON;
    static fromJSON(obj: OraclePricesJSON): OraclePrices;
}
//# sourceMappingURL=OraclePrices.d.ts.map