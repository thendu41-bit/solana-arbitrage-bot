"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateRebalancesCapCurrentTotal = exports.UpdateRebalancesCapInterval = exports.UpdateRebalancesCapCapacity = exports.UpdateFarm = exports.UpdateReward2Amount = exports.UpdateReward1Amount = exports.UpdateReward0Amount = exports.UpdateReferencePriceType = exports.UpdateLookupTable = exports.UpdateDepositMintingMethod = exports.UpdateRebalanceParams = exports.UpdateRebalanceType = exports.UpdateIsCommunity = exports.UpdateStrategyCreationState = exports.ResetReferencePrices = exports.UpdateSwapVaultMaxSlippageFromRef = exports.AllowDepositWithoutInvest = exports.UpdateFlashVaultSwap = exports.DeprecatedUpdateCollateralIdB = exports.DeprecatedUpdateCollateralIdA = exports.UpdateLocalAdminBlocked = exports.UpdateWithdrawBlocked = exports.UpdateInvestBlocked = exports.UpdateRaydiumPoolConfigOrBaseVaultAuthority = exports.UpdateRaydiumProtocolPositionOrBaseVaultAuthority = exports.UpdateDepositBlocked = exports.KaminoRewardIndex2RewardPerSecond = exports.KaminoRewardIndex1RewardPerSecond = exports.KaminoRewardIndex0RewardPerSecond = exports.KaminoRewardIndex2TS = exports.KaminoRewardIndex1TS = exports.KaminoRewardIndex0TS = exports.UpdateAdminAuthority = exports.UpdateReward2Fee = exports.UpdateReward1Fee = exports.UpdateReward0Fee = exports.UpdateCollectFeesFee = exports.UpdateWithdrawFee = exports.UpdateDepositFee = exports.UpdateStrategyType = exports.UpdateSwapVaultMaxSlippage = exports.UpdateMaxDeviationBps = exports.UpdateWithdrawalCapBCurrentTotal = exports.UpdateWithdrawalCapBInterval = exports.UpdateWithdrawalCapBCapacity = exports.UpdateWithdrawalCapACurrentTotal = exports.UpdateWithdrawalCapAInterval = exports.UpdateWithdrawalCapACapacity = exports.UpdateDepositCapIxn = exports.UpdateDepositCap = void 0;
exports.UpdatePendingStrategyAdmin = exports.UpdateSwapUnevenAuthority = void 0;
exports.fromDecoded = fromDecoded;
exports.fromJSON = fromJSON;
exports.layout = layout;
const borsh = __importStar(require("@coral-xyz/borsh"));
class UpdateDepositCap {
    static discriminator = 0;
    static kind = "UpdateDepositCap";
    discriminator = 0;
    kind = "UpdateDepositCap";
    toJSON() {
        return {
            kind: "UpdateDepositCap",
        };
    }
    toEncodable() {
        return {
            UpdateDepositCap: {},
        };
    }
}
exports.UpdateDepositCap = UpdateDepositCap;
class UpdateDepositCapIxn {
    static discriminator = 1;
    static kind = "UpdateDepositCapIxn";
    discriminator = 1;
    kind = "UpdateDepositCapIxn";
    toJSON() {
        return {
            kind: "UpdateDepositCapIxn",
        };
    }
    toEncodable() {
        return {
            UpdateDepositCapIxn: {},
        };
    }
}
exports.UpdateDepositCapIxn = UpdateDepositCapIxn;
class UpdateWithdrawalCapACapacity {
    static discriminator = 2;
    static kind = "UpdateWithdrawalCapACapacity";
    discriminator = 2;
    kind = "UpdateWithdrawalCapACapacity";
    toJSON() {
        return {
            kind: "UpdateWithdrawalCapACapacity",
        };
    }
    toEncodable() {
        return {
            UpdateWithdrawalCapACapacity: {},
        };
    }
}
exports.UpdateWithdrawalCapACapacity = UpdateWithdrawalCapACapacity;
class UpdateWithdrawalCapAInterval {
    static discriminator = 3;
    static kind = "UpdateWithdrawalCapAInterval";
    discriminator = 3;
    kind = "UpdateWithdrawalCapAInterval";
    toJSON() {
        return {
            kind: "UpdateWithdrawalCapAInterval",
        };
    }
    toEncodable() {
        return {
            UpdateWithdrawalCapAInterval: {},
        };
    }
}
exports.UpdateWithdrawalCapAInterval = UpdateWithdrawalCapAInterval;
class UpdateWithdrawalCapACurrentTotal {
    static discriminator = 4;
    static kind = "UpdateWithdrawalCapACurrentTotal";
    discriminator = 4;
    kind = "UpdateWithdrawalCapACurrentTotal";
    toJSON() {
        return {
            kind: "UpdateWithdrawalCapACurrentTotal",
        };
    }
    toEncodable() {
        return {
            UpdateWithdrawalCapACurrentTotal: {},
        };
    }
}
exports.UpdateWithdrawalCapACurrentTotal = UpdateWithdrawalCapACurrentTotal;
class UpdateWithdrawalCapBCapacity {
    static discriminator = 5;
    static kind = "UpdateWithdrawalCapBCapacity";
    discriminator = 5;
    kind = "UpdateWithdrawalCapBCapacity";
    toJSON() {
        return {
            kind: "UpdateWithdrawalCapBCapacity",
        };
    }
    toEncodable() {
        return {
            UpdateWithdrawalCapBCapacity: {},
        };
    }
}
exports.UpdateWithdrawalCapBCapacity = UpdateWithdrawalCapBCapacity;
class UpdateWithdrawalCapBInterval {
    static discriminator = 6;
    static kind = "UpdateWithdrawalCapBInterval";
    discriminator = 6;
    kind = "UpdateWithdrawalCapBInterval";
    toJSON() {
        return {
            kind: "UpdateWithdrawalCapBInterval",
        };
    }
    toEncodable() {
        return {
            UpdateWithdrawalCapBInterval: {},
        };
    }
}
exports.UpdateWithdrawalCapBInterval = UpdateWithdrawalCapBInterval;
class UpdateWithdrawalCapBCurrentTotal {
    static discriminator = 7;
    static kind = "UpdateWithdrawalCapBCurrentTotal";
    discriminator = 7;
    kind = "UpdateWithdrawalCapBCurrentTotal";
    toJSON() {
        return {
            kind: "UpdateWithdrawalCapBCurrentTotal",
        };
    }
    toEncodable() {
        return {
            UpdateWithdrawalCapBCurrentTotal: {},
        };
    }
}
exports.UpdateWithdrawalCapBCurrentTotal = UpdateWithdrawalCapBCurrentTotal;
class UpdateMaxDeviationBps {
    static discriminator = 8;
    static kind = "UpdateMaxDeviationBps";
    discriminator = 8;
    kind = "UpdateMaxDeviationBps";
    toJSON() {
        return {
            kind: "UpdateMaxDeviationBps",
        };
    }
    toEncodable() {
        return {
            UpdateMaxDeviationBps: {},
        };
    }
}
exports.UpdateMaxDeviationBps = UpdateMaxDeviationBps;
class UpdateSwapVaultMaxSlippage {
    static discriminator = 9;
    static kind = "UpdateSwapVaultMaxSlippage";
    discriminator = 9;
    kind = "UpdateSwapVaultMaxSlippage";
    toJSON() {
        return {
            kind: "UpdateSwapVaultMaxSlippage",
        };
    }
    toEncodable() {
        return {
            UpdateSwapVaultMaxSlippage: {},
        };
    }
}
exports.UpdateSwapVaultMaxSlippage = UpdateSwapVaultMaxSlippage;
class UpdateStrategyType {
    static discriminator = 10;
    static kind = "UpdateStrategyType";
    discriminator = 10;
    kind = "UpdateStrategyType";
    toJSON() {
        return {
            kind: "UpdateStrategyType",
        };
    }
    toEncodable() {
        return {
            UpdateStrategyType: {},
        };
    }
}
exports.UpdateStrategyType = UpdateStrategyType;
class UpdateDepositFee {
    static discriminator = 11;
    static kind = "UpdateDepositFee";
    discriminator = 11;
    kind = "UpdateDepositFee";
    toJSON() {
        return {
            kind: "UpdateDepositFee",
        };
    }
    toEncodable() {
        return {
            UpdateDepositFee: {},
        };
    }
}
exports.UpdateDepositFee = UpdateDepositFee;
class UpdateWithdrawFee {
    static discriminator = 12;
    static kind = "UpdateWithdrawFee";
    discriminator = 12;
    kind = "UpdateWithdrawFee";
    toJSON() {
        return {
            kind: "UpdateWithdrawFee",
        };
    }
    toEncodable() {
        return {
            UpdateWithdrawFee: {},
        };
    }
}
exports.UpdateWithdrawFee = UpdateWithdrawFee;
class UpdateCollectFeesFee {
    static discriminator = 13;
    static kind = "UpdateCollectFeesFee";
    discriminator = 13;
    kind = "UpdateCollectFeesFee";
    toJSON() {
        return {
            kind: "UpdateCollectFeesFee",
        };
    }
    toEncodable() {
        return {
            UpdateCollectFeesFee: {},
        };
    }
}
exports.UpdateCollectFeesFee = UpdateCollectFeesFee;
class UpdateReward0Fee {
    static discriminator = 14;
    static kind = "UpdateReward0Fee";
    discriminator = 14;
    kind = "UpdateReward0Fee";
    toJSON() {
        return {
            kind: "UpdateReward0Fee",
        };
    }
    toEncodable() {
        return {
            UpdateReward0Fee: {},
        };
    }
}
exports.UpdateReward0Fee = UpdateReward0Fee;
class UpdateReward1Fee {
    static discriminator = 15;
    static kind = "UpdateReward1Fee";
    discriminator = 15;
    kind = "UpdateReward1Fee";
    toJSON() {
        return {
            kind: "UpdateReward1Fee",
        };
    }
    toEncodable() {
        return {
            UpdateReward1Fee: {},
        };
    }
}
exports.UpdateReward1Fee = UpdateReward1Fee;
class UpdateReward2Fee {
    static discriminator = 16;
    static kind = "UpdateReward2Fee";
    discriminator = 16;
    kind = "UpdateReward2Fee";
    toJSON() {
        return {
            kind: "UpdateReward2Fee",
        };
    }
    toEncodable() {
        return {
            UpdateReward2Fee: {},
        };
    }
}
exports.UpdateReward2Fee = UpdateReward2Fee;
class UpdateAdminAuthority {
    static discriminator = 17;
    static kind = "UpdateAdminAuthority";
    discriminator = 17;
    kind = "UpdateAdminAuthority";
    toJSON() {
        return {
            kind: "UpdateAdminAuthority",
        };
    }
    toEncodable() {
        return {
            UpdateAdminAuthority: {},
        };
    }
}
exports.UpdateAdminAuthority = UpdateAdminAuthority;
class KaminoRewardIndex0TS {
    static discriminator = 18;
    static kind = "KaminoRewardIndex0TS";
    discriminator = 18;
    kind = "KaminoRewardIndex0TS";
    toJSON() {
        return {
            kind: "KaminoRewardIndex0TS",
        };
    }
    toEncodable() {
        return {
            KaminoRewardIndex0TS: {},
        };
    }
}
exports.KaminoRewardIndex0TS = KaminoRewardIndex0TS;
class KaminoRewardIndex1TS {
    static discriminator = 19;
    static kind = "KaminoRewardIndex1TS";
    discriminator = 19;
    kind = "KaminoRewardIndex1TS";
    toJSON() {
        return {
            kind: "KaminoRewardIndex1TS",
        };
    }
    toEncodable() {
        return {
            KaminoRewardIndex1TS: {},
        };
    }
}
exports.KaminoRewardIndex1TS = KaminoRewardIndex1TS;
class KaminoRewardIndex2TS {
    static discriminator = 20;
    static kind = "KaminoRewardIndex2TS";
    discriminator = 20;
    kind = "KaminoRewardIndex2TS";
    toJSON() {
        return {
            kind: "KaminoRewardIndex2TS",
        };
    }
    toEncodable() {
        return {
            KaminoRewardIndex2TS: {},
        };
    }
}
exports.KaminoRewardIndex2TS = KaminoRewardIndex2TS;
class KaminoRewardIndex0RewardPerSecond {
    static discriminator = 21;
    static kind = "KaminoRewardIndex0RewardPerSecond";
    discriminator = 21;
    kind = "KaminoRewardIndex0RewardPerSecond";
    toJSON() {
        return {
            kind: "KaminoRewardIndex0RewardPerSecond",
        };
    }
    toEncodable() {
        return {
            KaminoRewardIndex0RewardPerSecond: {},
        };
    }
}
exports.KaminoRewardIndex0RewardPerSecond = KaminoRewardIndex0RewardPerSecond;
class KaminoRewardIndex1RewardPerSecond {
    static discriminator = 22;
    static kind = "KaminoRewardIndex1RewardPerSecond";
    discriminator = 22;
    kind = "KaminoRewardIndex1RewardPerSecond";
    toJSON() {
        return {
            kind: "KaminoRewardIndex1RewardPerSecond",
        };
    }
    toEncodable() {
        return {
            KaminoRewardIndex1RewardPerSecond: {},
        };
    }
}
exports.KaminoRewardIndex1RewardPerSecond = KaminoRewardIndex1RewardPerSecond;
class KaminoRewardIndex2RewardPerSecond {
    static discriminator = 23;
    static kind = "KaminoRewardIndex2RewardPerSecond";
    discriminator = 23;
    kind = "KaminoRewardIndex2RewardPerSecond";
    toJSON() {
        return {
            kind: "KaminoRewardIndex2RewardPerSecond",
        };
    }
    toEncodable() {
        return {
            KaminoRewardIndex2RewardPerSecond: {},
        };
    }
}
exports.KaminoRewardIndex2RewardPerSecond = KaminoRewardIndex2RewardPerSecond;
class UpdateDepositBlocked {
    static discriminator = 24;
    static kind = "UpdateDepositBlocked";
    discriminator = 24;
    kind = "UpdateDepositBlocked";
    toJSON() {
        return {
            kind: "UpdateDepositBlocked",
        };
    }
    toEncodable() {
        return {
            UpdateDepositBlocked: {},
        };
    }
}
exports.UpdateDepositBlocked = UpdateDepositBlocked;
class UpdateRaydiumProtocolPositionOrBaseVaultAuthority {
    static discriminator = 25;
    static kind = "UpdateRaydiumProtocolPositionOrBaseVaultAuthority";
    discriminator = 25;
    kind = "UpdateRaydiumProtocolPositionOrBaseVaultAuthority";
    toJSON() {
        return {
            kind: "UpdateRaydiumProtocolPositionOrBaseVaultAuthority",
        };
    }
    toEncodable() {
        return {
            UpdateRaydiumProtocolPositionOrBaseVaultAuthority: {},
        };
    }
}
exports.UpdateRaydiumProtocolPositionOrBaseVaultAuthority = UpdateRaydiumProtocolPositionOrBaseVaultAuthority;
class UpdateRaydiumPoolConfigOrBaseVaultAuthority {
    static discriminator = 26;
    static kind = "UpdateRaydiumPoolConfigOrBaseVaultAuthority";
    discriminator = 26;
    kind = "UpdateRaydiumPoolConfigOrBaseVaultAuthority";
    toJSON() {
        return {
            kind: "UpdateRaydiumPoolConfigOrBaseVaultAuthority",
        };
    }
    toEncodable() {
        return {
            UpdateRaydiumPoolConfigOrBaseVaultAuthority: {},
        };
    }
}
exports.UpdateRaydiumPoolConfigOrBaseVaultAuthority = UpdateRaydiumPoolConfigOrBaseVaultAuthority;
class UpdateInvestBlocked {
    static discriminator = 27;
    static kind = "UpdateInvestBlocked";
    discriminator = 27;
    kind = "UpdateInvestBlocked";
    toJSON() {
        return {
            kind: "UpdateInvestBlocked",
        };
    }
    toEncodable() {
        return {
            UpdateInvestBlocked: {},
        };
    }
}
exports.UpdateInvestBlocked = UpdateInvestBlocked;
class UpdateWithdrawBlocked {
    static discriminator = 28;
    static kind = "UpdateWithdrawBlocked";
    discriminator = 28;
    kind = "UpdateWithdrawBlocked";
    toJSON() {
        return {
            kind: "UpdateWithdrawBlocked",
        };
    }
    toEncodable() {
        return {
            UpdateWithdrawBlocked: {},
        };
    }
}
exports.UpdateWithdrawBlocked = UpdateWithdrawBlocked;
class UpdateLocalAdminBlocked {
    static discriminator = 29;
    static kind = "UpdateLocalAdminBlocked";
    discriminator = 29;
    kind = "UpdateLocalAdminBlocked";
    toJSON() {
        return {
            kind: "UpdateLocalAdminBlocked",
        };
    }
    toEncodable() {
        return {
            UpdateLocalAdminBlocked: {},
        };
    }
}
exports.UpdateLocalAdminBlocked = UpdateLocalAdminBlocked;
class DeprecatedUpdateCollateralIdA {
    static discriminator = 30;
    static kind = "DeprecatedUpdateCollateralIdA";
    discriminator = 30;
    kind = "DeprecatedUpdateCollateralIdA";
    toJSON() {
        return {
            kind: "DeprecatedUpdateCollateralIdA",
        };
    }
    toEncodable() {
        return {
            DeprecatedUpdateCollateralIdA: {},
        };
    }
}
exports.DeprecatedUpdateCollateralIdA = DeprecatedUpdateCollateralIdA;
class DeprecatedUpdateCollateralIdB {
    static discriminator = 31;
    static kind = "DeprecatedUpdateCollateralIdB";
    discriminator = 31;
    kind = "DeprecatedUpdateCollateralIdB";
    toJSON() {
        return {
            kind: "DeprecatedUpdateCollateralIdB",
        };
    }
    toEncodable() {
        return {
            DeprecatedUpdateCollateralIdB: {},
        };
    }
}
exports.DeprecatedUpdateCollateralIdB = DeprecatedUpdateCollateralIdB;
class UpdateFlashVaultSwap {
    static discriminator = 32;
    static kind = "UpdateFlashVaultSwap";
    discriminator = 32;
    kind = "UpdateFlashVaultSwap";
    toJSON() {
        return {
            kind: "UpdateFlashVaultSwap",
        };
    }
    toEncodable() {
        return {
            UpdateFlashVaultSwap: {},
        };
    }
}
exports.UpdateFlashVaultSwap = UpdateFlashVaultSwap;
class AllowDepositWithoutInvest {
    static discriminator = 33;
    static kind = "AllowDepositWithoutInvest";
    discriminator = 33;
    kind = "AllowDepositWithoutInvest";
    toJSON() {
        return {
            kind: "AllowDepositWithoutInvest",
        };
    }
    toEncodable() {
        return {
            AllowDepositWithoutInvest: {},
        };
    }
}
exports.AllowDepositWithoutInvest = AllowDepositWithoutInvest;
class UpdateSwapVaultMaxSlippageFromRef {
    static discriminator = 34;
    static kind = "UpdateSwapVaultMaxSlippageFromRef";
    discriminator = 34;
    kind = "UpdateSwapVaultMaxSlippageFromRef";
    toJSON() {
        return {
            kind: "UpdateSwapVaultMaxSlippageFromRef",
        };
    }
    toEncodable() {
        return {
            UpdateSwapVaultMaxSlippageFromRef: {},
        };
    }
}
exports.UpdateSwapVaultMaxSlippageFromRef = UpdateSwapVaultMaxSlippageFromRef;
class ResetReferencePrices {
    static discriminator = 35;
    static kind = "ResetReferencePrices";
    discriminator = 35;
    kind = "ResetReferencePrices";
    toJSON() {
        return {
            kind: "ResetReferencePrices",
        };
    }
    toEncodable() {
        return {
            ResetReferencePrices: {},
        };
    }
}
exports.ResetReferencePrices = ResetReferencePrices;
class UpdateStrategyCreationState {
    static discriminator = 36;
    static kind = "UpdateStrategyCreationState";
    discriminator = 36;
    kind = "UpdateStrategyCreationState";
    toJSON() {
        return {
            kind: "UpdateStrategyCreationState",
        };
    }
    toEncodable() {
        return {
            UpdateStrategyCreationState: {},
        };
    }
}
exports.UpdateStrategyCreationState = UpdateStrategyCreationState;
class UpdateIsCommunity {
    static discriminator = 37;
    static kind = "UpdateIsCommunity";
    discriminator = 37;
    kind = "UpdateIsCommunity";
    toJSON() {
        return {
            kind: "UpdateIsCommunity",
        };
    }
    toEncodable() {
        return {
            UpdateIsCommunity: {},
        };
    }
}
exports.UpdateIsCommunity = UpdateIsCommunity;
class UpdateRebalanceType {
    static discriminator = 38;
    static kind = "UpdateRebalanceType";
    discriminator = 38;
    kind = "UpdateRebalanceType";
    toJSON() {
        return {
            kind: "UpdateRebalanceType",
        };
    }
    toEncodable() {
        return {
            UpdateRebalanceType: {},
        };
    }
}
exports.UpdateRebalanceType = UpdateRebalanceType;
class UpdateRebalanceParams {
    static discriminator = 39;
    static kind = "UpdateRebalanceParams";
    discriminator = 39;
    kind = "UpdateRebalanceParams";
    toJSON() {
        return {
            kind: "UpdateRebalanceParams",
        };
    }
    toEncodable() {
        return {
            UpdateRebalanceParams: {},
        };
    }
}
exports.UpdateRebalanceParams = UpdateRebalanceParams;
class UpdateDepositMintingMethod {
    static discriminator = 40;
    static kind = "UpdateDepositMintingMethod";
    discriminator = 40;
    kind = "UpdateDepositMintingMethod";
    toJSON() {
        return {
            kind: "UpdateDepositMintingMethod",
        };
    }
    toEncodable() {
        return {
            UpdateDepositMintingMethod: {},
        };
    }
}
exports.UpdateDepositMintingMethod = UpdateDepositMintingMethod;
class UpdateLookupTable {
    static discriminator = 41;
    static kind = "UpdateLookupTable";
    discriminator = 41;
    kind = "UpdateLookupTable";
    toJSON() {
        return {
            kind: "UpdateLookupTable",
        };
    }
    toEncodable() {
        return {
            UpdateLookupTable: {},
        };
    }
}
exports.UpdateLookupTable = UpdateLookupTable;
class UpdateReferencePriceType {
    static discriminator = 42;
    static kind = "UpdateReferencePriceType";
    discriminator = 42;
    kind = "UpdateReferencePriceType";
    toJSON() {
        return {
            kind: "UpdateReferencePriceType",
        };
    }
    toEncodable() {
        return {
            UpdateReferencePriceType: {},
        };
    }
}
exports.UpdateReferencePriceType = UpdateReferencePriceType;
class UpdateReward0Amount {
    static discriminator = 43;
    static kind = "UpdateReward0Amount";
    discriminator = 43;
    kind = "UpdateReward0Amount";
    toJSON() {
        return {
            kind: "UpdateReward0Amount",
        };
    }
    toEncodable() {
        return {
            UpdateReward0Amount: {},
        };
    }
}
exports.UpdateReward0Amount = UpdateReward0Amount;
class UpdateReward1Amount {
    static discriminator = 44;
    static kind = "UpdateReward1Amount";
    discriminator = 44;
    kind = "UpdateReward1Amount";
    toJSON() {
        return {
            kind: "UpdateReward1Amount",
        };
    }
    toEncodable() {
        return {
            UpdateReward1Amount: {},
        };
    }
}
exports.UpdateReward1Amount = UpdateReward1Amount;
class UpdateReward2Amount {
    static discriminator = 45;
    static kind = "UpdateReward2Amount";
    discriminator = 45;
    kind = "UpdateReward2Amount";
    toJSON() {
        return {
            kind: "UpdateReward2Amount",
        };
    }
    toEncodable() {
        return {
            UpdateReward2Amount: {},
        };
    }
}
exports.UpdateReward2Amount = UpdateReward2Amount;
class UpdateFarm {
    static discriminator = 46;
    static kind = "UpdateFarm";
    discriminator = 46;
    kind = "UpdateFarm";
    toJSON() {
        return {
            kind: "UpdateFarm",
        };
    }
    toEncodable() {
        return {
            UpdateFarm: {},
        };
    }
}
exports.UpdateFarm = UpdateFarm;
class UpdateRebalancesCapCapacity {
    static discriminator = 47;
    static kind = "UpdateRebalancesCapCapacity";
    discriminator = 47;
    kind = "UpdateRebalancesCapCapacity";
    toJSON() {
        return {
            kind: "UpdateRebalancesCapCapacity",
        };
    }
    toEncodable() {
        return {
            UpdateRebalancesCapCapacity: {},
        };
    }
}
exports.UpdateRebalancesCapCapacity = UpdateRebalancesCapCapacity;
class UpdateRebalancesCapInterval {
    static discriminator = 48;
    static kind = "UpdateRebalancesCapInterval";
    discriminator = 48;
    kind = "UpdateRebalancesCapInterval";
    toJSON() {
        return {
            kind: "UpdateRebalancesCapInterval",
        };
    }
    toEncodable() {
        return {
            UpdateRebalancesCapInterval: {},
        };
    }
}
exports.UpdateRebalancesCapInterval = UpdateRebalancesCapInterval;
class UpdateRebalancesCapCurrentTotal {
    static discriminator = 49;
    static kind = "UpdateRebalancesCapCurrentTotal";
    discriminator = 49;
    kind = "UpdateRebalancesCapCurrentTotal";
    toJSON() {
        return {
            kind: "UpdateRebalancesCapCurrentTotal",
        };
    }
    toEncodable() {
        return {
            UpdateRebalancesCapCurrentTotal: {},
        };
    }
}
exports.UpdateRebalancesCapCurrentTotal = UpdateRebalancesCapCurrentTotal;
class UpdateSwapUnevenAuthority {
    static discriminator = 50;
    static kind = "UpdateSwapUnevenAuthority";
    discriminator = 50;
    kind = "UpdateSwapUnevenAuthority";
    toJSON() {
        return {
            kind: "UpdateSwapUnevenAuthority",
        };
    }
    toEncodable() {
        return {
            UpdateSwapUnevenAuthority: {},
        };
    }
}
exports.UpdateSwapUnevenAuthority = UpdateSwapUnevenAuthority;
class UpdatePendingStrategyAdmin {
    static discriminator = 51;
    static kind = "UpdatePendingStrategyAdmin";
    discriminator = 51;
    kind = "UpdatePendingStrategyAdmin";
    toJSON() {
        return {
            kind: "UpdatePendingStrategyAdmin",
        };
    }
    toEncodable() {
        return {
            UpdatePendingStrategyAdmin: {},
        };
    }
}
exports.UpdatePendingStrategyAdmin = UpdatePendingStrategyAdmin;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function fromDecoded(obj) {
    if (typeof obj !== "object") {
        throw new Error("Invalid enum object");
    }
    if ("UpdateDepositCap" in obj) {
        return new UpdateDepositCap();
    }
    if ("UpdateDepositCapIxn" in obj) {
        return new UpdateDepositCapIxn();
    }
    if ("UpdateWithdrawalCapACapacity" in obj) {
        return new UpdateWithdrawalCapACapacity();
    }
    if ("UpdateWithdrawalCapAInterval" in obj) {
        return new UpdateWithdrawalCapAInterval();
    }
    if ("UpdateWithdrawalCapACurrentTotal" in obj) {
        return new UpdateWithdrawalCapACurrentTotal();
    }
    if ("UpdateWithdrawalCapBCapacity" in obj) {
        return new UpdateWithdrawalCapBCapacity();
    }
    if ("UpdateWithdrawalCapBInterval" in obj) {
        return new UpdateWithdrawalCapBInterval();
    }
    if ("UpdateWithdrawalCapBCurrentTotal" in obj) {
        return new UpdateWithdrawalCapBCurrentTotal();
    }
    if ("UpdateMaxDeviationBps" in obj) {
        return new UpdateMaxDeviationBps();
    }
    if ("UpdateSwapVaultMaxSlippage" in obj) {
        return new UpdateSwapVaultMaxSlippage();
    }
    if ("UpdateStrategyType" in obj) {
        return new UpdateStrategyType();
    }
    if ("UpdateDepositFee" in obj) {
        return new UpdateDepositFee();
    }
    if ("UpdateWithdrawFee" in obj) {
        return new UpdateWithdrawFee();
    }
    if ("UpdateCollectFeesFee" in obj) {
        return new UpdateCollectFeesFee();
    }
    if ("UpdateReward0Fee" in obj) {
        return new UpdateReward0Fee();
    }
    if ("UpdateReward1Fee" in obj) {
        return new UpdateReward1Fee();
    }
    if ("UpdateReward2Fee" in obj) {
        return new UpdateReward2Fee();
    }
    if ("UpdateAdminAuthority" in obj) {
        return new UpdateAdminAuthority();
    }
    if ("KaminoRewardIndex0TS" in obj) {
        return new KaminoRewardIndex0TS();
    }
    if ("KaminoRewardIndex1TS" in obj) {
        return new KaminoRewardIndex1TS();
    }
    if ("KaminoRewardIndex2TS" in obj) {
        return new KaminoRewardIndex2TS();
    }
    if ("KaminoRewardIndex0RewardPerSecond" in obj) {
        return new KaminoRewardIndex0RewardPerSecond();
    }
    if ("KaminoRewardIndex1RewardPerSecond" in obj) {
        return new KaminoRewardIndex1RewardPerSecond();
    }
    if ("KaminoRewardIndex2RewardPerSecond" in obj) {
        return new KaminoRewardIndex2RewardPerSecond();
    }
    if ("UpdateDepositBlocked" in obj) {
        return new UpdateDepositBlocked();
    }
    if ("UpdateRaydiumProtocolPositionOrBaseVaultAuthority" in obj) {
        return new UpdateRaydiumProtocolPositionOrBaseVaultAuthority();
    }
    if ("UpdateRaydiumPoolConfigOrBaseVaultAuthority" in obj) {
        return new UpdateRaydiumPoolConfigOrBaseVaultAuthority();
    }
    if ("UpdateInvestBlocked" in obj) {
        return new UpdateInvestBlocked();
    }
    if ("UpdateWithdrawBlocked" in obj) {
        return new UpdateWithdrawBlocked();
    }
    if ("UpdateLocalAdminBlocked" in obj) {
        return new UpdateLocalAdminBlocked();
    }
    if ("DeprecatedUpdateCollateralIdA" in obj) {
        return new DeprecatedUpdateCollateralIdA();
    }
    if ("DeprecatedUpdateCollateralIdB" in obj) {
        return new DeprecatedUpdateCollateralIdB();
    }
    if ("UpdateFlashVaultSwap" in obj) {
        return new UpdateFlashVaultSwap();
    }
    if ("AllowDepositWithoutInvest" in obj) {
        return new AllowDepositWithoutInvest();
    }
    if ("UpdateSwapVaultMaxSlippageFromRef" in obj) {
        return new UpdateSwapVaultMaxSlippageFromRef();
    }
    if ("ResetReferencePrices" in obj) {
        return new ResetReferencePrices();
    }
    if ("UpdateStrategyCreationState" in obj) {
        return new UpdateStrategyCreationState();
    }
    if ("UpdateIsCommunity" in obj) {
        return new UpdateIsCommunity();
    }
    if ("UpdateRebalanceType" in obj) {
        return new UpdateRebalanceType();
    }
    if ("UpdateRebalanceParams" in obj) {
        return new UpdateRebalanceParams();
    }
    if ("UpdateDepositMintingMethod" in obj) {
        return new UpdateDepositMintingMethod();
    }
    if ("UpdateLookupTable" in obj) {
        return new UpdateLookupTable();
    }
    if ("UpdateReferencePriceType" in obj) {
        return new UpdateReferencePriceType();
    }
    if ("UpdateReward0Amount" in obj) {
        return new UpdateReward0Amount();
    }
    if ("UpdateReward1Amount" in obj) {
        return new UpdateReward1Amount();
    }
    if ("UpdateReward2Amount" in obj) {
        return new UpdateReward2Amount();
    }
    if ("UpdateFarm" in obj) {
        return new UpdateFarm();
    }
    if ("UpdateRebalancesCapCapacity" in obj) {
        return new UpdateRebalancesCapCapacity();
    }
    if ("UpdateRebalancesCapInterval" in obj) {
        return new UpdateRebalancesCapInterval();
    }
    if ("UpdateRebalancesCapCurrentTotal" in obj) {
        return new UpdateRebalancesCapCurrentTotal();
    }
    if ("UpdateSwapUnevenAuthority" in obj) {
        return new UpdateSwapUnevenAuthority();
    }
    if ("UpdatePendingStrategyAdmin" in obj) {
        return new UpdatePendingStrategyAdmin();
    }
    throw new Error("Invalid enum object");
}
function fromJSON(obj) {
    switch (obj.kind) {
        case "UpdateDepositCap": {
            return new UpdateDepositCap();
        }
        case "UpdateDepositCapIxn": {
            return new UpdateDepositCapIxn();
        }
        case "UpdateWithdrawalCapACapacity": {
            return new UpdateWithdrawalCapACapacity();
        }
        case "UpdateWithdrawalCapAInterval": {
            return new UpdateWithdrawalCapAInterval();
        }
        case "UpdateWithdrawalCapACurrentTotal": {
            return new UpdateWithdrawalCapACurrentTotal();
        }
        case "UpdateWithdrawalCapBCapacity": {
            return new UpdateWithdrawalCapBCapacity();
        }
        case "UpdateWithdrawalCapBInterval": {
            return new UpdateWithdrawalCapBInterval();
        }
        case "UpdateWithdrawalCapBCurrentTotal": {
            return new UpdateWithdrawalCapBCurrentTotal();
        }
        case "UpdateMaxDeviationBps": {
            return new UpdateMaxDeviationBps();
        }
        case "UpdateSwapVaultMaxSlippage": {
            return new UpdateSwapVaultMaxSlippage();
        }
        case "UpdateStrategyType": {
            return new UpdateStrategyType();
        }
        case "UpdateDepositFee": {
            return new UpdateDepositFee();
        }
        case "UpdateWithdrawFee": {
            return new UpdateWithdrawFee();
        }
        case "UpdateCollectFeesFee": {
            return new UpdateCollectFeesFee();
        }
        case "UpdateReward0Fee": {
            return new UpdateReward0Fee();
        }
        case "UpdateReward1Fee": {
            return new UpdateReward1Fee();
        }
        case "UpdateReward2Fee": {
            return new UpdateReward2Fee();
        }
        case "UpdateAdminAuthority": {
            return new UpdateAdminAuthority();
        }
        case "KaminoRewardIndex0TS": {
            return new KaminoRewardIndex0TS();
        }
        case "KaminoRewardIndex1TS": {
            return new KaminoRewardIndex1TS();
        }
        case "KaminoRewardIndex2TS": {
            return new KaminoRewardIndex2TS();
        }
        case "KaminoRewardIndex0RewardPerSecond": {
            return new KaminoRewardIndex0RewardPerSecond();
        }
        case "KaminoRewardIndex1RewardPerSecond": {
            return new KaminoRewardIndex1RewardPerSecond();
        }
        case "KaminoRewardIndex2RewardPerSecond": {
            return new KaminoRewardIndex2RewardPerSecond();
        }
        case "UpdateDepositBlocked": {
            return new UpdateDepositBlocked();
        }
        case "UpdateRaydiumProtocolPositionOrBaseVaultAuthority": {
            return new UpdateRaydiumProtocolPositionOrBaseVaultAuthority();
        }
        case "UpdateRaydiumPoolConfigOrBaseVaultAuthority": {
            return new UpdateRaydiumPoolConfigOrBaseVaultAuthority();
        }
        case "UpdateInvestBlocked": {
            return new UpdateInvestBlocked();
        }
        case "UpdateWithdrawBlocked": {
            return new UpdateWithdrawBlocked();
        }
        case "UpdateLocalAdminBlocked": {
            return new UpdateLocalAdminBlocked();
        }
        case "DeprecatedUpdateCollateralIdA": {
            return new DeprecatedUpdateCollateralIdA();
        }
        case "DeprecatedUpdateCollateralIdB": {
            return new DeprecatedUpdateCollateralIdB();
        }
        case "UpdateFlashVaultSwap": {
            return new UpdateFlashVaultSwap();
        }
        case "AllowDepositWithoutInvest": {
            return new AllowDepositWithoutInvest();
        }
        case "UpdateSwapVaultMaxSlippageFromRef": {
            return new UpdateSwapVaultMaxSlippageFromRef();
        }
        case "ResetReferencePrices": {
            return new ResetReferencePrices();
        }
        case "UpdateStrategyCreationState": {
            return new UpdateStrategyCreationState();
        }
        case "UpdateIsCommunity": {
            return new UpdateIsCommunity();
        }
        case "UpdateRebalanceType": {
            return new UpdateRebalanceType();
        }
        case "UpdateRebalanceParams": {
            return new UpdateRebalanceParams();
        }
        case "UpdateDepositMintingMethod": {
            return new UpdateDepositMintingMethod();
        }
        case "UpdateLookupTable": {
            return new UpdateLookupTable();
        }
        case "UpdateReferencePriceType": {
            return new UpdateReferencePriceType();
        }
        case "UpdateReward0Amount": {
            return new UpdateReward0Amount();
        }
        case "UpdateReward1Amount": {
            return new UpdateReward1Amount();
        }
        case "UpdateReward2Amount": {
            return new UpdateReward2Amount();
        }
        case "UpdateFarm": {
            return new UpdateFarm();
        }
        case "UpdateRebalancesCapCapacity": {
            return new UpdateRebalancesCapCapacity();
        }
        case "UpdateRebalancesCapInterval": {
            return new UpdateRebalancesCapInterval();
        }
        case "UpdateRebalancesCapCurrentTotal": {
            return new UpdateRebalancesCapCurrentTotal();
        }
        case "UpdateSwapUnevenAuthority": {
            return new UpdateSwapUnevenAuthority();
        }
        case "UpdatePendingStrategyAdmin": {
            return new UpdatePendingStrategyAdmin();
        }
    }
}
function layout(property) {
    const ret = borsh.rustEnum([
        borsh.struct([], "UpdateDepositCap"),
        borsh.struct([], "UpdateDepositCapIxn"),
        borsh.struct([], "UpdateWithdrawalCapACapacity"),
        borsh.struct([], "UpdateWithdrawalCapAInterval"),
        borsh.struct([], "UpdateWithdrawalCapACurrentTotal"),
        borsh.struct([], "UpdateWithdrawalCapBCapacity"),
        borsh.struct([], "UpdateWithdrawalCapBInterval"),
        borsh.struct([], "UpdateWithdrawalCapBCurrentTotal"),
        borsh.struct([], "UpdateMaxDeviationBps"),
        borsh.struct([], "UpdateSwapVaultMaxSlippage"),
        borsh.struct([], "UpdateStrategyType"),
        borsh.struct([], "UpdateDepositFee"),
        borsh.struct([], "UpdateWithdrawFee"),
        borsh.struct([], "UpdateCollectFeesFee"),
        borsh.struct([], "UpdateReward0Fee"),
        borsh.struct([], "UpdateReward1Fee"),
        borsh.struct([], "UpdateReward2Fee"),
        borsh.struct([], "UpdateAdminAuthority"),
        borsh.struct([], "KaminoRewardIndex0TS"),
        borsh.struct([], "KaminoRewardIndex1TS"),
        borsh.struct([], "KaminoRewardIndex2TS"),
        borsh.struct([], "KaminoRewardIndex0RewardPerSecond"),
        borsh.struct([], "KaminoRewardIndex1RewardPerSecond"),
        borsh.struct([], "KaminoRewardIndex2RewardPerSecond"),
        borsh.struct([], "UpdateDepositBlocked"),
        borsh.struct([], "UpdateRaydiumProtocolPositionOrBaseVaultAuthority"),
        borsh.struct([], "UpdateRaydiumPoolConfigOrBaseVaultAuthority"),
        borsh.struct([], "UpdateInvestBlocked"),
        borsh.struct([], "UpdateWithdrawBlocked"),
        borsh.struct([], "UpdateLocalAdminBlocked"),
        borsh.struct([], "DeprecatedUpdateCollateralIdA"),
        borsh.struct([], "DeprecatedUpdateCollateralIdB"),
        borsh.struct([], "UpdateFlashVaultSwap"),
        borsh.struct([], "AllowDepositWithoutInvest"),
        borsh.struct([], "UpdateSwapVaultMaxSlippageFromRef"),
        borsh.struct([], "ResetReferencePrices"),
        borsh.struct([], "UpdateStrategyCreationState"),
        borsh.struct([], "UpdateIsCommunity"),
        borsh.struct([], "UpdateRebalanceType"),
        borsh.struct([], "UpdateRebalanceParams"),
        borsh.struct([], "UpdateDepositMintingMethod"),
        borsh.struct([], "UpdateLookupTable"),
        borsh.struct([], "UpdateReferencePriceType"),
        borsh.struct([], "UpdateReward0Amount"),
        borsh.struct([], "UpdateReward1Amount"),
        borsh.struct([], "UpdateReward2Amount"),
        borsh.struct([], "UpdateFarm"),
        borsh.struct([], "UpdateRebalancesCapCapacity"),
        borsh.struct([], "UpdateRebalancesCapInterval"),
        borsh.struct([], "UpdateRebalancesCapCurrentTotal"),
        borsh.struct([], "UpdateSwapUnevenAuthority"),
        borsh.struct([], "UpdatePendingStrategyAdmin"),
    ]);
    if (property !== undefined) {
        return ret.replicate(property);
    }
    return ret;
}
//# sourceMappingURL=StrategyConfigOption.js.map