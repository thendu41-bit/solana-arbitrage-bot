"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.RebalanceAutodriftParams = void 0;
const types = __importStar(require("../types")); // eslint-disable-line @typescript-eslint/no-unused-vars
const borsh = __importStar(require("@coral-xyz/borsh"));
class RebalanceAutodriftParams {
    initDriftTicksPerEpoch;
    ticksBelowMid;
    ticksAboveMid;
    frontrunMultiplierBps;
    stakingRateASource;
    stakingRateBSource;
    initDriftDirection;
    constructor(fields) {
        this.initDriftTicksPerEpoch = fields.initDriftTicksPerEpoch;
        this.ticksBelowMid = fields.ticksBelowMid;
        this.ticksAboveMid = fields.ticksAboveMid;
        this.frontrunMultiplierBps = fields.frontrunMultiplierBps;
        this.stakingRateASource = fields.stakingRateASource;
        this.stakingRateBSource = fields.stakingRateBSource;
        this.initDriftDirection = fields.initDriftDirection;
    }
    static layout(property) {
        return borsh.struct([
            borsh.u32("initDriftTicksPerEpoch"),
            borsh.i32("ticksBelowMid"),
            borsh.i32("ticksAboveMid"),
            borsh.u16("frontrunMultiplierBps"),
            types.StakingRateSource.layout("stakingRateASource"),
            types.StakingRateSource.layout("stakingRateBSource"),
            types.DriftDirection.layout("initDriftDirection"),
        ], property);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    static fromDecoded(obj) {
        return new RebalanceAutodriftParams({
            initDriftTicksPerEpoch: obj.initDriftTicksPerEpoch,
            ticksBelowMid: obj.ticksBelowMid,
            ticksAboveMid: obj.ticksAboveMid,
            frontrunMultiplierBps: obj.frontrunMultiplierBps,
            stakingRateASource: types.StakingRateSource.fromDecoded(obj.stakingRateASource),
            stakingRateBSource: types.StakingRateSource.fromDecoded(obj.stakingRateBSource),
            initDriftDirection: types.DriftDirection.fromDecoded(obj.initDriftDirection),
        });
    }
    static toEncodable(fields) {
        return {
            initDriftTicksPerEpoch: fields.initDriftTicksPerEpoch,
            ticksBelowMid: fields.ticksBelowMid,
            ticksAboveMid: fields.ticksAboveMid,
            frontrunMultiplierBps: fields.frontrunMultiplierBps,
            stakingRateASource: fields.stakingRateASource.toEncodable(),
            stakingRateBSource: fields.stakingRateBSource.toEncodable(),
            initDriftDirection: fields.initDriftDirection.toEncodable(),
        };
    }
    toJSON() {
        return {
            initDriftTicksPerEpoch: this.initDriftTicksPerEpoch,
            ticksBelowMid: this.ticksBelowMid,
            ticksAboveMid: this.ticksAboveMid,
            frontrunMultiplierBps: this.frontrunMultiplierBps,
            stakingRateASource: this.stakingRateASource.toJSON(),
            stakingRateBSource: this.stakingRateBSource.toJSON(),
            initDriftDirection: this.initDriftDirection.toJSON(),
        };
    }
    static fromJSON(obj) {
        return new RebalanceAutodriftParams({
            initDriftTicksPerEpoch: obj.initDriftTicksPerEpoch,
            ticksBelowMid: obj.ticksBelowMid,
            ticksAboveMid: obj.ticksAboveMid,
            frontrunMultiplierBps: obj.frontrunMultiplierBps,
            stakingRateASource: types.StakingRateSource.fromJSON(obj.stakingRateASource),
            stakingRateBSource: types.StakingRateSource.fromJSON(obj.stakingRateBSource),
            initDriftDirection: types.DriftDirection.fromJSON(obj.initDriftDirection),
        });
    }
    toEncodable() {
        return RebalanceAutodriftParams.toEncodable(this);
    }
}
exports.RebalanceAutodriftParams = RebalanceAutodriftParams;
//# sourceMappingURL=RebalanceAutodriftParams.js.map