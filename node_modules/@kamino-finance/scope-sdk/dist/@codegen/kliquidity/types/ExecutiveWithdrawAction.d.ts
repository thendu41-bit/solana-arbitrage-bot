import * as types from "../types";
import * as borsh from "@coral-xyz/borsh";
export interface FreezeJSON {
    kind: "Freeze";
}
export declare class Freeze {
    static readonly discriminator = 0;
    static readonly kind = "Freeze";
    readonly discriminator = 0;
    readonly kind = "Freeze";
    toJSON(): FreezeJSON;
    toEncodable(): {
        Freeze: {};
    };
}
export interface UnfreezeJSON {
    kind: "Unfreeze";
}
export declare class Unfreeze {
    static readonly discriminator = 1;
    static readonly kind = "Unfreeze";
    readonly discriminator = 1;
    readonly kind = "Unfreeze";
    toJSON(): UnfreezeJSON;
    toEncodable(): {
        Unfreeze: {};
    };
}
export interface RebalanceJSON {
    kind: "Rebalance";
}
export declare class Rebalance {
    static readonly discriminator = 2;
    static readonly kind = "Rebalance";
    readonly discriminator = 2;
    readonly kind = "Rebalance";
    toJSON(): RebalanceJSON;
    toEncodable(): {
        Rebalance: {};
    };
}
export declare function fromDecoded(obj: any): types.ExecutiveWithdrawActionKind;
export declare function fromJSON(obj: types.ExecutiveWithdrawActionJSON): types.ExecutiveWithdrawActionKind;
export declare function layout(property?: string): borsh.EnumLayout<unknown>;
//# sourceMappingURL=ExecutiveWithdrawAction.d.ts.map