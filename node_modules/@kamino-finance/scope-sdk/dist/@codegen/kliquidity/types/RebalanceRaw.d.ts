import * as types from "../types";
export interface RebalanceRawFields {
    params: Array<number>;
    state: Array<number>;
    referencePriceType: number;
}
export interface RebalanceRawJSON {
    params: Array<number>;
    state: Array<number>;
    referencePriceType: number;
}
export declare class RebalanceRaw {
    readonly params: Array<number>;
    readonly state: Array<number>;
    readonly referencePriceType: number;
    constructor(fields: RebalanceRawFields);
    static layout(property?: string): import("buffer-layout").Layout<unknown>;
    static fromDecoded(obj: any): types.RebalanceRaw;
    static toEncodable(fields: RebalanceRawFields): {
        params: number[];
        state: number[];
        referencePriceType: number;
    };
    toJSON(): RebalanceRawJSON;
    static fromJSON(obj: RebalanceRawJSON): RebalanceRaw;
    toEncodable(): {
        params: number[];
        state: number[];
        referencePriceType: number;
    };
}
//# sourceMappingURL=RebalanceRaw.d.ts.map