"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestOracle = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
const kit_1 = require("@solana/kit");
/* eslint-enable @typescript-eslint/no-unused-vars */
const bn_js_1 = __importDefault(require("bn.js")); // eslint-disable-line @typescript-eslint/no-unused-vars
const borsh = __importStar(require("@coral-xyz/borsh")); // eslint-disable-line @typescript-eslint/no-unused-vars
const programId_1 = require("../programId");
class TestOracle {
    price;
    expo;
    conf;
    publishTime;
    static discriminator = Buffer.from([
        198, 49, 63, 134, 232, 251, 168, 28,
    ]);
    static layout = borsh.struct([
        borsh.u64("price"),
        borsh.i32("expo"),
        borsh.u64("conf"),
        borsh.i64("publishTime"),
    ]);
    constructor(fields) {
        this.price = fields.price;
        this.expo = fields.expo;
        this.conf = fields.conf;
        this.publishTime = fields.publishTime;
    }
    static async fetch(rpc, address, programId = programId_1.PROGRAM_ID) {
        const info = await (0, kit_1.fetchEncodedAccount)(rpc, address);
        if (!info.exists) {
            return null;
        }
        if (info.programAddress !== programId) {
            throw new Error("account doesn't belong to this program");
        }
        return this.decode(Buffer.from(info.data));
    }
    static async fetchMultiple(rpc, addresses, programId = programId_1.PROGRAM_ID) {
        const infos = await (0, kit_1.fetchEncodedAccounts)(rpc, addresses);
        return infos.map((info) => {
            if (!info.exists) {
                return null;
            }
            if (info.programAddress !== programId) {
                throw new Error("account doesn't belong to this program");
            }
            return this.decode(Buffer.from(info.data));
        });
    }
    static decode(data) {
        if (!data.slice(0, 8).equals(TestOracle.discriminator)) {
            throw new Error("invalid account discriminator");
        }
        const dec = TestOracle.layout.decode(data.slice(8));
        return new TestOracle({
            price: dec.price,
            expo: dec.expo,
            conf: dec.conf,
            publishTime: dec.publishTime,
        });
    }
    toJSON() {
        return {
            price: this.price.toString(),
            expo: this.expo,
            conf: this.conf.toString(),
            publishTime: this.publishTime.toString(),
        };
    }
    static fromJSON(obj) {
        return new TestOracle({
            price: new bn_js_1.default(obj.price),
            expo: obj.expo,
            conf: new bn_js_1.default(obj.conf),
            publishTime: new bn_js_1.default(obj.publishTime),
        });
    }
}
exports.TestOracle = TestOracle;
//# sourceMappingURL=TestOracle.js.map