"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateFeedParam = validateFeedParam;
exports.validatePricesParam = validatePricesParam;
exports.getConfigPubkeyFromPricesParam = getConfigPubkeyFromPricesParam;
const kit_1 = require("@solana/kit");
const bs58_1 = __importDefault(require("bs58"));
const accounts_1 = require("../@codegen/scope/accounts");
const utils_1 = require("../utils");
function validateFeedParam(feedParam) {
    const { feed, config } = feedParam;
    if (feed && config) {
        throw new Error('Only one of feed or config is allowed');
    }
}
function validatePricesParam(pricesParam) {
    const { feed, config, prices } = pricesParam;
    if ((feed && config) || (feed && prices) || (config && prices)) {
        throw new Error(`Only one of feed, config, or prices is allowed. Received ${JSON.stringify(pricesParam)}`);
    }
    else if (!feed && !config && !prices) {
        throw new Error(`Must supply one of feed PDA, config pubkey, or oracle prices pubkey. Received ${JSON.stringify(pricesParam)}`);
    }
}
async function getConfigPubkeyFromPricesParam(pricesParam, rpc, programId) {
    const { feed, config, prices } = pricesParam;
    let configPubkey;
    if (feed) {
        configPubkey = await (0, utils_1.getConfigurationPda)(feed);
    }
    else if (config) {
        configPubkey = config;
    }
    else if (prices) {
        const addressEncoder = (0, kit_1.getAddressEncoder)();
        const configs = await rpc
            .getProgramAccounts(programId, {
            filters: [
                {
                    memcmp: {
                        offset: 0n,
                        bytes: bs58_1.default.encode(accounts_1.Configuration.discriminator),
                        encoding: 'base58',
                    },
                },
                {
                    memcmp: {
                        offset: 72n,
                        bytes: bs58_1.default.encode(Buffer.from(addressEncoder.encode(prices))),
                        encoding: 'base58',
                    },
                },
            ],
            encoding: 'base64',
        })
            .send();
        if (configs.length === 0) {
            throw new Error(`Could not find configuration account for prices ${prices}`);
        }
        configPubkey = configs[0].pubkey;
    }
    else {
        throw new Error('Must supply at least one of feed PDA or config pubkey, received none of those two');
    }
    return configPubkey;
}
//# sourceMappingURL=Param.js.map