"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isSwitchboardLabsQueue = exports.getSupportedNetwork = exports.getSupportedChain = exports.validateSupportedChain = void 0;
const index_js_1 = __importDefault(require("../networks/index.cjs"));
const index_js_2 = require("../networks/index.cjs");
const types_js_1 = require("../networks/types.cjs");
/**
 * Type assertion for whether the given chain is supported. Throws an error if Switchboard is not deployed on the target chain.
 * @param _chain - the target chain
 */
const validateSupportedChain = (_chain) => {
    if (!(0, index_js_2.isSupportedChain)(_chain)) {
        const supportedChainsString = `'${types_js_1.SWITCHBOARD_CHAINS.slice(0, -1).join("', '")}', or '${types_js_1.SWITCHBOARD_CHAINS[types_js_1.SWITCHBOARD_CHAINS.length - 1]}'`;
        throw new Error(`chain ${_chain} is not supported, the currently supported chains are ${supportedChainsString}`);
    }
    return _chain;
};
exports.validateSupportedChain = validateSupportedChain;
/**
 * Return the chain config for a Switchboard implementation. Throws an error if Switchboard is not deployed on the target chain.
 * @param _chain - the target chain
 */
const getSupportedChain = (_chain) => {
    const chain = (0, exports.validateSupportedChain)(_chain);
    return index_js_1.default[chain];
};
exports.getSupportedChain = getSupportedChain;
/**
 * Return the network config for a Switchboard deployment. Throws an error if Switchboard is not deployed on the target chain.
 * @param _chain - the target chain
 * @param _network - the target network
 */
const getSupportedNetwork = (_chain, _network) => {
    const chain = (0, exports.validateSupportedChain)(_chain);
    const chainConfig = index_js_1.default[chain];
    if (chain === 'solana') {
        if (_network !== 'mainnet' && _network !== 'devnet') {
            throw new Error("UnsupportedNetwork: network needs to be 'mainnet' or 'devnet'");
        }
        return chainConfig[_network];
    }
    if (chain === 'starknet') {
        const supported = new Set(['goerli', 'sepolia', 'mainnet']);
        if (supported.has(_network)) {
            const starknetNetwork = _network;
            return chainConfig[starknetNetwork];
        }
        throw new Error(`UnsupportedNetwork: '${_network}'`);
    }
    if (_network !== 'mainnet' &&
        _network !== 'testnet' &&
        _network !== 'sepolia') {
        throw new Error("UnsupportedNetwork: network needs to be 'mainnet', 'sepolia', or 'testnet'");
    }
    return chainConfig[_network];
};
exports.getSupportedNetwork = getSupportedNetwork;
/**
 * Determines whether a given chain, network, and queue is managed by SwitchboardLabs
 * @param _chain - the target chain of the queue (Ex. solana or arbitrum)
 * @param _network - the target network of the queue (Ex. mainnet or testnet)
 * @param _queue - the address of the queue
 * @returns a boolean indicating whether the queue is operated by SwitchboardLabs
 */
const isSwitchboardLabsQueue = (_chain, _network, _queue) => {
    try {
        const networkConfig = (0, exports.getSupportedNetwork)(_chain, _network);
        for (const queue of networkConfig.queues) {
            if (queue.address === _queue)
                return true;
        }
    }
    catch { } // eslint-disable-line no-empty
    return false;
};
exports.isSwitchboardLabsQueue = isSwitchboardLabsQueue;
