"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeOracleFeed = normalizeOracleFeed;
exports.serializeOracleFeed = serializeOracleFeed;
exports.deserializeOracleFeed = deserializeOracleFeed;
const protos_js_1 = require("../protos.cjs");
const index_js_1 = require("./index.cjs");
const oracle_job_js_1 = require("./oracle-job.cjs");
const buffer_1 = require("buffer");
const zod_1 = require("zod");
class OracleFeedError extends Error {
    constructor(message) {
        super(message);
        this.name = 'OracleFeedError';
        Object.setPrototypeOf(this, OracleFeedError.prototype);
    }
}
/**
 *  A schema for validating an OracleFeed definition.
 */
const oracleFeedSchema = zod_1.z.looseObject({
    jobs: zod_1.z.array(zod_1.z.any()).refine(jobs => {
        try {
            if (!index_js_1.NonEmptyArrayUtils.safeValidate(jobs)) {
                throw new Error('"jobs" property is expected to be a non-empty array');
            }
            jobs.forEach((job, idx) => {
                try {
                    (0, oracle_job_js_1.normalizeOracleJob)(job);
                }
                catch (error) {
                    const errorStr = error instanceof Error ? error.message : String(error);
                    throw new Error(`Job at index ${idx} failed validation: ${errorStr}`);
                }
            });
            return true;
        }
        catch {
            return false;
        }
    }),
});
/**
 * Normalizes and validates an OracleFeed definition
 *
 * @param feed - OracleFeed definition in various formats:
 *   - String: JSON with optional comments
 *   - IOracleFeed: Protocol buffer object
 *   - Record: Plain object with tasks array
 * @returns A validated OracleFeed instance
 * @throws {OracleFeedError} If validation fails or feed is invalid
 *
 * @remarks
 * - Handles JSON strings with both inline (//) and block (/* *\/) comments
 * - Validates task array existence and non-emptiness
 * - Performs basic OracleJob schema validation
 * - Uses regex pattern from https://regex101.com/r/B8WkuX/1 for comment stripping
 */
function normalizeOracleFeed(data) {
    const parseFeedObject = (data) => {
        if (!data)
            throw new OracleFeedError(`No job data provided: ${data}`);
        // Validate the data using the zod schema
        const validation = oracleFeedSchema.safeParse(data, {});
        if (validation.error)
            throw new OracleFeedError(validation.error.message);
        return protos_js_1.OracleFeed.fromObject(validation.data);
    };
    const parseFeedString = (jobString) => {
        // Strip comments using regex from https://regex101.com/r/B8WkuX/1
        const cleanJson = jobString.replace(/\/\*[\s\S]*?\*\/|([^\\:]|^)\/\/.*$/g, '');
        return parseFeedObject(JSON.parse(cleanJson));
    };
    return typeof data === 'string'
        ? parseFeedString(data)
        : parseFeedObject(data);
}
/**
 * Encodes an OracleFeed definition into a binary format
 *
 * @param data - OracleFeed definition in various formats:
 *   - String: JSON with optional comments
 *   - IOracleFeed: Protocol buffer object
 *   - Record: Plain object with tasks array
 * @returns Serialized OracleFeeed as Buffer
 * @throws {OracleFeedError} If validation or encoding fails
 *
 * @example
 * ```typescript
 * // From JSON string
 * const encoded1 = serializeOracleFeed(`{
 *   "jobs": [
 *     {
 *       "tasks": [
 *         {"httpTask": {"url": "https://api.coinbase.com/v2/prices/BTC-USD/spot"}}
 *       ]
 *     }
 *   ]
 * }`);
 *
 * // From plain object
 * const encoded2 = serializeOracleFeed({
 *   jobs: [
 *     {
 *       tasks: [
 *         {"httpTask": {"url": "https://api.coinbase.com/v2/prices/BTC-USD/spot"}}
 *       ]
 *     }
 *   ]
 * });
 * ```
 *
 * @remarks
 * - Uses normalizeOracleFeed() for initial validation and normalization
 * - Encodes using Protocol Buffers delimited format
 */
function serializeOracleFeed(data) {
    const feed = normalizeOracleFeed(data);
    return buffer_1.Buffer.from(protos_js_1.OracleFeed.encodeDelimited(feed).finish());
}
/**
 * Deserializes an OracleFeed from on-chain buffer data
 *
 * @param data - Serialized OracleFeed data as Buffer or Uint8Array
 * @returns A decoded OracleFeed instance
 * @throws {Error} If deserialization fails or data is invalid
 *
 * @example
 * ```typescript
 * // From Buffer
 * const buffer = Buffer.from('...'); // serialized feed data
 * const feed1 = deserializeOracleFeed(buffer);
 *
 * // From Uint8Array
 * const uint8Array = new Uint8Array([...]); // serialized feed data
 * const feed2 = deserializeOracleFeed(uint8Array);
 * ```
 *
 * @remarks
 * - Uses Protocol Buffers delimited format decoding
 * - Accepts both Node.js Buffer and Uint8Array formats
 */
function deserializeOracleFeed(data) {
    return protos_js_1.OracleFeed.decodeDelimited(data);
}
