{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/utils/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Oracle } from '../accounts/oracle.js';\nimport type { PullFeed } from '../accounts/pullFeed.js';\nimport { Queue } from '../accounts/queue.js';\nimport { AnchorUtils } from '../anchor-utils/AnchorUtils.js';\nimport {\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  SPL_TOKEN_PROGRAM_ID,\n} from '../constants.js';\n\nimport type { Program } from '@coral-xyz/anchor-31';\nimport { web3 } from '@coral-xyz/anchor-31';\nimport type { IOracleJob } from '@switchboard-xyz/common';\nimport { CrossbarClient } from '@switchboard-xyz/common';\nimport { Buffer } from 'buffer';\n\ntype Account = {\n  pubkey: web3.PublicKey;\n  loadLookupTable: () => Promise<web3.AddressLookupTableAccount>;\n};\n\nexport function createLoadLookupTables() {\n  const promiseMap: Map<\n    string,\n    Promise<web3.AddressLookupTableAccount>\n  > = new Map();\n\n  async function loadLookupTables(\n    accounts: Account[]\n  ): Promise<web3.AddressLookupTableAccount[]> {\n    for (const account of accounts) {\n      const pubkey = account.pubkey.toString();\n      if (pubkey && account.loadLookupTable) {\n        if (!promiseMap.has(pubkey)) {\n          promiseMap.set(pubkey, account.loadLookupTable());\n        }\n      }\n    }\n\n    const out: Promise<web3.AddressLookupTableAccount>[] = [];\n    for (const account of accounts) {\n      const promise = promiseMap.get(account.pubkey.toString());\n      if (promise) out.push(promise);\n    }\n    return Promise.all(out).then(arr => {\n      return arr.filter(x => Boolean(x));\n    });\n  }\n\n  return loadLookupTables;\n}\n\nexport const loadLookupTables = createLoadLookupTables();\n\n/**\n * Mainnet program and queue addresses\n *\n * These are the official Switchboard On-Demand addresses for mainnet.\n * Most applications should use the default queue rather than deploying\n * their own.\n */\n\n/** Switchboard On-Demand program ID on mainnet */\nexport const ON_DEMAND_MAINNET_PID = new web3.PublicKey(\n  'SBondMDrcV3K4kxZR1HNVT7osZxAHVHgYXL5Ze1oMUv'\n);\n\n/** Guardian queue for mainnet (internal use) */\nexport const ON_DEMAND_MAINNET_GUARDIAN_QUEUE = new web3.PublicKey(\n  'B7WgdyAgzK7yGoxfsBaNnY6d41bTybTzEh4ZuQosnvLK'\n);\n\n/** Default oracle queue on mainnet - use this for production */\nexport const ON_DEMAND_MAINNET_QUEUE = new web3.PublicKey(\n  'A43DyUGA7s8eXPxqEjJY6EBu1KKbNgfxF8h17VAHn13w'\n);\n\n/** Queue PDA (Program Derived Address) for mainnet */\nexport const ON_DEMAND_MAINNET_QUEUE_PDA =\n  web3.PublicKey.findProgramAddressSync(\n    [Buffer.from('Queue'), ON_DEMAND_MAINNET_QUEUE.toBuffer()],\n    ON_DEMAND_MAINNET_PID\n  )[0];\n\n/**\n * Devnet program and queue addresses\n *\n * These are the official Switchboard On-Demand addresses for devnet.\n * Use these for development and testing.\n */\n\n/** Switchboard On-Demand program ID on devnet */\nexport const ON_DEMAND_DEVNET_PID = new web3.PublicKey(\n  'Aio4gaXjXzJNVLtzwtNVmSqGKpANtXhybbkhtAC94ji2'\n);\n\n/** Guardian queue for devnet (internal use) */\nexport const ON_DEMAND_DEVNET_GUARDIAN_QUEUE = new web3.PublicKey(\n  'BeZ4tU4HNe2fGQGUzJmNS2UU2TcZdMUUgnCH6RPg4Dpi'\n);\n\n/** Default oracle queue on devnet - use this for testing */\nexport const ON_DEMAND_DEVNET_QUEUE = new web3.PublicKey(\n  'EYiAmGSdsQTuCw413V5BzaruWuCCSDgTPtBGvLkXHbe7'\n);\n\n/** Queue PDA for devnet (note: uses mainnet PID for compatibility) */\nexport const ON_DEMAND_DEVNET_QUEUE_PDA = web3.PublicKey.findProgramAddressSync(\n  [Buffer.from('Queue'), ON_DEMAND_DEVNET_QUEUE.toBuffer()],\n  ON_DEMAND_MAINNET_PID // SVM Devnet networks should be launched with SBond... as PID\n)[0];\n\n/**\n * Check if the connection is to the mainnet\n * @param connection - Connection: The connection\n * @returns - Promise<boolean> - Whether the connection is to the mainnet\n */\nexport async function isMainnetConnection(\n  connection: web3.Connection\n): Promise<boolean> {\n  try {\n    const genesisHash = await connection.getGenesisHash();\n    return genesisHash === '5eykt4UsFv8P8NJdTREpY1vzqKqZKvdpKuc147dw2N9d';\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Check if the connection is to the devnet\n * @param connection - Connection: The connection\n * @returns - Promise<boolean> - Whether the connection is to the devnet\n */\nexport async function isDevnetConnection(\n  connection: web3.Connection\n): Promise<boolean> {\n  try {\n    const genesisHash = await connection.getGenesisHash();\n    return genesisHash === 'EtWTRABZaYq6iMfeYKouRu166VU2xqa1wcaWoxPkrZBG';\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Get the program ID for the Switchboard program based on the connection\n * @param connection - Connection: The connection\n * @returns - Promise<PublicKey> - The program ID\n */\nexport async function getProgramId(\n  connection: web3.Connection\n): Promise<web3.PublicKey> {\n  const isDevnet = connection.rpcEndpoint.includes('devnet');\n  return isDevnet ? ON_DEMAND_DEVNET_PID : ON_DEMAND_MAINNET_PID;\n}\n\n/**\n * Get the default devnet queue for the Switchboard program\n * @param solanaRPCUrl - (optional) string: The Solana RPC URL\n * @returns - Promise<Queue> - The default devnet queue\n */\nexport async function getDefaultDevnetQueue(\n  solanaRPCUrl: string = 'https://api.devnet.solana.com'\n): Promise<Queue> {\n  return getQueue({\n    solanaRPCUrl,\n    queueAddress: ON_DEMAND_DEVNET_QUEUE.toString(),\n  });\n}\n\n/**\n * Get the default devnet guardian queue for the Switchboard program\n * @param solanaRPCUrl - (optional) string: The Solana RPC URL\n * @returns - Promise<Queue> - The default devnet guardian queue\n */\nexport async function getDefaultDevnetGuardianQueue(\n  solanaRPCUrl: string = 'https://api.devnet.solana.com'\n): Promise<Queue> {\n  return getQueue({\n    solanaRPCUrl,\n    queueAddress: ON_DEMAND_DEVNET_GUARDIAN_QUEUE.toString(),\n  });\n}\n\n/**\n * Get the default queue address for the Switchboard program on Solana.\n *\n * @param isMainnet - boolean: Whether the connection is to the mainnet\n * @returns - web3.PublicKey: The default queue address\n */\nexport function getDefaultQueueAddress(isMainnet: boolean) {\n  return isMainnet ? ON_DEMAND_MAINNET_QUEUE : ON_DEMAND_DEVNET_QUEUE;\n}\n\n/**\n * Gets the default Switchboard queue for the specified network\n *\n * Automatically detects whether you're on mainnet or devnet and returns\n * the appropriate default queue. This is the recommended way to get started\n * with Switchboard On-Demand.\n *\n * @param {string} solanaRPCUrl - Solana RPC endpoint URL (defaults to mainnet)\n * @returns {Promise<Queue>} The default queue instance\n *\n * @example\n * ```typescript\n * // Get default queue for current network\n * const queue = await getDefaultQueue();\n *\n * // Specify custom RPC\n * const queue = await getDefaultQueue('https://api.devnet.solana.com');\n * ```\n */\nexport async function getDefaultQueue(\n  solanaRPCUrl: string = web3.clusterApiUrl('mainnet-beta')\n): Promise<Queue> {\n  const connection = new web3.Connection(solanaRPCUrl, 'confirmed');\n  const isMainnet = await isMainnetConnection(connection);\n  const queueAddress = getDefaultQueueAddress(isMainnet);\n  return getQueue({ solanaRPCUrl, queueAddress });\n}\n\n/**\n * Get the default guardian queue for the Switchboard program\n * @param solanaRPCUrl - (optional) string: The Solana RPC URL\n * @returns - Promise<Queue> - The default guardian queue\n * @NOTE - SWITCHBOARD PID AND GUARDIAN QUEUE PUBKEY ARE WRONG\n */\nexport async function getDefaultGuardianQueue(\n  solanaRPCUrl: string = web3.clusterApiUrl('mainnet-beta')\n): Promise<Queue> {\n  return getQueue({\n    solanaRPCUrl,\n    queueAddress: ON_DEMAND_MAINNET_GUARDIAN_QUEUE.toString(),\n  });\n}\n\n/**\n * Get the queue for the Switchboard program\n * @param solanaRPCUrl - string: The Solana RPC URL\n * @param switchboardProgramId - string: The Switchboard program ID\n * @param queueAddress - string: The queue address\n * @returns - Promise<Queue> - The queue\n */\nexport async function getQueue(\n  params: {\n    queueAddress: string | web3.PublicKey;\n  } & ({ solanaRPCUrl: string } | { program: Program })\n): Promise<Queue> {\n  const queue = new web3.PublicKey(params.queueAddress);\n  const program =\n    'program' in params\n      ? params.program\n      : await AnchorUtils.loadProgramFromConnection(\n          new web3.Connection(params.solanaRPCUrl, 'confirmed')\n        );\n  return new Queue(program, queue);\n}\n\n/**\n * Get the unique LUT keys for the queue, all oracles in the queue, and all feeds\n * provided\n * @param queue - Queue: The queue\n * @param feeds - PullFeed[]: The feeds\n * @returns - Promise<PublicKey[]>: The unique LUT keys\n */\nexport async function fetchAllLutKeys(\n  queue: Queue,\n  feeds: PullFeed[]\n): Promise<web3.PublicKey[]> {\n  type LutOwner = {\n    loadLookupTable: () => Promise<web3.AddressLookupTableAccount>;\n  };\n\n  const oracles = await queue.fetchOracleKeys();\n  const lutOwners: LutOwner[] = [];\n  lutOwners.push(queue);\n  feeds.forEach(feed => lutOwners.push(feed));\n  oracles.forEach(oracle => lutOwners.push(new Oracle(queue.program, oracle)));\n\n  const lutPromises = lutOwners.map(lutOwner => lutOwner.loadLookupTable());\n  const luts = await Promise.all(lutPromises);\n\n  const keyset = new Set<web3.PublicKey>();\n  luts.forEach(lut => lut.state.addresses.forEach(keyset.add));\n  return Array.from(keyset).map(key => new web3.PublicKey(key));\n}\n\n/**\n * @param queue Queue pubkey as base58 string\n * @param jobs Array of jobs to store (Oracle Jobs Object)\n * @param crossbarUrl\n * @returns\n */\nexport async function storeFeed(\n  queue: string,\n  jobs: IOracleJob[],\n  crossbarUrl = CrossbarClient.default().crossbarUrl\n): Promise<{\n  cid: string;\n  feedHash: string;\n  queueHex: string;\n}> {\n  const crossbar = crossbarUrl.endsWith('/')\n    ? crossbarUrl.slice(0, -1)\n    : crossbarUrl;\n\n  const x = new CrossbarClient(crossbar);\n  return await x.store(queue, jobs);\n}\n\nexport async function getAssociatedTokenAddress(\n  mint: web3.PublicKey,\n  owner: web3.PublicKey,\n  allowOwnerOffCurve = false,\n  programId = SPL_TOKEN_PROGRAM_ID,\n  associatedTokenProgramId = SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n): Promise<web3.PublicKey> {\n  if (!allowOwnerOffCurve && !web3.PublicKey.isOnCurve(owner.toBuffer())) {\n    throw new Error('TokenOwnerOffCurveError');\n  }\n\n  const [address] = await web3.PublicKey.findProgramAddress(\n    [owner.toBuffer(), programId.toBuffer(), mint.toBuffer()],\n    associatedTokenProgramId\n  );\n\n  return address;\n}\n\nexport function getAssociatedTokenAddressSync(\n  mint: web3.PublicKey,\n  owner: web3.PublicKey,\n  allowOwnerOffCurve = false,\n  programId = SPL_TOKEN_PROGRAM_ID,\n  associatedTokenProgramId = SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n): web3.PublicKey {\n  if (!allowOwnerOffCurve && !web3.PublicKey.isOnCurve(owner.toBuffer())) {\n    throw new Error('TokenOwnerOffCurveError');\n  }\n\n  const [address] = web3.PublicKey.findProgramAddressSync(\n    [owner.toBuffer(), programId.toBuffer(), mint.toBuffer()],\n    associatedTokenProgramId\n  );\n\n  return address;\n}\n\nexport function getNodePayer(program: Program): web3.Keypair {\n  return (program.provider as any).wallet.payer; // eslint-disable-line @typescript-eslint/no-explicit-any\n}\n\n// Re-export SPL Token constants\nexport { SPL_TOKEN_PROGRAM_ID as TOKEN_PROGRAM_ID } from '../constants.js';\nexport { SOL_NATIVE_MINT as NATIVE_MINT } from '../constants.js';\n"]}