{"version":3,"file":"randomness.js","sourceRoot":"","sources":["../../../src/accounts/randomness.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  SOL_NATIVE_MINT,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  SPL_SYSVAR_SLOT_HASHES_ID,\n  SPL_TOKEN_PROGRAM_ID,\n} from '../constants.js';\nimport { InstructionUtils } from '../instruction-utils/InstructionUtils.js';\nimport { Gateway } from '../oracle-interfaces/gateway.js';\nimport * as spl from '../utils/index.js';\nimport { getLutKey, getLutSigner } from '../utils/lookupTable.js';\n\nimport { Oracle, OracleAccountData } from './oracle.js';\nimport { Queue } from './queue.js';\nimport { State } from './state.js';\n\nimport type { Program } from '@coral-xyz/anchor-31';\nimport { BN, web3 } from '@coral-xyz/anchor-31';\nimport bs58 from 'bs58';\nimport { Buffer } from 'buffer';\n\nfunction isNonSolana(queue: web3.PublicKey): boolean {\n  return (\n    queue.equals(spl.ON_DEMAND_MAINNET_QUEUE_PDA) ||\n    queue.equals(spl.ON_DEMAND_DEVNET_QUEUE_PDA)\n  );\n}\n\n/**\n * Switchboard commit-reveal randomness.\n * This account type controls commit-reveal style randomness employing\n * Intel SGX enclaves as a randomness security mechanism.\n * For this flow, a user must commit to a future slot that would be unknown\n * to all parties at the time of commitment. The user must then reveal the\n * randomness by then sending the future slot hash to the oracle which can\n * then be signed by the secret key secured within the Trusted Execution Environment.\n *\n * In this manner, the only way for one to predict the randomness is to:\n * 1. Have access to the randomness oracle\n * 2. have control of the solana network slot leader at the time of commit\n * 3. Have an unpatched Intel SGX vulnerability/advisory that the Switchboard\n *   protocol failed to auto-prune.\n */\nexport class Randomness {\n  private static getPayer(\n    program: Program,\n    payer?: web3.PublicKey\n  ): web3.PublicKey {\n    return payer ?? program.provider.publicKey ?? web3.PublicKey.default;\n  }\n\n  /**\n   * Constructs a `Randomness` instance.\n   *\n   * @param {Program} program - The Anchor program instance.\n   * @param {web3.PublicKey} pubkey - The public key of the randomness account.\n   */\n  constructor(\n    readonly program: Program,\n    readonly pubkey: web3.PublicKey\n  ) {}\n\n  /**\n   * Loads the randomness data for this {@linkcode Randomness} account from on chain.\n   *\n   * @returns {Promise<any>} A promise that resolves to the randomness data.\n   * @throws Will throw an error if the randomness account does not exist.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  async loadData(): Promise<any> {\n    return await this.program.account['randomnessAccountData'].fetch(\n      this.pubkey\n    );\n  }\n\n  /**\n   * Creates a new `Randomness` account.\n   *\n   * @param {Program} program - The Anchor program instance.\n   * @param {web3.Keypair} kp - The keypair of the new `Randomness` account.\n   * @param {web3.PublicKey} queue - The queue account to associate with the new `Randomness` account.\n   * @param {web3.PublicKey} [payer_] - The payer for the transaction. If not provided, the default payer from the program provider is used.\n   * @returns {Promise<[Randomness, web3.TransactionInstruction]>} A promise that resolves to a tuple containing the new `Randomness` account and the transaction instruction.\n   */\n  static async create(\n    program: Program,\n    kp: web3.Keypair,\n    queue: web3.PublicKey,\n    payer_?: web3.PublicKey\n  ): Promise<[Randomness, web3.TransactionInstruction]> {\n    const payer = Randomness.getPayer(program, payer_);\n\n    const lutSigner = getLutSigner(program.programId, kp.publicKey);\n    const recentSlot = await program.provider.connection.getSlot('finalized');\n    const lutKey = getLutKey(lutSigner, recentSlot);\n    const ix = program.instruction.randomnessInit(\n      {\n        recentSlot: new BN(recentSlot.toString()),\n      },\n      {\n        accounts: {\n          randomness: kp.publicKey,\n          queue,\n          authority: payer,\n          payer: payer,\n          rewardEscrow: spl.getAssociatedTokenAddressSync(\n            SOL_NATIVE_MINT,\n            kp.publicKey\n          ),\n          systemProgram: web3.SystemProgram.programId,\n          tokenProgram: SPL_TOKEN_PROGRAM_ID,\n          associatedTokenProgram: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n          wrappedSolMint: SOL_NATIVE_MINT,\n          programState: State.keyFromSeed(program),\n          lutSigner: lutSigner,\n          lut: lutKey,\n          addressLookupTableProgram: web3.AddressLookupTableProgram.programId,\n        },\n      }\n    );\n    return [new Randomness(program, kp.publicKey), ix];\n  }\n\n  /**\n   * Generate a randomness `commit` solana transaction instruction.\n   * This will commit the randomness account to use currentSlot + 1 slothash\n   * as the non-repeating randomness seed.\n   *\n   * @param {PublicKey} queue - The queue public key for the commit instruction.\n   * @param {PublicKey} [authority_] - The optional authority public key.\n   * @returns {Promise<TransactionInstruction>} A promise that resolves to the transaction instruction.\n   */\n  async commitIx(\n    queue: web3.PublicKey,\n    authority_?: web3.PublicKey,\n    oracle_?: web3.PublicKey\n  ): Promise<web3.TransactionInstruction> {\n    const queueAccount = new Queue(this.program, queue);\n    let oracle: web3.PublicKey;\n\n    // If we're on a non-Solana SVM network - we'll need the oracle address as a PDA on the target chain\n    if (oracle_) {\n      oracle = oracle_;\n    } else if (isNonSolana(queue)) {\n      const isMainnet = queue.equals(spl.ON_DEMAND_MAINNET_QUEUE_PDA);\n      const solanaQueue = await spl.getQueue({\n        program: this.program,\n        queueAddress: spl.getDefaultQueueAddress(isMainnet),\n      });\n      const solanaOracle = await solanaQueue.fetchFreshOracle();\n      [oracle] = web3.PublicKey.findProgramAddressSync(\n        [Buffer.from('Oracle'), queue.toBuffer(), solanaOracle.toBuffer()],\n        spl.ON_DEMAND_MAINNET_PID\n      );\n    } else {\n      oracle = await queueAccount.fetchFreshOracle();\n    }\n\n    const authority = authority_ ?? (await this.loadData()).authority;\n    const ix = this.program.instruction.randomnessCommit(\n      {},\n      {\n        accounts: {\n          randomness: this.pubkey,\n          queue,\n          oracle,\n          recentSlothashes: SPL_SYSVAR_SLOT_HASHES_ID,\n          authority,\n        },\n      }\n    );\n    return ix;\n  }\n\n  /**\n   * Generate a randomness `reveal` solana transaction instruction.\n   * This will reveal the randomness using the assigned oracle.\n   *\n   * @returns {Promise<web3.TransactionInstruction>} A promise that resolves to the transaction instruction.\n   */\n  async revealIx(\n    payer_?: web3.PublicKey\n  ): Promise<web3.TransactionInstruction> {\n    await new Promise(f => setTimeout(f, 3000));\n    const payer = Randomness.getPayer(this.program, payer_);\n    const data = await this.loadData();\n\n    let oracleData: OracleAccountData;\n\n    // if non-Solana SVM network - we'll need to get the solana oracle address from the oracle PDA\n    if (isNonSolana(data.queue)) {\n      const solanaOracle = await new Oracle(\n        this.program,\n        data.oracle\n      ).findSolanaOracleFromPDA();\n      oracleData = solanaOracle.oracleData;\n    } else {\n      const oracle = new Oracle(this.program, data.oracle);\n      oracleData = await oracle.loadData();\n    }\n\n    const gatewayUrl = String.fromCharCode(...oracleData.gatewayUri).replace(\n      /\\0+$/,\n      ''\n    );\n\n    const gateway = new Gateway(this.program, gatewayUrl);\n    const gatewayRevealResponse = await gateway.fetchRandomnessReveal({\n      randomnessAccount: this.pubkey,\n      slothash: bs58.encode(data.seedSlothash),\n      slot: data.seedSlot.toNumber(),\n      rpc: this.program.provider.connection.rpcEndpoint,\n    });\n    const stats = web3.PublicKey.findProgramAddressSync(\n      [Buffer.from('OracleRandomnessStats'), data.oracle.toBuffer()],\n      this.program.programId\n    )[0];\n    const ix = this.program.instruction.randomnessReveal(\n      {\n        signature: Buffer.from(gatewayRevealResponse.signature, 'base64'),\n        recoveryId: gatewayRevealResponse.recovery_id,\n        value: gatewayRevealResponse.value,\n      },\n      {\n        accounts: {\n          randomness: this.pubkey,\n          oracle: data.oracle,\n          queue: data.queue,\n          stats,\n          authority: data.authority,\n          payer,\n          recentSlothashes: SPL_SYSVAR_SLOT_HASHES_ID,\n          systemProgram: web3.SystemProgram.programId,\n          rewardEscrow: spl.getAssociatedTokenAddressSync(\n            SOL_NATIVE_MINT,\n            this.pubkey\n          ),\n          tokenProgram: SPL_TOKEN_PROGRAM_ID,\n          associatedTokenProgram: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n          wrappedSolMint: SOL_NATIVE_MINT,\n          programState: State.keyFromSeed(this.program),\n        },\n      }\n    );\n    return ix;\n  }\n\n  /**\n   * Commit and reveal randomness in a single transaction.\n   *\n   * @param {TransactionInstruction[]} callback - The callback to execute after the reveal in the same transaction.\n   * @param {Keypair[]} signers - The signers to sign the transaction.\n   * @param {PublicKey} queue - The queue public key.\n   * @param {object} [configs] - The configuration options.\n   * @param {number} [configs.computeUnitPrice] - The price per compute unit in microlamports.\n   * @param {number} [configs.computeUnitLimit] - The compute unit limit.\n   * @returns {Promise<void>} A promise that resolves when the transaction is confirmed.\n   */\n  async commitAndReveal(\n    callback: web3.TransactionInstruction[],\n    signers: web3.Keypair[],\n    queue: web3.PublicKey,\n    configs?: {\n      computeUnitPrice?: number;\n      computeUnitLimit?: number;\n    },\n    debug?: boolean\n  ): Promise<void> {\n    // In this function (because its 2 back to back transactions) we need to use the payer from the\n    // provider as the authority for the commit transaction.\n    const authority = spl.getNodePayer(this.program);\n    const computeUnitPrice = configs?.computeUnitPrice ?? 50_000;\n    const computeUnitLimit = configs?.computeUnitLimit ?? 200_000;\n    const connection = this.program.provider.connection;\n    for (;;) {\n      const data = await this.loadData();\n      if (data.seedSlot.toNumber() !== 0) {\n        if (debug) {\n          console.log('Randomness slot already committed. Jumping to reveal.');\n        }\n        break;\n      }\n      const tx = await InstructionUtils.asV0TxWithComputeIxs({\n        connection,\n        ixs: [\n          web3.ComputeBudgetProgram.setComputeUnitPrice({\n            microLamports: computeUnitPrice,\n          }),\n          await this.commitIx(queue, data.authority),\n        ],\n      });\n      tx.sign([authority]);\n      const sim = await connection.simulateTransaction(tx, {\n        commitment: 'processed',\n      });\n      if (sim.value.err !== null) {\n        if (debug) {\n          console.log('Logs', sim.value.logs);\n        }\n        throw new Error(\n          `Failed to simulate commit transaction: ${JSON.stringify(\n            sim.value.err\n          )}`\n        );\n      }\n      const sig = await connection.sendTransaction(tx, {\n        maxRetries: 2,\n        skipPreflight: true,\n      });\n      if (debug) {\n        console.log(`Commit transaction sent: ${sig}`);\n      }\n      try {\n        await connection.confirmTransaction(sig);\n        if (debug) {\n          console.log(`Commit transaction confirmed: ${sig}`);\n        }\n        break;\n      } catch {\n        if (debug) {\n          console.log('Failed to confirm commit transaction. Retrying...');\n        }\n        await new Promise(f => setTimeout(f, 1000));\n        continue;\n      }\n    }\n    await new Promise(f => setTimeout(f, 1000));\n    for (;;) {\n      const data = await this.loadData();\n      if (data.revealSlot.toNumber() !== 0) {\n        break;\n      }\n      let revealIx: web3.TransactionInstruction | undefined = undefined;\n      try {\n        revealIx = await this.revealIx(authority.publicKey);\n      } catch (e) {\n        if (debug) {\n          console.log(e);\n          console.log('Failed to grab reveal signature. Retrying...');\n        }\n        await new Promise(f => setTimeout(f, 1000));\n        continue;\n      }\n      const tx = await InstructionUtils.asV0TxWithComputeIxs({\n        connection: this.program.provider.connection,\n        ixs: [\n          web3.ComputeBudgetProgram.setComputeUnitPrice({\n            microLamports: computeUnitPrice,\n          }),\n          web3.ComputeBudgetProgram.setComputeUnitLimit({\n            units: computeUnitLimit,\n          }),\n          revealIx!,\n          ...callback,\n        ],\n      });\n\n      tx.sign([authority, ...signers]);\n      const sim = await connection.simulateTransaction(tx, {\n        commitment: 'processed',\n      });\n      if (sim.value.err !== null) {\n        if (debug) {\n          console.log('Logs', sim.value.logs);\n        }\n        throw new Error(\n          `Failed to simulate commit transaction: ${JSON.stringify(\n            sim.value.err\n          )}`\n        );\n      }\n      const sig = await connection.sendTransaction(tx, {\n        maxRetries: 2,\n        skipPreflight: true,\n      });\n      if (debug) {\n        console.log(`RevealAndCallback transaction sent: ${sig}`);\n      }\n      await connection.confirmTransaction(sig);\n      if (debug) {\n        console.log(`RevealAndCallback transaction confirmed: ${sig}`);\n      }\n    }\n  }\n\n  /**\n   * Creates a new `Randomness` account and prepares a commit transaction instruction.\n   *\n   * @param {Program} program - The Anchor program instance.\n   * @param {web3.PublicKey} queue - The queue account to associate with the new `Randomness` account.\n   * @returns {Promise<[Randomness, web3.Keypair, web3.TransactionInstruction[]]>} A promise that resolves to a tuple containing the new `Randomness` instance, the keypair, and an array of transaction instructions.\n   */\n  static async createAndCommitIxs(\n    program: Program,\n    queue: web3.PublicKey,\n    payer_?: web3.PublicKey\n  ): Promise<[Randomness, web3.Keypair, web3.TransactionInstruction[]]> {\n    const payer = Randomness.getPayer(program, payer_);\n    const accountKeypair = web3.Keypair.generate();\n    const [account, creationIx] = await Randomness.create(\n      /* program= */ program,\n      /* kp= */ accountKeypair,\n      /* queue= */ queue,\n      /* payer= */ payer\n    );\n    const commitIx = await account.commitIx(\n      /* queue= */ queue,\n      /* authority= */ payer\n    );\n\n    // TODO: Why do we return the account keypair? The authority is already set to the payer right?\n    return [account, accountKeypair, [creationIx, commitIx]];\n  }\n\n  /**\n   * Generate a randomness `close` solana transaction instruction.\n   * This will close the randomness account and return the rent to the authority.\n   *\n   * @returns {Promise<web3.TransactionInstruction>} A promise that resolves to the transaction instruction.\n   */\n  async closeIx(): Promise<web3.TransactionInstruction> {\n    const data = await this.loadData();\n    const lutSigner = getLutSigner(this.program.programId, this.pubkey);\n    const lutKey = getLutKey(lutSigner, data.lutSlot);\n\n    const ix = this.program.instruction.randomnessClose(\n      {},\n      {\n        accounts: {\n          randomness: this.pubkey,\n          rewardEscrow: spl.getAssociatedTokenAddressSync(\n            SOL_NATIVE_MINT,\n            this.pubkey\n          ),\n          authority: data.authority,\n          programState: State.keyFromSeed(this.program),\n          systemProgram: web3.SystemProgram.programId,\n          tokenProgram: SPL_TOKEN_PROGRAM_ID,\n          wrappedSolMint: SOL_NATIVE_MINT,\n          lut: lutKey,\n          lutSigner: lutSigner,\n          addressLookupTableProgram: web3.AddressLookupTableProgram.programId,\n        },\n      }\n    );\n    return ix;\n  }\n}\n"]}