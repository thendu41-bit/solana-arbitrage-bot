"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Queue = void 0;
const oracleQuote_js_1 = require("../classes/oracleQuote.js");
const constants_js_1 = require("../constants.js");
// import type { Ed25519Signature } from '../instruction-utils/Ed25519InstructionUtils.js';
const Ed25519InstructionUtils_js_1 = require("../instruction-utils/Ed25519InstructionUtils.js");
const gateway_js_1 = require("../oracle-interfaces/gateway.js");
const index_js_1 = require("../utils/index.js");
const lookupTable_js_1 = require("../utils/lookupTable.js");
const oracle_js_1 = require("./oracle.js");
const permission_js_1 = require("./permission.js");
const state_js_1 = require("./state.js");
const anchor_31_1 = require("@coral-xyz/anchor-31");
const common_1 = require("@switchboard-xyz/common");
const common_2 = require("@switchboard-xyz/common");
const axios_1 = __importDefault(require("axios"));
const buffer_1 = require("buffer");
/**
 * Queue account management for Switchboard On-Demand
 *
 * The Queue class is the primary interface for interacting with oracle operators
 * in the Switchboard network. It manages:
 *
 * - Oracle operator authorization and verification
 * - Quote fetching and signature verification
 * - Address lookup table management
 * - Gateway interactions for data retrieval
 *
 * ## Key Features
 *
 * - **Oracle Management**: Track and verify authorized oracle signers
 * - **Quote Operations**: Fetch signed data quotes from oracle operators
 * - **LUT Optimization**: Automatic address lookup table management
 * - **Network Detection**: Automatic mainnet/devnet queue selection
 *
 * @example
 * ```typescript
 * import * as sb from '@switchboard-xyz/on-demand';
 *
 * // Initialize program and connection
 * const program = anchor.workspace.SwitchboardOnDemand;
 * const connection = new Connection("https://api.devnet.solana.com");
 *
 * // Load the default queue for your network
 * const queue = await Queue.loadDefault(program);
 *
 * // Set up gateway and crossbar
 * const crossbar = sb.CrossbarClient.default();
 * const gateway = await queue.fetchGatewayFromCrossbar(crossbar);
 *
 * // Fetch a quote for specific feeds (BTC/USD and ETH/USD)
 * const feedHashes = [
 *   '0xef0d8b6fcd0104e3e75096912fc8e1e432893da4f18faedaacca7e5875da620f', // BTC/USD
 *   '0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef'  // ETH/USD
 * ];
 *
 * const sigVerifyIx = await queue.fetchQuoteIx(
 *   gateway,
 *   crossbar,
 *   feedHashes,
 *   {
 *     numSignatures: 3, // Require 3 oracle signatures for consensus
 *     variableOverrides: {},
 *     instructionIdx: 0
 *   }
 * );
 *
 * // Build and send transaction
 * const tx = await sb.asV0Tx({
 *   connection,
 *   ixs: [sigVerifyIx, yourBusinessLogicIx],
 *   signers: [payer],
 *   computeUnitPrice: 200_000,
 *   computeUnitLimitMultiple: 1.3,
 * });
 *
 * await connection.sendTransaction(tx, {
 *   preflightCommitment: "processed",
 * });
 * ```
 *
 * @class Queue
 */
class Queue {
    /**
     * Loads the default queue for the current network
     *
     * Automatically detects whether you're on mainnet or devnet and loads
     * the appropriate default queue. This is the recommended way to get
     * started with Switchboard On-Demand.
     *
     * @param {Program} program - Anchor program instance
     * @returns {Promise<Queue>} The default queue for your network
     *
     * @example
     * ```typescript
     * const queue = await Queue.loadDefault(program);
     * console.log('Using queue:', queue.pubkey.toBase58());
     * ```
     */
    static loadDefault(program) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const queue = new Queue(program, Queue.DEFAULT_MAINNET_KEY);
                yield queue.loadData();
                return queue;
            }
            catch (_a) {
                // do nothing
            }
            const queue = new Queue(program, Queue.DEFAULT_DEVNET_KEY);
            return queue;
        });
    }
    /**
     * Fetches a gateway URL from the Crossbar network
     *
     * The gateway is the interface to oracle operators. This method
     * automatically detects your network and returns an appropriate
     * gateway for fetching oracle data. The gateway is cached after
     * the first successful fetch and reused for subsequent calls.
     *
     * @param {CrossbarClient} crossbar - Crossbar client instance
     * @returns {Promise<Gateway>} Gateway instance for oracle communication
     *
     * @example
     * ```typescript
     * const crossbar = CrossbarClient.default();
     * const gateway = await queue.fetchGatewayFromCrossbar(crossbar);
     * ```
     */
    fetchGatewayFromCrossbar(crossbar) {
        return __awaiter(this, void 0, void 0, function* () {
            // Return cached gateway if available
            if (this.cachedGateway) {
                return this.cachedGateway;
            }
            let network = 'mainnet';
            try {
                const queue = new Queue(this.program, Queue.DEFAULT_MAINNET_KEY);
                yield queue.loadData();
            }
            catch (_a) {
                network = 'devnet';
            }
            const gatewayUrls = yield crossbar.fetchGateways(network);
            if (!gatewayUrls || gatewayUrls.length === 0) {
                throw new Error(`No gateways available for network: ${network}`);
            }
            const gatewayUrl = gatewayUrls[0];
            if (!gatewayUrl) {
                throw new Error(`Invalid gateway URL received for network: ${network}`);
            }
            const gateway = new gateway_js_1.Gateway(this.program, gatewayUrl);
            // Cache the gateway for future use
            this.cachedGateway = gateway;
            return gateway;
        });
    }
    /**
     * Fetches a gateway with the latest/majority version from Crossbar
     *
     * @param crossbar - CrossbarClient instance
     * @returns Promise<Gateway> - Gateway instance with the latest version
     */
    fetchGatewayByLatestVersion(crossbar) {
        return __awaiter(this, void 0, void 0, function* () {
            let network = 'mainnet';
            try {
                const queue = new Queue(this.program, Queue.DEFAULT_MAINNET_KEY);
                yield queue.loadData();
            }
            catch (_a) {
                network = 'devnet';
            }
            const gatewayUrls = yield crossbar.fetchGateways(network);
            const gatewayHealths = [];
            // Check health of all gateways
            for (const gatewayUrl of gatewayUrls) {
                try {
                    const healthUrl = `${gatewayUrl}/gateway/api/v1/test`;
                    const response = yield axios_1.default.get(healthUrl);
                    const health = response.data;
                    gatewayHealths.push({
                        url: gatewayUrl,
                        health,
                        version: health.version || 'unknown',
                    });
                }
                catch (error) {
                    console.warn(`Failed to fetch health for gateway ${gatewayUrl}:`, error);
                }
            }
            // Find majority version
            const versionCounts = new Map();
            gatewayHealths.forEach(({ version }) => {
                versionCounts.set(version, (versionCounts.get(version) || 0) + 1);
            });
            let majorityVersion = 'unknown';
            let maxCount = 0;
            for (const [version, count] of versionCounts.entries()) {
                if (count > maxCount) {
                    maxCount = count;
                    majorityVersion = version;
                }
            }
            // Find all gateways with majority version
            const majorityGateways = gatewayHealths.filter(g => g.version === majorityVersion);
            if (majorityGateways.length === 0) {
                throw new Error('No healthy gateways found');
            }
            // Randomly select from majority version gateways
            const randomIndex = Math.floor(Math.random() * majorityGateways.length);
            const selectedGateway = majorityGateways[randomIndex];
            const gateway = new gateway_js_1.Gateway(this.program, selectedGateway.url);
            return gateway;
        });
    }
    /**
     * Fetches an oracle with the latest/majority version from Crossbar
     *
     * @param crossbar - CrossbarClient instance
     * @returns Promise<string> - Oracle URL with the latest version
     */
    fetchOracleByLatestVersion(crossbar) {
        return __awaiter(this, void 0, void 0, function* () {
            let network = 'mainnet';
            try {
                const queue = new Queue(this.program, Queue.DEFAULT_MAINNET_KEY);
                yield queue.loadData();
            }
            catch (_a) {
                network = 'devnet';
            }
            const gatewayUrls = yield crossbar.fetchGateways(network);
            const oracleHealths = [];
            // Check health of all oracles (using gateway URLs but oracle endpoint)
            for (const gatewayUrl of gatewayUrls) {
                try {
                    const healthUrl = `${gatewayUrl}/oracle/api/v1/test`;
                    const response = yield axios_1.default.get(healthUrl);
                    const health = response.data;
                    oracleHealths.push({
                        url: gatewayUrl,
                        health,
                        version: health.version || 'unknown',
                    });
                }
                catch (error) {
                    console.warn(`Failed to fetch oracle health for ${gatewayUrl}:`, error);
                }
            }
            // Find majority version
            const versionCounts = new Map();
            oracleHealths.forEach(({ version }) => {
                versionCounts.set(version, (versionCounts.get(version) || 0) + 1);
            });
            let majorityVersion = 'unknown';
            let maxCount = 0;
            for (const [version, count] of versionCounts.entries()) {
                if (count > maxCount) {
                    maxCount = count;
                    majorityVersion = version;
                }
            }
            // Find all oracles with majority version
            const majorityOracles = oracleHealths.filter(o => o.version === majorityVersion);
            if (majorityOracles.length === 0) {
                throw new Error('No healthy oracles found');
            }
            // Randomly select from majority version oracles
            const randomIndex = Math.floor(Math.random() * majorityOracles.length);
            const selectedOracle = majorityOracles[randomIndex];
            return selectedOracle.url;
        });
    }
    /**
     * Creates a new queue account
     *
     * @param {Program} program - Anchor program instance
     * @param {Object} params - Queue configuration parameters
     * @returns {Promise<[Queue, web3.Keypair, web3.TransactionInstruction]>}
     *          Tuple of [Queue instance, keypair, creation instruction]
     */
    static createIx(program, params) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d, _e, _f, _g;
            const queue = anchor_31_1.web3.Keypair.generate();
            const allowAuthorityOverrideAfter = (_a = params.allowAuthorityOverrideAfter) !== null && _a !== void 0 ? _a : 60 * 60;
            const requireAuthorityHeartbeatPermission = (_b = params.requireAuthorityHeartbeatPermission) !== null && _b !== void 0 ? _b : true;
            const requireUsagePermission = (_c = params.requireUsagePermission) !== null && _c !== void 0 ? _c : false;
            const maxQuoteVerificationAge = (_d = params.maxQuoteVerificationAge) !== null && _d !== void 0 ? _d : 60 * 60 * 24 * 7;
            const reward = (_e = params.reward) !== null && _e !== void 0 ? _e : 1000000;
            const nodeTimeout = (_f = params.nodeTimeout) !== null && _f !== void 0 ? _f : 300;
            const payer = (0, index_js_1.getNodePayer)(program);
            // Prepare accounts for the transaction
            const lutSigner = (0, lookupTable_js_1.getLutSigner)(program.programId, queue.publicKey);
            const recentSlot = (_g = params.lutSlot) !== null && _g !== void 0 ? _g : (yield program.provider.connection.getSlot('finalized'));
            const lutKey = (0, lookupTable_js_1.getLutKey)(lutSigner, recentSlot);
            const ix = yield program.instruction.queueInit({
                allowAuthorityOverrideAfter,
                requireAuthorityHeartbeatPermission,
                requireUsagePermission,
                maxQuoteVerificationAge,
                reward,
                nodeTimeout,
                recentSlot: new anchor_31_1.BN(recentSlot),
            }, {
                accounts: {
                    queue: queue.publicKey,
                    queueEscrow: yield (0, index_js_1.getAssociatedTokenAddress)(constants_js_1.SOL_NATIVE_MINT, queue.publicKey),
                    authority: payer.publicKey,
                    payer: payer.publicKey,
                    systemProgram: anchor_31_1.web3.SystemProgram.programId,
                    tokenProgram: constants_js_1.SPL_TOKEN_PROGRAM_ID,
                    nativeMint: constants_js_1.SOL_NATIVE_MINT,
                    programState: state_js_1.State.keyFromSeed(program),
                    lutSigner: lutSigner,
                    lut: lutKey,
                    addressLookupTableProgram: anchor_31_1.web3.AddressLookupTableProgram.programId,
                    associatedTokenProgram: constants_js_1.SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,
                },
                signers: [payer, queue],
            });
            return [new Queue(program, queue.publicKey), queue, ix];
        });
    }
    /**
     * Creates a new instance of the `Queue` account with a PDA for SVM (non-solana) chains.
     * @param program The anchor program instance.
     * @param params The initialization parameters for the queue.
     * @returns
     */
    static createIxSVM(program, params) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d, _e, _f, _g;
            // Generate the queue PDA for the given source queue key
            const [queue] = anchor_31_1.web3.PublicKey.findProgramAddressSync([buffer_1.Buffer.from('Queue'), params.sourceQueueKey.toBuffer()], program.programId);
            const allowAuthorityOverrideAfter = (_a = params.allowAuthorityOverrideAfter) !== null && _a !== void 0 ? _a : 60 * 60;
            const requireAuthorityHeartbeatPermission = (_b = params.requireAuthorityHeartbeatPermission) !== null && _b !== void 0 ? _b : true;
            const requireUsagePermission = (_c = params.requireUsagePermission) !== null && _c !== void 0 ? _c : false;
            const maxQuoteVerificationAge = (_d = params.maxQuoteVerificationAge) !== null && _d !== void 0 ? _d : 60 * 60 * 24 * 7;
            const reward = (_e = params.reward) !== null && _e !== void 0 ? _e : 1000000;
            const nodeTimeout = (_f = params.nodeTimeout) !== null && _f !== void 0 ? _f : 300;
            const payer = (0, index_js_1.getNodePayer)(program);
            // Prepare accounts for the transaction
            const lutSigner = (0, lookupTable_js_1.getLutSigner)(program.programId, queue);
            const recentSlot = (_g = params.lutSlot) !== null && _g !== void 0 ? _g : (yield program.provider.connection.getSlot('finalized'));
            const lutKey = (0, lookupTable_js_1.getLutKey)(lutSigner, recentSlot);
            const ix = program.instruction.queueInitSvm({
                allowAuthorityOverrideAfter,
                requireAuthorityHeartbeatPermission,
                requireUsagePermission,
                maxQuoteVerificationAge,
                reward,
                nodeTimeout,
                recentSlot: new anchor_31_1.BN(recentSlot),
                sourceQueueKey: params.sourceQueueKey,
            }, {
                accounts: {
                    queue: queue,
                    queueEscrow: yield (0, index_js_1.getAssociatedTokenAddress)(constants_js_1.SOL_NATIVE_MINT, queue, true),
                    authority: payer.publicKey,
                    payer: payer.publicKey,
                    systemProgram: anchor_31_1.web3.SystemProgram.programId,
                    tokenProgram: constants_js_1.SPL_TOKEN_PROGRAM_ID,
                    nativeMint: constants_js_1.SOL_NATIVE_MINT,
                    programState: state_js_1.State.keyFromSeed(program),
                    lutSigner: lutSigner,
                    lut: lutKey,
                    addressLookupTableProgram: anchor_31_1.web3.AddressLookupTableProgram.programId,
                    associatedTokenProgram: constants_js_1.SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,
                },
                signers: [payer],
            });
            return [new Queue(program, queue), ix];
        });
    }
    /**
     * Add an Oracle to a queue and set permissions
     * @param program
     * @param params
     */
    overrideSVM(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const stateKey = state_js_1.State.keyFromSeed(this.program);
            const { authority } = yield this.loadData();
            const ix = this.program.instruction.queueOverrideSvm({
                secp256K1Signer: Array.from(params.secp256k1Signer),
                maxQuoteVerificationAge: new anchor_31_1.BN(params.maxQuoteVerificationAge),
                mrEnclave: params.mrEnclave,
                slot: new anchor_31_1.BN(params.slot),
            }, {
                accounts: {
                    queue: this.pubkey,
                    oracle: params.oracle,
                    authority,
                    state: stateKey,
                },
            });
            return ix;
        });
    }
    /**
     *  Fetches signatures from a random gateway on the queue.
     *
     *  REST API endpoint: /api/v1/fetch_signatures
     *
     *  @param recentHash The chain metadata to sign with. Blockhash or slothash.
     *  @param jobs The oracle jobs to perform.
     *  @param numSignatures The number of oracles to fetch signatures from.
     *  @param variableOverrides Optional variable overrides for task execution (e.g., {"API_KEY": "custom-key"})
     *  @returns A promise that resolves to the feed evaluation responses.
     *  @throws if the request fails.
     */
    static fetchSignatures(program, params) {
        return __awaiter(this, void 0, void 0, function* () {
            const queueAccount = new Queue(program, params.queue);
            return queueAccount.fetchSignatures(params);
        });
    }
    static fetchSignaturesMulti(program, params) {
        return __awaiter(this, void 0, void 0, function* () {
            const queueAccount = new Queue(program, params.queue);
            return queueAccount.fetchSignaturesMulti(params);
        });
    }
    static fetchSignaturesBatch(program, params) {
        return __awaiter(this, void 0, void 0, function* () {
            const queueAccount = new Queue(program, params.queue);
            return queueAccount.fetchSignaturesBatch(params);
        });
    }
    static fetchSignaturesConsensus(program, params) {
        return __awaiter(this, void 0, void 0, function* () {
            const queueAccount = new Queue(program, params.queue);
            return queueAccount.fetchSignaturesConsensus({
                gateway: params.gateway,
                feedConfigs: params.feedConfigs,
                useTimestamp: params.useTimestamp,
                numSignatures: params.numSignatures,
                useEd25519: params.useEd25519,
                variableOverrides: params.variableOverrides,
            });
        });
    }
    /**
     * @deprecated
     * Deprecated. Use {@linkcode @switchboard-xyz/common#FeedHash.compute} instead.
     */
    static fetchFeedHash(program, params) {
        return __awaiter(this, void 0, void 0, function* () {
            const queueAccount = new Queue(program, params.queue);
            const oracleSigs = yield queueAccount.fetchSignatures(params);
            return buffer_1.Buffer.from(oracleSigs[0].feed_hash, 'hex');
        });
    }
    /**
     *  Constructs a `OnDemandQueue` instance.
     *
     *  @param program The Anchor program instance.
     *  @param pubkey The public key of the queue account.
     */
    constructor(program, pubkey) {
        this.program = program;
        this.pubkey = pubkey;
        this.data = null;
        this.lookupTable = null;
        this.lookupTableRefreshTime = 0;
        this.cachedGateway = null;
        if (this.pubkey === undefined) {
            throw new Error('NoPubkeyProvided');
        }
    }
    /**
     *  Loads the queue data from on chain and returns the listed oracle keys.
     *
     *  @returns A promise that resolves to an array of oracle public keys.
     */
    fetchOracleKeys() {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.loadData();
            const oracles = data.oracleKeys.slice(0, data.oracleKeysLen);
            return oracles;
        });
    }
    /**
     *  Loads the queue data from on chain and returns the listed gateways.
     *
     *  @returns A promise that resolves to an array of gateway URIs.
     */
    fetchAllGateways() {
        return __awaiter(this, void 0, void 0, function* () {
            console.warn('Obsolete: please use fetchGatewayFromCrossbar');
            const program = this.program;
            const oracles = yield this.fetchOracleKeys();
            const oracleAccounts = yield oracle_js_1.Oracle.loadMany(program, oracles);
            const gatewayUris = oracleAccounts
                .map(oracleAccount => oracleAccount ? (0, common_2.toUtf8)(oracleAccount.gatewayUri) : '')
                .filter(gatewayUri => gatewayUri.length > 0)
                .filter(gatewayUri => !gatewayUri.includes('infstones'));
            const tests = [];
            for (const i in gatewayUris) {
                const gw = new gateway_js_1.Gateway(program, gatewayUris[i], oracles[i]);
                tests.push({ gateway: gw, promise: gw.test() });
            }
            let gateways = [];
            for (const test of tests) {
                try {
                    const { gateway, promise } = test;
                    // Test gateways to see if they are good. Timeout after 2 seconds.
                    const isGood = yield common_2.AsyncUtils.promiseWithTimeout(2000, promise);
                    if (!isGood)
                        continue;
                    // If the gateway is good, add it to the list
                    gateways.push(gateway);
                }
                catch (e) {
                    console.log('Timeout', e);
                }
            }
            gateways = gateways.sort(() => Math.random() - 0.5);
            return gateways;
        });
    }
    /**
     * Fetches a gateway interface for interacting with oracle nodes.
     *
     * @param gatewayUrl - Optional URL of a specific gateway to use. If not provided,
     *                     a random gateway will be selected from the queue's available gateways.
     * @returns Gateway - A Gateway instance for making oracle requests
     * @throws {Error} If no gateways are available on the queue when selecting randomly
     */
    fetchGateway(gatewayUrl) {
        return __awaiter(this, void 0, void 0, function* () {
            if (gatewayUrl)
                return new gateway_js_1.Gateway(this.program, gatewayUrl);
            const gateways = yield this.fetchAllGateways();
            if (gateways.length === 0)
                throw new Error('NoGatewayAvailable');
            return gateways[Math.floor(Math.random() * gateways.length)];
        });
    }
    /**
     *  Fetches signatures from a random gateway on the queue.
     *
     *  REST API endpoint: /api/v1/fetch_signatures
     *
     *  @param gateway The gateway to fetch signatures from. If not provided, a gateway will be automatically selected.
     *  @param recentHash The chain metadata to sign with. Blockhash or slothash.
     *  @param jobs The oracle jobs to perform.
     *  @param numSignatures The number of oracles to fetch signatures from.
     *  @param maxVariance The maximum variance allowed in the responses.
     *  @param minResponses The minimum number of responses to attempt to fetch.
     *  @param variableOverrides Optional variable overrides for task execution (e.g., {"API_KEY": "custom-key"})
     *  @returns A promise that resolves to the feed evaluation responses.
     *  @throws if the request fails.
     */
    fetchSignatures(params) {
        return __awaiter(this, void 0, void 0, function* () {
            let gateway;
            if (!params.gateway) {
                gateway = yield this.fetchGateway();
            }
            else if (params.gateway instanceof gateway_js_1.Gateway) {
                gateway = params.gateway;
            }
            else {
                gateway = new gateway_js_1.Gateway(this.program, params.gateway);
            }
            return yield gateway.fetchSignatures({
                recentHash: params.recentHash,
                jobs: params.jobs,
                numSignatures: params.numSignatures,
                maxVariance: params.maxVariance,
                minResponses: params.minResponses,
                useTimestamp: params.useTimestamp,
                variableOverrides: params.variableOverrides,
            });
        });
    }
    fetchSignaturesMulti(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const gateway = yield this.fetchGateway(params.gateway);
            return yield gateway.fetchSignaturesMulti({
                recentHash: params.recentHash,
                feedConfigs: params.feedConfigs,
                numSignatures: params.numSignatures,
                useTimestamp: params.useTimestamp,
                variableOverrides: params.variableOverrides,
            });
        });
    }
    fetchSignaturesConsensus(params) {
        return __awaiter(this, void 0, void 0, function* () {
            let gateway;
            if (!params.gateway) {
                gateway = yield this.fetchGateway();
            }
            else if (params.gateway instanceof gateway_js_1.Gateway) {
                gateway = params.gateway;
            }
            else {
                gateway = new gateway_js_1.Gateway(this.program, params.gateway);
            }
            return yield gateway.fetchSignaturesConsensus({
                feedConfigs: params.feedConfigs,
                useTimestamp: params.useTimestamp,
                numSignatures: params.numSignatures,
                useEd25519: params.useEd25519,
                variableOverrides: params.variableOverrides,
            });
        });
    }
    fetchSignaturesBatch(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const gateway = yield this.fetchGateway(params.gateway);
            return yield gateway.fetchSignaturesBatch({
                recentHash: params.recentHash,
                feedConfigs: params.feedConfigs,
                numSignatures: params.numSignatures,
                useTimestamp: params.useTimestamp,
                variableOverrides: params.variableOverrides,
            });
        });
    }
    /**
     *  Loads the queue data for this {@linkcode Queue} account from on chain.
     *
     *  @returns A promise that resolves to the queue data.
     *  @throws if the queue account does not exist.
     */
    static loadData(program, pubkey) {
        return program.account['queueAccountData'].fetch(pubkey);
    }
    /**
     *  Loads the queue data for this {@linkcode Queue} account from on chain.
     *
     *  @returns A promise that resolves to the queue data.
     *  @throws if the queue account does not exist.
     */
    loadData() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.data === null || this.data === undefined) {
                this.data = yield Queue.loadData(this.program, this.pubkey);
            }
            return this.data;
        });
    }
    /**
     *  Adds a new MR enclave to the queue.
     *  This will allow the queue to accept signatures from the given MR enclave.
     *  @param mrEnclave The MR enclave to add.
     *  @returns A promise that resolves to the transaction instruction.
     *  @throws if the request fails.
     *  @throws if the MR enclave is already added.
     *  @throws if the MR enclave is invalid.
     *  @throws if the MR enclave is not a valid length.
     */
    addMrEnclaveIx(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const stateKey = state_js_1.State.keyFromSeed(this.program);
            const state = yield state_js_1.State.loadData(this.program);
            const programAuthority = state.authority;
            const { authority } = yield this.loadData();
            const ix = yield this.program.instruction.queueAddMrEnclave({ mrEnclave: params.mrEnclave }, {
                accounts: {
                    queue: this.pubkey,
                    authority,
                    programAuthority,
                    state: stateKey,
                },
            });
            return ix;
        });
    }
    /**
     *  Removes an MR enclave from the queue.
     *  This will prevent the queue from accepting signatures from the given MR enclave.
     *  @param mrEnclave The MR enclave to remove.
     *  @returns A promise that resolves to the transaction instruction.
     *  @throws if the request fails.
     *  @throws if the MR enclave is not present.
     */
    rmMrEnclaveIx(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const stateKey = state_js_1.State.keyFromSeed(this.program);
            const state = yield state_js_1.State.loadData(this.program);
            const programAuthority = state.authority;
            const { authority } = yield this.loadData();
            const ix = yield this.program.instruction.queueRemoveMrEnclave({ mrEnclave: params.mrEnclave }, {
                accounts: {
                    queue: this.pubkey,
                    authority,
                    programAuthority,
                    state: stateKey,
                },
            });
            return ix;
        });
    }
    /**
     * Sets the queue configurations.
     * @param params.authority The new authority for the queue.
     * @param params.reward The new reward for the queue.
     * @param params.nodeTimeout The new node timeout for the queue.
     * @returns A promise that resolves to the transaction instruction.
     */
    setConfigsIx(params) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const data = yield this.loadData();
            const stateKey = state_js_1.State.keyFromSeed(this.program);
            const nodeTimeout = params.nodeTimeout ? new anchor_31_1.BN(params.nodeTimeout) : null;
            const ix = yield this.program.instruction.queueSetConfigs({
                authority: (_a = params.authority) !== null && _a !== void 0 ? _a : null,
                reward: (_b = params.reward) !== null && _b !== void 0 ? _b : null,
                nodeTimeout: nodeTimeout,
            }, {
                accounts: {
                    queue: this.pubkey,
                    authority: data.authority,
                    state: stateKey,
                },
            });
            return ix;
        });
    }
    setNcnIx(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.loadData();
            const authority = data.authority;
            const state = state_js_1.State.keyFromSeed(this.program);
            return this.program.instruction.queueSetNcn({}, {
                accounts: {
                    queue: this.pubkey,
                    authority,
                    state,
                    ncn: params.ncn,
                },
            });
        });
    }
    setVaultIx(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.loadData();
            const authority = data.authority;
            const state = state_js_1.State.keyFromSeed(this.program);
            const ncn = data.ncn;
            return this.program.instruction.queueSetVault({
                enable: params.enable,
            }, {
                accounts: {
                    queue: this.pubkey,
                    authority,
                    state,
                    ncn,
                    vault: params.vault,
                },
            });
        });
    }
    allowSubsidyIx(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.loadData();
            const authority = data.authority;
            const state = state_js_1.State.keyFromSeed(this.program);
            return this.program.instruction.queueAllowSubsidies({
                allowSubsidies: params.enable,
            }, {
                accounts: {
                    queue: this.pubkey,
                    authority,
                    state,
                },
            });
        });
    }
    /**
     * Sets the oracle permission on the queue.
     * @param params.oracle The oracle to set the permission for.
     * @param params.permission The permission to set.
     * @param params.enabled Whether the permission is enabled.
     * @returns A promise that resolves to the transaction instruction   */
    setOraclePermissionIx(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.loadData();
            return permission_js_1.Permission.setIx(this.program, {
                authority: data.authority,
                grantee: params.oracle,
                granter: this.pubkey,
                permission: params.permission,
                enable: params.enable,
            });
        });
    }
    /**
     *  Removes all MR enclaves from the queue.
     *  @returns A promise that resolves to an array of transaction instructions.
     *  @throws if the request fails.
     */
    rmAllMrEnclaveIxs() {
        return __awaiter(this, void 0, void 0, function* () {
            const { mrEnclaves, mrEnclavesLen } = yield this.loadData();
            const activeEnclaves = mrEnclaves.slice(0, mrEnclavesLen);
            const ixs = [];
            for (const mrEnclave of activeEnclaves) {
                ixs.push(yield this.rmMrEnclaveIx({ mrEnclave }));
            }
            return ixs;
        });
    }
    /**
     *  Fetches most recently added and verified Oracle Key.
     *  @returns A promise that resolves to an oracle public key.
     *  @throws if the request fails.
     */
    fetchFreshOracle() {
        return __awaiter(this, void 0, void 0, function* () {
            const now = Math.floor(+new Date() / 1000);
            const oracles = yield this.fetchOracleKeys();
            const oracleAccounts = yield oracle_js_1.Oracle.loadMany(this.program, oracles);
            const oracleUris = oracleAccounts
                .map(data => (0, common_2.toUtf8)(data.gatewayUri))
                .filter(gatewayUri => gatewayUri.length);
            const tests = [];
            for (const i in oracleUris) {
                const gw = new gateway_js_1.Gateway(this.program, oracleUris[i], oracles[i]);
                tests.push(gw.test());
            }
            const zip = [];
            for (let i = 0; i < oracles.length; i++) {
                try {
                    // Test gateways to see if they are good. Timeout after 2 seconds.
                    const isGood = yield common_2.AsyncUtils.promiseWithTimeout(4000, tests[i]);
                    if (!isGood)
                        continue;
                }
                catch (_a) {
                    // console.log('Gateway Timeout', e);
                }
                zip.push({ data: oracleAccounts[i], key: oracles[i] });
            }
            const validOracles = zip
                .filter(x => x.data.enclave.verificationStatus === 4) // value 4 is for verified
                .filter(x => x.data.enclave.validUntil.gt(new anchor_31_1.BN(now + 3600))); // valid for 1 hour at least
            if (validOracles.length === 0)
                throw new Error('NoValidOracles');
            const chosen = validOracles[Math.floor(Math.random() * validOracles.length)];
            return chosen.key;
        });
    }
    /**
     * Get the PDA for the queue (SVM chains that are not solana)
     * @returns Queue PDA Pubkey
     */
    queuePDA() {
        return Queue.queuePDA(this.program, this.pubkey);
    }
    /**
     * Get the PDA for the queue (SVM chains that are not solana)
     * @param program Anchor program
     * @param pubkey Queue pubkey
     * @returns Queue PDA Pubkey
     */
    static queuePDA(program, pubkey) {
        const [queuePDA] = anchor_31_1.web3.PublicKey.findProgramAddressSync([buffer_1.Buffer.from('Queue'), pubkey.toBuffer()], program.programId);
        return queuePDA;
    }
    // auto refresh lookup table if it is older than 5 minutes
    loadLookupTable() {
        return __awaiter(this, void 0, void 0, function* () {
            const now = Date.now();
            if (this.lookupTable && now - this.lookupTableRefreshTime < 5 * 60 * 1000) {
                return this.lookupTable;
            }
            const data = yield this.loadData();
            const lutSigner = (0, lookupTable_js_1.getLutSigner)(this.program.programId, this.pubkey);
            const lutKey = (0, lookupTable_js_1.getLutKey)(lutSigner, data.lutSlot);
            const accnt = yield this.program.provider.connection.getAddressLookupTable(lutKey);
            this.lookupTable = accnt.value;
            return accnt.value;
        });
    }
    /**
     * @deprecated Use {@link fetchQuoteIx} instead. The bundle terminology has been replaced with quote terminology.
     *
     * Fetches oracle bundle and creates verification instruction
     *
     * This is the primary method for fetching oracle data in the bundle approach.
     * It retrieves signed price data from oracle operators and creates the
     * instruction to verify signatures on-chain.
     *
     * @param {Gateway} gateway - Gateway instance for oracle communication
     * @param {CrossbarClient} crossbar - Crossbar client for data routing
     * @param {string[]} feedHashes - Array of feed hashes to fetch (hex strings)
     * @param {object} configs - Configuration object with optional parameters
     * @param {Record<string, string>} [configs.variableOverrides] - Variable overrides for feed processing
     * @param {number} [configs.numSignatures] - Number of oracle signatures required
     * @param {number} [configs.instructionIdx] - Instruction index for Ed25519 instruction
     * @returns {Promise<web3.TransactionInstruction>}
     *          Signature verification instruction
     *
     * @example
     * ```typescript
     * // Fetch prices for BTC and ETH
     * const sigVerifyIx = await queue.fetchUpdateBundleIx(
     *   gateway,
     *   crossbar,
     *   ['0x1234...', '0x5678...'], // Feed hashes
     *   {
     *     numSignatures: 3, // Require 3 oracle signatures
     *     variableOverrides: {},
     *     instructionIdx: 0
     *   }
     * );
     *
     * // Use in your transaction
     * const tx = await asV0Tx({
     *   connection,
     *   ixs: [sigVerifyIx, yourProgramIx],
     *   signers: [payer],
     * });
     * ```
     */
    fetchUpdateBundleIx(crossbar, feedHashes, configs) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.fetchQuoteIx(crossbar, feedHashes, configs !== null && configs !== void 0 ? configs : {
                gateway: undefined,
                variableOverrides: {},
                numSignatures: 1,
                instructionIdx: 0,
            });
        });
    }
    /**
     * Fetches oracle quote and creates verification instruction
     *
     * This is the primary method for fetching oracle data in the quote approach.
     * It retrieves signed price data from oracle operators and creates the
     * instruction to verify signatures on-chain.
     *
     * ## Key Features
     * - **Aggregated Data**: Fetches multiple feeds in a single request
     * - **Consensus Verification**: Requires specified number of oracle signatures
     * - **Ed25519 Signatures**: Uses efficient signature verification on-chain
     * - **Cost Effective**: ~90% lower costs compared to individual feed updates
     * - **Production Ready**: Handles error cases and validation
     * - **Feed Format Flexibility**: Accepts either feed hashes (strings) or OracleFeed objects
     *
     * ## Security Considerations
     * - Always use multiple signatures for high-value operations
     * - Validate feed hashes match your expected data sources
     * - Consider oracle staking and reputation when choosing consensus levels
     *
     * @param {Gateway} gateway - Gateway instance for oracle communication
     * @param {CrossbarClient} crossbar - Crossbar client for data routing
     * @param {string[] | IOracleFeed[]} feedHashesOrFeeds - Array of feed hashes (hex strings) or array of OracleFeed objects (max 16 feeds)
     * @param {number} numSignatures - Number of oracle signatures required (default: 1, max 255)
     * @param {number} instructionIdx - Instruction index for Ed25519 program (default: 0)
     * @returns {Promise<web3.TransactionInstruction>}
     *          Ed25519 signature verification instruction ready for transaction
     *
     * @throws {Error} When no oracle responses are available
     * @throws {Error} When oracle index is out of bounds (>= 255)
     * @throws {Error} When too many feeds requested (> 16)
     * @throws {Error} When feed responses are missing from oracle
     *
     * @since 2.14.0
     * @see {@link fetchUpdateBundleIx} - Deprecated equivalent method
     * @see {@link Gateway.fetchQuote} - Gateway method for raw quote data
     *
     * @example
     * ```typescript
     * // Basic usage with single feed hash
     * const btcFeedHash = '0xef0d8b6fcd0104e3e75096912fc8e1e432893da4f18faedaacca7e5875da620f';
     * const sigVerifyIx = await queue.fetchQuoteIx(
     *   crossbar,
     *   [btcFeedHash],
     *   {
     *     numSignatures: 1, // Single oracle signature
     *     variableOverrides: {},
     *     instructionIdx: 0
     *   }
     * );
     *
     * // Using OracleFeed objects
     * const btcFeed: IOracleFeed = {
     *   name: 'BTC/USD Price Feed',
     *   jobs: [btcJob1, btcJob2],
     *   minOracleSamples: 3,
     *   // ... other feed properties
     * };
     *
     * const ethFeed: IOracleFeed = {
     *   name: 'ETH/USD Price Feed',
     *   jobs: [ethJob1, ethJob2],
     *   minOracleSamples: 3,
     * };
     *
     * const feedsIx = await queue.fetchQuoteIx(
     *   crossbar,
     *   [btcFeed, ethFeed],
     *   {
     *     numSignatures: 3,
     *     variableOverrides: {},
     *     instructionIdx: 0
     *   }
     * );
     *
     * // Multi-feed quote with higher consensus
     * const feedHashes = [
     *   '0xef0d8b6fcd0104e3e75096912fc8e1e432893da4f18faedaacca7e5875da620f', // BTC/USD
     *   '0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef', // ETH/USD
     *   '0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890'  // SOL/USD
     * ];
     *
     * const multiQuoteIx = await queue.fetchQuoteIx(
     *   crossbar,
     *   feedHashes,
     *   {
     *     numSignatures: 5, // Require 5 oracle signatures for high-value operations
     *     variableOverrides: {},
     *     instructionIdx: 1  // Instruction index for multiple Ed25519 instructions
     *   }
     * );
     *
     * // Use in your transaction with proper error handling
     * try {
     *   const tx = await asV0Tx({
     *     connection,
     *     ixs: [sigVerifyIx, yourBusinessLogicIx],
     *     signers: [payer],
     *     computeUnitPrice: 200_000,
     *     computeUnitLimitMultiple: 1.3,
     *   });
     *
     *   const txSignature = await connection.sendTransaction(tx, {
     *     preflightCommitment: "processed",
     *   });
     *
     *   console.log('Transaction confirmed:', txSignature);
     * } catch (error) {
     *   console.error('Quote fetch failed:', error);
     * }
     * ```
     */
    fetchQuoteIx(crossbar, feedHashesOrFeeds, configs) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const config = configs !== null && configs !== void 0 ? configs : {
                gateway: undefined,
                variableOverrides: {},
                numSignatures: 1,
                instructionIdx: 0,
            };
            if (config.gateway === undefined) {
                try {
                    config.gateway = yield this.fetchGatewayFromCrossbar(crossbar);
                }
                catch (error) {
                    throw new Error(`Failed to fetch gateway from crossbar: ${error instanceof Error ? error.message : 'Unknown error'}`);
                }
            }
            if (feedHashesOrFeeds.length === 0) {
                throw new Error('At least one feed hash or OracleFeed must be provided');
            }
            let response;
            // Check if first element is a string (feed hash) or object (OracleFeed)
            if (typeof feedHashesOrFeeds[0] === 'string') {
                // Input is an array of feed hashes - use fetchQuote which fetches from IPFS
                const feedHashes = feedHashesOrFeeds;
                response = yield config.gateway.fetchQuote(crossbar, feedHashes, (_a = config.numSignatures) !== null && _a !== void 0 ? _a : 1, config.variableOverrides);
            }
            else {
                // Input is an array of OracleFeeds - use fetchSignaturesConsensus directly
                const feeds = feedHashesOrFeeds;
                feeds.forEach(feed => {
                    if (!feed.jobs || feed.jobs.length === 0) {
                        throw new Error(`OracleFeed "${feed.name || 'unnamed'}" must contain at least one job`);
                    }
                });
                response = yield config.gateway.fetchSignaturesConsensus({
                    feedConfigs: feeds.map(feed => ({ feed })),
                    useTimestamp: false,
                    numSignatures: config.numSignatures,
                    useEd25519: true,
                    variableOverrides: config.variableOverrides,
                });
            }
            // Check if oracle_responses is empty
            if (!response.oracle_responses || response.oracle_responses.length === 0) {
                throw new Error('No oracle responses available for creating signatures');
            }
            // Convert to ED25519 signatures - supports variable length messages!
            const ed25519Signatures = response.oracle_responses.map((oracleResponse, index) => {
                let pubkeyHex = oracleResponse.ed25519_enclave_signer;
                // If ed25519_enclave_signer is 64 bytes (128 hex chars), extract the first 32 bytes for Ed25519 pubkey
                if (pubkeyHex && pubkeyHex.length === 128) {
                    pubkeyHex = pubkeyHex.substring(0, 64); // First 32 bytes (64 hex chars)
                }
                // Check that we have feed responses
                if (!oracleResponse.feed_responses ||
                    oracleResponse.feed_responses.length === 0) {
                    throw new Error(`Oracle response ${index} missing feed_responses`);
                }
                // Reconstruct the actual signed message for NEW SIGNING SCHEME
                // NEW FORMAT: signed_slothash + feed_infos (for ALL feeds)
                // NOTE: recent_slot, version, and oracle_idx are NO LONGER part of the signed message
                // Oracle indices are now appended to the ED25519 instruction data, not signed
                // Use response-level recent_hash for slothash
                const recentHashPubkey = new anchor_31_1.web3.PublicKey(response.recent_hash);
                const signedSlothash = buffer_1.Buffer.from(recentHashPubkey.toBytes()); // 32 bytes
                // Validate oracle index bounds (prevent access violation in Rust)
                // Note: We don't have queue data here, but we can validate reasonable bounds
                if (oracleResponse.oracle_idx >= 255) {
                    throw new Error(`Oracle index out of bounds: ${oracleResponse.oracle_idx} (maximum supported is 254)`);
                }
                // Validate feed count limit (must match Rust limit)
                if (oracleResponse.feed_responses.length > 16) {
                    throw new Error(`Too many feeds in oracle response: ${oracleResponse.feed_responses.length} feeds but maximum is 16`);
                }
                // Build feed infos for ALL feeds (not just the first one)
                const feedInfoBuffers = [];
                for (const feedResponse of oracleResponse.feed_responses) {
                    // Feed info: feed_id + value + min_oracle_samples
                    const feedHash = buffer_1.Buffer.from(feedResponse.feed_hash, 'hex'); // 32 bytes
                    // Convert success_value to 16-byte representation (little-endian i128)
                    const successValue = BigInt(feedResponse.success_value);
                    const valueBytes = buffer_1.Buffer.alloc(16);
                    for (let i = 0; i < 16; i++) {
                        const shift = BigInt(i) * BigInt(8);
                        const mask = BigInt(0xff);
                        valueBytes[i] = Number((successValue >> shift) & mask);
                    }
                    const minOracleSamples = buffer_1.Buffer.from([
                        feedResponse.min_oracle_samples,
                    ]); // 1 byte
                    // Concatenate this feed's info: feed_id + value + min_oracle_samples
                    feedInfoBuffers.push(buffer_1.Buffer.concat([
                        feedHash, // 32 bytes (feed_id)
                        valueBytes, // 16 bytes (feed value as i128 LE)
                        minOracleSamples, // 1 byte (min_oracle_samples)
                    ]));
                }
                // NEW SIGNED MESSAGE FORMAT: signed_slothash + (feed_info1 + feed_info2 + ...)
                // Oracle index is NOT included in the signed message - it goes to instruction data
                const actualMessage = buffer_1.Buffer.concat([
                    signedSlothash, // 32 bytes (slothash from response)
                    ...feedInfoBuffers, // All feed infos (49 bytes each)
                ]);
                return {
                    pubkey: buffer_1.Buffer.from(pubkeyHex, 'hex'), // Use Ed25519 pubkey (32 bytes)!
                    signature: buffer_1.Buffer.from(oracleResponse.signature, 'base64'), // Use oracle-level signature for consensus!
                    message: actualMessage, // Use reconstructed Ed25519 message (variable length)!
                    oracleIdx: oracleResponse.oracle_idx, // Use actual oracle index from response
                };
            });
            const ed25519Instruction = Ed25519InstructionUtils_js_1.Ed25519InstructionUtils.buildEd25519Instruction(ed25519Signatures, (_b = config.instructionIdx) !== null && _b !== void 0 ? _b : 0, typeof response.slot === 'number'
                ? response.slot
                : response.slot.toNumber(), // recent_slot from gateway response
            0 // version 0 for Ed25519 v0 scheme
            );
            return ed25519Instruction;
        });
    }
    /**
     * Creates instructions for managed oracle updates using the new quote program
     *
     * This method generates instructions to call the verified_update method in the
     * quote program (PID: orac1eFjzWL5R3RbbdMV68K9H6TaCVVcL6LjvQQWAbz).
     * It creates both the Ed25519 signature verification instruction and the
     * quote program instruction that verifies and stores the oracle data.
     *
     * The oracle account is automatically derived from the feed hashes using the
     * canonical derivation logic. Gateway is automatically fetched and cached.
     *
     * ## Key Features
     * - **Managed Updates**: Automatically handles oracle account creation and updates
     * - **Verification**: Uses the quote program's verified_update for secure oracle data storage
     * - **Ed25519 Signatures**: Leverages efficient signature verification
     * - **Account Management**: Handles oracle account initialization if needed
     * - **Gateway Caching**: Automatically fetches and caches gateway for subsequent calls
     * - **Feed Format Flexibility**: Accepts either feed hashes (strings) or OracleFeed objects
     *
     * @param {Gateway} gateway - Gateway instance for oracle communication
     * @param {CrossbarClient} crossbar - Crossbar client for data routing
     * @param {string[] | IOracleFeed[]} feedHashesOrFeeds - Array of feed hashes (hex strings) or array of OracleFeed objects (max 16 feeds)
     * @param {object} configs - Configuration object with optional parameters
     * @param {Record<string, string>} [configs.variableOverrides] - Variable overrides for feed processing
     * @param {number} [configs.numSignatures] - Number of oracle signatures required (default: 1)
     * @param {number} [configs.instructionIdx] - Instruction index for Ed25519 program (default: 0)
     * @param {web3.PublicKey} [configs.payer] - Payer for oracle account creation (default: program provider payer)
     * @param {web3.PublicKey} [configs.programId] - Optional program ID for oracle account derived owner (default: QUOTE_PROGRAM_ID)
     * @returns {Promise<web3.TransactionInstruction[]>}
     *          Array of instructions: [Ed25519 verification, quote program verified_update]
     *
     * @throws {Error} When no oracle responses are available
     * @throws {Error} When oracle index is out of bounds (>= 255)
     * @throws {Error} When too many feeds requested (> 16)
     * @throws {Error} When feed responses are missing from oracle
     *
     * @example
     * ```typescript
     * // Using feed hashes
     * const btcFeedHash = '0xef0d8b6fcd0104e3e75096912fc8e1e432893da4f18faedaacca7e5875da620f';
     *
     * // Create the instructions (oracle account is derived automatically)
     * const instructions = await queue.fetchManagedUpdateIxs(
     *   crossbar,
     *   [btcFeedHash],
     *   {
     *     numSignatures: 3, // Require 3 oracle signatures for consensus
     *     variableOverrides: {},
     *     instructionIdx: 0,
     *     payer: myWallet.publicKey,
     *     programId: customQuoteProgramId // Optional: use custom program ID for oracle derivation
     *   }
     * );
     *
     * // Using OracleFeed objects
     * const btcFeed: IOracleFeed = {
     *   name: 'BTC/USD Price Feed',
     *   jobs: [btcJob1, btcJob2],
     *   minOracleSamples: 3,
     *   // ... other feed properties
     * };
     *
     * const ethFeed: IOracleFeed = {
     *   name: 'ETH/USD Price Feed',
     *   jobs: [ethJob1, ethJob2],
     *   minOracleSamples: 3,
     * };
     *
     * const instructionsFromFeeds = await queue.fetchManagedUpdateIxs(
     *   crossbar,
     *   [btcFeed, ethFeed],
     *   {
     *     numSignatures: 3,
     *     variableOverrides: {},
     *     instructionIdx: 0,
     *     payer: myWallet.publicKey
     *   }
     * );
     *
     * // Build transaction with managed update instructions
     * const tx = await asV0Tx({
     *   connection,
     *   ixs: [...instructions, yourBusinessLogicIx],
     *   signers: [payer],
     *   computeUnitPrice: 200_000,
     *   computeUnitLimitMultiple: 1.3,
     * });
     *
     * await connection.sendTransaction(tx);
     * ```
     */
    fetchManagedUpdateIxs(crossbar, feedHashesOrFeeds, configs) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const config = configs !== null && configs !== void 0 ? configs : {
                variableOverrides: {},
                numSignatures: 1,
                instructionIdx: 0,
                gateway: undefined,
            };
            if (config.gateway === undefined) {
                try {
                    config.gateway = yield this.fetchGatewayFromCrossbar(crossbar);
                }
                catch (error) {
                    throw new Error(`Failed to fetch gateway from crossbar: ${error instanceof Error ? error.message : 'Unknown error'}`);
                }
            }
            // Handle both feed hashes and OracleFeed array input
            let feedHashes;
            if (feedHashesOrFeeds.length === 0) {
                throw new Error('At least one feed hash or OracleFeed must be provided');
            }
            // Check if first element is a string (feed hash) or object (OracleFeed)
            if (typeof feedHashesOrFeeds[0] === 'string') {
                // Input is an array of feed hashes
                feedHashes = feedHashesOrFeeds;
            }
            else {
                // Input is an array of OracleFeeds - compute hash for each
                feedHashes = feedHashesOrFeeds.map(feed => {
                    if (!feed.jobs || feed.jobs.length === 0) {
                        throw new Error(`OracleFeed "${feed.name || 'unnamed'}" must contain at least one job to compute the feed hash`);
                    }
                    const feedHashBuffer = common_1.FeedHash.computeOracleFeedId(feed);
                    return '0x' + feedHashBuffer.toString('hex');
                });
            }
            // Derive the canonical oracle account from feed hashes
            const [oracleAccount, bump] = oracleQuote_js_1.OracleQuote.getCanonicalPubkey(this.pubkey, feedHashes, oracleQuote_js_1.QUOTE_PROGRAM_ID);
            // First get the Ed25519 signature verification instruction
            // Pass the original feedHashesOrFeeds to avoid double IPFS fetch
            const ed25519Ix = yield this.fetchQuoteIx(crossbar, feedHashesOrFeeds, config);
            // Get payer from config or program provider
            const payer = (_a = config.payer) !== null && _a !== void 0 ? _a : (0, index_js_1.getNodePayer)(this.program).publicKey;
            const opcode = 0;
            // Create the quote program verified_update instruction
            const quoteProgramIx = new anchor_31_1.web3.TransactionInstruction({
                programId: oracleQuote_js_1.QUOTE_PROGRAM_ID,
                keys: [
                    { pubkey: this.pubkey, isSigner: false, isWritable: false }, // queue_account [0]
                    { pubkey: oracleAccount, isSigner: false, isWritable: true }, // oracle_account [1]
                    {
                        pubkey: constants_js_1.SPL_SYSVAR_INSTRUCTIONS_ID,
                        isSigner: false,
                        isWritable: false,
                    }, // ix_sysvar [2]
                    {
                        pubkey: constants_js_1.SPL_SYSVAR_SLOT_HASHES_ID,
                        isSigner: false,
                        isWritable: false,
                    }, // slot_sysvar [3]
                    {
                        pubkey: anchor_31_1.web3.SYSVAR_CLOCK_PUBKEY,
                        isSigner: false,
                        isWritable: false,
                    }, // clock_sysvar [4]
                    { pubkey: payer, isSigner: true, isWritable: true }, // payer [5]
                    {
                        pubkey: anchor_31_1.web3.SystemProgram.programId,
                        isSigner: false,
                        isWritable: false,
                    }, // system_program [6]
                ],
                data: buffer_1.Buffer.from([opcode, (_b = config.instructionIdx) !== null && _b !== void 0 ? _b : 0, bump]), // ix_idx - index of Ed25519 instruction in transaction
            });
            return [ed25519Ix, quoteProgramIx];
        });
    }
}
exports.Queue = Queue;
Queue.DEFAULT_DEVNET_KEY = new anchor_31_1.web3.PublicKey('EYiAmGSdsQTuCw413V5BzaruWuCCSDgTPtBGvLkXHbe7');
Queue.DEFAULT_MAINNET_KEY = new anchor_31_1.web3.PublicKey('A43DyUGA7s8eXPxqEjJY6EBu1KKbNgfxF8h17VAHn13w');
//# sourceMappingURL=queue.js.map