{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4EG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEH,2DAAgE;AAEhE,sDAAoC;AACpC,0DAAwC;AACxC,qDAAmC;AACnC,iDAA+B;AAC/B,yDAAuC;AACvC,sDAAsC;AACtC,+DAA6C;AAC7C,+DAA6C;AAC7C,qDAAmC;AACnC,mDAAiC;AAEjC;;;;;;;;;;;;;;;;;GAiBG;AACU,QAAA,MAAM,GAAG,2BAAgB,CAAC,oBAAoB,CAAC","sourcesContent":["/**\n * @module @switchboard-xyz/on-demand\n *\n * Switchboard On-Demand Oracle SDK for Solana\n *\n * This SDK provides a complete toolkit for integrating Switchboard's\n * next-generation oracle solution into your Solana programs. On-Demand\n * oracles offer significant advantages over traditional oracle models:\n *\n * ## Key Benefits\n *\n * - **90% Lower Costs**: Eliminate crank turner fees and reduce transaction size\n * - **Sub-second Latency**: Get fresh price updates with minimal delay\n * - **No Maintenance**: No need to manage feed accounts or crank turners\n * - **Flexible Integration**: Use bundles for efficiency or feeds for persistence\n *\n * ## Architecture Overview\n *\n * Switchboard On-Demand uses a pull-based model where oracle data is fetched\n * on-demand rather than continuously pushed on-chain:\n *\n * 1. **Oracle Operators**: Sign price data off-chain with low latency\n * 2. **Crossbar Network**: Distributes signed data to consumers\n * 3. **Bundle Verification**: On-chain verification ensures data authenticity\n * 4. **Your Program**: Consumes verified prices in your business logic\n *\n * ## Quick Start\n *\n * ### Bundle-Based Updates (Recommended)\n *\n * ```typescript\n * import * as sb from '@switchboard-xyz/on-demand';\n *\n * // Fetch and verify price in your transaction\n * const pullIx = await queue.fetchQuoteIx(\n *   gateway,\n *   crossbar,\n *   ['0xabc123...'], // Feed hashes\n *   {\n *     numSignatures: 1,\n *     variableOverrides: {},\n *     instructionIdx: 0\n *   }\n * );\n *\n * // Add to your transaction\n * const tx = await sb.asV0Tx({\n *   connection,\n *   ixs: [pullIx, yourProgramIx],\n *   signers: [keypair],\n * });\n * ```\n *\n * ### Feed-Based Updates\n *\n * ```typescript\n * // Create a persistent feed account\n * const [pullFeed, feedKp] = PullFeed.generate(program);\n * await pullFeed.initIx({\n *   name: \"BTC/USD\",\n *   queue: queuePubkey,\n *   feedHash: await crossbar.store(queue, jobs),\n * });\n *\n * // Update the feed\n * const [updateIx] = await pullFeed.fetchUpdateIx();\n * ```\n *\n * ## Core Concepts\n *\n * - **Queue**: Contains authorized oracle signers and configuration\n * - **Feed**: On-chain account storing price history (optional)\n * - **Bundle**: Signed oracle data passed directly to your program\n * - **Crossbar**: High-performance network for oracle data delivery\n *\n * @packageDocumentation\n */\n\nimport { InstructionUtils } from './instruction-utils/index.js';\n\nexport * from './accounts/index.js';\nexport * from './anchor-utils/index.js';\nexport * from './classes/index.js';\nexport * from './constants.js';\nexport * from './event-utils/index.js';\nexport * as EVM from './evm/index.js';\nexport * from './instruction-utils/index.js';\nexport * from './oracle-interfaces/index.js';\nexport * from './sysvars/index.js';\nexport * from './utils/index.js';\n\n/**\n * Convenience function for creating versioned transactions\n *\n * This is an alias for `InstructionUtils.asV0TxWithComputeIxs` that\n * automatically adds compute budget instructions and uses address\n * lookup tables for optimal transaction size.\n *\n * @example\n * ```typescript\n * const tx = await asV0Tx({\n *   connection,\n *   ixs: [updateIx, userIx],\n *   signers: [payer],\n *   computeUnitPrice: 10_000,\n *   computeUnitLimitMultiple: 1.3,\n * });\n * ```\n */\nexport const asV0Tx = InstructionUtils.asV0TxWithComputeIxs;\n"]}