{"version":3,"file":"associatedToken.js","sourceRoot":"","sources":["../../../src/sysvars/associatedToken.ts"],"names":[],"mappings":";;;AAAA,kDAGyB;AAEzB,oDAA4C;AAE5C,MAAa,sBAAsB;IACjC,gBAAuB,CAAC;IACxB;;OAEG;IACH,0BAA0B,CACxB,aAA6B,EAC7B,gBAAgC;QAEhC,OAAO,gBAAI,CAAC,SAAS,CAAC,sBAAsB,CAC1C;YACE,aAAa,CAAC,QAAQ,EAAE;YACxB,mCAAoB,CAAC,QAAQ,EAAE;YAC/B,gBAAgB,CAAC,QAAQ,EAAE;SAC5B,EACD,sDAAuC,CACxC,CAAC;IACJ,CAAC;CACF;AAlBD,wDAkBC","sourcesContent":["import {\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  SPL_TOKEN_PROGRAM_ID,\n} from '../constants.js';\n\nimport { web3 } from '@coral-xyz/anchor-31';\n\nexport class AssociatedTokenProgram {\n  private constructor() {}\n  /**\n   * Find the associated token address for the given wallet and token mint\n   */\n  findAssociatedTokenAddress(\n    walletAddress: web3.PublicKey,\n    tokenMintAddress: web3.PublicKey\n  ): [web3.PublicKey, number] {\n    return web3.PublicKey.findProgramAddressSync(\n      [\n        walletAddress.toBuffer(),\n        SPL_TOKEN_PROGRAM_ID.toBuffer(),\n        tokenMintAddress.toBuffer(),\n      ],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n    );\n  }\n}\n"]}