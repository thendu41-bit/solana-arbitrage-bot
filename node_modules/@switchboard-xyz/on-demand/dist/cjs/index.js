"use strict";
/**
 * @module @switchboard-xyz/on-demand
 *
 * Switchboard On-Demand Oracle SDK for Solana
 *
 * This SDK provides a complete toolkit for integrating Switchboard's
 * next-generation oracle solution into your Solana programs. On-Demand
 * oracles offer significant advantages over traditional oracle models:
 *
 * ## Key Benefits
 *
 * - **90% Lower Costs**: Eliminate crank turner fees and reduce transaction size
 * - **Sub-second Latency**: Get fresh price updates with minimal delay
 * - **No Maintenance**: No need to manage feed accounts or crank turners
 * - **Flexible Integration**: Use bundles for efficiency or feeds for persistence
 *
 * ## Architecture Overview
 *
 * Switchboard On-Demand uses a pull-based model where oracle data is fetched
 * on-demand rather than continuously pushed on-chain:
 *
 * 1. **Oracle Operators**: Sign price data off-chain with low latency
 * 2. **Crossbar Network**: Distributes signed data to consumers
 * 3. **Bundle Verification**: On-chain verification ensures data authenticity
 * 4. **Your Program**: Consumes verified prices in your business logic
 *
 * ## Quick Start
 *
 * ### Bundle-Based Updates (Recommended)
 *
 * ```typescript
 * import * as sb from '@switchboard-xyz/on-demand';
 *
 * // Fetch and verify price in your transaction
 * const pullIx = await queue.fetchQuoteIx(
 *   gateway,
 *   crossbar,
 *   ['0xabc123...'], // Feed hashes
 *   {
 *     numSignatures: 1,
 *     variableOverrides: {},
 *     instructionIdx: 0
 *   }
 * );
 *
 * // Add to your transaction
 * const tx = await sb.asV0Tx({
 *   connection,
 *   ixs: [pullIx, yourProgramIx],
 *   signers: [keypair],
 * });
 * ```
 *
 * ### Feed-Based Updates
 *
 * ```typescript
 * // Create a persistent feed account
 * const [pullFeed, feedKp] = PullFeed.generate(program);
 * await pullFeed.initIx({
 *   name: "BTC/USD",
 *   queue: queuePubkey,
 *   feedHash: await crossbar.store(queue, jobs),
 * });
 *
 * // Update the feed
 * const [updateIx] = await pullFeed.fetchUpdateIx();
 * ```
 *
 * ## Core Concepts
 *
 * - **Queue**: Contains authorized oracle signers and configuration
 * - **Feed**: On-chain account storing price history (optional)
 * - **Bundle**: Signed oracle data passed directly to your program
 * - **Crossbar**: High-performance network for oracle data delivery
 *
 * @packageDocumentation
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.asV0Tx = exports.EVM = void 0;
const index_js_1 = require("./instruction-utils/index.js");
__exportStar(require("./accounts/index.js"), exports);
__exportStar(require("./anchor-utils/index.js"), exports);
__exportStar(require("./classes/index.js"), exports);
__exportStar(require("./constants.js"), exports);
__exportStar(require("./event-utils/index.js"), exports);
exports.EVM = __importStar(require("./evm/index.js"));
__exportStar(require("./instruction-utils/index.js"), exports);
__exportStar(require("./oracle-interfaces/index.js"), exports);
__exportStar(require("./sysvars/index.js"), exports);
__exportStar(require("./utils/index.js"), exports);
/**
 * Convenience function for creating versioned transactions
 *
 * This is an alias for `InstructionUtils.asV0TxWithComputeIxs` that
 * automatically adds compute budget instructions and uses address
 * lookup tables for optimal transaction size.
 *
 * @example
 * ```typescript
 * const tx = await asV0Tx({
 *   connection,
 *   ixs: [updateIx, userIx],
 *   signers: [payer],
 *   computeUnitPrice: 10_000,
 *   computeUnitLimitMultiple: 1.3,
 * });
 * ```
 */
exports.asV0Tx = index_js_1.InstructionUtils.asV0TxWithComputeIxs;
//# sourceMappingURL=index.js.map