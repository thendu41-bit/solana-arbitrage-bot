{"version":3,"file":"gateway.js","sourceRoot":"","sources":["../../../src/oracle-interfaces/gateway.ts"],"names":[],"mappings":"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","sourcesContent":["import { Surge } from './../classes/surge.js';\nimport { GATEWAY_PING_CACHE } from './../utils/cache.js';\n\nimport type { BN, web3 } from '@coral-xyz/anchor-31';\nimport type { Program } from '@coral-xyz/anchor-31';\nimport type { IOracleFeed, IOracleJob } from '@switchboard-xyz/common';\nimport {\n  CrossbarClient,\n  OracleFeedUtils,\n  OracleJobUtils,\n} from '@switchboard-xyz/common';\nimport type { AxiosInstance } from 'axios';\nimport axios from 'axios';\nimport bs58 from 'bs58';\n\nconst TIMEOUT = 10_000;\n\nconst axiosClient: () => AxiosInstance = (() => {\n  let instance: AxiosInstance;\n  return () => (instance ??= axios.create());\n})();\n\n/**\n * Configuration for a feed request to oracle operators\n */\nexport type FeedRequestV1 = {\n  /** Maximum allowed variance between oracle responses (e.g., 1.0 = 100%) */\n  maxVariance?: number;\n  /** Minimum number of oracle responses required */\n  minResponses?: number;\n  /** Array of oracle job definitions */\n  jobs: IOracleJob[];\n};\n\n/**\n * Configuration for a feed request to oracle operators\n */\nexport type FeedRequestV2 = {\n  /** Base64 encoded feed proto */\n  feed: IOracleFeed;\n};\n\n/**\n * Configuration for a feed request to oracle operators\n */\nexport type FeedRequest = FeedRequestV1 | FeedRequestV2;\n\n/**\n * Response from a single oracle for a feed evaluation\n *\n * Contains the oracle's signed response including the computed value,\n * signature, and metadata. Variables are snake_case for serialization\n * compatibility with the gateway API.\n */\nexport type FeedEvalResponse = {\n  /**\n   *  Hex encoded oracle pubkey\n   */\n  oracle_pubkey: string;\n  /**\n   *  Hex encoded queue pubkey\n   */\n  queue_pubkey: string;\n  /**\n   *  Hex encoded oracle signing pubkey\n   */\n  oracle_signing_pubkey: string;\n  /**\n   *  Hex encoded feed id\n   */\n  feed_hash: string;\n  /**\n   *  Hex encoded blockhash/slothash the response was signed with.\n   */\n  recent_hash: string;\n  /**\n   *  Errors encountered while fetching feed value\n   */\n  failure_error: string;\n  /**\n   *  Feed values derived\n   */\n  success_value: string;\n  /**\n   *  Signed message of the result and blockhash\n   */\n  msg: string;\n  /**\n   *  Oracle signature of the result and blockhash\n   *\n   *  Sha256(success_feed_hashes || results || slothash)\n   */\n  signature: string;\n  recovery_id: number;\n\n  /**\n   *  If the feed fetch failed, get other recent successes\n   */\n  recent_successes_if_failed: Array<FeedEvalResponse>;\n\n  /**\n   * Timestamp marking when the result was fetched\n   */\n  timestamp?: number;\n\n  /**\n   * Minimum number of oracle samples required\n   */\n  min_oracle_samples: number;\n\n  /**\n   * Task execution receipts\n   */\n  receipts?: Array<Record<string, unknown>>;\n};\n\nexport type FeedEvalManyResponse = {\n  feed_responses: FeedEvalResponse[];\n  signature: string;\n  recovery_id: number;\n  errors: string[];\n};\n\nexport type FetchSignaturesMultiResponse = {\n  oracle_responses: FeedEvalManyResponse[];\n  errors: string[];\n};\n\nexport type FeedEvalBatchResponse = {\n  feed_responses: FeedEvalResponse[];\n  errors: string[];\n};\n\nexport type FetchSignaturesBatchResponse = {\n  oracle_responses: FeedEvalBatchResponse[];\n  errors: string[];\n};\n\nexport type FetchSignaturesConsensusResponse = {\n  median_responses: { value: string; feed_hash: string; num_oracles: number }[];\n  oracle_responses: {\n    oracle_pubkey: string;\n    eth_address: string;\n    signature: string;\n    checksum: string;\n    recovery_id: number;\n    ed25519_enclave_signer: string;\n    feed_responses: FeedEvalResponse[];\n    errors: string[];\n    oracle_idx: number;\n    min_oracle_samples: number;\n  }[];\n  failed_oracle_responses: {\n    oracle_pubkey: string;\n    eth_address: string;\n    signature: string;\n    checksum: string;\n    recovery_id: number;\n    ed25519_enclave_signer: string;\n    feed_responses: FeedEvalResponse[];\n    errors: string[];\n    oracle_idx: number;\n  }[];\n  recent_hash: string;\n  slot: BN;\n};\n\n/**\n *  The response from the gateway after revealing randomness.\n *  Variables are snake_case for serialization.\n */\nexport type RandomnessRevealResponse = {\n  /**\n   * Signature of the randomness using the oracle's enclave key\n   */\n  signature: string;\n  /**\n   * Recovery ID of the signature\n   */\n  recovery_id: number;\n  /**\n   * The randomness value\n   */\n  value: Array<number>;\n};\n\n/**\n * The response from the gateway after attesting an enclave.\n */\nexport type AttestEnclaveResponse = {\n  /**\n   * The guardian's public key\n   */\n  guardian: string;\n  /**\n   * The signature of the guardian\n   */\n  signature: string;\n  /**\n   * The recovery ID of the signature\n   */\n  recovery_id: number;\n};\n\n/**\n * The response from the ping endpoint.\n */\nexport type PingResponse = {\n  /**\n   * The oracle's public key\n   */\n  oracle_pubkey: string;\n\n  /**\n   * The oracle's authority pubkey\n   */\n  oracle_authority: string;\n\n  /**\n   * The oracle's queue pubkey\n   */\n  queue: string;\n\n  /**\n   * The registered rate limit for oracle\n   */\n  rate_limit: number;\n\n  /**\n   * The oracle's version\n   */\n  version: string;\n\n  /**\n   * The oracle's enclave measurement\n   */\n  mr_enclave: string;\n\n  /**\n   * Is the oracle a push oracle\n   */\n  is_push_oracle: boolean;\n\n  /**\n   * Is the oracle a pull oracle\n   */\n  is_pull_oracle: boolean;\n\n  /**\n   * Is the oracle a guardian\n   */\n  is_gateway: boolean;\n\n  /**\n   * Is the oracle a guardian\n   */\n  is_guardian: boolean;\n};\n\n/**\n * The Quote info from the gateway_fetch_quote endpoint\n */\nexport type FetchQuoteResponse = {\n  /**\n   * The oracle's pubkey\n   */\n  oracle_pubkey: string;\n\n  /**\n   * The oracle's queue pubkey\n   */\n  queue: string;\n\n  /**\n   * The current timestamp used for generating the checksum\n   */\n  now: number;\n\n  /**\n   * The oracle's enclave measurement\n   */\n  mr_enclave: string;\n\n  /**\n   * The oracle's ed25519 pubkey\n   */\n  ed25519_pubkey: string;\n\n  /**\n   * The oracle's secp256k1 pubkey\n   */\n  secp256k1_pubkey: string;\n\n  /**\n   * The base64 encoded quote\n   */\n  quote: string;\n};\n\nexport interface BridgeEnclaveResponse {\n  /**\n   * The guardian's public key\n   */\n  guardian: string;\n\n  /**\n   * The oracle's public key\n   */\n  oracle: string;\n\n  /**\n   * The queue (pubkey) that the oracle belongs to\n   */\n  queue: string;\n\n  /**\n   * The enclave measurement for the oracle\n   */\n  mr_enclave: string;\n\n  /**\n   * The chain hash read on the guardian\n   */\n  chain_hash: string;\n\n  /**\n   * The secp256k1 enclave signer for the oracle\n   */\n  oracle_secp256k1_enclave_signer: string;\n\n  /**\n   * The checksum of the attestation message\n   */\n  msg: string;\n\n  /**\n   * (UNUSED) The attestation message before being hashed\n   */\n  msg_prehash: string;\n\n  /**\n   * The ed25519 enclave signer for the oracle\n   */\n  oracle_ed25519_enclave_signer?: string;\n\n  /**\n   * The timestamp of the attestation\n   */\n  timestamp?: number;\n\n  /**\n   * The signature from the guardian\n   */\n  signature: string;\n  recovery_id: number;\n}\n\n/**\n *  `base64` encodes an array of oracle jobs. to send to a gateway\n */\nfunction encodeJobs(jobArray: IOracleJob[]): string[] {\n  return jobArray.map(job =>\n    OracleJobUtils.serializeOracleJob(job).toString('base64')\n  );\n}\n\n/**\n * Gateway interface for oracle communication\n *\n * The Gateway class provides the connection between your application\n * and Switchboard oracle operators. It handles:\n *\n * - Fetching signed price data from oracles\n * - Managing oracle selection and consensus\n * - Batch operations for multiple feeds\n * - Network latency optimization\n * - Variable overrides for dynamic task customization\n *\n * Gateways are geo-distributed endpoints that route requests to\n * available oracle operators for optimal performance.\n *\n * ## Variable Overrides\n *\n * Variable overrides allow you to dynamically customize oracle task execution\n * by providing key-value pairs that replace variables within oracle jobs.\n * This is particularly useful for:\n *\n * - **API Key Management**: Override API keys for different environments\n * - **Dynamic Parameters**: Change URLs, endpoints, or query parameters\n * - **A/B Testing**: Switch between different data sources\n * - **Environment Configuration**: Use different settings for dev/staging/prod\n *\n * ### Usage Examples\n *\n * ```typescript\n * // Create gateway\n * const gateway = new Gateway(program, 'https://gateway.switchboard.xyz');\n *\n * // Basic feed fetch with API key override\n * const response = await gateway.fetchSignatures({\n *   jobs: [buildApiJob('${API_KEY}')], // Job uses ${API_KEY} variable\n *   numSignatures: 3,\n *   variableOverrides: {\n *     'API_KEY': 'prod-api-key-123',\n *     'BASE_URL': 'https://api.prod.example.com'\n *   }\n * });\n *\n * // Batch processing with environment-specific overrides\n * const batchResponse = await gateway.fetchSignaturesBatch({\n *   feedConfigs: [{\n *     jobs: [buildJob('${ENDPOINT}/price/${SYMBOL}')],\n *     maxVariance: 0.5,\n *     minResponses: 2\n *   }],\n *   numSignatures: 5,\n *   variableOverrides: {\n *     'ENDPOINT': 'https://api.staging.example.com',\n *     'SYMBOL': 'BTCUSD',\n *     'TIMEOUT': '30000'\n *   }\n * });\n *\n * // Multi-feed with shared overrides\n * const multiResponse = await gateway.fetchSignaturesMulti({\n *   feedConfigs: [\n *     { jobs: [priceJob1], maxVariance: 1.0, minResponses: 1 },\n *     { jobs: [priceJob2], maxVariance: 1.5, minResponses: 2 }\n *   ],\n *   numSignatures: 4,\n *   variableOverrides: {\n *     'API_VERSION': 'v2',\n *     'RATE_LIMIT': '100'\n *   }\n * });\n *\n * // Consensus with authentication override\n * const consensusResponse = await gateway.fetchSignaturesConsensus({\n *   feedConfigs: [{ feed: myFeedConfig }],\n *   numSignatures: 7,\n *   variableOverrides: {\n *     'AUTH_TOKEN': await getAuthToken(),\n *     'REGION': 'us-east-1'\n *   }\n * });\n * ```\n *\n * ### Variable Syntax in Jobs\n *\n * Variables in oracle jobs use the `${VARIABLE_NAME}` syntax:\n *\n * ```typescript\n * const httpJob = {\n *   tasks: [{\n *     httpTask: {\n *       url: '${BASE_URL}/api/${VERSION}/price?symbol=${SYMBOL}&key=${API_KEY}',\n *       method: 'GET',\n *       headers: {\n *         'Authorization': 'Bearer ${AUTH_TOKEN}',\n *         'User-Agent': '${USER_AGENT}'\n *       }\n *     }\n *   }]\n * };\n * ```\n *\n * ### Best Practices\n *\n * 1. **Security**: Never hardcode sensitive API keys in jobs - use overrides\n * 2. **Environment Management**: Use overrides to switch between dev/staging/prod\n * 3. **Flexibility**: Design jobs with variables for maximum reusability\n * 4. **Validation**: Ensure all required variables are provided in overrides\n * 5. **Documentation**: Document expected variables in your job definitions\n *\n * @class Gateway\n */\nexport class Gateway {\n  /**\n   * Constructs a Gateway instance\n   *\n   * @param {Program} program - The Anchor program instance\n   * @param {string} gatewayUrl - The URL of the switchboard gateway\n   * @param {web3.PublicKey} oracleKey - Optional specific oracle key\n   */\n  constructor(\n    readonly program: Program,\n    readonly gatewayUrl: string,\n    readonly oracleKey?: web3.PublicKey\n  ) {}\n\n  /**\n   * Initializes a Surge instance\n   * @param {Object} params - The parameters for the surge instance\n   * @param {string} params.apiKey - The API key for authentication\n   * @param {boolean} [params.verbose=false] - Whether to enable verbose logging\n   * @return {Surge} A new instance of dSurge\n   */\n  initSurge(params: { apiKey: string; verbose?: boolean }): Surge {\n    return new Surge({\n      apiKey: params.apiKey,\n      gatewayUrl: this.gatewayUrl,\n      verbose: params.verbose ?? false,\n    });\n  }\n\n  /**\n   *  Fetches signatures from the gateway.\n   *\n   *  REST API endpoint: /api/v1/fetch_signatures\n   *\n   *  @param recentHash The chain metadata to sign with. Blockhash or slothash.\n   *  @param encodedJobs The base64 encoded oracle jobs.\n   *  @param numSignatures The number of oracles to fetch signatures from.\n   *  @param variableOverrides Optional variable overrides for task execution (e.g., {\"API_KEY\": \"custom-key\"})\n   *  @returns A promise that resolves to the feed evaluation responses.\n   *  @throws if the request fails.\n   */\n  async fetchSignaturesFromEncoded(params: {\n    recentHash?: string;\n    encodedJobs: string[];\n    numSignatures: number;\n    maxVariance: number;\n    minResponses: number;\n    useTimestamp?: boolean;\n    variableOverrides?: Record<string, string>;\n  }): Promise<{ responses: FeedEvalResponse[]; failures: string[] }> {\n    // TODO: have total NumOracles count against rate limit per IP\n    const { recentHash, encodedJobs, numSignatures } = params;\n    const url = `${this.gatewayUrl}/gateway/api/v1/fetch_signatures`;\n    const headers = { 'Content-Type': 'application/json' };\n    const maxVariance = params.maxVariance * 1e9;\n    const body = JSON.stringify({\n      api_version: '1.0.0',\n      jobs_b64_encoded: encodedJobs,\n      recent_chainhash: recentHash ?? bs58.encode(Buffer.alloc(32, 0)),\n      signature_scheme: 'Secp256k1',\n      hash_scheme: 'Sha256',\n      num_oracles: numSignatures,\n      max_variance: maxVariance,\n      min_responses: params.minResponses,\n      use_timestamp: params.useTimestamp ?? false,\n      variable_overrides: params.variableOverrides ?? {},\n    });\n    return axiosClient()\n      .post(url, body, {\n        headers,\n        timeout: TIMEOUT,\n      })\n      .then(r => r.data);\n  }\n\n  async ping(): Promise<PingResponse> {\n    const url = `${this.gatewayUrl}/gateway/api/v1/ping`;\n    const method = 'POST';\n    const headers = { 'Content-Type': 'application/json' };\n    const body = JSON.stringify({ api_version: '1.0.0' });\n    return axiosClient()\n      .post(url, body, { method, headers, timeout: TIMEOUT })\n      .then(r => r.data);\n  }\n\n  /**\n   *\n   * Fetches signatures from the gateway.\n   * REST API endpoint: /api/v1/gateway_attest_enclave\n   * @param timestamp The timestamp of the attestation\n   * @param quote The quote of the attestation\n   * @param oracle_pubkey The oracle's public key\n   * @param oracle_reward_wallet The oracle's reward wallet\n   * @param oracle_ed25519_enclave_signer The oracle's ed25519 enclave signer\n   * @param oracle_secp256k1_enclave_signer The oracle's secp256k1 enclave signer\n   * @param recentHash The chain metadata to sign with. Blockhash or slothash.\n   * @returns A promise that resolves to the attestation response.\n   * @throws if the request fails.\n   */\n  async fetchAttestation(params: {\n    timestamp: number;\n    quote: string;\n    oracle_pubkey: string;\n    oracle_reward_wallet: string;\n    oracle_ed25519_enclave_signer: string;\n    oracle_secp256k1_enclave_signer: string;\n    recentHash: string;\n  }): Promise<AttestEnclaveResponse> {\n    const url = `${this.gatewayUrl}/gateway/api/v1/gateway_attest_enclave`;\n    const method = 'POST';\n    const headers = { 'Content-Type': 'application/json' };\n    const body = JSON.stringify({\n      api_version: '1.0.0',\n      timestamp: params.timestamp,\n      quote: params.quote,\n      oracle_pubkey: params.oracle_pubkey,\n      oracle_reward_wallet: params.oracle_reward_wallet,\n      oracle_ed25519_enclave_signer: params.oracle_ed25519_enclave_signer,\n      oracle_secp256k1_enclave_signer: params.oracle_secp256k1_enclave_signer,\n      chain_hash: params.recentHash,\n    });\n\n    return axiosClient()\n      .post(url, { method, headers, data: body, timeout: TIMEOUT })\n      .then(r => r.data);\n  }\n\n  /**\n   * Fetches an attestation quote from the gateway.\n   *\n   * REST API endpoint: /api/v1/gateway_fetch_quote\n   *\n   *\n   * @param blockhash The blockhash to fetch the quote for.\n   * @param get_for_oracle Whether to fetch the quote for the oracle.\n   * @param get_for_guardian Whether to fetch the quote for the guardian.\n   * @returns A promise that resolves to the quote response.\n   * @throws if the request fails.\n   */\n  async fetchAttestationQuote(params: {\n    blockhash: string;\n    get_for_oracle: boolean;\n    get_for_guardian: boolean;\n  }): Promise<FetchQuoteResponse[]> {\n    const url = `${this.endpoint()}/gateway/api/v1/gateway_fetch_quote`;\n    const method = 'POST';\n    const headers = { 'Content-Type': 'application/json' };\n    const body = JSON.stringify({\n      api_version: '1.0.0',\n      blockhash: params.blockhash,\n      get_for_oracle: params.get_for_oracle,\n      get_for_guardian: params.get_for_guardian,\n    });\n    return axiosClient()\n      .post(url, { method, headers, data: body, timeout: TIMEOUT })\n      .then(r => r.data);\n  }\n\n  // alberthermida@Switchboard ts % curl -X POST \\\n  // -H \"Content-Type: application/json\" \\\n  // -d '{\n  //   \"api_version\": \"1.0.0\",\n  //   \"blockhash\": \"0000000000000000000000000000000000000000000000000000000000000000\",\n  //   \"get_for_oracle\": true,\n  //   \"get_for_guardian\": false\n  // }' \\\n  // https://vu-ams-02.switchboard-oracles.xyz/gateway/api/v1/gateway_fetch_quote\n\n  /**\n   *  Fetches signatures from the gateway.\n   *\n   *  REST API endpoint: /api/v1/fetch_signatures\n   *\n   *  @param recentHash The chain metadata to sign with. Blockhash or slothash.\n   *  @param jobs The oracle jobs to perform.\n   *  @param numSignatures The number of oracles to fetch signatures from.\n   *  @param maxVariance The maximum variance allowed in the feed values.\n   *  @param minResponses The minimum number of responses of jobs to succeed.\n   *  @param useTimestamp Whether to use the timestamp in the response & to encode update signature.\n   *  @param variableOverrides Optional variable overrides for task execution (e.g., {\"API_KEY\": \"custom-key\"})\n   *  @returns A promise that resolves to the feed evaluation responses.\n   *  @throws if the request fails.\n   */\n  async fetchSignatures(params: {\n    recentHash?: string;\n    jobs: IOracleJob[];\n    numSignatures?: number;\n    maxVariance?: number;\n    minResponses?: number;\n    useTimestamp?: boolean;\n    variableOverrides?: Record<string, string>;\n  }): Promise<{ responses: FeedEvalResponse[]; failures: string[] }> {\n    params.numSignatures = params.numSignatures ?? 1;\n    params.maxVariance = params.maxVariance ?? 1;\n    params.minResponses = params.minResponses ?? 1;\n    const {\n      recentHash,\n      jobs,\n      numSignatures,\n      maxVariance,\n      minResponses,\n      useTimestamp,\n      variableOverrides,\n    } = params;\n    const encodedJobs = encodeJobs(jobs);\n    const res = await this.fetchSignaturesFromEncoded({\n      recentHash,\n      encodedJobs,\n      numSignatures,\n      maxVariance,\n      minResponses,\n      useTimestamp,\n      variableOverrides,\n    });\n    return res;\n  }\n\n  /**\n   * Fetches signatures from multiple feeds\n   *\n   * @param recentHash The chain metadata to sign with. Blockhash or slothash.\n   * @param feedConfigs Array of feed configurations to fetch signatures for.\n   * @param numSignatures The number of oracles to fetch signatures from.\n   * @param useTimestamp Whether to use the timestamp in the response & to encode update signature.\n   * @param variableOverrides Optional variable overrides for task execution (e.g., {\"API_KEY\": \"custom-key\"})\n   * @returns A promise that resolves to the feed evaluation responses.\n   * @throws if the request fails.\n   */\n  async fetchSignaturesMulti(params: {\n    recentHash?: string;\n    feedConfigs: FeedRequestV1[];\n    numSignatures?: number;\n    useTimestamp?: boolean;\n    variableOverrides?: Record<string, string>;\n  }): Promise<FetchSignaturesMultiResponse> {\n    const {\n      recentHash,\n      feedConfigs,\n      useTimestamp,\n      numSignatures,\n      variableOverrides,\n    } = params;\n    const encodedConfigs = feedConfigs.map(config => ({\n      encodedJobs: encodeJobs(config.jobs),\n      maxVariance: config.maxVariance ?? 1,\n      minResponses: config.minResponses ?? 1,\n    }));\n    const res = await this.fetchSignaturesFromEncodedMulti({\n      recentHash,\n      encodedConfigs,\n      numSignatures: numSignatures ?? 1,\n      useTimestamp,\n      variableOverrides,\n    });\n    return res;\n  }\n\n  async fetchSignaturesFromEncodedMulti(params: {\n    recentHash?: string;\n    encodedConfigs: {\n      encodedJobs: string[];\n      maxVariance: number;\n      minResponses: number;\n    }[];\n    numSignatures: number;\n    useTimestamp?: boolean;\n    variableOverrides?: Record<string, string>;\n  }): Promise<FetchSignaturesMultiResponse> {\n    // TODO: have total NumOracles count against rate limit per IP\n    const { recentHash, encodedConfigs, numSignatures } = params;\n    if (numSignatures <= 0) {\n      throw new Error('numSignatures must be greater than 0');\n    }\n\n    const url = `${this.gatewayUrl}/gateway/api/v1/fetch_signatures_multi`;\n    const method = 'POST';\n    const headers = { 'Content-Type': 'application/json' };\n    const body = {\n      api_version: '1.0.0',\n      num_oracles: numSignatures,\n      recent_hash: recentHash ?? bs58.encode(Buffer.alloc(32, 0)),\n      signature_scheme: 'Secp256k1',\n      hash_scheme: 'Sha256',\n      feed_requests: encodedConfigs.map(config => ({\n        jobs_b64_encoded: config.encodedJobs,\n        max_variance: Math.floor(Number(config.maxVariance ?? 1) * 1e9),\n        min_responses: config.minResponses ?? 1,\n        use_timestamp: params.useTimestamp ?? false,\n      })),\n      variable_overrides: params.variableOverrides ?? {},\n    };\n    const data = JSON.stringify(body);\n    try {\n      const resp = await axiosClient()(url, { method, headers, data });\n      return resp.data;\n    } catch (err) {\n      console.error('fetchSignaturesFromEncodedMulti error', err);\n      throw err;\n    }\n  }\n\n  /**\n   * Fetches signatures from the gateway without pre-encoded jobs\n   * REST API endpoint: /api/v1/fetch_signatures_batch\n   *\n   * @param recentHash The chain metadata to sign with. Blockhash or slothash.\n   * @param feedConfigs The feed configurations to fetch signatures for.\n   * @param numSignatures The number of oracles to fetch signatures from.\n   * @param useTimestamp Whether to use the timestamp in the response & to encode update signature.\n   * @param variableOverrides Optional variable overrides for task execution (e.g., {\"API_KEY\": \"custom-key\"})\n   * @returns A promise that resolves to the feed evaluation responses.\n   * @throws if the request fails.\n   */\n  async fetchSignaturesBatch(params: {\n    recentHash?: string;\n    feedConfigs: FeedRequestV1[];\n    numSignatures?: number;\n    useTimestamp?: boolean;\n    useEd25519?: boolean;\n    variableOverrides?: Record<string, string>;\n  }): Promise<FetchSignaturesBatchResponse> {\n    const {\n      recentHash,\n      feedConfigs,\n      useTimestamp,\n      numSignatures,\n      variableOverrides,\n    } = params;\n    const encodedConfigs = feedConfigs.map(config => {\n      const encodedJobs = encodeJobs(config.jobs);\n      return {\n        encodedJobs,\n        maxVariance: config.maxVariance ?? 1,\n        minResponses: config.minResponses ?? 1,\n      };\n    });\n    const res = await this.fetchSignaturesFromEncodedBatch({\n      recentHash,\n      encodedConfigs,\n      numSignatures: numSignatures ?? 1,\n      useTimestamp,\n      variableOverrides,\n    });\n    return res;\n  }\n\n  /**\n   * Fetches signatures from the gateway.\n   * REST API endpoint: /api/v1/fetch_signatures_batch\n   *\n   * @param recentHash The chain metadata to sign with. Blockhash or slothash.\n   * @param encodedConfigs The encoded feed configurations to fetch signatures for.\n   * @param numSignatures The number of oracles to fetch signatures from.\n   * @param useTimestamp Whether to use the timestamp in the response & to encode update signature.\n   * @param variableOverrides Optional variable overrides for task execution (e.g., {\"API_KEY\": \"custom-key\"})\n   * @returns A promise that resolves to the feed evaluation responses.\n   * @throws if the request fails.\n   */\n  async fetchSignaturesFromEncodedBatch(params: {\n    recentHash?: string;\n    encodedConfigs: {\n      encodedJobs: string[];\n      maxVariance: number;\n      minResponses: number;\n    }[];\n    numSignatures: number;\n    useTimestamp?: boolean;\n    variableOverrides?: Record<string, string>;\n  }): Promise<FetchSignaturesBatchResponse> {\n    type BatchFeedRequests = {\n      jobs_b64_encoded: string[];\n      max_variance: number;\n      min_responses: number;\n      use_timestamp: boolean;\n    }[];\n\n    const { recentHash, encodedConfigs, numSignatures } = params;\n    const url = `${this.gatewayUrl}/gateway/api/v1/fetch_signatures_batch`;\n    const method = 'POST';\n    const headers = { 'Content-Type': 'application/json' };\n    const body = {\n      api_version: '1.0.0',\n      num_oracles: numSignatures,\n      recent_hash: recentHash ?? bs58.encode(Buffer.alloc(32, 0)),\n      signature_scheme: 'Secp256k1',\n      hash_scheme: 'Sha256',\n      feed_requests: [] as BatchFeedRequests,\n      variable_overrides: params.variableOverrides ?? {},\n    };\n    for (const config of encodedConfigs) {\n      const maxVariance = Math.floor(Number(config.maxVariance ?? 1) * 1e9);\n      body.feed_requests.push({\n        jobs_b64_encoded: config.encodedJobs,\n        max_variance: maxVariance,\n        min_responses: config.minResponses ?? 1,\n        use_timestamp: params.useTimestamp ?? false,\n      });\n    }\n    const data = JSON.stringify(body);\n\n    // get size of data\n    try {\n      const resp = await axiosClient()(url, { method, headers, data });\n      return resp.data;\n    } catch (err) {\n      console.error('fetchSignaturesFromEncodedBatch error', err);\n      throw err;\n    }\n  }\n\n  /**\n   * Fetches signatures using consensus mechanism\n   * REST API endpoint: /api/v1/fetch_signatures_consensus\n   *\n   * @param feedConfigs Array of feed configurations to fetch signatures for.\n   * @param useTimestamp Whether to use the timestamp in the response & to encode update signature.\n   * @param numSignatures The number of oracles to fetch signatures from.\n   * @param useEd25519 Whether to use Ed25519 signatures instead of secp256k1.\n   * @param variableOverrides Optional variable overrides for task execution (e.g., {\"API_KEY\": \"custom-key\"})\n   * @returns A promise that resolves to the consensus response.\n   * @throws if the request fails.\n   */\n  async fetchSignaturesConsensus(params: {\n    feedConfigs: FeedRequest[];\n    useTimestamp?: boolean;\n    numSignatures?: number;\n    useEd25519?: boolean;\n    variableOverrides?: Record<string, string>;\n  }): Promise<FetchSignaturesConsensusResponse> {\n    const { feedConfigs } = params;\n\n    const isV1 = feedConfigs.every(config => 'jobs' in config);\n    const isV2 = feedConfigs.every(config => 'feed' in config);\n\n    if (!isV1 && !isV2) {\n      throw new Error(\n        '[Switchboard] Malformed input: feedConfigs must be either FeedRequestV1 or FeedRequestV2'\n      );\n    }\n\n    const feedRequests = isV1\n      ? feedConfigs.map(config => ({\n          jobs_b64_encoded: encodeJobs(config.jobs),\n          max_variance: Math.floor(Number(config.maxVariance ?? 1) * 1e9),\n          min_responses: config.minResponses ?? 1,\n        }))\n      : feedConfigs.map(config => ({\n          feed_proto_b64: OracleFeedUtils.serializeOracleFeed(\n            config.feed\n          ).toString('base64'),\n        }));\n\n    // if numSignatures is provided, use it, otherwise use the max of the minOracleSamples for each feed (or 1 for v1)\n    const numOracles =\n      params.numSignatures ??\n      (isV2\n        ? Math.max(...feedConfigs.map(fc => fc.feed.minOracleSamples ?? 1))\n        : 1);\n\n    const url = `${this.gatewayUrl}/gateway/api/v1/fetch_signatures_consensus`;\n    const method = 'POST';\n    const headers = { 'Content-Type': 'application/json' };\n    const useEd25519 = params.useEd25519 ?? false;\n    const data = JSON.stringify({\n      api_version: '1.0.0',\n      recent_hash: '',\n      signature_scheme: useEd25519 ? 'Ed25519' : 'Secp256k1',\n      hash_scheme: 'Sha256',\n      feed_requests: feedRequests,\n      num_oracles: numOracles,\n      use_timestamp: params.useTimestamp ?? false,\n      use_ed25519: useEd25519,\n      variable_overrides: params.variableOverrides ?? {},\n    });\n\n    try {\n      const resp = await axiosClient()(url, { method, headers, data });\n      return resp.data;\n    } catch (err) {\n      console.error('fetchSignaturesConsensus error', err);\n      throw err;\n    }\n  }\n\n  /**\n   * Fetches oracle quote data from the gateway\n   *\n   * This method retrieves signed price quotes from oracle operators through\n   * the gateway interface. It's the primary method for fetching oracle data\n   * using the modern quote terminology.\n   *\n   * ## Protocol Details\n   * - Uses Ed25519 signature scheme for efficient verification\n   * - Supports both protobuf and legacy job specifications\n   * - Implements consensus mechanism across multiple oracles\n   * - Returns structured response with oracle metadata\n   *\n   * ## Response Structure\n   * The returned response contains:\n   * - `oracle_responses`: Array of signed oracle data\n   * - `recent_hash`: Recent Solana block hash for replay protection\n   * - `slot`: Recent slot number for temporal validation\n   *\n   * @param {CrossbarClient} crossbar - Crossbar client for data routing and feed resolution\n   * @param {string[]} feedHashes - Array of feed hashes to fetch (hex strings, max 16)\n   * @param {number} numSignatures - Number of oracle signatures required (default: 1, max based on queue config)\n   * @returns {Promise<FetchSignaturesConsensusResponse>} Oracle quote response with signatures\n   *\n   * @throws {Error} When gateway is unreachable or returns error\n   * @throws {Error} When crossbar cannot resolve feed hashes\n   * @throws {Error} When insufficient oracles are available\n   *\n   * @since 2.14.0\n   * @see {@link fetchUpdateBundle} - Deprecated equivalent method\n   * @see {@link Queue.fetchQuoteIx} - High-level method that uses this internally\n   *\n   * @example\n   * ```typescript\n   * import { CrossbarClient } from '@switchboard-xyz/common';\n   *\n   * // Initialize crossbar client\n   * const crossbar = CrossbarClient.default();\n   *\n   * // Single feed quote\n   * const btcQuote = await gateway.fetchQuote(\n   *   crossbar,\n   *   ['0xef0d8b6fcd0104e3e75096912fc8e1e432893da4f18faedaacca7e5875da620f'], // BTC/USD\n   *   1 // Single signature for fast updates\n   * );\n   *\n   * // Multi-feed quote for DeFi protocol\n   * const defiAssets = [\n   *   '0xef0d8b6fcd0104e3e75096912fc8e1e432893da4f18faedaacca7e5875da620f', // BTC/USD\n   *   '0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef', // ETH/USD\n   *   '0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890', // SOL/USD\n   *   '0x9876543210fedcba9876543210fedcba9876543210fedcba9876543210fedcba'  // USDC/USD\n   * ];\n   *\n   * const portfolioQuote = await gateway.fetchQuote(\n   *   crossbar,\n   *   defiAssets,\n   *   5 // Higher consensus for financial operations\n   * );\n   *\n   * // Access oracle responses\n   * console.log('Oracle responses:', portfolioQuote.oracle_responses.length);\n   * console.log('Recent slot:', portfolioQuote.slot);\n   *\n   * // Process individual feed responses\n   * portfolioQuote.oracle_responses.forEach((oracle, index) => {\n   *   oracle.feed_responses.forEach((feed, feedIndex) => {\n   *     console.log(`Oracle ${index}, Feed ${feedIndex}:`, {\n   *       feedHash: feed.feed_hash,\n   *       value: feed.success_value,\n   *       confidence: feed.min_oracle_samples\n   *     });\n   *   });\n   * });\n   * ```\n   */\n  async fetchQuote(\n    crossbar: CrossbarClient,\n    feedHashes: string[],\n    numSignatures: number = 1,\n    variableOverrides?: Record<string, string>\n  ): Promise<FetchSignaturesConsensusResponse> {\n    const feedRequests = await Promise.all(\n      feedHashes.map(async hash => {\n        try {\n          const ipfsData = await crossbar.fetchOracleFeed(hash);\n          return {\n            feed_proto_b64: ipfsData.data,\n          };\n        } catch {\n          console.warn('Using fallback v1 fetch for feed', hash);\n          const { jobs } = await crossbar.fetch(hash);\n          return {\n            jobs_b64_encoded: encodeJobs(jobs),\n            max_variance: 1e9, // default to 1% variance\n            min_responses: 1, // default to 1 job response\n            min_oracles: 1, // default to 1 oracle response\n          };\n        }\n      })\n    );\n\n    const url = `${this.gatewayUrl}/gateway/api/v1/fetch_signatures_consensus`;\n    const method = 'POST';\n    const headers = { 'Content-Type': 'application/json' };\n    const data = JSON.stringify({\n      api_version: '1.0.0',\n      signature_scheme: 'Ed25519',\n      hash_scheme: 'Sha256',\n      feed_requests: feedRequests,\n      recent_hash: '',\n      num_oracles: numSignatures,\n      use_ed25519: true,\n      variable_overrides: variableOverrides ?? {},\n    });\n\n    try {\n      const resp = await axiosClient()(url, { method, headers, data });\n      return resp.data;\n    } catch (err) {\n      console.error('fetchQuote error', err);\n      throw err;\n    }\n  }\n\n  /**\n   * @deprecated Use {@link fetchQuote} instead. The bundle terminology has been replaced with quote terminology.\n   *\n   * Fetches oracle bundle data from the gateway\n   */\n  async fetchUpdateBundle(\n    crossbar: CrossbarClient,\n    feedHashes: string[],\n    numSignatures: number = 1\n  ): Promise<FetchSignaturesConsensusResponse> {\n    return this.fetchQuote(crossbar, feedHashes, numSignatures);\n  }\n\n  /**\n   * Sends a request to the gateway bridge enclave.\n   *\n   * REST API endpoint: /api/v1/gateway_bridge_enclave\n   *\n   * @param chainHash The chain hash to include in the request.\n   * @param oraclePubkey The public key of the oracle.\n   * @param queuePubkey The public key of the queue.\n   * @returns A promise that resolves to the response.\n   * @throws if the request fails.\n   */\n  async fetchBridgingMessage(params: {\n    chainHash: string;\n    oraclePubkey: string;\n    queuePubkey: string;\n  }): Promise<BridgeEnclaveResponse> {\n    const url = `${this.gatewayUrl}/gateway/api/v1/gateway_bridge_enclave`;\n    const method = 'POST';\n    const headers = { 'Content-Type': 'application/json' };\n    const body = {\n      api_version: '1.0.0',\n      chain_hash: params.chainHash,\n      oracle_pubkey: params.oraclePubkey,\n      queue_pubkey: params.queuePubkey,\n    };\n    const data = JSON.stringify(body);\n    const resp = await axiosClient()(url, { method, headers, data });\n    return resp.data;\n  }\n\n  /**\n   * Fetches the randomness reveal from the gateway.\n   * @param params The parameters for the randomness reveal.\n   * @returns The randomness reveal response.\n   */\n  async fetchRandomnessReveal(\n    params:\n      | {\n          randomnessAccount: web3.PublicKey;\n          slothash: string;\n          slot: number;\n          rpc?: string;\n        }\n      | {\n          randomnessId: string;\n          timestamp: number;\n          minStalenessSeconds: number;\n        }\n  ): Promise<RandomnessRevealResponse> {\n    const url = `${this.gatewayUrl}/gateway/api/v1/randomness_reveal`;\n    const method = 'POST';\n    const responseType = 'text';\n    const headers = { 'Content-Type': 'application/json' };\n\n    // Handle Solana and Cross-Chain Randomness\n    let data: string;\n    if ('slot' in params) {\n      // Solana Randomness\n      data = JSON.stringify({\n        slothash: [...bs58.decode(params.slothash)],\n        randomness_key: params.randomnessAccount.toBuffer().toString('hex'),\n        slot: params.slot,\n        rpc: params.rpc,\n      });\n    } else {\n      // Cross-chain randomness\n      data = JSON.stringify({\n        timestamp: params.timestamp,\n        min_staleness_seconds: params.minStalenessSeconds,\n        randomness_key: params.randomnessId,\n      });\n    }\n    try {\n      const txtResponse = await axiosClient()(url, {\n        method,\n        headers,\n        data,\n        responseType,\n      });\n      return JSON.parse(txtResponse.data);\n    } catch (err) {\n      console.error('fetchRandomnessReveal error', err);\n      throw err;\n    }\n  }\n\n  async test(): Promise<boolean> {\n    const url = `${this.gatewayUrl}/gateway/api/v1/test`;\n    const cachedResponse = GATEWAY_PING_CACHE.get(this.gatewayUrl);\n    if (cachedResponse !== undefined) return cachedResponse;\n\n    try {\n      const txt = await axiosClient()(url);\n      if (txt.data.length !== 0) {\n        GATEWAY_PING_CACHE.set(this.gatewayUrl, true);\n        return true;\n      }\n    } catch {} // eslint-disable-line no-empty\n    GATEWAY_PING_CACHE.set(this.gatewayUrl, false);\n    return false;\n  }\n\n  endpoint(): string {\n    return this.gatewayUrl;\n  }\n\n  toString(): string {\n    return JSON.stringify({\n      gatewayUrl: this.gatewayUrl,\n      programId: this.program.programId.toBase58(),\n    });\n  }\n\n  [Symbol.toPrimitive](hint: string) {\n    return hint === 'string' ? `Gateway: ${this.toString()}` : null;\n  }\n}\n"]}