{"version":3,"file":"recentSlothashes.js","sourceRoot":"","sources":["../../../src/sysvars/recentSlothashes.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,yBAAyB,EAAE,MAAM,iBAAiB,CAAC;AAG5D,OAAO,EAAE,EAAE,EAAE,MAAM,sBAAsB,CAAC;AAC1C,OAAO,IAAI,MAAM,MAAM,CAAC;AAExB;;;GAGG;AACH,MAAM,OAAO,gBAAgB;IAC3B;;OAEG;IACH,gBAAuB,CAAC;IACxB;;;;OAIG;IACI,MAAM,CAAO,WAAW,CAC7B,UAA2B;;YAE3B,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YACnD,MAAM,WAAW,GAAG,MAAM,UAAU,CAAC,cAAc,CACjD,yBAAyB,EACzB;gBACE,UAAU,EAAE,WAAW;gBACvB,SAAS,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,CAAC,EAAE;aACrC,CACF,CAAC;YACF,IAAI,CAAC,WAAW,EAAE,CAAC;gBACjB,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;YAClC,CAAC;YACD,MAAM,MAAM,GAAG,WAAW,CAAC,IAAI,CAAC;YAChC,MAAM,UAAU,GAAG,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAC7C,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;YACxE,OAAO,CAAC,IAAI,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;QAClD,CAAC;KAAA;IAEM,MAAM,CAAO,sBAAsB,CACxC,UAA2B,EAC3B,CAAS;;YAET,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YACnD,MAAM,WAAW,GAAG,MAAM,UAAU,CAAC,cAAc,CACjD,yBAAyB,EACzB;gBACE,UAAU,EAAE,WAAW;gBACvB,SAAS,EAAE,EAAE,MAAM,EAAE,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE;aACrD,CACF,CAAC;YACF,IAAI,CAAC,WAAW,EAAE,CAAC;gBACjB,OAAO,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC;YACnE,CAAC;YACD,MAAM,GAAG,GAAwB,EAAE,CAAC;YACpC,MAAM,MAAM,GAAG,WAAW,CAAC,IAAI,CAAC;YAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC3B,MAAM,UAAU,GAAG,MAAM,CAAC,eAAe,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;gBAClD,MAAM,SAAS,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;gBAC7B,MAAM,OAAO,GAAG,SAAS,GAAG,EAAE,CAAC;gBAC/B,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CACzB,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,EAAE,OAAO,CAAC,CAC5D,CAAC;gBACF,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;YACrD,CAAC;YACD,OAAO,GAAG,CAAC;QACb,CAAC;KAAA;CACF","sourcesContent":["import { SPL_SYSVAR_SLOT_HASHES_ID } from '../constants.js';\n\nimport type { web3 } from '@coral-xyz/anchor-31';\nimport { BN } from '@coral-xyz/anchor-31';\nimport bs58 from 'bs58';\n\n/**\n * Abstraction around the SysvarS1otHashes111111111111111111111111111 sysvar\n * This sysvar is used to store the recent slot hashes\n */\nexport class RecentSlotHashes {\n  /**\n   *  Disable object instantiation.\n   */\n  private constructor() {}\n  /**\n   * Fetches the latest slot hash from the sysvar.\n   * @param connection The connection to use.\n   * @returns A promise that resolves to the latest slot number and hash.\n   */\n  public static async fetchLatest(\n    connection: web3.Connection\n  ): Promise<[BN, string]> {\n    const defaultHash = bs58.encode(Array(32).fill(0));\n    const accountInfo = await connection.getAccountInfo(\n      SPL_SYSVAR_SLOT_HASHES_ID,\n      {\n        commitment: 'finalized',\n        dataSlice: { length: 40, offset: 8 },\n      }\n    );\n    if (!accountInfo) {\n      return [new BN(0), defaultHash];\n    }\n    const buffer = accountInfo.data;\n    const slotNumber = buffer.readBigUInt64LE(0);\n    const encoded = bs58.encode(Uint8Array.prototype.slice.call(buffer, 8));\n    return [new BN(slotNumber.toString()), encoded];\n  }\n\n  public static async fetchLatestNSlothashes(\n    connection: web3.Connection,\n    n: number\n  ): Promise<Array<[BN, string]>> {\n    const defaultHash = bs58.encode(Array(32).fill(0));\n    const accountInfo = await connection.getAccountInfo(\n      SPL_SYSVAR_SLOT_HASHES_ID,\n      {\n        commitment: 'finalized',\n        dataSlice: { length: 40 * Math.floor(n), offset: 8 },\n      }\n    );\n    if (!accountInfo) {\n      return Array.from({ length: n }, () => [new BN(0), defaultHash]);\n    }\n    const out: Array<[BN, string]> = [];\n    const buffer = accountInfo.data;\n    for (let i = 0; i < n; i++) {\n      const slotNumber = buffer.readBigUInt64LE(i * 40);\n      const hashStart = i * 40 + 8;\n      const hashEnd = hashStart + 32;\n      const encoded = bs58.encode(\n        Uint8Array.prototype.slice.call(buffer, hashStart, hashEnd)\n      );\n      out.push([new BN(slotNumber.toString()), encoded]);\n    }\n    return out;\n  }\n}\n"]}