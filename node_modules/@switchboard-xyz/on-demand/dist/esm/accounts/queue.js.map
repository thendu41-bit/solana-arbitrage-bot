{"version":3,"file":"queue.js","sourceRoot":"","sources":["../../../src/accounts/queue.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,WAAW,EAAE,gBAAgB,EAAE,MAAM,2BAA2B,CAAC;AAC1E,OAAO,EACL,eAAe,EACf,uCAAuC,EACvC,0BAA0B,EAC1B,yBAAyB,EACzB,oBAAoB,GACrB,MAAM,iBAAiB,CAAC;AACzB,2FAA2F;AAC3F,OAAO,EAAE,uBAAuB,EAAE,MAAM,iDAAiD,CAAC;AAa1F,OAAO,EAAE,OAAO,EAAE,MAAM,iCAAiC,CAAC;AAC1D,OAAO,EAAE,yBAAyB,EAAE,YAAY,EAAE,MAAM,mBAAmB,CAAC;AAC5E,OAAO,EAAE,SAAS,EAAE,YAAY,EAAE,MAAM,yBAAyB,CAAC;AAElE,OAAO,EAAE,MAAM,EAAqB,MAAM,aAAa,CAAC;AAExD,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAC7C,OAAO,EAAE,KAAK,EAAE,MAAM,YAAY,CAAC;AAGnC,OAAO,EAAE,EAAE,EAAE,IAAI,EAAE,MAAM,sBAAsB,CAAC;AAEhD,OAAO,EAAkB,QAAQ,EAAE,MAAM,yBAAyB,CAAC;AACnE,OAAO,EAAE,UAAU,EAAmB,MAAM,EAAE,MAAM,yBAAyB,CAAC;AAC9E,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AA+FhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiEG;AACH,MAAM,OAAO,KAAK;IAYhB;;;;;;;;;;;;;;;OAeG;IACH,MAAM,CAAO,WAAW,CAAC,OAAgB;;YACvC,IAAI,CAAC;gBACH,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,mBAAmB,CAAC,CAAC;gBAC5D,MAAM,KAAK,CAAC,QAAQ,EAAE,CAAC;gBACvB,OAAO,KAAK,CAAC;YACf,CAAC;YAAC,WAAM,CAAC;gBACP,aAAa;YACf,CAAC;YACD,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,kBAAkB,CAAC,CAAC;YAC3D,OAAO,KAAK,CAAC;QACf,CAAC;KAAA;IAED;;;;;;;;;;;;;;;;OAgBG;IACG,wBAAwB,CAAC,QAAwB;;YACrD,qCAAqC;YACrC,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;gBACvB,OAAO,IAAI,CAAC,aAAa,CAAC;YAC5B,CAAC;YAED,IAAI,OAAO,GAAG,SAAS,CAAC;YACxB,IAAI,CAAC;gBACH,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,mBAAmB,CAAC,CAAC;gBACjE,MAAM,KAAK,CAAC,QAAQ,EAAE,CAAC;YACzB,CAAC;YAAC,WAAM,CAAC;gBACP,OAAO,GAAG,QAAQ,CAAC;YACrB,CAAC;YAED,MAAM,WAAW,GAAG,MAAM,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YAC1D,IAAI,CAAC,WAAW,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBAC7C,MAAM,IAAI,KAAK,CAAC,sCAAsC,OAAO,EAAE,CAAC,CAAC;YACnE,CAAC;YAED,MAAM,UAAU,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;YAClC,IAAI,CAAC,UAAU,EAAE,CAAC;gBAChB,MAAM,IAAI,KAAK,CAAC,6CAA6C,OAAO,EAAE,CAAC,CAAC;YAC1E,CAAC;YAED,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;YAEtD,mCAAmC;YACnC,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC;YAE7B,OAAO,OAAO,CAAC;QACjB,CAAC;KAAA;IAED;;;;;OAKG;IACG,2BAA2B,CAC/B,QAAwB;;YAExB,IAAI,OAAO,GAAG,SAAS,CAAC;YACxB,IAAI,CAAC;gBACH,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,mBAAmB,CAAC,CAAC;gBACjE,MAAM,KAAK,CAAC,QAAQ,EAAE,CAAC;YACzB,CAAC;YAAC,WAAM,CAAC;gBACP,OAAO,GAAG,QAAQ,CAAC;YACrB,CAAC;YAED,MAAM,WAAW,GAAG,MAAM,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YAC1D,MAAM,cAAc,GAIf,EAAE,CAAC;YAER,+BAA+B;YAC/B,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE,CAAC;gBACrC,IAAI,CAAC;oBACH,MAAM,SAAS,GAAG,GAAG,UAAU,sBAAsB,CAAC;oBACtD,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,CAAiB,SAAS,CAAC,CAAC;oBAC5D,MAAM,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC;oBAC7B,cAAc,CAAC,IAAI,CAAC;wBAClB,GAAG,EAAE,UAAU;wBACf,MAAM;wBACN,OAAO,EAAE,MAAM,CAAC,OAAO,IAAI,SAAS;qBACrC,CAAC,CAAC;gBACL,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACf,OAAO,CAAC,IAAI,CACV,sCAAsC,UAAU,GAAG,EACnD,KAAK,CACN,CAAC;gBACJ,CAAC;YACH,CAAC;YAED,wBAAwB;YACxB,MAAM,aAAa,GAAG,IAAI,GAAG,EAAkB,CAAC;YAChD,cAAc,CAAC,OAAO,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE;gBACrC,aAAa,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,aAAa,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACpE,CAAC,CAAC,CAAC;YAEH,IAAI,eAAe,GAAG,SAAS,CAAC;YAChC,IAAI,QAAQ,GAAG,CAAC,CAAC;YACjB,KAAK,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,IAAI,aAAa,CAAC,OAAO,EAAE,EAAE,CAAC;gBACvD,IAAI,KAAK,GAAG,QAAQ,EAAE,CAAC;oBACrB,QAAQ,GAAG,KAAK,CAAC;oBACjB,eAAe,GAAG,OAAO,CAAC;gBAC5B,CAAC;YACH,CAAC;YAED,0CAA0C;YAC1C,MAAM,gBAAgB,GAAG,cAAc,CAAC,MAAM,CAC5C,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,KAAK,eAAe,CACnC,CAAC;YACF,IAAI,gBAAgB,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBAClC,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;YAC/C,CAAC;YAED,iDAAiD;YACjD,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC;YACxE,MAAM,eAAe,GAAG,gBAAgB,CAAC,WAAW,CAAC,CAAC;YACtD,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,eAAe,CAAC,GAAG,CAAC,CAAC;YAC/D,OAAO,OAAO,CAAC;QACjB,CAAC;KAAA;IAED;;;;;OAKG;IACG,0BAA0B,CAAC,QAAwB;;YACvD,IAAI,OAAO,GAAG,SAAS,CAAC;YACxB,IAAI,CAAC;gBACH,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,mBAAmB,CAAC,CAAC;gBACjE,MAAM,KAAK,CAAC,QAAQ,EAAE,CAAC;YACzB,CAAC;YAAC,WAAM,CAAC;gBACP,OAAO,GAAG,QAAQ,CAAC;YACrB,CAAC;YAED,MAAM,WAAW,GAAG,MAAM,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YAC1D,MAAM,aAAa,GAId,EAAE,CAAC;YAER,uEAAuE;YACvE,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE,CAAC;gBACrC,IAAI,CAAC;oBACH,MAAM,SAAS,GAAG,GAAG,UAAU,qBAAqB,CAAC;oBACrD,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,CAAiB,SAAS,CAAC,CAAC;oBAC5D,MAAM,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC;oBAC7B,aAAa,CAAC,IAAI,CAAC;wBACjB,GAAG,EAAE,UAAU;wBACf,MAAM;wBACN,OAAO,EAAE,MAAM,CAAC,OAAO,IAAI,SAAS;qBACrC,CAAC,CAAC;gBACL,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACf,OAAO,CAAC,IAAI,CAAC,qCAAqC,UAAU,GAAG,EAAE,KAAK,CAAC,CAAC;gBAC1E,CAAC;YACH,CAAC;YAED,wBAAwB;YACxB,MAAM,aAAa,GAAG,IAAI,GAAG,EAAkB,CAAC;YAChD,aAAa,CAAC,OAAO,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE;gBACpC,aAAa,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,aAAa,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACpE,CAAC,CAAC,CAAC;YAEH,IAAI,eAAe,GAAG,SAAS,CAAC;YAChC,IAAI,QAAQ,GAAG,CAAC,CAAC;YACjB,KAAK,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,IAAI,aAAa,CAAC,OAAO,EAAE,EAAE,CAAC;gBACvD,IAAI,KAAK,GAAG,QAAQ,EAAE,CAAC;oBACrB,QAAQ,GAAG,KAAK,CAAC;oBACjB,eAAe,GAAG,OAAO,CAAC;gBAC5B,CAAC;YACH,CAAC;YAED,yCAAyC;YACzC,MAAM,eAAe,GAAG,aAAa,CAAC,MAAM,CAC1C,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,KAAK,eAAe,CACnC,CAAC;YACF,IAAI,eAAe,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBACjC,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;YAC9C,CAAC;YAED,gDAAgD;YAChD,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC;YACvE,MAAM,cAAc,GAAG,eAAe,CAAC,WAAW,CAAC,CAAC;YACpD,OAAO,cAAc,CAAC,GAAG,CAAC;QAC5B,CAAC;KAAA;IAED;;;;;;;OAOG;IACH,MAAM,CAAO,QAAQ,CACnB,OAAgB,EAChB,MAQC;;;YAED,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;YACtC,MAAM,2BAA2B,GAC/B,MAAA,MAAM,CAAC,2BAA2B,mCAAI,EAAE,GAAG,EAAE,CAAC;YAChD,MAAM,mCAAmC,GACvC,MAAA,MAAM,CAAC,mCAAmC,mCAAI,IAAI,CAAC;YACrD,MAAM,sBAAsB,GAAG,MAAA,MAAM,CAAC,sBAAsB,mCAAI,KAAK,CAAC;YACtE,MAAM,uBAAuB,GAC3B,MAAA,MAAM,CAAC,uBAAuB,mCAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;YACrD,MAAM,MAAM,GAAG,MAAA,MAAM,CAAC,MAAM,mCAAI,OAAO,CAAC;YACxC,MAAM,WAAW,GAAG,MAAA,MAAM,CAAC,WAAW,mCAAI,GAAG,CAAC;YAC9C,MAAM,KAAK,GAAG,YAAY,CAAC,OAAO,CAAC,CAAC;YACpC,uCAAuC;YACvC,MAAM,SAAS,GAAG,YAAY,CAAC,OAAO,CAAC,SAAS,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC;YACnE,MAAM,UAAU,GACd,MAAA,MAAM,CAAC,OAAO,mCACd,CAAC,MAAM,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;YAC3D,MAAM,MAAM,GAAG,SAAS,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;YAEhD,MAAM,EAAE,GAAG,MAAM,OAAO,CAAC,WAAW,CAAC,SAAS,CAC5C;gBACE,2BAA2B;gBAC3B,mCAAmC;gBACnC,sBAAsB;gBACtB,uBAAuB;gBACvB,MAAM;gBACN,WAAW;gBACX,UAAU,EAAE,IAAI,EAAE,CAAC,UAAU,CAAC;aAC/B,EACD;gBACE,QAAQ,EAAE;oBACR,KAAK,EAAE,KAAK,CAAC,SAAS;oBACtB,WAAW,EAAE,MAAM,yBAAyB,CAC1C,eAAe,EACf,KAAK,CAAC,SAAS,CAChB;oBACD,SAAS,EAAE,KAAK,CAAC,SAAS;oBAC1B,KAAK,EAAE,KAAK,CAAC,SAAS;oBACtB,aAAa,EAAE,IAAI,CAAC,aAAa,CAAC,SAAS;oBAC3C,YAAY,EAAE,oBAAoB;oBAClC,UAAU,EAAE,eAAe;oBAC3B,YAAY,EAAE,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC;oBACxC,SAAS,EAAE,SAAS;oBACpB,GAAG,EAAE,MAAM;oBACX,yBAAyB,EAAE,IAAI,CAAC,yBAAyB,CAAC,SAAS;oBACnE,sBAAsB,EAAE,uCAAuC;iBAChE;gBACD,OAAO,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC;aACxB,CACF,CAAC;YACF,OAAO,CAAC,IAAI,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;QAC1D,CAAC;KAAA;IAED;;;;;OAKG;IACH,MAAM,CAAO,WAAW,CACtB,OAAgB,EAChB,MASC;;;YAED,wDAAwD;YACxD,MAAM,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,sBAAsB,CACnD,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,MAAM,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC,EACxD,OAAO,CAAC,SAAS,CAClB,CAAC;YACF,MAAM,2BAA2B,GAC/B,MAAA,MAAM,CAAC,2BAA2B,mCAAI,EAAE,GAAG,EAAE,CAAC;YAChD,MAAM,mCAAmC,GACvC,MAAA,MAAM,CAAC,mCAAmC,mCAAI,IAAI,CAAC;YACrD,MAAM,sBAAsB,GAAG,MAAA,MAAM,CAAC,sBAAsB,mCAAI,KAAK,CAAC;YACtE,MAAM,uBAAuB,GAC3B,MAAA,MAAM,CAAC,uBAAuB,mCAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;YACrD,MAAM,MAAM,GAAG,MAAA,MAAM,CAAC,MAAM,mCAAI,OAAO,CAAC;YACxC,MAAM,WAAW,GAAG,MAAA,MAAM,CAAC,WAAW,mCAAI,GAAG,CAAC;YAC9C,MAAM,KAAK,GAAG,YAAY,CAAC,OAAO,CAAC,CAAC;YACpC,uCAAuC;YACvC,MAAM,SAAS,GAAG,YAAY,CAAC,OAAO,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACzD,MAAM,UAAU,GACd,MAAA,MAAM,CAAC,OAAO,mCACd,CAAC,MAAM,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;YAC3D,MAAM,MAAM,GAAG,SAAS,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;YAEhD,MAAM,EAAE,GAAG,OAAO,CAAC,WAAW,CAAC,YAAY,CACzC;gBACE,2BAA2B;gBAC3B,mCAAmC;gBACnC,sBAAsB;gBACtB,uBAAuB;gBACvB,MAAM;gBACN,WAAW;gBACX,UAAU,EAAE,IAAI,EAAE,CAAC,UAAU,CAAC;gBAC9B,cAAc,EAAE,MAAM,CAAC,cAAc;aACtC,EACD;gBACE,QAAQ,EAAE;oBACR,KAAK,EAAE,KAAK;oBACZ,WAAW,EAAE,MAAM,yBAAyB,CAC1C,eAAe,EACf,KAAK,EACL,IAAI,CACL;oBACD,SAAS,EAAE,KAAK,CAAC,SAAS;oBAC1B,KAAK,EAAE,KAAK,CAAC,SAAS;oBACtB,aAAa,EAAE,IAAI,CAAC,aAAa,CAAC,SAAS;oBAC3C,YAAY,EAAE,oBAAoB;oBAClC,UAAU,EAAE,eAAe;oBAC3B,YAAY,EAAE,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC;oBACxC,SAAS,EAAE,SAAS;oBACpB,GAAG,EAAE,MAAM;oBACX,yBAAyB,EAAE,IAAI,CAAC,yBAAyB,CAAC,SAAS;oBACnE,sBAAsB,EAAE,uCAAuC;iBAChE;gBACD,OAAO,EAAE,CAAC,KAAK,CAAC;aACjB,CACF,CAAC;YACF,OAAO,CAAC,IAAI,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;QACzC,CAAC;KAAA;IAED;;;;OAIG;IACG,WAAW,CAAC,MAMjB;;YACC,MAAM,QAAQ,GAAG,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACjD,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC;YAE5C,MAAM,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,gBAAgB,CAClD;gBACE,eAAe,EAAE,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC;gBACnD,uBAAuB,EAAE,IAAI,EAAE,CAAC,MAAM,CAAC,uBAAuB,CAAC;gBAC/D,SAAS,EAAE,MAAM,CAAC,SAAS;gBAC3B,IAAI,EAAE,IAAI,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC;aAC1B,EACD;gBACE,QAAQ,EAAE;oBACR,KAAK,EAAE,IAAI,CAAC,MAAM;oBAClB,MAAM,EAAE,MAAM,CAAC,MAAM;oBACrB,SAAS;oBACT,KAAK,EAAE,QAAQ;iBAChB;aACF,CACF,CAAC;YACF,OAAO,EAAE,CAAC;QACZ,CAAC;KAAA;IAED;;;;;;;;;;;OAWG;IACH,MAAM,CAAO,eAAe,CAC1B,OAAgB,EAChB,MASC;;YAED,MAAM,YAAY,GAAG,IAAI,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;YACtD,OAAO,YAAY,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;QAC9C,CAAC;KAAA;IAED,MAAM,CAAO,oBAAoB,CAC/B,OAAgB,EAChB,MAOC;;YAED,MAAM,YAAY,GAAG,IAAI,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,KAAM,CAAC,CAAC;YACvD,OAAO,YAAY,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;QACnD,CAAC;KAAA;IAED,MAAM,CAAO,oBAAoB,CAC/B,OAAgB,EAChB,MAOC;;YAED,MAAM,YAAY,GAAG,IAAI,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,KAAM,CAAC,CAAC;YACvD,OAAO,YAAY,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;QACnD,CAAC;KAAA;IAED,MAAM,CAAO,wBAAwB,CACnC,OAAgB,EAChB,MAQC;;YAED,MAAM,YAAY,GAAG,IAAI,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,KAAM,CAAC,CAAC;YACvD,OAAO,YAAY,CAAC,wBAAwB,CAAC;gBAC3C,OAAO,EAAE,MAAM,CAAC,OAAO;gBACvB,WAAW,EAAE,MAAM,CAAC,WAAW;gBAC/B,YAAY,EAAE,MAAM,CAAC,YAAY;gBACjC,aAAa,EAAE,MAAM,CAAC,aAAa;gBACnC,UAAU,EAAE,MAAM,CAAC,UAAU;gBAC7B,iBAAiB,EAAE,MAAM,CAAC,iBAAiB;aAC5C,CAAC,CAAC;QACL,CAAC;KAAA;IAED;;;OAGG;IACH,MAAM,CAAO,aAAa,CACxB,OAAgB,EAChB,MASC;;YAED,MAAM,YAAY,GAAG,IAAI,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;YACtD,MAAM,UAAU,GAAG,MAAM,YAAY,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;YAC9D,OAAO,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QACrD,CAAC;KAAA;IAED;;;;;OAKG;IACH,YACW,OAAgB,EAChB,MAAsB;QADtB,YAAO,GAAP,OAAO,CAAS;QAChB,WAAM,GAAN,MAAM,CAAgB;QA3gBzB,SAAI,GAA4B,IAAI,CAAC;QACrC,gBAAW,GAA0C,IAAI,CAAC;QAC1D,2BAAsB,GAAW,CAAC,CAAC;QACnC,kBAAa,GAAmB,IAAI,CAAC;QA0gB3C,IAAI,IAAI,CAAC,MAAM,KAAK,SAAS,EAAE,CAAC;YAC9B,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;QACtC,CAAC;IACH,CAAC;IAED;;;;OAIG;IACG,eAAe;;YACnB,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC;YACnC,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;YAC7D,OAAO,OAAO,CAAC;QACjB,CAAC;KAAA;IAED;;;;OAIG;IACG,gBAAgB;;YACpB,OAAO,CAAC,IAAI,CAAC,+CAA+C,CAAC,CAAC;YAC9D,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;YAC7B,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;YAC7C,MAAM,cAAc,GAAG,MAAM,MAAM,CAAC,QAAQ,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YAC/D,MAAM,WAAW,GAAG,cAAc;iBAC/B,GAAG,CAAC,aAAa,CAAC,EAAE,CACnB,aAAa,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,EAAE,CACtD;iBACA,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC;iBAC3C,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC;YAE3D,MAAM,KAAK,GAAsD,EAAE,CAAC;YACpE,KAAK,MAAM,CAAC,IAAI,WAAW,EAAE,CAAC;gBAC5B,MAAM,EAAE,GAAG,IAAI,OAAO,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC5D,KAAK,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YAClD,CAAC;YAED,IAAI,QAAQ,GAAc,EAAE,CAAC;YAC7B,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;gBACzB,IAAI,CAAC;oBACH,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC;oBAClC,kEAAkE;oBAClE,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,kBAAkB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;oBAClE,IAAI,CAAC,MAAM;wBAAE,SAAS;oBAEtB,6CAA6C;oBAC7C,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACzB,CAAC;gBAAC,OAAO,CAAC,EAAE,CAAC;oBACX,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;gBAC5B,CAAC;YACH,CAAC;YACD,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC;YACpD,OAAO,QAAqB,CAAC;QAC/B,CAAC;KAAA;IAED;;;;;;;OAOG;IACG,YAAY,CAAC,UAAmB;;YACpC,IAAI,UAAU;gBAAE,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;YAE7D,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAC/C,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC;gBAAE,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;YACjE,OAAO,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;QAC/D,CAAC;KAAA;IAED;;;;;;;;;;;;;;OAcG;IACG,eAAe,CAAC,MASrB;;YACC,IAAI,OAAgB,CAAC;YACrB,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;gBACpB,OAAO,GAAG,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;YACtC,CAAC;iBAAM,IAAI,MAAM,CAAC,OAAO,YAAY,OAAO,EAAE,CAAC;gBAC7C,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;YAC3B,CAAC;iBAAM,CAAC;gBACN,OAAO,GAAG,IAAI,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;YACtD,CAAC;YACD,OAAO,MAAM,OAAO,CAAC,eAAe,CAAC;gBACnC,UAAU,EAAE,MAAM,CAAC,UAAU;gBAC7B,IAAI,EAAE,MAAM,CAAC,IAAI;gBACjB,aAAa,EAAE,MAAM,CAAC,aAAa;gBACnC,WAAW,EAAE,MAAM,CAAC,WAAW;gBAC/B,YAAY,EAAE,MAAM,CAAC,YAAY;gBACjC,YAAY,EAAE,MAAM,CAAC,YAAY;gBACjC,iBAAiB,EAAE,MAAM,CAAC,iBAAiB;aAC5C,CAAC,CAAC;QACL,CAAC;KAAA;IAEK,oBAAoB,CAAC,MAO1B;;YACC,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YACxD,OAAO,MAAM,OAAO,CAAC,oBAAoB,CAAC;gBACxC,UAAU,EAAE,MAAM,CAAC,UAAU;gBAC7B,WAAW,EAAE,MAAM,CAAC,WAAW;gBAC/B,aAAa,EAAE,MAAM,CAAC,aAAa;gBACnC,YAAY,EAAE,MAAM,CAAC,YAAY;gBACjC,iBAAiB,EAAE,MAAM,CAAC,iBAAiB;aAC5C,CAAC,CAAC;QACL,CAAC;KAAA;IAEK,wBAAwB,CAAC,MAO9B;;YACC,IAAI,OAAgB,CAAC;YACrB,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;gBACpB,OAAO,GAAG,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;YACtC,CAAC;iBAAM,IAAI,MAAM,CAAC,OAAO,YAAY,OAAO,EAAE,CAAC;gBAC7C,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;YAC3B,CAAC;iBAAM,CAAC;gBACN,OAAO,GAAG,IAAI,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;YACtD,CAAC;YACD,OAAO,MAAM,OAAO,CAAC,wBAAwB,CAAC;gBAC5C,WAAW,EAAE,MAAM,CAAC,WAAW;gBAC/B,YAAY,EAAE,MAAM,CAAC,YAAY;gBACjC,aAAa,EAAE,MAAM,CAAC,aAAa;gBACnC,UAAU,EAAE,MAAM,CAAC,UAAU;gBAC7B,iBAAiB,EAAE,MAAM,CAAC,iBAAiB;aAC5C,CAAC,CAAC;QACL,CAAC;KAAA;IAEK,oBAAoB,CAAC,MAO1B;;YACC,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YACxD,OAAO,MAAM,OAAO,CAAC,oBAAoB,CAAC;gBACxC,UAAU,EAAE,MAAM,CAAC,UAAU;gBAC7B,WAAW,EAAE,MAAM,CAAC,WAAW;gBAC/B,aAAa,EAAE,MAAM,CAAC,aAAa;gBACnC,YAAY,EAAE,MAAM,CAAC,YAAY;gBACjC,iBAAiB,EAAE,MAAM,CAAC,iBAAiB;aAC5C,CAAC,CAAC;QACL,CAAC;KAAA;IAED;;;;;OAKG;IACH,MAAM,CAAC,QAAQ,CACb,OAAgB,EAChB,MAAsB;QAEtB,OAAO,OAAO,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAC3D,CAAC;IAED;;;;;OAKG;IACG,QAAQ;;YACZ,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,EAAE,CAAC;gBAClD,IAAI,CAAC,IAAI,GAAG,MAAM,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YAC9D,CAAC;YACD,OAAO,IAAI,CAAC,IAAI,CAAC;QACnB,CAAC;KAAA;IAED;;;;;;;;;OASG;IACG,cAAc,CAAC,MAEpB;;YACC,MAAM,QAAQ,GAAG,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACjD,MAAM,KAAK,GAAG,MAAM,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACjD,MAAM,gBAAgB,GAAG,KAAK,CAAC,SAAS,CAAC;YACzC,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC;YAC5C,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,iBAAiB,CACzD,EAAE,SAAS,EAAE,MAAM,CAAC,SAAS,EAAE,EAC/B;gBACE,QAAQ,EAAE;oBACR,KAAK,EAAE,IAAI,CAAC,MAAM;oBAClB,SAAS;oBACT,gBAAgB;oBAChB,KAAK,EAAE,QAAQ;iBAChB;aACF,CACF,CAAC;YACF,OAAO,EAAE,CAAC;QACZ,CAAC;KAAA;IAED;;;;;;;OAOG;IACG,aAAa,CAAC,MAEnB;;YACC,MAAM,QAAQ,GAAG,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACjD,MAAM,KAAK,GAAG,MAAM,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACjD,MAAM,gBAAgB,GAAG,KAAK,CAAC,SAAS,CAAC;YACzC,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC;YAC5C,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,oBAAoB,CAC5D,EAAE,SAAS,EAAE,MAAM,CAAC,SAAS,EAAE,EAC/B;gBACE,QAAQ,EAAE;oBACR,KAAK,EAAE,IAAI,CAAC,MAAM;oBAClB,SAAS;oBACT,gBAAgB;oBAChB,KAAK,EAAE,QAAQ;iBAChB;aACF,CACF,CAAC;YACF,OAAO,EAAE,CAAC;QACZ,CAAC;KAAA;IAED;;;;;;OAMG;IACG,YAAY,CAAC,MAIlB;;;YACC,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC;YACnC,MAAM,QAAQ,GAAG,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACjD,MAAM,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YAC3E,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,eAAe,CACvD;gBACE,SAAS,EAAE,MAAA,MAAM,CAAC,SAAS,mCAAI,IAAI;gBACnC,MAAM,EAAE,MAAA,MAAM,CAAC,MAAM,mCAAI,IAAI;gBAC7B,WAAW,EAAE,WAAW;aACzB,EACD;gBACE,QAAQ,EAAE;oBACR,KAAK,EAAE,IAAI,CAAC,MAAM;oBAClB,SAAS,EAAE,IAAI,CAAC,SAAS;oBACzB,KAAK,EAAE,QAAQ;iBAChB;aACF,CACF,CAAC;YACF,OAAO,EAAE,CAAC;QACZ,CAAC;KAAA;IAEK,QAAQ,CAAC,MAEd;;YACC,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC;YACnC,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;YACjC,MAAM,KAAK,GAAG,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC9C,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,WAAW,CACzC,EAAE,EACF;gBACE,QAAQ,EAAE;oBACR,KAAK,EAAE,IAAI,CAAC,MAAM;oBAClB,SAAS;oBACT,KAAK;oBACL,GAAG,EAAE,MAAM,CAAC,GAAG;iBAChB;aACF,CACF,CAAC;QACJ,CAAC;KAAA;IAEK,UAAU,CAAC,MAGhB;;YACC,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC;YACnC,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;YACjC,MAAM,KAAK,GAAG,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC9C,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;YACrB,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,aAAa,CAC3C;gBACE,MAAM,EAAE,MAAM,CAAC,MAAM;aACtB,EACD;gBACE,QAAQ,EAAE;oBACR,KAAK,EAAE,IAAI,CAAC,MAAM;oBAClB,SAAS;oBACT,KAAK;oBACL,GAAG;oBACH,KAAK,EAAE,MAAM,CAAC,KAAK;iBACpB;aACF,CACF,CAAC;QACJ,CAAC;KAAA;IAEK,cAAc,CAAC,MAEpB;;YACC,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC;YACnC,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;YACjC,MAAM,KAAK,GAAG,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC9C,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,mBAAmB,CACjD;gBACE,cAAc,EAAE,MAAM,CAAC,MAAM;aAC9B,EACD;gBACE,QAAQ,EAAE;oBACR,KAAK,EAAE,IAAI,CAAC,MAAM;oBAClB,SAAS;oBACT,KAAK;iBACN;aACF,CACF,CAAC;QACJ,CAAC;KAAA;IAED;;;;;2EAKuE;IACjE,qBAAqB,CAAC,MAI3B;;YACC,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC;YACnC,OAAO,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE;gBACpC,SAAS,EAAE,IAAI,CAAC,SAAS;gBACzB,OAAO,EAAE,MAAM,CAAC,MAAM;gBACtB,OAAO,EAAE,IAAI,CAAC,MAAM;gBACpB,UAAU,EAAE,MAAM,CAAC,UAAU;gBAC7B,MAAM,EAAE,MAAM,CAAC,MAAM;aACtB,CAAC,CAAC;QACL,CAAC;KAAA;IAED;;;;OAIG;IACG,iBAAiB;;YACrB,MAAM,EAAE,UAAU,EAAE,aAAa,EAAE,GAAG,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC;YAC5D,MAAM,cAAc,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;YAC1D,MAAM,GAAG,GAAuC,EAAE,CAAC;YACnD,KAAK,MAAM,SAAS,IAAI,cAAc,EAAE,CAAC;gBACvC,GAAG,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,aAAa,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;YACpD,CAAC;YACD,OAAO,GAAG,CAAC;QACb,CAAC;KAAA;IAED;;;;OAIG;IACG,gBAAgB;;YACpB,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC;YAC3C,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;YAC7C,MAAM,cAAc,GAAG,MAAM,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YACpE,MAAM,UAAU,GAAG,cAAc;iBAC9B,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,IAAK,CAAC,UAAU,CAAC,CAAC;iBACrC,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;YAE3C,MAAM,KAAK,GAAuB,EAAE,CAAC;YACrC,KAAK,MAAM,CAAC,IAAI,UAAU,EAAE,CAAC;gBAC3B,MAAM,EAAE,GAAG,IAAI,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;gBAChE,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;YACxB,CAAC;YAED,MAAM,GAAG,GAAuD,EAAE,CAAC;YACnE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBACxC,IAAI,CAAC;oBACH,kEAAkE;oBAClE,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,kBAAkB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;oBACnE,IAAI,CAAC,MAAM;wBAAE,SAAS;gBACxB,CAAC;gBAAC,WAAM,CAAC;oBACP,qCAAqC;gBACvC,CAAC;gBACD,GAAG,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,cAAc,CAAC,CAAC,CAAE,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YAC1D,CAAC;YAED,MAAM,YAAY,GAAG,GAAG;iBACrB,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,kBAAkB,KAAK,CAAC,CAAC,CAAC,0BAA0B;iBAC/E,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,4BAA4B;YAC9F,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC;gBAAE,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;YAEjE,MAAM,MAAM,GACV,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;YAChE,OAAO,MAAM,CAAC,GAAG,CAAC;QACpB,CAAC;KAAA;IAED;;;OAGG;IACH,QAAQ;QACN,OAAO,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IACnD,CAAC;IAED;;;;;OAKG;IACH,MAAM,CAAC,QAAQ,CAAC,OAAgB,EAAE,MAAsB;QACtD,MAAM,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,sBAAsB,CACtD,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,MAAM,CAAC,QAAQ,EAAE,CAAC,EACzC,OAAO,CAAC,SAAS,CAClB,CAAC;QACF,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED,0DAA0D;IACpD,eAAe;;YACnB,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YACvB,IAAI,IAAI,CAAC,WAAW,IAAI,GAAG,GAAG,IAAI,CAAC,sBAAsB,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,EAAE,CAAC;gBAC1E,OAAO,IAAI,CAAC,WAAW,CAAC;YAC1B,CAAC;YACD,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC;YACnC,MAAM,SAAS,GAAG,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YACpE,MAAM,MAAM,GAAG,SAAS,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YAClD,MAAM,KAAK,GACT,MAAM,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC;YACvE,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC,KAAK,CAAC;YAC/B,OAAO,KAAK,CAAC,KAAM,CAAC;QACtB,CAAC;KAAA;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAwCG;IACG,mBAAmB,CACvB,QAAwB,EACxB,UAAoB,EACpB,OAKC;;YAED,OAAO,IAAI,CAAC,YAAY,CACtB,QAAQ,EACR,UAAU,EACV,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI;gBACT,OAAO,EAAE,SAAS;gBAClB,iBAAiB,EAAE,EAAE;gBACrB,aAAa,EAAE,CAAC;gBAChB,cAAc,EAAE,CAAC;aAClB,CACF,CAAC;QACJ,CAAC;KAAA;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA+GG;IACG,YAAY,CAChB,QAAwB,EACxB,iBAA2C,EAC3C,OAKC;;;YAED,MAAM,MAAM,GAAG,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI;gBACxB,OAAO,EAAE,SAAS;gBAClB,iBAAiB,EAAE,EAAE;gBACrB,aAAa,EAAE,CAAC;gBAChB,cAAc,EAAE,CAAC;aAClB,CAAC;YAEF,IAAI,MAAM,CAAC,OAAO,KAAK,SAAS,EAAE,CAAC;gBACjC,IAAI,CAAC;oBACH,MAAM,CAAC,OAAO,GAAG,MAAM,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC,CAAC;gBACjE,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACf,MAAM,IAAI,KAAK,CACb,0CAA0C,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,EAAE,CACrG,CAAC;gBACJ,CAAC;YACH,CAAC;YAED,IAAI,iBAAiB,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBACnC,MAAM,IAAI,KAAK,CAAC,uDAAuD,CAAC,CAAC;YAC3E,CAAC;YAED,IAAI,QAA0C,CAAC;YAE/C,wEAAwE;YACxE,IAAI,OAAO,iBAAiB,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE,CAAC;gBAC7C,4EAA4E;gBAC5E,MAAM,UAAU,GAAG,iBAA6B,CAAC;gBACjD,QAAQ,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,UAAU,CACxC,QAAQ,EACR,UAAU,EACV,MAAA,MAAM,CAAC,aAAa,mCAAI,CAAC,EACzB,MAAM,CAAC,iBAAiB,CACzB,CAAC;YACJ,CAAC;iBAAM,CAAC;gBACN,2EAA2E;gBAC3E,MAAM,KAAK,GAAG,iBAAkC,CAAC;gBACjD,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;oBACnB,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;wBACzC,MAAM,IAAI,KAAK,CACb,eAAe,IAAI,CAAC,IAAI,IAAI,SAAS,iCAAiC,CACvE,CAAC;oBACJ,CAAC;gBACH,CAAC,CAAC,CAAC;gBAEH,QAAQ,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,wBAAwB,CAAC;oBACvD,WAAW,EAAE,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;oBAC1C,YAAY,EAAE,KAAK;oBACnB,aAAa,EAAE,MAAM,CAAC,aAAa;oBACnC,UAAU,EAAE,IAAI;oBAChB,iBAAiB,EAAE,MAAM,CAAC,iBAAiB;iBAC5C,CAAC,CAAC;YACL,CAAC;YAED,qCAAqC;YACrC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,IAAI,QAAQ,CAAC,gBAAgB,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBACzE,MAAM,IAAI,KAAK,CAAC,uDAAuD,CAAC,CAAC;YAC3E,CAAC;YAED,qEAAqE;YACrE,MAAM,iBAAiB,GAAG,QAAQ,CAAC,gBAAgB,CAAC,GAAG,CACrD,CAAC,cAAc,EAAE,KAAK,EAAE,EAAE;gBACxB,IAAI,SAAS,GAAG,cAAc,CAAC,sBAAsB,CAAC;gBAEtD,uGAAuG;gBACvG,IAAI,SAAS,IAAI,SAAS,CAAC,MAAM,KAAK,GAAG,EAAE,CAAC;oBAC1C,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,gCAAgC;gBAC1E,CAAC;gBAED,oCAAoC;gBACpC,IACE,CAAC,cAAc,CAAC,cAAc;oBAC9B,cAAc,CAAC,cAAc,CAAC,MAAM,KAAK,CAAC,EAC1C,CAAC;oBACD,MAAM,IAAI,KAAK,CAAC,mBAAmB,KAAK,yBAAyB,CAAC,CAAC;gBACrE,CAAC;gBAED,+DAA+D;gBAC/D,2DAA2D;gBAC3D,sFAAsF;gBACtF,8EAA8E;gBAE9E,8CAA8C;gBAC9C,MAAM,gBAAgB,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;gBAClE,MAAM,cAAc,GAAG,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,WAAW;gBAE3E,kEAAkE;gBAClE,6EAA6E;gBAC7E,IAAI,cAAc,CAAC,UAAU,IAAI,GAAG,EAAE,CAAC;oBACrC,MAAM,IAAI,KAAK,CACb,+BAA+B,cAAc,CAAC,UAAU,6BAA6B,CACtF,CAAC;gBACJ,CAAC;gBAED,oDAAoD;gBACpD,IAAI,cAAc,CAAC,cAAc,CAAC,MAAM,GAAG,EAAE,EAAE,CAAC;oBAC9C,MAAM,IAAI,KAAK,CACb,sCAAsC,cAAc,CAAC,cAAc,CAAC,MAAM,0BAA0B,CACrG,CAAC;gBACJ,CAAC;gBAED,0DAA0D;gBAC1D,MAAM,eAAe,GAAa,EAAE,CAAC;gBACrC,KAAK,MAAM,YAAY,IAAI,cAAc,CAAC,cAAc,EAAE,CAAC;oBACzD,kDAAkD;oBAClD,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC,CAAC,WAAW;oBAExE,uEAAuE;oBACvE,MAAM,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;oBACxD,MAAM,UAAU,GAAG,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;oBACpC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;wBAC5B,MAAM,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;wBACpC,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;wBAC1B,UAAU,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,YAAY,IAAI,KAAK,CAAC,GAAG,IAAI,CAAC,CAAC;oBACzD,CAAC;oBAED,MAAM,gBAAgB,GAAG,MAAM,CAAC,IAAI,CAAC;wBACnC,YAAY,CAAC,kBAAkB;qBAChC,CAAC,CAAC,CAAC,SAAS;oBAEb,qEAAqE;oBACrE,eAAe,CAAC,IAAI,CAClB,MAAM,CAAC,MAAM,CAAC;wBACZ,QAAQ,EAAE,qBAAqB;wBAC/B,UAAU,EAAE,mCAAmC;wBAC/C,gBAAgB,EAAE,8BAA8B;qBACjD,CAAC,CACH,CAAC;gBACJ,CAAC;gBAED,+EAA+E;gBAC/E,mFAAmF;gBACnF,MAAM,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC;oBAClC,cAAc,EAAE,oCAAoC;oBACpD,GAAG,eAAe,EAAE,iCAAiC;iBACtD,CAAC,CAAC;gBAEH,OAAO;oBACL,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,EAAE,iCAAiC;oBACxE,SAAS,EAAE,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,QAAQ,CAAC,EAAE,4CAA4C;oBACxG,OAAO,EAAE,aAAa,EAAE,uDAAuD;oBAC/E,SAAS,EAAE,cAAc,CAAC,UAAU,EAAE,wCAAwC;iBAC/E,CAAC;YACJ,CAAC,CACF,CAAC;YAEF,MAAM,kBAAkB,GAAG,uBAAuB,CAAC,uBAAuB,CACxE,iBAAiB,EACjB,MAAA,MAAM,CAAC,cAAc,mCAAI,CAAC,EAC1B,OAAO,QAAQ,CAAC,IAAI,KAAK,QAAQ;gBAC/B,CAAC,CAAC,QAAQ,CAAC,IAAI;gBACf,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,oCAAoC;YAClE,CAAC,CAAC,kCAAkC;aACrC,CAAC;YACF,OAAO,kBAAkB,CAAC;QAC5B,CAAC;KAAA;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA0FG;IACG,qBAAqB,CACzB,QAAwB,EACxB,iBAA2C,EAC3C,OAMC;;;YAED,MAAM,MAAM,GAAG,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI;gBACxB,iBAAiB,EAAE,EAAE;gBACrB,aAAa,EAAE,CAAC;gBAChB,cAAc,EAAE,CAAC;gBACjB,OAAO,EAAE,SAAS;aACnB,CAAC;YAEF,IAAI,MAAM,CAAC,OAAO,KAAK,SAAS,EAAE,CAAC;gBACjC,IAAI,CAAC;oBACH,MAAM,CAAC,OAAO,GAAG,MAAM,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC,CAAC;gBACjE,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACf,MAAM,IAAI,KAAK,CACb,0CAA0C,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,EAAE,CACrG,CAAC;gBACJ,CAAC;YACH,CAAC;YAED,qDAAqD;YACrD,IAAI,UAAoB,CAAC;YACzB,IAAI,iBAAiB,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBACnC,MAAM,IAAI,KAAK,CAAC,uDAAuD,CAAC,CAAC;YAC3E,CAAC;YAED,wEAAwE;YACxE,IAAI,OAAO,iBAAiB,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE,CAAC;gBAC7C,mCAAmC;gBACnC,UAAU,GAAG,iBAA6B,CAAC;YAC7C,CAAC;iBAAM,CAAC;gBACN,2DAA2D;gBAC3D,UAAU,GAAI,iBAAmC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;oBAC3D,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;wBACzC,MAAM,IAAI,KAAK,CACb,eAAe,IAAI,CAAC,IAAI,IAAI,SAAS,0DAA0D,CAChG,CAAC;oBACJ,CAAC;oBACD,MAAM,cAAc,GAAG,QAAQ,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;oBAC1D,OAAO,IAAI,GAAG,cAAc,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;gBAC/C,CAAC,CAAC,CAAC;YACL,CAAC;YAED,uDAAuD;YACvD,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC,GAAG,WAAW,CAAC,kBAAkB,CAC1D,IAAI,CAAC,MAAM,EACX,UAAU,EACV,gBAAgB,CACjB,CAAC;YAEF,2DAA2D;YAC3D,iEAAiE;YACjE,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,YAAY,CACvC,QAAQ,EACR,iBAAiB,EACjB,MAAM,CACP,CAAC;YAEF,4CAA4C;YAC5C,MAAM,KAAK,GAAG,MAAA,MAAM,CAAC,KAAK,mCAAI,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC;YACnE,MAAM,MAAM,GAAG,CAAC,CAAC;YAEjB,uDAAuD;YACvD,MAAM,cAAc,GAAG,IAAI,IAAI,CAAC,sBAAsB,CAAC;gBACrD,SAAS,EAAE,gBAAgB;gBAC3B,IAAI,EAAE;oBACJ,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE,KAAK,EAAE,EAAE,oBAAoB;oBACjF,EAAE,MAAM,EAAE,aAAa,EAAE,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,EAAE,qBAAqB;oBACnF;wBACE,MAAM,EAAE,0BAA0B;wBAClC,QAAQ,EAAE,KAAK;wBACf,UAAU,EAAE,KAAK;qBAClB,EAAE,gBAAgB;oBACnB;wBACE,MAAM,EAAE,yBAAyB;wBACjC,QAAQ,EAAE,KAAK;wBACf,UAAU,EAAE,KAAK;qBAClB,EAAE,kBAAkB;oBACrB;wBACE,MAAM,EAAE,IAAI,CAAC,mBAAmB;wBAChC,QAAQ,EAAE,KAAK;wBACf,UAAU,EAAE,KAAK;qBAClB,EAAE,mBAAmB;oBACtB,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,EAAE,YAAY;oBACjE;wBACE,MAAM,EAAE,IAAI,CAAC,aAAa,CAAC,SAAS;wBACpC,QAAQ,EAAE,KAAK;wBACf,UAAU,EAAE,KAAK;qBAClB,EAAE,qBAAqB;iBACzB;gBACD,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,MAAA,MAAM,CAAC,cAAc,mCAAI,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,uDAAuD;aACvH,CAAC,CAAC;YAEH,OAAO,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;QACrC,CAAC;KAAA;;AAx/Ce,wBAAkB,GAAmB,IAAI,IAAI,CAAC,SAAS,CACrE,8CAA8C,CAC/C,AAFiC,CAEhC;AACc,yBAAmB,GAAmB,IAAI,IAAI,CAAC,SAAS,CACtE,8CAA8C,CAC/C,AAFkC,CAEjC","sourcesContent":["import { OracleQuote, QUOTE_PROGRAM_ID } from '../classes/oracleQuote.js';\nimport {\n  SOL_NATIVE_MINT,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  SPL_SYSVAR_INSTRUCTIONS_ID,\n  SPL_SYSVAR_SLOT_HASHES_ID,\n  SPL_TOKEN_PROGRAM_ID,\n} from '../constants.js';\n// import type { Ed25519Signature } from '../instruction-utils/Ed25519InstructionUtils.js';\nimport { Ed25519InstructionUtils } from '../instruction-utils/Ed25519InstructionUtils.js';\n// import type { Secp256k1Signature } from '../instruction-utils/Secp256k1InstructionUtils.js';\n// import { Secp256k1InstructionUtils } from '../instruction-utils/Secp256k1InstructionUtils.js';\nimport type {\n  FeedEvalResponse,\n  FetchSignaturesBatchResponse,\n  FetchSignaturesConsensusResponse,\n  FetchSignaturesMultiResponse,\n} from '../oracle-interfaces/gateway.js';\nimport type {\n  FeedRequest,\n  FeedRequestV1,\n} from '../oracle-interfaces/gateway.js';\nimport { Gateway } from '../oracle-interfaces/gateway.js';\nimport { getAssociatedTokenAddress, getNodePayer } from '../utils/index.js';\nimport { getLutKey, getLutSigner } from '../utils/lookupTable.js';\n\nimport { Oracle, OracleAccountData } from './oracle.js';\nimport type { SwitchboardPermission } from './permission.js';\nimport { Permission } from './permission.js';\nimport { State } from './state.js';\n\nimport type { Program } from '@coral-xyz/anchor-31';\nimport { BN, web3 } from '@coral-xyz/anchor-31';\nimport type { IOracleFeed } from '@switchboard-xyz/common';\nimport { CrossbarClient, FeedHash } from '@switchboard-xyz/common';\nimport { AsyncUtils, type IOracleJob, toUtf8 } from '@switchboard-xyz/common';\nimport axios from 'axios';\nimport { Buffer } from 'buffer';\n\n/**\n * Health response from gateway/oracle test endpoints\n */\ninterface HealthResponse {\n  chain: string;\n  disable_heartbeats: boolean;\n  ed25519_pubkey: string;\n  enable_gateway: number;\n  enable_guardian: number;\n  enable_pull_oracle: number;\n  enable_push_oracle: number;\n  gateway_advertise_interval: number;\n  gateway_ingress: string;\n  heartbeat_interval: number;\n  key_rotate_interval: number;\n  mr_enclave: string;\n  network_id: string;\n  oracle_authority: string;\n  oracle_ingress: string;\n  pagerduty_api_key: string;\n  payer_secret: string;\n  payer_secret_filepath: string;\n  guardian_oracle: string;\n  pull_oracle: string;\n  push_oracle: string;\n  push_queue: string;\n  routine_max_jitter: number;\n  rpc_url: string;\n  secp256k1_pubkey: string;\n  switchboard_on_demand_program_id: string;\n  version_filepath: string;\n  version: string;\n  wss_rpc_url: string;\n  known_oracles: string;\n  system_time: number;\n  restricted: boolean;\n  api_key_service_url: string;\n}\n\n/**\n * On-chain queue account data structure\n *\n * The queue account is the core configuration for a set of oracle operators.\n * It defines which oracles are authorized to sign data and various security\n * parameters for the oracle network.\n *\n * @interface QueueAccountData\n */\nexport interface QueueAccountData {\n  /** Authority that can modify the queue configuration */\n  authority: web3.PublicKey;\n  /** Intel SGX enclave measurements for TEE verification */\n  mrEnclaves: Uint8Array[];\n  /** Public keys of authorized oracle operators */\n  oracleKeys: web3.PublicKey[];\n  /** Maximum age for TEE quote verification */\n  maxQuoteVerificationAge: BN;\n  /** Last heartbeat timestamp from authority */\n  lastHeartbeat: BN;\n  /** Timeout period for oracle nodes */\n  nodeTimeout: BN;\n  /** Minimum stake required for oracle operators */\n  oracleMinStake: BN;\n  /** Time after which authority can override without permission */\n  allowAuthorityOverrideAfter: BN;\n  /** Number of valid enclave measurements */\n  mrEnclavesLen: number;\n  /** Number of registered oracle keys */\n  oracleKeysLen: number;\n  /** Reward amount for oracle operators */\n  reward: number;\n  /** Current oracle index for round-robin selection */\n  currIdx: number;\n  /** Garbage collection index */\n  gcIdx: number;\n  /** Whether authority heartbeat permission is required */\n  requireAuthorityHeartbeatPermission: boolean;\n  /** Whether authority verify permission is required */\n  requireAuthorityVerifyPermission: boolean;\n  /** Whether usage permissions are enforced */\n  requireUsagePermissions: boolean;\n  /** PDA bump for the queue signer account */\n  signerBump: number;\n  /** Token mint for rewards and fees */\n  mint: web3.PublicKey;\n  /** Slot when the lookup table was last updated */\n  lutSlot: BN;\n  /** Whether subsidies are allowed for this queue */\n  allowSubsidies: boolean;\n  /** Network configuration node (NCN) account */\n  ncn: web3.PublicKey;\n}\n\n/**\n * Queue account management for Switchboard On-Demand\n *\n * The Queue class is the primary interface for interacting with oracle operators\n * in the Switchboard network. It manages:\n *\n * - Oracle operator authorization and verification\n * - Quote fetching and signature verification\n * - Address lookup table management\n * - Gateway interactions for data retrieval\n *\n * ## Key Features\n *\n * - **Oracle Management**: Track and verify authorized oracle signers\n * - **Quote Operations**: Fetch signed data quotes from oracle operators\n * - **LUT Optimization**: Automatic address lookup table management\n * - **Network Detection**: Automatic mainnet/devnet queue selection\n *\n * @example\n * ```typescript\n * import * as sb from '@switchboard-xyz/on-demand';\n *\n * // Initialize program and connection\n * const program = anchor.workspace.SwitchboardOnDemand;\n * const connection = new Connection(\"https://api.devnet.solana.com\");\n *\n * // Load the default queue for your network\n * const queue = await Queue.loadDefault(program);\n *\n * // Set up gateway and crossbar\n * const crossbar = sb.CrossbarClient.default();\n * const gateway = await queue.fetchGatewayFromCrossbar(crossbar);\n *\n * // Fetch a quote for specific feeds (BTC/USD and ETH/USD)\n * const feedHashes = [\n *   '0xef0d8b6fcd0104e3e75096912fc8e1e432893da4f18faedaacca7e5875da620f', // BTC/USD\n *   '0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef'  // ETH/USD\n * ];\n *\n * const sigVerifyIx = await queue.fetchQuoteIx(\n *   gateway,\n *   crossbar,\n *   feedHashes,\n *   {\n *     numSignatures: 3, // Require 3 oracle signatures for consensus\n *     variableOverrides: {},\n *     instructionIdx: 0\n *   }\n * );\n *\n * // Build and send transaction\n * const tx = await sb.asV0Tx({\n *   connection,\n *   ixs: [sigVerifyIx, yourBusinessLogicIx],\n *   signers: [payer],\n *   computeUnitPrice: 200_000,\n *   computeUnitLimitMultiple: 1.3,\n * });\n *\n * await connection.sendTransaction(tx, {\n *   preflightCommitment: \"processed\",\n * });\n * ```\n *\n * @class Queue\n */\nexport class Queue {\n  private data: QueueAccountData | null = null;\n  private lookupTable: web3.AddressLookupTableAccount | null = null;\n  private lookupTableRefreshTime: number = 0;\n  private cachedGateway: Gateway | null = null;\n  static readonly DEFAULT_DEVNET_KEY: web3.PublicKey = new web3.PublicKey(\n    'EYiAmGSdsQTuCw413V5BzaruWuCCSDgTPtBGvLkXHbe7'\n  );\n  static readonly DEFAULT_MAINNET_KEY: web3.PublicKey = new web3.PublicKey(\n    'A43DyUGA7s8eXPxqEjJY6EBu1KKbNgfxF8h17VAHn13w'\n  );\n\n  /**\n   * Loads the default queue for the current network\n   *\n   * Automatically detects whether you're on mainnet or devnet and loads\n   * the appropriate default queue. This is the recommended way to get\n   * started with Switchboard On-Demand.\n   *\n   * @param {Program} program - Anchor program instance\n   * @returns {Promise<Queue>} The default queue for your network\n   *\n   * @example\n   * ```typescript\n   * const queue = await Queue.loadDefault(program);\n   * console.log('Using queue:', queue.pubkey.toBase58());\n   * ```\n   */\n  static async loadDefault(program: Program): Promise<Queue> {\n    try {\n      const queue = new Queue(program, Queue.DEFAULT_MAINNET_KEY);\n      await queue.loadData();\n      return queue;\n    } catch {\n      // do nothing\n    }\n    const queue = new Queue(program, Queue.DEFAULT_DEVNET_KEY);\n    return queue;\n  }\n\n  /**\n   * Fetches a gateway URL from the Crossbar network\n   *\n   * The gateway is the interface to oracle operators. This method\n   * automatically detects your network and returns an appropriate\n   * gateway for fetching oracle data. The gateway is cached after\n   * the first successful fetch and reused for subsequent calls.\n   *\n   * @param {CrossbarClient} crossbar - Crossbar client instance\n   * @returns {Promise<Gateway>} Gateway instance for oracle communication\n   *\n   * @example\n   * ```typescript\n   * const crossbar = CrossbarClient.default();\n   * const gateway = await queue.fetchGatewayFromCrossbar(crossbar);\n   * ```\n   */\n  async fetchGatewayFromCrossbar(crossbar: CrossbarClient): Promise<Gateway> {\n    // Return cached gateway if available\n    if (this.cachedGateway) {\n      return this.cachedGateway;\n    }\n\n    let network = 'mainnet';\n    try {\n      const queue = new Queue(this.program, Queue.DEFAULT_MAINNET_KEY);\n      await queue.loadData();\n    } catch {\n      network = 'devnet';\n    }\n\n    const gatewayUrls = await crossbar.fetchGateways(network);\n    if (!gatewayUrls || gatewayUrls.length === 0) {\n      throw new Error(`No gateways available for network: ${network}`);\n    }\n\n    const gatewayUrl = gatewayUrls[0];\n    if (!gatewayUrl) {\n      throw new Error(`Invalid gateway URL received for network: ${network}`);\n    }\n\n    const gateway = new Gateway(this.program, gatewayUrl);\n\n    // Cache the gateway for future use\n    this.cachedGateway = gateway;\n\n    return gateway;\n  }\n\n  /**\n   * Fetches a gateway with the latest/majority version from Crossbar\n   *\n   * @param crossbar - CrossbarClient instance\n   * @returns Promise<Gateway> - Gateway instance with the latest version\n   */\n  async fetchGatewayByLatestVersion(\n    crossbar: CrossbarClient\n  ): Promise<Gateway> {\n    let network = 'mainnet';\n    try {\n      const queue = new Queue(this.program, Queue.DEFAULT_MAINNET_KEY);\n      await queue.loadData();\n    } catch {\n      network = 'devnet';\n    }\n\n    const gatewayUrls = await crossbar.fetchGateways(network);\n    const gatewayHealths: Array<{\n      url: string;\n      health: HealthResponse;\n      version: string;\n    }> = [];\n\n    // Check health of all gateways\n    for (const gatewayUrl of gatewayUrls) {\n      try {\n        const healthUrl = `${gatewayUrl}/gateway/api/v1/test`;\n        const response = await axios.get<HealthResponse>(healthUrl);\n        const health = response.data;\n        gatewayHealths.push({\n          url: gatewayUrl,\n          health,\n          version: health.version || 'unknown',\n        });\n      } catch (error) {\n        console.warn(\n          `Failed to fetch health for gateway ${gatewayUrl}:`,\n          error\n        );\n      }\n    }\n\n    // Find majority version\n    const versionCounts = new Map<string, number>();\n    gatewayHealths.forEach(({ version }) => {\n      versionCounts.set(version, (versionCounts.get(version) || 0) + 1);\n    });\n\n    let majorityVersion = 'unknown';\n    let maxCount = 0;\n    for (const [version, count] of versionCounts.entries()) {\n      if (count > maxCount) {\n        maxCount = count;\n        majorityVersion = version;\n      }\n    }\n\n    // Find all gateways with majority version\n    const majorityGateways = gatewayHealths.filter(\n      g => g.version === majorityVersion\n    );\n    if (majorityGateways.length === 0) {\n      throw new Error('No healthy gateways found');\n    }\n\n    // Randomly select from majority version gateways\n    const randomIndex = Math.floor(Math.random() * majorityGateways.length);\n    const selectedGateway = majorityGateways[randomIndex];\n    const gateway = new Gateway(this.program, selectedGateway.url);\n    return gateway;\n  }\n\n  /**\n   * Fetches an oracle with the latest/majority version from Crossbar\n   *\n   * @param crossbar - CrossbarClient instance\n   * @returns Promise<string> - Oracle URL with the latest version\n   */\n  async fetchOracleByLatestVersion(crossbar: CrossbarClient): Promise<string> {\n    let network = 'mainnet';\n    try {\n      const queue = new Queue(this.program, Queue.DEFAULT_MAINNET_KEY);\n      await queue.loadData();\n    } catch {\n      network = 'devnet';\n    }\n\n    const gatewayUrls = await crossbar.fetchGateways(network);\n    const oracleHealths: Array<{\n      url: string;\n      health: HealthResponse;\n      version: string;\n    }> = [];\n\n    // Check health of all oracles (using gateway URLs but oracle endpoint)\n    for (const gatewayUrl of gatewayUrls) {\n      try {\n        const healthUrl = `${gatewayUrl}/oracle/api/v1/test`;\n        const response = await axios.get<HealthResponse>(healthUrl);\n        const health = response.data;\n        oracleHealths.push({\n          url: gatewayUrl,\n          health,\n          version: health.version || 'unknown',\n        });\n      } catch (error) {\n        console.warn(`Failed to fetch oracle health for ${gatewayUrl}:`, error);\n      }\n    }\n\n    // Find majority version\n    const versionCounts = new Map<string, number>();\n    oracleHealths.forEach(({ version }) => {\n      versionCounts.set(version, (versionCounts.get(version) || 0) + 1);\n    });\n\n    let majorityVersion = 'unknown';\n    let maxCount = 0;\n    for (const [version, count] of versionCounts.entries()) {\n      if (count > maxCount) {\n        maxCount = count;\n        majorityVersion = version;\n      }\n    }\n\n    // Find all oracles with majority version\n    const majorityOracles = oracleHealths.filter(\n      o => o.version === majorityVersion\n    );\n    if (majorityOracles.length === 0) {\n      throw new Error('No healthy oracles found');\n    }\n\n    // Randomly select from majority version oracles\n    const randomIndex = Math.floor(Math.random() * majorityOracles.length);\n    const selectedOracle = majorityOracles[randomIndex];\n    return selectedOracle.url;\n  }\n\n  /**\n   * Creates a new queue account\n   *\n   * @param {Program} program - Anchor program instance\n   * @param {Object} params - Queue configuration parameters\n   * @returns {Promise<[Queue, web3.Keypair, web3.TransactionInstruction]>}\n   *          Tuple of [Queue instance, keypair, creation instruction]\n   */\n  static async createIx(\n    program: Program,\n    params: {\n      allowAuthorityOverrideAfter?: number;\n      requireAuthorityHeartbeatPermission?: boolean;\n      requireUsagePermission?: boolean;\n      maxQuoteVerificationAge?: number;\n      reward?: number;\n      nodeTimeout?: number;\n      lutSlot?: number;\n    }\n  ): Promise<[Queue, web3.Keypair, web3.TransactionInstruction]> {\n    const queue = web3.Keypair.generate();\n    const allowAuthorityOverrideAfter =\n      params.allowAuthorityOverrideAfter ?? 60 * 60;\n    const requireAuthorityHeartbeatPermission =\n      params.requireAuthorityHeartbeatPermission ?? true;\n    const requireUsagePermission = params.requireUsagePermission ?? false;\n    const maxQuoteVerificationAge =\n      params.maxQuoteVerificationAge ?? 60 * 60 * 24 * 7;\n    const reward = params.reward ?? 1000000;\n    const nodeTimeout = params.nodeTimeout ?? 300;\n    const payer = getNodePayer(program);\n    // Prepare accounts for the transaction\n    const lutSigner = getLutSigner(program.programId, queue.publicKey);\n    const recentSlot =\n      params.lutSlot ??\n      (await program.provider.connection.getSlot('finalized'));\n    const lutKey = getLutKey(lutSigner, recentSlot);\n\n    const ix = await program.instruction.queueInit(\n      {\n        allowAuthorityOverrideAfter,\n        requireAuthorityHeartbeatPermission,\n        requireUsagePermission,\n        maxQuoteVerificationAge,\n        reward,\n        nodeTimeout,\n        recentSlot: new BN(recentSlot),\n      },\n      {\n        accounts: {\n          queue: queue.publicKey,\n          queueEscrow: await getAssociatedTokenAddress(\n            SOL_NATIVE_MINT,\n            queue.publicKey\n          ),\n          authority: payer.publicKey,\n          payer: payer.publicKey,\n          systemProgram: web3.SystemProgram.programId,\n          tokenProgram: SPL_TOKEN_PROGRAM_ID,\n          nativeMint: SOL_NATIVE_MINT,\n          programState: State.keyFromSeed(program),\n          lutSigner: lutSigner,\n          lut: lutKey,\n          addressLookupTableProgram: web3.AddressLookupTableProgram.programId,\n          associatedTokenProgram: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n        },\n        signers: [payer, queue],\n      }\n    );\n    return [new Queue(program, queue.publicKey), queue, ix];\n  }\n\n  /**\n   * Creates a new instance of the `Queue` account with a PDA for SVM (non-solana) chains.\n   * @param program The anchor program instance.\n   * @param params The initialization parameters for the queue.\n   * @returns\n   */\n  static async createIxSVM(\n    program: Program,\n    params: {\n      sourceQueueKey: web3.PublicKey;\n      allowAuthorityOverrideAfter?: number;\n      requireAuthorityHeartbeatPermission?: boolean;\n      requireUsagePermission?: boolean;\n      maxQuoteVerificationAge?: number;\n      reward?: number;\n      nodeTimeout?: number;\n      lutSlot?: number;\n    }\n  ): Promise<[Queue, web3.TransactionInstruction]> {\n    // Generate the queue PDA for the given source queue key\n    const [queue] = web3.PublicKey.findProgramAddressSync(\n      [Buffer.from('Queue'), params.sourceQueueKey.toBuffer()],\n      program.programId\n    );\n    const allowAuthorityOverrideAfter =\n      params.allowAuthorityOverrideAfter ?? 60 * 60;\n    const requireAuthorityHeartbeatPermission =\n      params.requireAuthorityHeartbeatPermission ?? true;\n    const requireUsagePermission = params.requireUsagePermission ?? false;\n    const maxQuoteVerificationAge =\n      params.maxQuoteVerificationAge ?? 60 * 60 * 24 * 7;\n    const reward = params.reward ?? 1000000;\n    const nodeTimeout = params.nodeTimeout ?? 300;\n    const payer = getNodePayer(program);\n    // Prepare accounts for the transaction\n    const lutSigner = getLutSigner(program.programId, queue);\n    const recentSlot =\n      params.lutSlot ??\n      (await program.provider.connection.getSlot('finalized'));\n    const lutKey = getLutKey(lutSigner, recentSlot);\n\n    const ix = program.instruction.queueInitSvm(\n      {\n        allowAuthorityOverrideAfter,\n        requireAuthorityHeartbeatPermission,\n        requireUsagePermission,\n        maxQuoteVerificationAge,\n        reward,\n        nodeTimeout,\n        recentSlot: new BN(recentSlot),\n        sourceQueueKey: params.sourceQueueKey,\n      },\n      {\n        accounts: {\n          queue: queue,\n          queueEscrow: await getAssociatedTokenAddress(\n            SOL_NATIVE_MINT,\n            queue,\n            true\n          ),\n          authority: payer.publicKey,\n          payer: payer.publicKey,\n          systemProgram: web3.SystemProgram.programId,\n          tokenProgram: SPL_TOKEN_PROGRAM_ID,\n          nativeMint: SOL_NATIVE_MINT,\n          programState: State.keyFromSeed(program),\n          lutSigner: lutSigner,\n          lut: lutKey,\n          addressLookupTableProgram: web3.AddressLookupTableProgram.programId,\n          associatedTokenProgram: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n        },\n        signers: [payer],\n      }\n    );\n    return [new Queue(program, queue), ix];\n  }\n\n  /**\n   * Add an Oracle to a queue and set permissions\n   * @param program\n   * @param params\n   */\n  async overrideSVM(params: {\n    oracle: web3.PublicKey;\n    secp256k1Signer: Buffer;\n    maxQuoteVerificationAge: number;\n    mrEnclave: Buffer;\n    slot: number;\n  }) {\n    const stateKey = State.keyFromSeed(this.program);\n    const { authority } = await this.loadData();\n\n    const ix = this.program.instruction.queueOverrideSvm(\n      {\n        secp256K1Signer: Array.from(params.secp256k1Signer),\n        maxQuoteVerificationAge: new BN(params.maxQuoteVerificationAge),\n        mrEnclave: params.mrEnclave,\n        slot: new BN(params.slot),\n      },\n      {\n        accounts: {\n          queue: this.pubkey,\n          oracle: params.oracle,\n          authority,\n          state: stateKey,\n        },\n      }\n    );\n    return ix;\n  }\n\n  /**\n   *  Fetches signatures from a random gateway on the queue.\n   *\n   *  REST API endpoint: /api/v1/fetch_signatures\n   *\n   *  @param recentHash The chain metadata to sign with. Blockhash or slothash.\n   *  @param jobs The oracle jobs to perform.\n   *  @param numSignatures The number of oracles to fetch signatures from.\n   *  @param variableOverrides Optional variable overrides for task execution (e.g., {\"API_KEY\": \"custom-key\"})\n   *  @returns A promise that resolves to the feed evaluation responses.\n   *  @throws if the request fails.\n   */\n  static async fetchSignatures(\n    program: Program,\n    params: {\n      gateway?: string;\n      queue: web3.PublicKey;\n      recentHash?: string;\n      jobs: IOracleJob[];\n      numSignatures?: number;\n      maxVariance?: number;\n      minResponses?: number;\n      variableOverrides?: Record<string, string>;\n    }\n  ): Promise<{ responses: FeedEvalResponse[]; failures: string[] }> {\n    const queueAccount = new Queue(program, params.queue);\n    return queueAccount.fetchSignatures(params);\n  }\n\n  static async fetchSignaturesMulti(\n    program: Program,\n    params: {\n      gateway?: string;\n      queue: web3.PublicKey;\n      recentHash?: string;\n      feedConfigs: FeedRequestV1[];\n      minResponses?: number;\n      variableOverrides?: Record<string, string>;\n    }\n  ): Promise<FetchSignaturesMultiResponse> {\n    const queueAccount = new Queue(program, params.queue!);\n    return queueAccount.fetchSignaturesMulti(params);\n  }\n\n  static async fetchSignaturesBatch(\n    program: Program,\n    params: {\n      gateway?: string;\n      queue: web3.PublicKey;\n      recentHash?: string;\n      feedConfigs: FeedRequestV1[];\n      minResponses?: number;\n      variableOverrides?: Record<string, string>;\n    }\n  ): Promise<FetchSignaturesBatchResponse> {\n    const queueAccount = new Queue(program, params.queue!);\n    return queueAccount.fetchSignaturesBatch(params);\n  }\n\n  static async fetchSignaturesConsensus(\n    program: Program,\n    params: {\n      gateway?: string;\n      queue: web3.PublicKey;\n      feedConfigs: FeedRequest[];\n      useTimestamp?: boolean;\n      numSignatures?: number;\n      useEd25519?: boolean;\n      variableOverrides?: Record<string, string>;\n    }\n  ): Promise<FetchSignaturesConsensusResponse> {\n    const queueAccount = new Queue(program, params.queue!);\n    return queueAccount.fetchSignaturesConsensus({\n      gateway: params.gateway,\n      feedConfigs: params.feedConfigs,\n      useTimestamp: params.useTimestamp,\n      numSignatures: params.numSignatures,\n      useEd25519: params.useEd25519,\n      variableOverrides: params.variableOverrides,\n    });\n  }\n\n  /**\n   * @deprecated\n   * Deprecated. Use {@linkcode @switchboard-xyz/common#FeedHash.compute} instead.\n   */\n  static async fetchFeedHash(\n    program: Program,\n    params: {\n      gateway?: string;\n      queue: web3.PublicKey;\n      recentHash?: string;\n      jobs: IOracleJob[];\n      numSignatures?: number;\n      maxVariance?: number;\n      minResponses?: number;\n      variableOverrides?: Record<string, string>;\n    }\n  ): Promise<Buffer> {\n    const queueAccount = new Queue(program, params.queue);\n    const oracleSigs = await queueAccount.fetchSignatures(params);\n    return Buffer.from(oracleSigs[0].feed_hash, 'hex');\n  }\n\n  /**\n   *  Constructs a `OnDemandQueue` instance.\n   *\n   *  @param program The Anchor program instance.\n   *  @param pubkey The public key of the queue account.\n   */\n  constructor(\n    readonly program: Program,\n    readonly pubkey: web3.PublicKey\n  ) {\n    if (this.pubkey === undefined) {\n      throw new Error('NoPubkeyProvided');\n    }\n  }\n\n  /**\n   *  Loads the queue data from on chain and returns the listed oracle keys.\n   *\n   *  @returns A promise that resolves to an array of oracle public keys.\n   */\n  async fetchOracleKeys(): Promise<web3.PublicKey[]> {\n    const data = await this.loadData();\n    const oracles = data.oracleKeys.slice(0, data.oracleKeysLen);\n    return oracles;\n  }\n\n  /**\n   *  Loads the queue data from on chain and returns the listed gateways.\n   *\n   *  @returns A promise that resolves to an array of gateway URIs.\n   */\n  async fetchAllGateways(): Promise<Gateway[]> {\n    console.warn('Obsolete: please use fetchGatewayFromCrossbar');\n    const program = this.program;\n    const oracles = await this.fetchOracleKeys();\n    const oracleAccounts = await Oracle.loadMany(program, oracles);\n    const gatewayUris = oracleAccounts\n      .map(oracleAccount =>\n        oracleAccount ? toUtf8(oracleAccount.gatewayUri) : ''\n      )\n      .filter(gatewayUri => gatewayUri.length > 0)\n      .filter(gatewayUri => !gatewayUri.includes('infstones'));\n\n    const tests: { gateway: Gateway; promise: Promise<boolean> }[] = [];\n    for (const i in gatewayUris) {\n      const gw = new Gateway(program, gatewayUris[i], oracles[i]);\n      tests.push({ gateway: gw, promise: gw.test() });\n    }\n\n    let gateways: Gateway[] = [];\n    for (const test of tests) {\n      try {\n        const { gateway, promise } = test;\n        // Test gateways to see if they are good. Timeout after 2 seconds.\n        const isGood = await AsyncUtils.promiseWithTimeout(2000, promise);\n        if (!isGood) continue;\n\n        // If the gateway is good, add it to the list\n        gateways.push(gateway);\n      } catch (e) {\n        console.log('Timeout', e);\n      }\n    }\n    gateways = gateways.sort(() => Math.random() - 0.5);\n    return gateways as Gateway[];\n  }\n\n  /**\n   * Fetches a gateway interface for interacting with oracle nodes.\n   *\n   * @param gatewayUrl - Optional URL of a specific gateway to use. If not provided,\n   *                     a random gateway will be selected from the queue's available gateways.\n   * @returns Gateway - A Gateway instance for making oracle requests\n   * @throws {Error} If no gateways are available on the queue when selecting randomly\n   */\n  async fetchGateway(gatewayUrl?: string): Promise<Gateway> {\n    if (gatewayUrl) return new Gateway(this.program, gatewayUrl);\n\n    const gateways = await this.fetchAllGateways();\n    if (gateways.length === 0) throw new Error('NoGatewayAvailable');\n    return gateways[Math.floor(Math.random() * gateways.length)];\n  }\n\n  /**\n   *  Fetches signatures from a random gateway on the queue.\n   *\n   *  REST API endpoint: /api/v1/fetch_signatures\n   *\n   *  @param gateway The gateway to fetch signatures from. If not provided, a gateway will be automatically selected.\n   *  @param recentHash The chain metadata to sign with. Blockhash or slothash.\n   *  @param jobs The oracle jobs to perform.\n   *  @param numSignatures The number of oracles to fetch signatures from.\n   *  @param maxVariance The maximum variance allowed in the responses.\n   *  @param minResponses The minimum number of responses to attempt to fetch.\n   *  @param variableOverrides Optional variable overrides for task execution (e.g., {\"API_KEY\": \"custom-key\"})\n   *  @returns A promise that resolves to the feed evaluation responses.\n   *  @throws if the request fails.\n   */\n  async fetchSignatures(params: {\n    gateway?: string | Gateway;\n    recentHash?: string;\n    jobs: IOracleJob[];\n    numSignatures?: number;\n    maxVariance?: number;\n    minResponses?: number;\n    useTimestamp?: boolean;\n    variableOverrides?: Record<string, string>;\n  }): Promise<{ responses: FeedEvalResponse[]; failures: string[] }> {\n    let gateway: Gateway;\n    if (!params.gateway) {\n      gateway = await this.fetchGateway();\n    } else if (params.gateway instanceof Gateway) {\n      gateway = params.gateway;\n    } else {\n      gateway = new Gateway(this.program, params.gateway);\n    }\n    return await gateway.fetchSignatures({\n      recentHash: params.recentHash,\n      jobs: params.jobs,\n      numSignatures: params.numSignatures,\n      maxVariance: params.maxVariance,\n      minResponses: params.minResponses,\n      useTimestamp: params.useTimestamp,\n      variableOverrides: params.variableOverrides,\n    });\n  }\n\n  async fetchSignaturesMulti(params: {\n    gateway?: string;\n    recentHash?: string;\n    feedConfigs: FeedRequestV1[];\n    numSignatures?: number;\n    useTimestamp?: boolean;\n    variableOverrides?: Record<string, string>;\n  }): Promise<FetchSignaturesMultiResponse> {\n    const gateway = await this.fetchGateway(params.gateway);\n    return await gateway.fetchSignaturesMulti({\n      recentHash: params.recentHash,\n      feedConfigs: params.feedConfigs,\n      numSignatures: params.numSignatures,\n      useTimestamp: params.useTimestamp,\n      variableOverrides: params.variableOverrides,\n    });\n  }\n\n  async fetchSignaturesConsensus(params: {\n    gateway?: string | Gateway;\n    feedConfigs: FeedRequest[];\n    useTimestamp?: boolean;\n    numSignatures?: number;\n    useEd25519?: boolean;\n    variableOverrides?: Record<string, string>;\n  }): Promise<FetchSignaturesConsensusResponse> {\n    let gateway: Gateway;\n    if (!params.gateway) {\n      gateway = await this.fetchGateway();\n    } else if (params.gateway instanceof Gateway) {\n      gateway = params.gateway;\n    } else {\n      gateway = new Gateway(this.program, params.gateway);\n    }\n    return await gateway.fetchSignaturesConsensus({\n      feedConfigs: params.feedConfigs,\n      useTimestamp: params.useTimestamp,\n      numSignatures: params.numSignatures,\n      useEd25519: params.useEd25519,\n      variableOverrides: params.variableOverrides,\n    });\n  }\n\n  async fetchSignaturesBatch(params: {\n    gateway?: string;\n    recentHash?: string;\n    feedConfigs: FeedRequestV1[];\n    numSignatures?: number;\n    useTimestamp?: boolean;\n    variableOverrides?: Record<string, string>;\n  }): Promise<FetchSignaturesBatchResponse> {\n    const gateway = await this.fetchGateway(params.gateway);\n    return await gateway.fetchSignaturesBatch({\n      recentHash: params.recentHash,\n      feedConfigs: params.feedConfigs,\n      numSignatures: params.numSignatures,\n      useTimestamp: params.useTimestamp,\n      variableOverrides: params.variableOverrides,\n    });\n  }\n\n  /**\n   *  Loads the queue data for this {@linkcode Queue} account from on chain.\n   *\n   *  @returns A promise that resolves to the queue data.\n   *  @throws if the queue account does not exist.\n   */\n  static loadData(\n    program: Program,\n    pubkey: web3.PublicKey\n  ): Promise<QueueAccountData> {\n    return program.account['queueAccountData'].fetch(pubkey);\n  }\n\n  /**\n   *  Loads the queue data for this {@linkcode Queue} account from on chain.\n   *\n   *  @returns A promise that resolves to the queue data.\n   *  @throws if the queue account does not exist.\n   */\n  async loadData(): Promise<QueueAccountData> {\n    if (this.data === null || this.data === undefined) {\n      this.data = await Queue.loadData(this.program, this.pubkey);\n    }\n    return this.data;\n  }\n\n  /**\n   *  Adds a new MR enclave to the queue.\n   *  This will allow the queue to accept signatures from the given MR enclave.\n   *  @param mrEnclave The MR enclave to add.\n   *  @returns A promise that resolves to the transaction instruction.\n   *  @throws if the request fails.\n   *  @throws if the MR enclave is already added.\n   *  @throws if the MR enclave is invalid.\n   *  @throws if the MR enclave is not a valid length.\n   */\n  async addMrEnclaveIx(params: {\n    mrEnclave: Uint8Array;\n  }): Promise<web3.TransactionInstruction> {\n    const stateKey = State.keyFromSeed(this.program);\n    const state = await State.loadData(this.program);\n    const programAuthority = state.authority;\n    const { authority } = await this.loadData();\n    const ix = await this.program.instruction.queueAddMrEnclave(\n      { mrEnclave: params.mrEnclave },\n      {\n        accounts: {\n          queue: this.pubkey,\n          authority,\n          programAuthority,\n          state: stateKey,\n        },\n      }\n    );\n    return ix;\n  }\n\n  /**\n   *  Removes an MR enclave from the queue.\n   *  This will prevent the queue from accepting signatures from the given MR enclave.\n   *  @param mrEnclave The MR enclave to remove.\n   *  @returns A promise that resolves to the transaction instruction.\n   *  @throws if the request fails.\n   *  @throws if the MR enclave is not present.\n   */\n  async rmMrEnclaveIx(params: {\n    mrEnclave: Uint8Array;\n  }): Promise<web3.TransactionInstruction> {\n    const stateKey = State.keyFromSeed(this.program);\n    const state = await State.loadData(this.program);\n    const programAuthority = state.authority;\n    const { authority } = await this.loadData();\n    const ix = await this.program.instruction.queueRemoveMrEnclave(\n      { mrEnclave: params.mrEnclave },\n      {\n        accounts: {\n          queue: this.pubkey,\n          authority,\n          programAuthority,\n          state: stateKey,\n        },\n      }\n    );\n    return ix;\n  }\n\n  /**\n   * Sets the queue configurations.\n   * @param params.authority The new authority for the queue.\n   * @param params.reward The new reward for the queue.\n   * @param params.nodeTimeout The new node timeout for the queue.\n   * @returns A promise that resolves to the transaction instruction.\n   */\n  async setConfigsIx(params: {\n    authority?: web3.PublicKey;\n    reward?: number;\n    nodeTimeout?: number;\n  }): Promise<web3.TransactionInstruction> {\n    const data = await this.loadData();\n    const stateKey = State.keyFromSeed(this.program);\n    const nodeTimeout = params.nodeTimeout ? new BN(params.nodeTimeout) : null;\n    const ix = await this.program.instruction.queueSetConfigs(\n      {\n        authority: params.authority ?? null,\n        reward: params.reward ?? null,\n        nodeTimeout: nodeTimeout,\n      },\n      {\n        accounts: {\n          queue: this.pubkey,\n          authority: data.authority,\n          state: stateKey,\n        },\n      }\n    );\n    return ix;\n  }\n\n  async setNcnIx(params: {\n    ncn: web3.PublicKey;\n  }): Promise<web3.TransactionInstruction> {\n    const data = await this.loadData();\n    const authority = data.authority;\n    const state = State.keyFromSeed(this.program);\n    return this.program.instruction.queueSetNcn(\n      {},\n      {\n        accounts: {\n          queue: this.pubkey,\n          authority,\n          state,\n          ncn: params.ncn,\n        },\n      }\n    );\n  }\n\n  async setVaultIx(params: {\n    vault: web3.PublicKey;\n    enable: boolean;\n  }): Promise<web3.TransactionInstruction> {\n    const data = await this.loadData();\n    const authority = data.authority;\n    const state = State.keyFromSeed(this.program);\n    const ncn = data.ncn;\n    return this.program.instruction.queueSetVault(\n      {\n        enable: params.enable,\n      },\n      {\n        accounts: {\n          queue: this.pubkey,\n          authority,\n          state,\n          ncn,\n          vault: params.vault,\n        },\n      }\n    );\n  }\n\n  async allowSubsidyIx(params: {\n    enable: boolean;\n  }): Promise<web3.TransactionInstruction> {\n    const data = await this.loadData();\n    const authority = data.authority;\n    const state = State.keyFromSeed(this.program);\n    return this.program.instruction.queueAllowSubsidies(\n      {\n        allowSubsidies: params.enable,\n      },\n      {\n        accounts: {\n          queue: this.pubkey,\n          authority,\n          state,\n        },\n      }\n    );\n  }\n\n  /**\n   * Sets the oracle permission on the queue.\n   * @param params.oracle The oracle to set the permission for.\n   * @param params.permission The permission to set.\n   * @param params.enabled Whether the permission is enabled.\n   * @returns A promise that resolves to the transaction instruction   */\n  async setOraclePermissionIx(params: {\n    oracle: web3.PublicKey;\n    permission: SwitchboardPermission;\n    enable: boolean;\n  }): Promise<web3.TransactionInstruction> {\n    const data = await this.loadData();\n    return Permission.setIx(this.program, {\n      authority: data.authority,\n      grantee: params.oracle,\n      granter: this.pubkey,\n      permission: params.permission,\n      enable: params.enable,\n    });\n  }\n\n  /**\n   *  Removes all MR enclaves from the queue.\n   *  @returns A promise that resolves to an array of transaction instructions.\n   *  @throws if the request fails.\n   */\n  async rmAllMrEnclaveIxs(): Promise<Array<web3.TransactionInstruction>> {\n    const { mrEnclaves, mrEnclavesLen } = await this.loadData();\n    const activeEnclaves = mrEnclaves.slice(0, mrEnclavesLen);\n    const ixs: Array<web3.TransactionInstruction> = [];\n    for (const mrEnclave of activeEnclaves) {\n      ixs.push(await this.rmMrEnclaveIx({ mrEnclave }));\n    }\n    return ixs;\n  }\n\n  /**\n   *  Fetches most recently added and verified Oracle Key.\n   *  @returns A promise that resolves to an oracle public key.\n   *  @throws if the request fails.\n   */\n  async fetchFreshOracle(): Promise<web3.PublicKey> {\n    const now = Math.floor(+new Date() / 1000);\n    const oracles = await this.fetchOracleKeys();\n    const oracleAccounts = await Oracle.loadMany(this.program, oracles);\n    const oracleUris = oracleAccounts\n      .map(data => toUtf8(data!.gatewayUri))\n      .filter(gatewayUri => gatewayUri.length);\n\n    const tests: Promise<boolean>[] = [];\n    for (const i in oracleUris) {\n      const gw = new Gateway(this.program, oracleUris[i], oracles[i]);\n      tests.push(gw.test());\n    }\n\n    const zip: { key: web3.PublicKey; data: OracleAccountData }[] = [];\n    for (let i = 0; i < oracles.length; i++) {\n      try {\n        // Test gateways to see if they are good. Timeout after 2 seconds.\n        const isGood = await AsyncUtils.promiseWithTimeout(4000, tests[i]);\n        if (!isGood) continue;\n      } catch {\n        // console.log('Gateway Timeout', e);\n      }\n      zip.push({ data: oracleAccounts[i]!, key: oracles[i] });\n    }\n\n    const validOracles = zip\n      .filter(x => x.data.enclave.verificationStatus === 4) // value 4 is for verified\n      .filter(x => x.data.enclave.validUntil.gt(new BN(now + 3600))); // valid for 1 hour at least\n    if (validOracles.length === 0) throw new Error('NoValidOracles');\n\n    const chosen =\n      validOracles[Math.floor(Math.random() * validOracles.length)];\n    return chosen.key;\n  }\n\n  /**\n   * Get the PDA for the queue (SVM chains that are not solana)\n   * @returns Queue PDA Pubkey\n   */\n  queuePDA(): web3.PublicKey {\n    return Queue.queuePDA(this.program, this.pubkey);\n  }\n\n  /**\n   * Get the PDA for the queue (SVM chains that are not solana)\n   * @param program Anchor program\n   * @param pubkey Queue pubkey\n   * @returns Queue PDA Pubkey\n   */\n  static queuePDA(program: Program, pubkey: web3.PublicKey): web3.PublicKey {\n    const [queuePDA] = web3.PublicKey.findProgramAddressSync(\n      [Buffer.from('Queue'), pubkey.toBuffer()],\n      program.programId\n    );\n    return queuePDA;\n  }\n\n  // auto refresh lookup table if it is older than 5 minutes\n  async loadLookupTable(): Promise<web3.AddressLookupTableAccount> {\n    const now = Date.now();\n    if (this.lookupTable && now - this.lookupTableRefreshTime < 5 * 60 * 1000) {\n      return this.lookupTable;\n    }\n    const data = await this.loadData();\n    const lutSigner = getLutSigner(this.program.programId, this.pubkey);\n    const lutKey = getLutKey(lutSigner, data.lutSlot);\n    const accnt =\n      await this.program.provider.connection.getAddressLookupTable(lutKey);\n    this.lookupTable = accnt.value;\n    return accnt.value!;\n  }\n\n  /**\n   * @deprecated Use {@link fetchQuoteIx} instead. The bundle terminology has been replaced with quote terminology.\n   *\n   * Fetches oracle bundle and creates verification instruction\n   *\n   * This is the primary method for fetching oracle data in the bundle approach.\n   * It retrieves signed price data from oracle operators and creates the\n   * instruction to verify signatures on-chain.\n   *\n   * @param {Gateway} gateway - Gateway instance for oracle communication\n   * @param {CrossbarClient} crossbar - Crossbar client for data routing\n   * @param {string[]} feedHashes - Array of feed hashes to fetch (hex strings)\n   * @param {object} configs - Configuration object with optional parameters\n   * @param {Record<string, string>} [configs.variableOverrides] - Variable overrides for feed processing\n   * @param {number} [configs.numSignatures] - Number of oracle signatures required\n   * @param {number} [configs.instructionIdx] - Instruction index for Ed25519 instruction\n   * @returns {Promise<web3.TransactionInstruction>}\n   *          Signature verification instruction\n   *\n   * @example\n   * ```typescript\n   * // Fetch prices for BTC and ETH\n   * const sigVerifyIx = await queue.fetchUpdateBundleIx(\n   *   gateway,\n   *   crossbar,\n   *   ['0x1234...', '0x5678...'], // Feed hashes\n   *   {\n   *     numSignatures: 3, // Require 3 oracle signatures\n   *     variableOverrides: {},\n   *     instructionIdx: 0\n   *   }\n   * );\n   *\n   * // Use in your transaction\n   * const tx = await asV0Tx({\n   *   connection,\n   *   ixs: [sigVerifyIx, yourProgramIx],\n   *   signers: [payer],\n   * });\n   * ```\n   */\n  async fetchUpdateBundleIx(\n    crossbar: CrossbarClient,\n    feedHashes: string[],\n    configs?: {\n      gateway?: Gateway;\n      variableOverrides?: Record<string, string>;\n      numSignatures: number;\n      instructionIdx: number;\n    }\n  ): Promise<web3.TransactionInstruction> {\n    return this.fetchQuoteIx(\n      crossbar,\n      feedHashes,\n      configs ?? {\n        gateway: undefined,\n        variableOverrides: {},\n        numSignatures: 1,\n        instructionIdx: 0,\n      }\n    );\n  }\n\n  /**\n   * Fetches oracle quote and creates verification instruction\n   *\n   * This is the primary method for fetching oracle data in the quote approach.\n   * It retrieves signed price data from oracle operators and creates the\n   * instruction to verify signatures on-chain.\n   *\n   * ## Key Features\n   * - **Aggregated Data**: Fetches multiple feeds in a single request\n   * - **Consensus Verification**: Requires specified number of oracle signatures\n   * - **Ed25519 Signatures**: Uses efficient signature verification on-chain\n   * - **Cost Effective**: ~90% lower costs compared to individual feed updates\n   * - **Production Ready**: Handles error cases and validation\n   * - **Feed Format Flexibility**: Accepts either feed hashes (strings) or OracleFeed objects\n   *\n   * ## Security Considerations\n   * - Always use multiple signatures for high-value operations\n   * - Validate feed hashes match your expected data sources\n   * - Consider oracle staking and reputation when choosing consensus levels\n   *\n   * @param {Gateway} gateway - Gateway instance for oracle communication\n   * @param {CrossbarClient} crossbar - Crossbar client for data routing\n   * @param {string[] | IOracleFeed[]} feedHashesOrFeeds - Array of feed hashes (hex strings) or array of OracleFeed objects (max 16 feeds)\n   * @param {number} numSignatures - Number of oracle signatures required (default: 1, max 255)\n   * @param {number} instructionIdx - Instruction index for Ed25519 program (default: 0)\n   * @returns {Promise<web3.TransactionInstruction>}\n   *          Ed25519 signature verification instruction ready for transaction\n   *\n   * @throws {Error} When no oracle responses are available\n   * @throws {Error} When oracle index is out of bounds (>= 255)\n   * @throws {Error} When too many feeds requested (> 16)\n   * @throws {Error} When feed responses are missing from oracle\n   *\n   * @since 2.14.0\n   * @see {@link fetchUpdateBundleIx} - Deprecated equivalent method\n   * @see {@link Gateway.fetchQuote} - Gateway method for raw quote data\n   *\n   * @example\n   * ```typescript\n   * // Basic usage with single feed hash\n   * const btcFeedHash = '0xef0d8b6fcd0104e3e75096912fc8e1e432893da4f18faedaacca7e5875da620f';\n   * const sigVerifyIx = await queue.fetchQuoteIx(\n   *   crossbar,\n   *   [btcFeedHash],\n   *   {\n   *     numSignatures: 1, // Single oracle signature\n   *     variableOverrides: {},\n   *     instructionIdx: 0\n   *   }\n   * );\n   *\n   * // Using OracleFeed objects\n   * const btcFeed: IOracleFeed = {\n   *   name: 'BTC/USD Price Feed',\n   *   jobs: [btcJob1, btcJob2],\n   *   minOracleSamples: 3,\n   *   // ... other feed properties\n   * };\n   *\n   * const ethFeed: IOracleFeed = {\n   *   name: 'ETH/USD Price Feed',\n   *   jobs: [ethJob1, ethJob2],\n   *   minOracleSamples: 3,\n   * };\n   *\n   * const feedsIx = await queue.fetchQuoteIx(\n   *   crossbar,\n   *   [btcFeed, ethFeed],\n   *   {\n   *     numSignatures: 3,\n   *     variableOverrides: {},\n   *     instructionIdx: 0\n   *   }\n   * );\n   *\n   * // Multi-feed quote with higher consensus\n   * const feedHashes = [\n   *   '0xef0d8b6fcd0104e3e75096912fc8e1e432893da4f18faedaacca7e5875da620f', // BTC/USD\n   *   '0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef', // ETH/USD\n   *   '0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890'  // SOL/USD\n   * ];\n   *\n   * const multiQuoteIx = await queue.fetchQuoteIx(\n   *   crossbar,\n   *   feedHashes,\n   *   {\n   *     numSignatures: 5, // Require 5 oracle signatures for high-value operations\n   *     variableOverrides: {},\n   *     instructionIdx: 1  // Instruction index for multiple Ed25519 instructions\n   *   }\n   * );\n   *\n   * // Use in your transaction with proper error handling\n   * try {\n   *   const tx = await asV0Tx({\n   *     connection,\n   *     ixs: [sigVerifyIx, yourBusinessLogicIx],\n   *     signers: [payer],\n   *     computeUnitPrice: 200_000,\n   *     computeUnitLimitMultiple: 1.3,\n   *   });\n   *\n   *   const txSignature = await connection.sendTransaction(tx, {\n   *     preflightCommitment: \"processed\",\n   *   });\n   *\n   *   console.log('Transaction confirmed:', txSignature);\n   * } catch (error) {\n   *   console.error('Quote fetch failed:', error);\n   * }\n   * ```\n   */\n  async fetchQuoteIx(\n    crossbar: CrossbarClient,\n    feedHashesOrFeeds: string[] | IOracleFeed[],\n    configs?: {\n      gateway?: Gateway;\n      variableOverrides?: Record<string, string>;\n      numSignatures?: number;\n      instructionIdx?: number;\n    }\n  ): Promise<web3.TransactionInstruction> {\n    const config = configs ?? {\n      gateway: undefined,\n      variableOverrides: {},\n      numSignatures: 1,\n      instructionIdx: 0,\n    };\n\n    if (config.gateway === undefined) {\n      try {\n        config.gateway = await this.fetchGatewayFromCrossbar(crossbar);\n      } catch (error) {\n        throw new Error(\n          `Failed to fetch gateway from crossbar: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    }\n\n    if (feedHashesOrFeeds.length === 0) {\n      throw new Error('At least one feed hash or OracleFeed must be provided');\n    }\n\n    let response: FetchSignaturesConsensusResponse;\n\n    // Check if first element is a string (feed hash) or object (OracleFeed)\n    if (typeof feedHashesOrFeeds[0] === 'string') {\n      // Input is an array of feed hashes - use fetchQuote which fetches from IPFS\n      const feedHashes = feedHashesOrFeeds as string[];\n      response = await config.gateway.fetchQuote(\n        crossbar,\n        feedHashes,\n        config.numSignatures ?? 1,\n        config.variableOverrides\n      );\n    } else {\n      // Input is an array of OracleFeeds - use fetchSignaturesConsensus directly\n      const feeds = feedHashesOrFeeds as IOracleFeed[];\n      feeds.forEach(feed => {\n        if (!feed.jobs || feed.jobs.length === 0) {\n          throw new Error(\n            `OracleFeed \"${feed.name || 'unnamed'}\" must contain at least one job`\n          );\n        }\n      });\n\n      response = await config.gateway.fetchSignaturesConsensus({\n        feedConfigs: feeds.map(feed => ({ feed })),\n        useTimestamp: false,\n        numSignatures: config.numSignatures,\n        useEd25519: true,\n        variableOverrides: config.variableOverrides,\n      });\n    }\n\n    // Check if oracle_responses is empty\n    if (!response.oracle_responses || response.oracle_responses.length === 0) {\n      throw new Error('No oracle responses available for creating signatures');\n    }\n\n    // Convert to ED25519 signatures - supports variable length messages!\n    const ed25519Signatures = response.oracle_responses.map(\n      (oracleResponse, index) => {\n        let pubkeyHex = oracleResponse.ed25519_enclave_signer;\n\n        // If ed25519_enclave_signer is 64 bytes (128 hex chars), extract the first 32 bytes for Ed25519 pubkey\n        if (pubkeyHex && pubkeyHex.length === 128) {\n          pubkeyHex = pubkeyHex.substring(0, 64); // First 32 bytes (64 hex chars)\n        }\n\n        // Check that we have feed responses\n        if (\n          !oracleResponse.feed_responses ||\n          oracleResponse.feed_responses.length === 0\n        ) {\n          throw new Error(`Oracle response ${index} missing feed_responses`);\n        }\n\n        // Reconstruct the actual signed message for NEW SIGNING SCHEME\n        // NEW FORMAT: signed_slothash + feed_infos (for ALL feeds)\n        // NOTE: recent_slot, version, and oracle_idx are NO LONGER part of the signed message\n        // Oracle indices are now appended to the ED25519 instruction data, not signed\n\n        // Use response-level recent_hash for slothash\n        const recentHashPubkey = new web3.PublicKey(response.recent_hash);\n        const signedSlothash = Buffer.from(recentHashPubkey.toBytes()); // 32 bytes\n\n        // Validate oracle index bounds (prevent access violation in Rust)\n        // Note: We don't have queue data here, but we can validate reasonable bounds\n        if (oracleResponse.oracle_idx >= 255) {\n          throw new Error(\n            `Oracle index out of bounds: ${oracleResponse.oracle_idx} (maximum supported is 254)`\n          );\n        }\n\n        // Validate feed count limit (must match Rust limit)\n        if (oracleResponse.feed_responses.length > 16) {\n          throw new Error(\n            `Too many feeds in oracle response: ${oracleResponse.feed_responses.length} feeds but maximum is 16`\n          );\n        }\n\n        // Build feed infos for ALL feeds (not just the first one)\n        const feedInfoBuffers: Buffer[] = [];\n        for (const feedResponse of oracleResponse.feed_responses) {\n          // Feed info: feed_id + value + min_oracle_samples\n          const feedHash = Buffer.from(feedResponse.feed_hash, 'hex'); // 32 bytes\n\n          // Convert success_value to 16-byte representation (little-endian i128)\n          const successValue = BigInt(feedResponse.success_value);\n          const valueBytes = Buffer.alloc(16);\n          for (let i = 0; i < 16; i++) {\n            const shift = BigInt(i) * BigInt(8);\n            const mask = BigInt(0xff);\n            valueBytes[i] = Number((successValue >> shift) & mask);\n          }\n\n          const minOracleSamples = Buffer.from([\n            feedResponse.min_oracle_samples,\n          ]); // 1 byte\n\n          // Concatenate this feed's info: feed_id + value + min_oracle_samples\n          feedInfoBuffers.push(\n            Buffer.concat([\n              feedHash, // 32 bytes (feed_id)\n              valueBytes, // 16 bytes (feed value as i128 LE)\n              minOracleSamples, // 1 byte (min_oracle_samples)\n            ])\n          );\n        }\n\n        // NEW SIGNED MESSAGE FORMAT: signed_slothash + (feed_info1 + feed_info2 + ...)\n        // Oracle index is NOT included in the signed message - it goes to instruction data\n        const actualMessage = Buffer.concat([\n          signedSlothash, // 32 bytes (slothash from response)\n          ...feedInfoBuffers, // All feed infos (49 bytes each)\n        ]);\n\n        return {\n          pubkey: Buffer.from(pubkeyHex, 'hex'), // Use Ed25519 pubkey (32 bytes)!\n          signature: Buffer.from(oracleResponse.signature, 'base64'), // Use oracle-level signature for consensus!\n          message: actualMessage, // Use reconstructed Ed25519 message (variable length)!\n          oracleIdx: oracleResponse.oracle_idx, // Use actual oracle index from response\n        };\n      }\n    );\n\n    const ed25519Instruction = Ed25519InstructionUtils.buildEd25519Instruction(\n      ed25519Signatures,\n      config.instructionIdx ?? 0,\n      typeof response.slot === 'number'\n        ? response.slot\n        : response.slot.toNumber(), // recent_slot from gateway response\n      0 // version 0 for Ed25519 v0 scheme\n    );\n    return ed25519Instruction;\n  }\n\n  /**\n   * Creates instructions for managed oracle updates using the new quote program\n   *\n   * This method generates instructions to call the verified_update method in the\n   * quote program (PID: orac1eFjzWL5R3RbbdMV68K9H6TaCVVcL6LjvQQWAbz).\n   * It creates both the Ed25519 signature verification instruction and the\n   * quote program instruction that verifies and stores the oracle data.\n   *\n   * The oracle account is automatically derived from the feed hashes using the\n   * canonical derivation logic. Gateway is automatically fetched and cached.\n   *\n   * ## Key Features\n   * - **Managed Updates**: Automatically handles oracle account creation and updates\n   * - **Verification**: Uses the quote program's verified_update for secure oracle data storage\n   * - **Ed25519 Signatures**: Leverages efficient signature verification\n   * - **Account Management**: Handles oracle account initialization if needed\n   * - **Gateway Caching**: Automatically fetches and caches gateway for subsequent calls\n   * - **Feed Format Flexibility**: Accepts either feed hashes (strings) or OracleFeed objects\n   *\n   * @param {Gateway} gateway - Gateway instance for oracle communication\n   * @param {CrossbarClient} crossbar - Crossbar client for data routing\n   * @param {string[] | IOracleFeed[]} feedHashesOrFeeds - Array of feed hashes (hex strings) or array of OracleFeed objects (max 16 feeds)\n   * @param {object} configs - Configuration object with optional parameters\n   * @param {Record<string, string>} [configs.variableOverrides] - Variable overrides for feed processing\n   * @param {number} [configs.numSignatures] - Number of oracle signatures required (default: 1)\n   * @param {number} [configs.instructionIdx] - Instruction index for Ed25519 program (default: 0)\n   * @param {web3.PublicKey} [configs.payer] - Payer for oracle account creation (default: program provider payer)\n   * @param {web3.PublicKey} [configs.programId] - Optional program ID for oracle account derived owner (default: QUOTE_PROGRAM_ID)\n   * @returns {Promise<web3.TransactionInstruction[]>}\n   *          Array of instructions: [Ed25519 verification, quote program verified_update]\n   *\n   * @throws {Error} When no oracle responses are available\n   * @throws {Error} When oracle index is out of bounds (>= 255)\n   * @throws {Error} When too many feeds requested (> 16)\n   * @throws {Error} When feed responses are missing from oracle\n   *\n   * @example\n   * ```typescript\n   * // Using feed hashes\n   * const btcFeedHash = '0xef0d8b6fcd0104e3e75096912fc8e1e432893da4f18faedaacca7e5875da620f';\n   *\n   * // Create the instructions (oracle account is derived automatically)\n   * const instructions = await queue.fetchManagedUpdateIxs(\n   *   crossbar,\n   *   [btcFeedHash],\n   *   {\n   *     numSignatures: 3, // Require 3 oracle signatures for consensus\n   *     variableOverrides: {},\n   *     instructionIdx: 0,\n   *     payer: myWallet.publicKey,\n   *     programId: customQuoteProgramId // Optional: use custom program ID for oracle derivation\n   *   }\n   * );\n   *\n   * // Using OracleFeed objects\n   * const btcFeed: IOracleFeed = {\n   *   name: 'BTC/USD Price Feed',\n   *   jobs: [btcJob1, btcJob2],\n   *   minOracleSamples: 3,\n   *   // ... other feed properties\n   * };\n   *\n   * const ethFeed: IOracleFeed = {\n   *   name: 'ETH/USD Price Feed',\n   *   jobs: [ethJob1, ethJob2],\n   *   minOracleSamples: 3,\n   * };\n   *\n   * const instructionsFromFeeds = await queue.fetchManagedUpdateIxs(\n   *   crossbar,\n   *   [btcFeed, ethFeed],\n   *   {\n   *     numSignatures: 3,\n   *     variableOverrides: {},\n   *     instructionIdx: 0,\n   *     payer: myWallet.publicKey\n   *   }\n   * );\n   *\n   * // Build transaction with managed update instructions\n   * const tx = await asV0Tx({\n   *   connection,\n   *   ixs: [...instructions, yourBusinessLogicIx],\n   *   signers: [payer],\n   *   computeUnitPrice: 200_000,\n   *   computeUnitLimitMultiple: 1.3,\n   * });\n   *\n   * await connection.sendTransaction(tx);\n   * ```\n   */\n  async fetchManagedUpdateIxs(\n    crossbar: CrossbarClient,\n    feedHashesOrFeeds: string[] | IOracleFeed[],\n    configs?: {\n      gateway?: Gateway;\n      variableOverrides?: Record<string, string>;\n      numSignatures?: number;\n      instructionIdx?: number;\n      payer?: web3.PublicKey;\n    }\n  ): Promise<web3.TransactionInstruction[]> {\n    const config = configs ?? {\n      variableOverrides: {},\n      numSignatures: 1,\n      instructionIdx: 0,\n      gateway: undefined,\n    };\n\n    if (config.gateway === undefined) {\n      try {\n        config.gateway = await this.fetchGatewayFromCrossbar(crossbar);\n      } catch (error) {\n        throw new Error(\n          `Failed to fetch gateway from crossbar: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    }\n\n    // Handle both feed hashes and OracleFeed array input\n    let feedHashes: string[];\n    if (feedHashesOrFeeds.length === 0) {\n      throw new Error('At least one feed hash or OracleFeed must be provided');\n    }\n\n    // Check if first element is a string (feed hash) or object (OracleFeed)\n    if (typeof feedHashesOrFeeds[0] === 'string') {\n      // Input is an array of feed hashes\n      feedHashes = feedHashesOrFeeds as string[];\n    } else {\n      // Input is an array of OracleFeeds - compute hash for each\n      feedHashes = (feedHashesOrFeeds as IOracleFeed[]).map(feed => {\n        if (!feed.jobs || feed.jobs.length === 0) {\n          throw new Error(\n            `OracleFeed \"${feed.name || 'unnamed'}\" must contain at least one job to compute the feed hash`\n          );\n        }\n        const feedHashBuffer = FeedHash.computeOracleFeedId(feed);\n        return '0x' + feedHashBuffer.toString('hex');\n      });\n    }\n\n    // Derive the canonical oracle account from feed hashes\n    const [oracleAccount, bump] = OracleQuote.getCanonicalPubkey(\n      this.pubkey,\n      feedHashes,\n      QUOTE_PROGRAM_ID\n    );\n\n    // First get the Ed25519 signature verification instruction\n    // Pass the original feedHashesOrFeeds to avoid double IPFS fetch\n    const ed25519Ix = await this.fetchQuoteIx(\n      crossbar,\n      feedHashesOrFeeds,\n      config\n    );\n\n    // Get payer from config or program provider\n    const payer = config.payer ?? getNodePayer(this.program).publicKey;\n    const opcode = 0;\n\n    // Create the quote program verified_update instruction\n    const quoteProgramIx = new web3.TransactionInstruction({\n      programId: QUOTE_PROGRAM_ID,\n      keys: [\n        { pubkey: this.pubkey, isSigner: false, isWritable: false }, // queue_account [0]\n        { pubkey: oracleAccount, isSigner: false, isWritable: true }, // oracle_account [1]\n        {\n          pubkey: SPL_SYSVAR_INSTRUCTIONS_ID,\n          isSigner: false,\n          isWritable: false,\n        }, // ix_sysvar [2]\n        {\n          pubkey: SPL_SYSVAR_SLOT_HASHES_ID,\n          isSigner: false,\n          isWritable: false,\n        }, // slot_sysvar [3]\n        {\n          pubkey: web3.SYSVAR_CLOCK_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        }, // clock_sysvar [4]\n        { pubkey: payer, isSigner: true, isWritable: true }, // payer [5]\n        {\n          pubkey: web3.SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        }, // system_program [6]\n      ],\n      data: Buffer.from([opcode, config.instructionIdx ?? 0, bump]), // ix_idx - index of Ed25519 instruction in transaction\n    });\n\n    return [ed25519Ix, quoteProgramIx];\n  }\n}\n"]}