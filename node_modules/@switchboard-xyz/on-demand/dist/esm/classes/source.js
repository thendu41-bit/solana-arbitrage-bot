export var Source;
(function (Source) {
    Source[Source["WEIGHTED"] = 0] = "WEIGHTED";
    Source[Source["BINANCE"] = 1] = "BINANCE";
    Source[Source["OKX"] = 2] = "OKX";
    Source[Source["BYBIT"] = 3] = "BYBIT";
    Source[Source["COINBASE"] = 4] = "COINBASE";
    Source[Source["BITGET"] = 5] = "BITGET";
    Source[Source["AUTO"] = 6] = "AUTO";
})(Source || (Source = {}));
// eslint-disable-next-line @typescript-eslint/no-namespace
(function (Source) {
    function toString(source) {
        if (source === undefined || source === null) {
            return 'AUTO';
        }
        switch (source) {
            case Source.WEIGHTED:
                return 'WEIGHTED';
            case Source.BINANCE:
                return 'BINANCE';
            case Source.OKX:
                return 'OKX';
            case Source.BYBIT:
                return 'BYBIT';
            case Source.COINBASE:
                return 'COINBASE';
            case Source.BITGET:
                return 'BITGET';
            case Source.AUTO:
                return 'AUTO';
            default:
                return 'UNKNOWN';
        }
    }
    Source.toString = toString;
    function fromString(source) {
        if ((source !== null && source !== void 0 ? source : '').length === 0) {
            return Source.WEIGHTED;
        }
        switch (source.toUpperCase()) {
            case 'WEIGHTED':
                return Source.WEIGHTED;
            case 'BINANCE':
                return Source.BINANCE;
            case 'OKX':
                return Source.OKX;
            case 'BYBIT':
                return Source.BYBIT;
            case 'COINBASE':
                return Source.COINBASE;
            case 'BITGET':
                return Source.BITGET;
            case 'AUTO':
                return Source.AUTO;
            default:
                throw new Error(`Unknown source: ${source}`);
        }
    }
    Source.fromString = fromString;
})(Source || (Source = {}));
//# sourceMappingURL=source.js.map