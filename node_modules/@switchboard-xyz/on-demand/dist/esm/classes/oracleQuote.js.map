{"version":3,"file":"oracleQuote.js","sourceRoot":"","sources":["../../../src/classes/oracleQuote.ts"],"names":[],"mappings":"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","sourcesContent":["import * as web3 from '@solana/web3.js';\nimport bs58 from 'bs58';\nimport { Buffer } from 'buffer';\nimport { inspect } from 'util';\n\nexport const QUOTE_PROGRAM_ID = new web3.PublicKey(\n  'orac1eFjzWL5R3RbbdMV68K9H6TaCVVcL6LjvQQWAbz'\n);\n\nexport interface FeedInfo {\n  feedHash: Buffer;\n  value: bigint;\n  minOracleSamples: number;\n}\n\nexport interface Ed25519SignatureOffsets {\n  signatureOffset: number;\n  signatureInstructionIndex: number;\n  publicKeyOffset: number;\n  publicKeyInstructionIndex: number;\n  messageDataOffset: number;\n  messageDataSize: number;\n  messageInstructionIndex: number;\n}\n\nexport interface OracleSignature {\n  offsets: Ed25519SignatureOffsets;\n  pubkey: web3.PublicKey;\n  signature: Buffer;\n}\n\nexport interface SwitchboardQuoteJSON {\n  signatures: Array<{\n    offsets: Ed25519SignatureOffsets;\n    pubkey: string;\n    signature: string;\n  }>;\n  signedSlothash: string;\n  feeds: Array<{\n    feedHash: string;\n    value: string;\n    minOracleSamples: number;\n  }>;\n  oracleIdxs: number[];\n  slot: number;\n  version: number;\n  tailDiscriminator: string;\n}\n\nexport interface SwitchboardQuote {\n  signatures: OracleSignature[];\n  signedSlothash: Buffer;\n  feeds: FeedInfo[];\n  oracleIdxs: number[];\n  slot: number;\n  version: number;\n  tailDiscriminator: string;\n  toString(): string;\n  toJSON(): SwitchboardQuoteJSON;\n  [Symbol.toPrimitive](hint: string): string | null;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [inspect.custom](depth: number, options: any): string;\n}\n\nexport class OracleQuote {\n  static getCanonicalPubkey(\n    queueKey: web3.PublicKey,\n    feedHashes: Array<string | Buffer>,\n    programId?: web3.PublicKey\n  ): [web3.PublicKey, number] {\n    // Convert feed hashes to seed buffers (feed IDs)\n    // This matches the Rust logic: self.feeds().iter().map(|info| info.feed_id().as_slice())\n    const feedIdSeeds = feedHashes.map(hash => {\n      if (typeof hash === 'string') {\n        if (!/^(?:0x)?[0-9a-fA-F]{64}$/.test(hash)) {\n          throw new Error(`Invalid feed hash format: ${hash}`);\n        }\n        return Buffer.from(hash.replace('0x', ''), 'hex');\n      } else if (Buffer.isBuffer(hash)) {\n        if (hash.length !== 32) {\n          throw new Error(\n            `Feed hash buffer must be 32 bytes, got ${hash.length}`\n          );\n        }\n        return hash;\n      }\n      throw new Error('Feed hash must be a hex string or Buffer');\n    });\n\n    // Build seeds array with queue key first, then feed IDs\n    // This matches Rust logic: seeds.push(queue_key.as_ref()); for (id in feed_ids) seeds.push(id.as_slice());\n    const seedRefs: Buffer[] = [\n      Buffer.from(queueKey.toBytes()),\n      ...feedIdSeeds,\n    ];\n\n    // Derive the oracle account using queue key + feed IDs as seeds\n    // This matches: Pubkey::find_program_address(&seed_refs, program_id)\n    const [quoteAccount, bump] = web3.PublicKey.findProgramAddressSync(\n      seedRefs,\n      programId ?? QUOTE_PROGRAM_ID\n    );\n\n    return [quoteAccount, bump];\n  }\n\n  /**\n   * Decodes a SwitchboardQuote from a TransactionInstruction\n   *\n   * This is a convenience method that extracts the data buffer from a\n   * TransactionInstruction and calls decode() to deserialize it.\n   *\n   * @param instruction - The TransactionInstruction containing the serialized data\n   * @returns Decoded SwitchboardQuote data\n   */\n  static decodeIx(instruction: web3.TransactionInstruction): SwitchboardQuote {\n    if (!instruction.data || instruction.data.length === 0) {\n      throw new Error('Instruction data is empty');\n    }\n\n    // Convert instruction data to Buffer if needed\n    const buffer = Buffer.isBuffer(instruction.data)\n      ? instruction.data\n      : Buffer.from(instruction.data);\n\n    return this.decode(buffer);\n  }\n\n  /**\n   * Decodes a SwitchboardQuote from an Ed25519 instruction buffer\n   *\n   * The Ed25519 instruction data format created by buildEd25519Instruction:\n   * 1. count (1 byte) - number of signatures\n   * 2. padding (1 byte)\n   * 3. signature offsets (14 bytes each)\n   * 4. signatures (64 bytes each)\n   * 5. pubkeys (32 bytes each)\n   * 6. message (variable length):\n   *    - signed_slothash (32 bytes)\n   *    - feed_infos (49 bytes each): feed_hash (32) + value (16) + min_oracle_samples (1)\n   * 7. oracle indexes (1 byte each)\n   * 8. recent_slot (8 bytes, u64 LE)\n   * 9. version (1 byte, u8)\n   * 10. discriminator (4 bytes, \"SBOD\")\n   *\n   * @param buffer - The Ed25519 instruction data buffer\n   * @returns Decoded SwitchboardQuote data\n   */\n  static decode(buffer: Buffer): SwitchboardQuote {\n    if (!buffer || buffer.length === 0) {\n      throw new Error('Invalid buffer: cannot be empty');\n    }\n\n    const SLOT_SIZE = 8;\n    const VERSION_SIZE = 1;\n    const DISCRIMINATOR_SIZE = 4;\n\n    // 1. Read count (number of signatures)\n    const count = buffer[0];\n    if (count === 0) {\n      throw new Error('Invalid count: must be greater than 0');\n    }\n\n    // Calculate offsets\n    const SIGNATURE_OFFSETS_START = 2;\n    const ED25519_SIGNATURE_OFFSETS_SIZE = 14;\n\n    // Read message offset from first signature's offsets\n    const firstOffsetBlock = buffer.slice(\n      SIGNATURE_OFFSETS_START,\n      SIGNATURE_OFFSETS_START + ED25519_SIGNATURE_OFFSETS_SIZE\n    );\n\n    // Message offset is at bytes 8-9 (LE u16)\n    const messageOffset = firstOffsetBlock.readUInt16LE(8);\n\n    // Message size is at bytes 10-11 (LE u16)\n    const messageSize = firstOffsetBlock.readUInt16LE(10);\n\n    // Parse signature data for the SwitchboardQuote format\n    const signatures: OracleSignature[] = [];\n    let offsetsPos = SIGNATURE_OFFSETS_START;\n\n    for (let i = 0; i < count; i++) {\n      const offsetBlock = buffer.slice(\n        offsetsPos,\n        offsetsPos + ED25519_SIGNATURE_OFFSETS_SIZE\n      );\n\n      const offsets: Ed25519SignatureOffsets = {\n        signatureOffset: offsetBlock.readUInt16LE(0),\n        signatureInstructionIndex: offsetBlock.readUInt16LE(2),\n        publicKeyOffset: offsetBlock.readUInt16LE(4),\n        publicKeyInstructionIndex: offsetBlock.readUInt16LE(6),\n        messageDataOffset: offsetBlock.readUInt16LE(8),\n        messageDataSize: offsetBlock.readUInt16LE(10),\n        messageInstructionIndex: offsetBlock.readUInt16LE(12),\n      };\n\n      const pubkeyBytes = buffer.slice(\n        offsets.publicKeyOffset,\n        offsets.publicKeyOffset + 32\n      );\n      const pubkey = new web3.PublicKey(pubkeyBytes);\n\n      const signature = buffer.slice(\n        offsets.signatureOffset,\n        offsets.signatureOffset + 64\n      );\n\n      signatures.push({ offsets, pubkey, signature });\n      offsetsPos += ED25519_SIGNATURE_OFFSETS_SIZE;\n    }\n\n    // Extract the full message\n    const message = buffer.slice(messageOffset, messageOffset + messageSize);\n\n    // Parse message structure:\n    // 1. signed_slothash (32 bytes)\n    const signedSlothash = message.slice(0, 32);\n\n    // 2. feed_infos (49 bytes each)\n    const feedInfosData = message.slice(32);\n    const FEED_INFO_SIZE = 49; // 32 (feed_hash) + 16 (value) + 1 (min_oracle_samples)\n    const numFeeds = Math.floor(feedInfosData.length / FEED_INFO_SIZE);\n\n    const feeds: FeedInfo[] = [];\n    for (let i = 0; i < numFeeds; i++) {\n      const offset = i * FEED_INFO_SIZE;\n      const feedInfoBuffer = feedInfosData.slice(\n        offset,\n        offset + FEED_INFO_SIZE\n      );\n\n      const feedHash = feedInfoBuffer.slice(0, 32);\n      const valueBytes = feedInfoBuffer.slice(32, 48);\n\n      // Convert 16-byte little-endian to bigint\n      let value = BigInt(0);\n      for (let j = 0; j < 16; j++) {\n        value |= BigInt(valueBytes[j]) << (BigInt(j) * BigInt(8));\n      }\n\n      const minOracleSamples = feedInfoBuffer[48];\n\n      feeds.push({\n        feedHash,\n        value,\n        minOracleSamples,\n      });\n    }\n\n    // 3. Oracle indexes (after message)\n    const oracleIndexesOffset = messageOffset + messageSize;\n    const oracleIdxs: number[] = [];\n    for (let i = 0; i < count; i++) {\n      oracleIdxs.push(buffer[oracleIndexesOffset + i]);\n    }\n\n    // 4. Recent slot (8 bytes u64 LE)\n    const slotOffset = oracleIndexesOffset + count;\n    const slotBuffer = buffer.slice(slotOffset, slotOffset + SLOT_SIZE);\n    const slot = Number(slotBuffer.readBigUInt64LE(0));\n\n    // 5. Version (1 byte u8)\n    const versionOffset = slotOffset + SLOT_SIZE;\n    const version = buffer[versionOffset];\n\n    // 6. Discriminator (4 bytes)\n    const discriminatorOffset = versionOffset + VERSION_SIZE;\n    const tailDiscriminator = buffer\n      .slice(discriminatorOffset, discriminatorOffset + DISCRIMINATOR_SIZE)\n      .toString('utf8');\n\n    const quote = {\n      signatures,\n      signedSlothash,\n      feeds,\n      oracleIdxs,\n      slot,\n      version,\n      tailDiscriminator,\n      toString(): string {\n        return OracleQuote.toString(this as SwitchboardQuote);\n      },\n      toJSON() {\n        return OracleQuote.toJSON(this as SwitchboardQuote);\n      },\n      [Symbol.toPrimitive](hint: string): string | null {\n        return hint === 'string' ? this.toString() : null;\n      },\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      [inspect.custom](depth: number, options: any) {\n        return inspect(this.toJSON(), {\n          ...options,\n          depth: null,\n          colors: false,\n        });\n      },\n    };\n\n    return quote;\n  }\n\n  /**\n   * Converts a SwitchboardQuote to a string representation\n   *\n   * @param quote - The SwitchboardQuote to convert\n   * @param precision - Number of decimal places for feed values (default: 18)\n   * @returns String representation\n   */\n  static toString(quote: SwitchboardQuote, precision = 18): string {\n    const lines: string[] = [];\n\n    lines.push('SwitchboardQuote {');\n    lines.push(`  Signatures: ${quote.signatures.length}`);\n\n    quote.signatures.forEach((sig, i) => {\n      lines.push(`    [${i}] Oracle: ${sig.pubkey.toBase58()}`);\n    });\n\n    lines.push(`  Signed Slot Hash: 0x${quote.signedSlothash.toString('hex')}`);\n    lines.push(`  Feeds: ${quote.feeds.length}`);\n\n    quote.feeds.forEach((feed, i) => {\n      const feedId = `0x${feed.feedHash.toString('hex')}`;\n      // Convert i128 fixed-point to decimal\n      // Calculate 10^precision without using ** operator (for older TS targets)\n      let divisor = BigInt(1);\n      for (let j = 0; j < precision; j++) {\n        divisor *= BigInt(10);\n      }\n      const integerPart = feed.value / divisor;\n      const fractionalPart = feed.value % divisor;\n      const fractionalStr = fractionalPart\n        .toString()\n        .padStart(precision, '0')\n        .replace(/0+$/, '');\n      const valueStr = fractionalStr\n        ? `${integerPart}.${fractionalStr}`\n        : integerPart.toString();\n\n      lines.push(`    [${i}] Feed ID: ${feedId}`);\n      lines.push(`        Value: ${valueStr}`);\n      lines.push(`        Min Samples: ${feed.minOracleSamples}`);\n    });\n\n    lines.push(`  Oracle Indices: [${quote.oracleIdxs.join(', ')}]`);\n    lines.push(`  Slot: ${quote.slot}`);\n    lines.push(`  Version: ${quote.version}`);\n    lines.push(`  Discriminator: ${quote.tailDiscriminator}`);\n    lines.push('}');\n\n    return lines.join('\\n');\n  }\n\n  /**\n   * Converts a SwitchboardQuote to a JSON-serializable object\n   *\n   * @param quote - The SwitchboardQuote to convert\n   * @returns JSON-serializable object\n   */\n  static toJSON(quote: SwitchboardQuote): SwitchboardQuoteJSON {\n    return {\n      signatures: quote.signatures.map(sig => ({\n        offsets: { ...sig.offsets },\n        pubkey: sig.pubkey.toBase58(),\n        signature: bs58.encode(sig.signature),\n      })),\n      signedSlothash: bs58.encode(quote.signedSlothash),\n      feeds: quote.feeds.map(feed => {\n        // Convert i128 fixed-point to decimal (divide by 10^18)\n        const precision = 18;\n        let divisor = BigInt(1);\n        for (let j = 0; j < precision; j++) {\n          divisor *= BigInt(10);\n        }\n        const integerPart = feed.value / divisor;\n        const fractionalPart = feed.value % divisor;\n        const fractionalStr = fractionalPart\n          .toString()\n          .padStart(precision, '0')\n          .replace(/0+$/, '');\n        const valueStr = fractionalStr\n          ? `${integerPart}.${fractionalStr}`\n          : integerPart.toString();\n\n        return {\n          feedHash: feed.feedHash.toString('hex'),\n          value: valueStr,\n          minOracleSamples: feed.minOracleSamples,\n        };\n      }),\n      oracleIdxs: quote.oracleIdxs,\n      slot: quote.slot,\n      version: quote.version,\n      tailDiscriminator: quote.tailDiscriminator,\n    };\n  }\n}\n"]}