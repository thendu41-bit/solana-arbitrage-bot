const I128MAX = '170141183460469231731687303715884105727';
function splitFromTail(input_, places) {
    const input = input_.padStart(18, '0');
    const splitIndex = input.length - places;
    if (splitIndex <= 0) {
        return ['', input]; // if the string is shorter than N characters, the first part is empty
    }
    const firstPart = input.slice(0, splitIndex);
    const lastCharacters = input.slice(splitIndex);
    return [firstPart, lastCharacters];
}
export class PullFeedValueEvent {
    constructor(raw) {
        this.raw = raw;
    } // eslint-disable-line @typescript-eslint/no-explicit-any
    toRows() {
        var _a, _b;
        const out = [];
        if (!Array.isArray((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.feeds))
            return out;
        for (const feedIdx in this.raw.data.feeds) {
            const feed = this.raw.data.feeds[feedIdx];
            for (const oracleIdx in this.raw.data.oracles) {
                const oracle = this.raw.data.oracles[oracleIdx];
                const value = this.raw.data.values[feedIdx][oracleIdx];
                const valueParts = splitFromTail(value.toString(), 18);
                if (value.toString() === I128MAX) {
                    out.push({
                        feed: feed.toString(),
                        oracle: oracle.toString(),
                        value: null,
                    });
                }
                else {
                    out.push({
                        feed: feed.toString(),
                        oracle: oracle.toString(),
                        value: `${valueParts[0]}.${valueParts[1]}`,
                    });
                }
            }
        }
        return out;
    }
}
//# sourceMappingURL=index.js.map