import * as web3 from '@solana/web3.js';
import { Buffer } from 'buffer';
import { inspect } from 'util';
export declare const QUOTE_PROGRAM_ID: web3.PublicKey;
export interface FeedInfo {
    feedHash: Buffer;
    value: bigint;
    minOracleSamples: number;
}
export interface Ed25519SignatureOffsets {
    signatureOffset: number;
    signatureInstructionIndex: number;
    publicKeyOffset: number;
    publicKeyInstructionIndex: number;
    messageDataOffset: number;
    messageDataSize: number;
    messageInstructionIndex: number;
}
export interface OracleSignature {
    offsets: Ed25519SignatureOffsets;
    pubkey: web3.PublicKey;
    signature: Buffer;
}
export interface SwitchboardQuoteJSON {
    signatures: Array<{
        offsets: Ed25519SignatureOffsets;
        pubkey: string;
        signature: string;
    }>;
    signedSlothash: string;
    feeds: Array<{
        feedHash: string;
        value: string;
        minOracleSamples: number;
    }>;
    oracleIdxs: number[];
    slot: number;
    version: number;
    tailDiscriminator: string;
}
export interface SwitchboardQuote {
    signatures: OracleSignature[];
    signedSlothash: Buffer;
    feeds: FeedInfo[];
    oracleIdxs: number[];
    slot: number;
    version: number;
    tailDiscriminator: string;
    toString(): string;
    toJSON(): SwitchboardQuoteJSON;
    [Symbol.toPrimitive](hint: string): string | null;
    [inspect.custom](depth: number, options: any): string;
}
export declare class OracleQuote {
    static getCanonicalPubkey(queueKey: web3.PublicKey, feedHashes: Array<string | Buffer>, programId?: web3.PublicKey): [web3.PublicKey, number];
    /**
     * Decodes a SwitchboardQuote from a TransactionInstruction
     *
     * This is a convenience method that extracts the data buffer from a
     * TransactionInstruction and calls decode() to deserialize it.
     *
     * @param instruction - The TransactionInstruction containing the serialized data
     * @returns Decoded SwitchboardQuote data
     */
    static decodeIx(instruction: web3.TransactionInstruction): SwitchboardQuote;
    /**
     * Decodes a SwitchboardQuote from an Ed25519 instruction buffer
     *
     * The Ed25519 instruction data format created by buildEd25519Instruction:
     * 1. count (1 byte) - number of signatures
     * 2. padding (1 byte)
     * 3. signature offsets (14 bytes each)
     * 4. signatures (64 bytes each)
     * 5. pubkeys (32 bytes each)
     * 6. message (variable length):
     *    - signed_slothash (32 bytes)
     *    - feed_infos (49 bytes each): feed_hash (32) + value (16) + min_oracle_samples (1)
     * 7. oracle indexes (1 byte each)
     * 8. recent_slot (8 bytes, u64 LE)
     * 9. version (1 byte, u8)
     * 10. discriminator (4 bytes, "SBOD")
     *
     * @param buffer - The Ed25519 instruction data buffer
     * @returns Decoded SwitchboardQuote data
     */
    static decode(buffer: Buffer): SwitchboardQuote;
    /**
     * Converts a SwitchboardQuote to a string representation
     *
     * @param quote - The SwitchboardQuote to convert
     * @param precision - Number of decimal places for feed values (default: 18)
     * @returns String representation
     */
    static toString(quote: SwitchboardQuote, precision?: number): string;
    /**
     * Converts a SwitchboardQuote to a JSON-serializable object
     *
     * @param quote - The SwitchboardQuote to convert
     * @returns JSON-serializable object
     */
    static toJSON(quote: SwitchboardQuote): SwitchboardQuoteJSON;
}
//# sourceMappingURL=oracleQuote.d.ts.map