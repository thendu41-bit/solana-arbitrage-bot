import * as core from "./core.js";
import * as errors from "./errors.js";
import type * as schemas from "./schemas.js";
import * as util from "./util.js";
type ParseThis = void | {
    Error?: {
        new (issues: errors.$ZodIssue[]): errors.$ZodError;
    };
};
export declare function _parse<T extends schemas.$ZodType>(this: ParseThis | void, schema: T, value: unknown, _ctx?: schemas.ParseContext<errors.$ZodIssue>): core.output<T>;
export declare const parse: typeof _parse;
export declare function _safeParse<T extends schemas.$ZodType>(this: ParseThis, schema: T, value: unknown, _ctx?: schemas.ParseContext<errors.$ZodIssue>): util.SafeParseResult<core.output<T>>;
export declare const safeParse: typeof _safeParse;
export declare function _parseAsync<T extends schemas.$ZodType>(this: ParseThis, schema: T, value: unknown, _ctx?: schemas.ParseContext<errors.$ZodIssue>): Promise<core.output<T>>;
export declare const parseAsync: typeof _parseAsync;
export declare function _safeParseAsync<T extends schemas.$ZodType>(this: ParseThis, schema: T, value: unknown, _ctx?: schemas.ParseContext<errors.$ZodIssue>): Promise<util.SafeParseResult<core.output<T>>>;
export declare const safeParseAsync: typeof _safeParseAsync;
export {};
