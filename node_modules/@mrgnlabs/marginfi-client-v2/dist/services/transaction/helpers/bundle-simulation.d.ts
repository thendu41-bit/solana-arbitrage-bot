import { TransactionError, PublicKey, VersionedTransaction, SimulatedTransactionResponse } from "@solana/web3.js";
export declare class BundleSimulationError extends Error {
    readonly logs?: string[] | undefined;
    readonly cause?: unknown | undefined;
    constructor(message: string, logs?: string[] | undefined, cause?: unknown | undefined);
    static fromHttpError(status: number, statusText: string): BundleSimulationError;
    static fromEncodingError(error: unknown, index?: number): BundleSimulationError;
}
export declare function isSimulatedTransactionResponse(response: SimulatedTransactionResponse | RpcSimulateBundleTransactionResult[]): response is SimulatedTransactionResponse;
export interface RpcSimulateBundleTransactionResult {
    err?: TransactionError;
    logs: string[];
    preExecutionAccounts?: any;
    postExecutionAccounts?: any;
    unitsConsumed?: string;
    returnData?: any;
}
export declare function simulateBundle(rpcEndpoint: string, transactions: VersionedTransaction[], includeAccounts?: Array<PublicKey>): Promise<RpcSimulateBundleTransactionResult[]>;
//# sourceMappingURL=bundle-simulation.d.ts.map