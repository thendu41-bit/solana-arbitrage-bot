import { Connection, PublicKey } from "@solana/web3.js";
import { BankMetadata } from "@mrgnlabs/mrgn-common";
import { BankRaw } from "../../bank";
import { PythPushFeedIdMap } from "../../../utils";
import { OraclePrice } from "../types";
import { vendor } from "../../..";
export declare const fetchPythOracleData: (banks: {
    address: PublicKey;
    data: BankRaw;
}[], bankMetadataMap: {
    [address: string]: BankMetadata;
}, connection?: Connection, opts?: {
    useApiEndpoint?: boolean;
}) => Promise<{
    pythFeedMap: PythPushFeedIdMap;
    bankOraclePriceMap: Map<string, OraclePrice>;
    stakedCollateralData: {
        pythStakedCollateralBanks: {
            address: PublicKey;
            data: BankRaw;
        }[];
        priceCoeffByStakedBank: Record<string, number>;
    };
}>;
/**
 * =============================================================================
 * SWITCHBOARD ORACLE UTILS
 * =============================================================================
 *
 * Utility functions for fetching Switchboard oracle data
 */
export declare const fetchSwbOracleData: (banks: {
    address: PublicKey;
    data: BankRaw;
}[], opts?: {
    useApiEndpoint?: boolean;
}) => Promise<{
    bankOraclePriceMap: Map<string, OraclePrice>;
}>;
export type SwbOracleAiDataByKey = Record<string, {
    feedId: string;
    stdev: string;
    rawPrice: string;
}>;
/**
 * Maps Switchboard banks to their corresponding oracle prices using feed data and crossbar responses
 * @param banks - Array of bank objects with address and raw bank data
 * @param swbOracleAiDataByKey - Oracle account information indexed by oracle key
 * @param crossbarResponse - Crossbar feed response data indexed by feed ID
 * @returns Map of bank addresses to their corresponding oracle prices
 */
export declare const mapSwbBanksToOraclePrices: (banks: {
    address: PublicKey;
    data: BankRaw;
}[], swbOracleAiDataByKey: SwbOracleAiDataByKey, crossbarResponse: Record<string, vendor.FeedResponse | undefined>) => Map<string, OraclePrice>;
/**
 * =============================================================================
 * ORACLE UTILS
 * =============================================================================
 *
 * Utility functions for fetching all oracle data
 */
export declare const fetchOracleData: (banks: {
    address: PublicKey;
    data: BankRaw;
}[], bankMetadataMap: {
    [address: string]: BankMetadata;
}, connection?: Connection, opts?: {
    useApiEndpoint?: boolean;
}) => Promise<{
    bankOraclePriceMap: Map<string, OraclePrice>;
    pythFeedMap: PythPushFeedIdMap;
}>;
export declare const adjustPricesStakedCollateral: (stakedCollateralData: {
    pythStakedCollateralBanks: {
        address: PublicKey;
        data: BankRaw;
    }[];
    priceCoeffByStakedBank: Record<string, number>;
}, solOraclePrice: OraclePrice) => Map<string, OraclePrice>;
//# sourceMappingURL=fetch.utils.d.ts.map