"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPriceWithConfidence = getPriceWithConfidence;
exports.getPrice = getPrice;
exports.parsePriceInfo = parseOraclePriceData;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const constants_1 = require("../../../constants");
const bank_1 = require("../../bank");
const pyth_legacy_1 = require("../../../vendor/pyth_legacy");
const pyth_push_oracle_1 = require("../../../vendor/pyth_push_oracle");
const switchboard_legacy_1 = require("../../../vendor/switchboard_legacy");
const switchboard_pull_1 = require("../../../vendor/switchboard_pull");
const types_1 = require("../types");
function getPriceWithConfidence(oraclePrice, weighted) {
    return weighted ? oraclePrice.priceWeighted : oraclePrice.priceRealtime;
}
function getPrice(oraclePrice, priceBias = types_1.PriceBias.None, weightedPrice = false) {
    const price = getPriceWithConfidence(oraclePrice, weightedPrice);
    switch (priceBias) {
        case types_1.PriceBias.Lowest:
            return price.lowestPrice;
        case types_1.PriceBias.Highest:
            return price.highestPrice;
        case types_1.PriceBias.None:
            return price.price;
    }
}
function capConfidenceInterval(price, confidence, maxConfidence) {
    let maxConfidenceInterval = price.times(maxConfidence);
    return bignumber_js_1.default.min(confidence, maxConfidenceInterval);
}
function parseOraclePriceData(oracleSetup, rawData, shardId) {
    const debug = require("debug")("mfi:oracle-loader");
    switch (oracleSetup) {
        case bank_1.OracleSetup.PythLegacy: {
            const pythPriceData = (0, pyth_legacy_1.parsePriceData)(rawData);
            let priceData = pythPriceData.price;
            if (priceData === undefined) {
                priceData = pythPriceData.previousPrice;
            }
            let confidenceData = pythPriceData.confidence;
            if (confidenceData === undefined) {
                confidenceData = pythPriceData.previousConfidence;
            }
            const pythPriceRealtime = new bignumber_js_1.default(priceData);
            const pythConfidenceRealtime = new bignumber_js_1.default(confidenceData).times(constants_1.PYTH_PRICE_CONF_INTERVALS);
            const pythConfidenceRealtimeCapped = capConfidenceInterval(pythPriceRealtime, pythConfidenceRealtime, constants_1.PYTH_PRICE_CONF_INTERVALS);
            const pythLowestPriceRealtime = pythPriceRealtime.minus(pythConfidenceRealtimeCapped);
            const pythHighestPriceRealtime = pythPriceRealtime.plus(pythConfidenceRealtimeCapped);
            const pythPriceWeighted = new bignumber_js_1.default(pythPriceData.emaPrice.value);
            const pythConfIntervalWeighted = new bignumber_js_1.default(pythPriceData.emaConfidence.value).times(constants_1.PYTH_PRICE_CONF_INTERVALS);
            const pythConfIntervalWeightedCapped = capConfidenceInterval(pythPriceWeighted, pythConfIntervalWeighted, constants_1.PYTH_PRICE_CONF_INTERVALS);
            const pythLowestPrice = pythPriceWeighted.minus(pythConfIntervalWeightedCapped);
            const pythHighestPrice = pythPriceWeighted.plus(pythConfIntervalWeightedCapped);
            debug("Loaded pyth price rt=%s (+/- %s), w=%s (+/- %s)", pythPriceRealtime.toString(), pythConfidenceRealtimeCapped.toString(), pythPriceWeighted.toString(), pythConfIntervalWeightedCapped.toString());
            return {
                priceRealtime: {
                    price: pythPriceRealtime,
                    confidence: pythConfidenceRealtimeCapped,
                    lowestPrice: pythLowestPriceRealtime,
                    highestPrice: pythHighestPriceRealtime,
                },
                priceWeighted: {
                    price: pythPriceWeighted,
                    confidence: pythConfIntervalWeightedCapped,
                    lowestPrice: pythLowestPrice,
                    highestPrice: pythHighestPrice,
                },
                timestamp: new bignumber_js_1.default(Number(pythPriceData.timestamp)),
                pythShardId: shardId,
            };
        }
        case bank_1.OracleSetup.PythPushOracle:
        case bank_1.OracleSetup.StakedWithPythPush: {
            let bytesWithoutDiscriminator = rawData.slice(8);
            let data = (0, pyth_push_oracle_1.parsePriceInfo)(bytesWithoutDiscriminator);
            const exponent = new bignumber_js_1.default(10 ** data.priceMessage.exponent);
            const priceRealTime = new bignumber_js_1.default(Number(data.priceMessage.price)).times(exponent);
            const confidenceRealTime = new bignumber_js_1.default(Number(data.priceMessage.conf))
                .times(exponent)
                .times(constants_1.PYTH_PRICE_CONF_INTERVALS);
            const cappedConfidenceRealTime = capConfidenceInterval(priceRealTime, confidenceRealTime, constants_1.MAX_CONFIDENCE_INTERVAL_RATIO);
            const lowestPriceRealTime = priceRealTime.minus(cappedConfidenceRealTime);
            const highestPriceRealTime = priceRealTime.plus(cappedConfidenceRealTime);
            const priceTimeWeighted = new bignumber_js_1.default(Number(data.priceMessage.emaPrice)).times(exponent);
            const confidenceTimeWeighted = new bignumber_js_1.default(Number(data.priceMessage.emaConf))
                .times(exponent)
                .times(constants_1.PYTH_PRICE_CONF_INTERVALS);
            const cappedConfidenceWeighted = capConfidenceInterval(priceTimeWeighted, confidenceTimeWeighted, constants_1.MAX_CONFIDENCE_INTERVAL_RATIO);
            const lowestPriceWeighted = priceTimeWeighted.minus(cappedConfidenceWeighted);
            const highestPriceWeighted = priceTimeWeighted.plus(cappedConfidenceWeighted);
            return {
                priceRealtime: {
                    price: priceRealTime,
                    confidence: cappedConfidenceRealTime,
                    lowestPrice: lowestPriceRealTime,
                    highestPrice: highestPriceRealTime,
                },
                priceWeighted: {
                    price: priceTimeWeighted,
                    confidence: cappedConfidenceWeighted,
                    lowestPrice: lowestPriceWeighted,
                    highestPrice: highestPriceWeighted,
                },
                timestamp: new bignumber_js_1.default(Number(data.priceMessage.publishTime)),
                pythShardId: shardId,
            };
        }
        case bank_1.OracleSetup.SwitchboardV2: {
            const aggData = switchboard_legacy_1.AggregatorAccountData.decode(rawData);
            const swbPrice = new bignumber_js_1.default(switchboard_legacy_1.AggregatorAccount.decodeLatestValue(aggData).toString());
            const swbConfidence = new bignumber_js_1.default(aggData.latestConfirmedRound.stdDeviation.toBig().toString()).times(constants_1.SWB_PRICE_CONF_INTERVALS);
            const swbConfidenceCapped = capConfidenceInterval(swbPrice, swbConfidence, constants_1.MAX_CONFIDENCE_INTERVAL_RATIO);
            const swbLowestPrice = swbPrice.minus(swbConfidenceCapped);
            const swbHighestPrice = swbPrice.plus(swbConfidenceCapped);
            debug("Loaded swb legacy price rt=%s (+/- %s), w=%s (+/- %s)", swbPrice.toString(), swbConfidenceCapped.toString(), swbPrice.toString(), swbConfidenceCapped.toString());
            return {
                priceRealtime: {
                    price: swbPrice,
                    confidence: swbConfidenceCapped,
                    lowestPrice: swbLowestPrice,
                    highestPrice: swbHighestPrice,
                },
                priceWeighted: {
                    price: swbPrice,
                    confidence: swbConfidenceCapped,
                    lowestPrice: swbLowestPrice,
                    highestPrice: swbHighestPrice,
                },
                timestamp: new bignumber_js_1.default(aggData.latestConfirmedRound.roundOpenTimestamp),
            };
        }
        case bank_1.OracleSetup.SwitchboardPull:
            const pullFeedDAta = (0, switchboard_pull_1.decodeSwitchboardPullFeedData)(rawData);
            const swbPrice = new bignumber_js_1.default(pullFeedDAta.result.value.toString()).div(10 ** switchboard_pull_1.SWITCHBOARD_ONDEMANDE_PRICE_PRECISION);
            const swbConfidence = new bignumber_js_1.default(pullFeedDAta.result.std_dev.toString()).times(constants_1.SWB_PRICE_CONF_INTERVALS);
            const swbConfidenceCapped = capConfidenceInterval(swbPrice, swbConfidence, constants_1.MAX_CONFIDENCE_INTERVAL_RATIO);
            const swbLowestPrice = swbPrice.minus(swbConfidenceCapped);
            const swbHighestPrice = swbPrice.plus(swbConfidenceCapped);
            debug("Loaded swb pull price rt=%s (+/- %s), w=%s (+/- %s)", swbPrice.toString(), swbConfidenceCapped.toString(), swbPrice.toString(), swbConfidenceCapped.toString());
            return {
                priceRealtime: {
                    price: swbPrice,
                    confidence: swbConfidenceCapped,
                    lowestPrice: swbLowestPrice,
                    highestPrice: swbHighestPrice,
                },
                priceWeighted: {
                    price: swbPrice,
                    confidence: swbConfidenceCapped,
                    lowestPrice: swbLowestPrice,
                    highestPrice: swbHighestPrice,
                },
                timestamp: new bignumber_js_1.default(pullFeedDAta.last_update_timestamp.toString()),
            };
        default:
            console.error("Invalid oracle setup", oracleSetup);
            throw new Error(`Invalid oracle setup "${oracleSetup}"`);
    }
}
