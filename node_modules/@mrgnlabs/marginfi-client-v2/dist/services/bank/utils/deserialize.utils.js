"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeBankRaw = decodeBankRaw;
exports.parseBankRaw = parseBankRaw;
exports.dtoToBank = dtoToBank;
exports.dtoToEmodeSettings = dtoToEmodeSettings;
exports.dtoToBankConfig = dtoToBankConfig;
exports.dtoToInterestRateConfig = dtoToInterestRateConfig;
exports.dtoToBankRaw = dtoToBankRaw;
exports.dtoToEmodeSettingsRaw = dtoToEmodeSettingsRaw;
exports.dtoToBankConfigRaw = dtoToBankConfigRaw;
exports.parseBankConfigRaw = parseBankConfigRaw;
exports.parseRiskTier = parseRiskTier;
exports.parseOperationalState = parseOperationalState;
exports.parseOracleSetup = parseOracleSetup;
exports.getActiveEmodeFlags = getActiveEmodeFlags;
exports.hasEmodeFlag = hasEmodeFlag;
exports.getActiveEmodeEntryFlags = getActiveEmodeEntryFlags;
exports.hasEmodeEntryFlag = hasEmodeEntryFlag;
exports.parseEmodeTag = parseEmodeTag;
const anchor_1 = require("@coral-xyz/anchor");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const web3_js_1 = require("@solana/web3.js");
const bn_js_1 = __importDefault(require("bn.js"));
const mrgn_common_1 = require("@mrgnlabs/mrgn-common");
const types_1 = require("../types");
const utils_1 = require("../../../utils");
const __1 = require("../../..");
/*
 * Bank deserialization
 */
function decodeBankRaw(encoded, idl) {
    const coder = new anchor_1.BorshCoder(idl);
    return coder.accounts.decode(__1.AccountType.Bank, encoded);
}
function parseBankRaw(address, accountParsed, feedIdMap, bankMetadata) {
    const flags = accountParsed.flags.toNumber();
    const mint = accountParsed.mint;
    const mintDecimals = accountParsed.mintDecimals;
    const group = accountParsed.group;
    const assetShareValue = (0, mrgn_common_1.wrappedI80F48toBigNumber)(accountParsed.assetShareValue);
    const liabilityShareValue = (0, mrgn_common_1.wrappedI80F48toBigNumber)(accountParsed.liabilityShareValue);
    const liquidityVault = accountParsed.liquidityVault;
    const liquidityVaultBump = accountParsed.liquidityVaultBump;
    const liquidityVaultAuthorityBump = accountParsed.liquidityVaultAuthorityBump;
    const insuranceVault = accountParsed.insuranceVault;
    const insuranceVaultBump = accountParsed.insuranceVaultBump;
    const insuranceVaultAuthorityBump = accountParsed.insuranceVaultAuthorityBump;
    const collectedInsuranceFeesOutstanding = (0, mrgn_common_1.wrappedI80F48toBigNumber)(accountParsed.collectedInsuranceFeesOutstanding);
    const feeVault = accountParsed.feeVault;
    const feeVaultBump = accountParsed.feeVaultBump;
    const feeVaultAuthorityBump = accountParsed.feeVaultAuthorityBump;
    const collectedGroupFeesOutstanding = (0, mrgn_common_1.wrappedI80F48toBigNumber)(accountParsed.collectedGroupFeesOutstanding);
    const config = parseBankConfigRaw(accountParsed.config);
    const lastUpdate = accountParsed.lastUpdate.toNumber();
    const totalAssetShares = (0, mrgn_common_1.wrappedI80F48toBigNumber)(accountParsed.totalAssetShares);
    const totalLiabilityShares = (0, mrgn_common_1.wrappedI80F48toBigNumber)(accountParsed.totalLiabilityShares);
    const emissionsActiveBorrowing = (flags & 1) > 0;
    const emissionsActiveLending = (flags & 2) > 0;
    // @todo existence checks here should be temporary - remove once all banks have emission configs
    const emissionsRate = accountParsed.emissionsRate.toNumber();
    const emissionsMint = accountParsed.emissionsMint;
    const emissionsRemaining = accountParsed.emissionsRemaining
        ? (0, mrgn_common_1.wrappedI80F48toBigNumber)(accountParsed.emissionsRemaining)
        : new bignumber_js_1.default(0);
    const { oracleKey, shardId: pythShardId } = feedIdMap ? (0, utils_1.findOracleKey)(config) : { oracleKey: config.oracleKeys[0] };
    const emode = __1.EmodeSettings.from(accountParsed.emode);
    const tokenSymbol = bankMetadata?.tokenSymbol;
    const feesDestinationAccount = accountParsed.feesDestinationAccount;
    const lendingPositionCount = accountParsed.lendingPositionCount
        ? new bignumber_js_1.default(accountParsed.lendingPositionCount.toString())
        : new bignumber_js_1.default(0);
    const borrowingPositionCount = accountParsed.borrowingPositionCount
        ? new bignumber_js_1.default(accountParsed.borrowingPositionCount.toString())
        : new bignumber_js_1.default(0);
    return {
        address,
        group,
        mint,
        mintDecimals,
        assetShareValue,
        liabilityShareValue,
        liquidityVault,
        liquidityVaultBump,
        liquidityVaultAuthorityBump,
        insuranceVault,
        insuranceVaultBump,
        insuranceVaultAuthorityBump,
        collectedInsuranceFeesOutstanding,
        feeVault,
        feeVaultBump,
        feeVaultAuthorityBump,
        collectedGroupFeesOutstanding,
        lastUpdate,
        config,
        totalAssetShares,
        totalLiabilityShares,
        emissionsActiveBorrowing,
        emissionsActiveLending,
        emissionsRate,
        emissionsMint,
        emissionsRemaining,
        oracleKey,
        feesDestinationAccount,
        lendingPositionCount,
        borrowingPositionCount,
        pythShardId,
        emode,
        tokenSymbol,
    };
}
/*
 * DTO Bank deserialization
 */
function dtoToBank(bankDto) {
    return {
        address: new web3_js_1.PublicKey(bankDto.address),
        group: new web3_js_1.PublicKey(bankDto.group),
        mint: new web3_js_1.PublicKey(bankDto.mint),
        mintDecimals: bankDto.mintDecimals,
        assetShareValue: new bignumber_js_1.default(bankDto.assetShareValue),
        liabilityShareValue: new bignumber_js_1.default(bankDto.liabilityShareValue),
        liquidityVault: new web3_js_1.PublicKey(bankDto.liquidityVault),
        liquidityVaultBump: bankDto.liquidityVaultBump,
        liquidityVaultAuthorityBump: bankDto.liquidityVaultAuthorityBump,
        insuranceVault: new web3_js_1.PublicKey(bankDto.insuranceVault),
        insuranceVaultBump: bankDto.insuranceVaultBump,
        insuranceVaultAuthorityBump: bankDto.insuranceVaultAuthorityBump,
        collectedInsuranceFeesOutstanding: new bignumber_js_1.default(bankDto.collectedInsuranceFeesOutstanding),
        feeVault: new web3_js_1.PublicKey(bankDto.feeVault),
        feeVaultBump: bankDto.feeVaultBump,
        feeVaultAuthorityBump: bankDto.feeVaultAuthorityBump,
        collectedGroupFeesOutstanding: new bignumber_js_1.default(bankDto.collectedGroupFeesOutstanding),
        lastUpdate: bankDto.lastUpdate,
        config: dtoToBankConfig(bankDto.config),
        totalAssetShares: new bignumber_js_1.default(bankDto.totalAssetShares),
        totalLiabilityShares: new bignumber_js_1.default(bankDto.totalLiabilityShares),
        emissionsActiveBorrowing: bankDto.emissionsActiveBorrowing,
        emissionsActiveLending: bankDto.emissionsActiveLending,
        emissionsRate: bankDto.emissionsRate,
        emissionsMint: new web3_js_1.PublicKey(bankDto.emissionsMint),
        emissionsRemaining: new bignumber_js_1.default(bankDto.emissionsRemaining),
        oracleKey: new web3_js_1.PublicKey(bankDto.oracleKey),
        pythShardId: bankDto.pythShardId,
        emode: dtoToEmodeSettings(bankDto.emode),
        tokenSymbol: bankDto.tokenSymbol,
        feesDestinationAccount: bankDto.feesDestinationAccount ? new web3_js_1.PublicKey(bankDto.feesDestinationAccount) : undefined,
        lendingPositionCount: bankDto.lendingPositionCount ? new bignumber_js_1.default(bankDto.lendingPositionCount) : undefined,
        borrowingPositionCount: bankDto.borrowingPositionCount ? new bignumber_js_1.default(bankDto.borrowingPositionCount) : undefined,
    };
}
function dtoToEmodeSettings(emodeSettingsDto) {
    return {
        emodeTag: emodeSettingsDto.emodeTag,
        timestamp: emodeSettingsDto.timestamp,
        flags: emodeSettingsDto.flags,
        emodeEntries: emodeSettingsDto.emodeEntries.map((entry) => {
            return {
                collateralBankEmodeTag: entry.collateralBankEmodeTag,
                flags: entry.flags,
                assetWeightInit: new bignumber_js_1.default(entry.assetWeightInit),
                assetWeightMaint: new bignumber_js_1.default(entry.assetWeightMaint),
            };
        }),
    };
}
function dtoToBankConfig(bankConfigDto) {
    return {
        assetWeightInit: new bignumber_js_1.default(bankConfigDto.assetWeightInit),
        assetWeightMaint: new bignumber_js_1.default(bankConfigDto.assetWeightMaint),
        liabilityWeightInit: new bignumber_js_1.default(bankConfigDto.liabilityWeightInit),
        liabilityWeightMaint: new bignumber_js_1.default(bankConfigDto.liabilityWeightMaint),
        depositLimit: new bignumber_js_1.default(bankConfigDto.depositLimit),
        borrowLimit: new bignumber_js_1.default(bankConfigDto.borrowLimit),
        riskTier: bankConfigDto.riskTier,
        operationalState: bankConfigDto.operationalState,
        totalAssetValueInitLimit: new bignumber_js_1.default(bankConfigDto.totalAssetValueInitLimit),
        assetTag: bankConfigDto.assetTag,
        configFlags: bankConfigDto.configFlags,
        oracleSetup: bankConfigDto.oracleSetup,
        oracleKeys: bankConfigDto.oracleKeys.map((key) => new web3_js_1.PublicKey(key)),
        oracleMaxAge: bankConfigDto.oracleMaxAge,
        interestRateConfig: dtoToInterestRateConfig(bankConfigDto.interestRateConfig),
    };
}
function dtoToInterestRateConfig(interestRateConfigDto) {
    return {
        optimalUtilizationRate: new bignumber_js_1.default(interestRateConfigDto.optimalUtilizationRate),
        plateauInterestRate: new bignumber_js_1.default(interestRateConfigDto.plateauInterestRate),
        maxInterestRate: new bignumber_js_1.default(interestRateConfigDto.maxInterestRate),
        insuranceFeeFixedApr: new bignumber_js_1.default(interestRateConfigDto.insuranceFeeFixedApr),
        insuranceIrFee: new bignumber_js_1.default(interestRateConfigDto.insuranceIrFee),
        protocolFixedFeeApr: new bignumber_js_1.default(interestRateConfigDto.protocolFixedFeeApr),
        protocolIrFee: new bignumber_js_1.default(interestRateConfigDto.protocolIrFee),
        protocolOriginationFee: new bignumber_js_1.default(interestRateConfigDto.protocolOriginationFee),
    };
}
function dtoToBankRaw(bankDto) {
    return {
        group: new web3_js_1.PublicKey(bankDto.group),
        mint: new web3_js_1.PublicKey(bankDto.mint),
        mintDecimals: bankDto.mintDecimals,
        assetShareValue: bankDto.assetShareValue,
        liabilityShareValue: bankDto.liabilityShareValue,
        liquidityVault: new web3_js_1.PublicKey(bankDto.liquidityVault),
        liquidityVaultBump: bankDto.liquidityVaultBump,
        liquidityVaultAuthorityBump: bankDto.liquidityVaultAuthorityBump,
        insuranceVault: new web3_js_1.PublicKey(bankDto.insuranceVault),
        insuranceVaultBump: bankDto.insuranceVaultBump,
        insuranceVaultAuthorityBump: bankDto.insuranceVaultAuthorityBump,
        collectedInsuranceFeesOutstanding: bankDto.collectedInsuranceFeesOutstanding,
        feeVault: new web3_js_1.PublicKey(bankDto.feeVault),
        feeVaultBump: bankDto.feeVaultBump,
        feeVaultAuthorityBump: bankDto.feeVaultAuthorityBump,
        collectedGroupFeesOutstanding: bankDto.collectedGroupFeesOutstanding,
        lastUpdate: new bn_js_1.default(bankDto.lastUpdate),
        config: dtoToBankConfigRaw(bankDto.config),
        totalAssetShares: bankDto.totalAssetShares,
        totalLiabilityShares: bankDto.totalLiabilityShares,
        flags: new bn_js_1.default(bankDto.flags),
        emissionsRate: new bn_js_1.default(bankDto.emissionsRate),
        emissionsRemaining: bankDto.emissionsRemaining,
        emissionsMint: new web3_js_1.PublicKey(bankDto.emissionsMint),
        feesDestinationAccount: bankDto.feesDestinationAccount ? new web3_js_1.PublicKey(bankDto.feesDestinationAccount) : undefined,
        lendingPositionCount: bankDto.lendingPositionCount ? Number(bankDto.lendingPositionCount) : undefined,
        borrowingPositionCount: bankDto.borrowingPositionCount ? Number(bankDto.borrowingPositionCount) : undefined,
        emode: dtoToEmodeSettingsRaw(bankDto.emode),
    };
}
function dtoToEmodeSettingsRaw(emodeSettingsDto) {
    return {
        emodeTag: emodeSettingsDto.emodeTag,
        timestamp: new bn_js_1.default(emodeSettingsDto.timestamp),
        flags: new bn_js_1.default(emodeSettingsDto.flags),
        emodeConfig: {
            entries: emodeSettingsDto.emodeConfig.entries.map((entry) => {
                return {
                    collateralBankEmodeTag: entry.collateralBankEmodeTag,
                    flags: entry.flags,
                    assetWeightInit: entry.assetWeightInit,
                    assetWeightMaint: entry.assetWeightMaint,
                };
            }),
        },
    };
}
function dtoToBankConfigRaw(bankConfigDto) {
    return {
        assetWeightInit: bankConfigDto.assetWeightInit,
        assetWeightMaint: bankConfigDto.assetWeightMaint,
        liabilityWeightInit: bankConfigDto.liabilityWeightInit,
        liabilityWeightMaint: bankConfigDto.liabilityWeightMaint,
        depositLimit: new bn_js_1.default(bankConfigDto.depositLimit),
        borrowLimit: new bn_js_1.default(bankConfigDto.borrowLimit),
        riskTier: bankConfigDto.riskTier,
        operationalState: bankConfigDto.operationalState,
        totalAssetValueInitLimit: new bn_js_1.default(bankConfigDto.totalAssetValueInitLimit),
        assetTag: bankConfigDto.assetTag,
        configFlags: bankConfigDto.configFlags,
        oracleSetup: bankConfigDto.oracleSetup,
        oracleKeys: bankConfigDto.oracleKeys.map((key) => new web3_js_1.PublicKey(key)),
        oracleMaxAge: bankConfigDto.oracleMaxAge,
        interestRateConfig: bankConfigDto.interestRateConfig,
        oracleMaxConfidence: bankConfigDto.oracleMaxConfidence,
    };
}
/*
 * Bank config deserialization
 */
function parseBankConfigRaw(bankConfigRaw) {
    const assetWeightInit = (0, mrgn_common_1.wrappedI80F48toBigNumber)(bankConfigRaw.assetWeightInit);
    const assetWeightMaint = (0, mrgn_common_1.wrappedI80F48toBigNumber)(bankConfigRaw.assetWeightMaint);
    const liabilityWeightInit = (0, mrgn_common_1.wrappedI80F48toBigNumber)(bankConfigRaw.liabilityWeightInit);
    const liabilityWeightMaint = (0, mrgn_common_1.wrappedI80F48toBigNumber)(bankConfigRaw.liabilityWeightMaint);
    const depositLimit = (0, bignumber_js_1.default)(bankConfigRaw.depositLimit.toString());
    const borrowLimit = (0, bignumber_js_1.default)(bankConfigRaw.borrowLimit.toString());
    const riskTier = parseRiskTier(bankConfigRaw.riskTier);
    const operationalState = parseOperationalState(bankConfigRaw.operationalState);
    const totalAssetValueInitLimit = (0, bignumber_js_1.default)(bankConfigRaw.totalAssetValueInitLimit.toString());
    const assetTag = bankConfigRaw.assetTag;
    const configFlags = bankConfigRaw.configFlags;
    const oracleSetup = parseOracleSetup(bankConfigRaw.oracleSetup);
    const oracleKeys = bankConfigRaw.oracleKeys;
    const oracleMaxAge = bankConfigRaw.oracleMaxAge === 0 ? __1.DEFAULT_ORACLE_MAX_AGE : bankConfigRaw.oracleMaxAge;
    const interestRateConfig = {
        insuranceFeeFixedApr: (0, mrgn_common_1.wrappedI80F48toBigNumber)(bankConfigRaw.interestRateConfig.insuranceFeeFixedApr),
        maxInterestRate: (0, mrgn_common_1.wrappedI80F48toBigNumber)(bankConfigRaw.interestRateConfig.maxInterestRate),
        insuranceIrFee: (0, mrgn_common_1.wrappedI80F48toBigNumber)(bankConfigRaw.interestRateConfig.insuranceIrFee),
        optimalUtilizationRate: (0, mrgn_common_1.wrappedI80F48toBigNumber)(bankConfigRaw.interestRateConfig.optimalUtilizationRate),
        plateauInterestRate: (0, mrgn_common_1.wrappedI80F48toBigNumber)(bankConfigRaw.interestRateConfig.plateauInterestRate),
        protocolFixedFeeApr: (0, mrgn_common_1.wrappedI80F48toBigNumber)(bankConfigRaw.interestRateConfig.protocolFixedFeeApr),
        protocolIrFee: (0, mrgn_common_1.wrappedI80F48toBigNumber)(bankConfigRaw.interestRateConfig.protocolIrFee),
        protocolOriginationFee: (0, mrgn_common_1.wrappedI80F48toBigNumber)(bankConfigRaw.interestRateConfig.protocolOriginationFee),
    };
    return {
        assetWeightInit,
        assetWeightMaint,
        liabilityWeightInit,
        liabilityWeightMaint,
        depositLimit,
        borrowLimit,
        riskTier,
        operationalState,
        totalAssetValueInitLimit,
        assetTag,
        configFlags,
        oracleSetup,
        oracleKeys,
        oracleMaxAge,
        interestRateConfig,
    };
}
function parseRiskTier(riskTierRaw) {
    switch (Object.keys(riskTierRaw)[0].toLowerCase()) {
        case "collateral":
            return types_1.RiskTier.Collateral;
        case "isolated":
            return types_1.RiskTier.Isolated;
        default:
            throw new Error(`Invalid risk tier "${riskTierRaw}"`);
    }
}
function parseOperationalState(operationalStateRaw) {
    switch (Object.keys(operationalStateRaw)[0].toLowerCase()) {
        case "paused":
            return types_1.OperationalState.Paused;
        case "operational":
            return types_1.OperationalState.Operational;
        case "reduceonly":
            return types_1.OperationalState.ReduceOnly;
        default:
            throw new Error(`Invalid operational state "${operationalStateRaw}"`);
    }
}
function parseOracleSetup(oracleSetupRaw) {
    const oracleKey = Object.keys(oracleSetupRaw)[0].toLowerCase();
    switch (oracleKey) {
        case "none":
            return types_1.OracleSetup.None;
        case "pythlegacy":
            return types_1.OracleSetup.PythLegacy;
        case "switchboardv2":
            return types_1.OracleSetup.SwitchboardV2;
        case "pythpushoracle":
            return types_1.OracleSetup.PythPushOracle;
        case "switchboardpull":
            return types_1.OracleSetup.SwitchboardPull;
        case "stakedwithpythpush":
            return types_1.OracleSetup.StakedWithPythPush;
        default:
            return types_1.OracleSetup.None;
    }
}
/**
 * Get all active EMode flags as an array of flag names
 */
function getActiveEmodeFlags(flags) {
    const activeFlags = [];
    for (const flagName in types_1.EmodeFlags) {
        const flag = types_1.EmodeFlags[flagName];
        if (typeof flag === "number" && hasEmodeFlag(flags, flag)) {
            activeFlags.push(flag);
        }
    }
    return activeFlags;
}
/**
 * Check if a specific EMode flag is set
 */
function hasEmodeFlag(flags, flag) {
    return !flags.and(new bn_js_1.default(flag)).isZero();
}
/**
 * Get all active EMode entry flags as an array of flag names
 */
function getActiveEmodeEntryFlags(flags) {
    const activeFlags = [];
    for (const flagName in types_1.EmodeEntryFlags) {
        const flag = types_1.EmodeEntryFlags[flagName];
        if (typeof flag === "number" && hasEmodeEntryFlag(flags, flag)) {
            activeFlags.push(flag);
        }
    }
    return activeFlags;
}
/**
 * Check if a specific EMode entry flag is set
 */
function hasEmodeEntryFlag(flags, flag) {
    return (flags & flag) === flag;
}
/**
 * Parse a raw EMode tag number into the corresponding EmodeTag enum value
 */
function parseEmodeTag(emodeTagRaw) {
    switch (emodeTagRaw) {
        case 501:
            return types_1.EmodeTag.SOL;
        case 1571:
            return types_1.EmodeTag.LST_T1;
        case 1572:
            return types_1.EmodeTag.LST_T2;
        case 0:
        default:
            return types_1.EmodeTag.UNSET;
    }
}
