"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.bankRawToDto = bankRawToDto;
exports.emodeSettingsRawToDto = emodeSettingsRawToDto;
exports.bankConfigRawToDto = bankConfigRawToDto;
exports.serializeOracleSetupToIndex = serializeOracleSetupToIndex;
exports.serializeBankConfigOpt = serializeBankConfigOpt;
exports.serializeRiskTier = serializeRiskTier;
exports.serializeOperationalState = serializeOperationalState;
exports.serializeOracleSetup = serializeOracleSetup;
exports.toBankDto = toBankDto;
exports.toEmodeSettingsDto = toEmodeSettingsDto;
exports.toBankConfigDto = toBankConfigDto;
exports.toInterestRateConfigDto = toInterestRateConfigDto;
const bn_js_1 = __importDefault(require("bn.js"));
const mrgn_common_1 = require("@mrgnlabs/mrgn-common");
const types_1 = require("../types");
function serializeBankConfigOpt(bankConfigOpt) {
    const toWrappedI80F48 = (value) => value && (0, mrgn_common_1.bigNumberToWrappedI80F48)(value);
    const toBN = (value) => value && new bn_js_1.default(value.toString());
    return {
        assetWeightInit: toWrappedI80F48(bankConfigOpt.assetWeightInit),
        assetWeightMaint: toWrappedI80F48(bankConfigOpt.assetWeightMaint),
        liabilityWeightInit: toWrappedI80F48(bankConfigOpt.liabilityWeightInit),
        liabilityWeightMaint: toWrappedI80F48(bankConfigOpt.liabilityWeightMaint),
        depositLimit: toBN(bankConfigOpt.depositLimit),
        borrowLimit: toBN(bankConfigOpt.borrowLimit),
        riskTier: bankConfigOpt.riskTier && serializeRiskTier(bankConfigOpt.riskTier),
        totalAssetValueInitLimit: toBN(bankConfigOpt.totalAssetValueInitLimit),
        assetTag: bankConfigOpt.assetTag !== null ? Number(bankConfigOpt.assetTag) : 0,
        interestRateConfig: bankConfigOpt.interestRateConfig &&
            {
                insuranceFeeFixedApr: toWrappedI80F48(bankConfigOpt.interestRateConfig.insuranceFeeFixedApr),
                maxInterestRate: toWrappedI80F48(bankConfigOpt.interestRateConfig.maxInterestRate),
                insuranceIrFee: toWrappedI80F48(bankConfigOpt.interestRateConfig.insuranceIrFee),
                optimalUtilizationRate: toWrappedI80F48(bankConfigOpt.interestRateConfig.optimalUtilizationRate),
                plateauInterestRate: toWrappedI80F48(bankConfigOpt.interestRateConfig.plateauInterestRate),
                protocolFixedFeeApr: toWrappedI80F48(bankConfigOpt.interestRateConfig.protocolFixedFeeApr),
                protocolIrFee: toWrappedI80F48(bankConfigOpt.interestRateConfig.protocolIrFee),
            },
        operationalState: bankConfigOpt.operationalState && serializeOperationalState(bankConfigOpt.operationalState),
        oracleMaxAge: bankConfigOpt.oracleMaxAge,
        permissionlessBadDebtSettlement: bankConfigOpt.permissionlessBadDebtSettlement,
        oracleMaxConfidence: bankConfigOpt.oracleMaxConfidence,
        freezeSettings: null,
    };
}
function serializeRiskTier(riskTier) {
    switch (riskTier) {
        case types_1.RiskTier.Collateral:
            return { collateral: {} };
        case types_1.RiskTier.Isolated:
            return { isolated: {} };
        default:
            throw new Error(`Invalid risk tier "${riskTier}"`);
    }
}
function serializeOperationalState(operationalState) {
    switch (operationalState) {
        case types_1.OperationalState.Paused:
            return { paused: {} };
        case types_1.OperationalState.Operational:
            return { operational: {} };
        case types_1.OperationalState.ReduceOnly:
            return { reduceOnly: {} };
        default:
            throw new Error(`Invalid operational state "${operationalState}"`);
    }
}
function serializeOracleSetupToIndex(oracleSetup) {
    switch (oracleSetup) {
        case types_1.OracleSetup.None:
            return 0;
        case types_1.OracleSetup.PythLegacy:
            return 1;
        case types_1.OracleSetup.SwitchboardV2:
            return 2;
        case types_1.OracleSetup.PythPushOracle:
            return 3;
        case types_1.OracleSetup.SwitchboardPull:
            return 4;
        case types_1.OracleSetup.StakedWithPythPush:
            return 5;
        default:
            return 0;
    }
}
function serializeOracleSetup(oracleSetup) {
    switch (oracleSetup) {
        case types_1.OracleSetup.None:
            return { none: {} };
        case types_1.OracleSetup.PythLegacy:
            return { pythLegacy: {} };
        case types_1.OracleSetup.SwitchboardV2:
            return { switchboardV2: {} };
        case types_1.OracleSetup.PythPushOracle:
            return { pythPushOracle: {} };
        case types_1.OracleSetup.SwitchboardPull:
            return { switchboardPull: {} };
        case types_1.OracleSetup.StakedWithPythPush:
            return { stakedWithPythPush: {} };
        default:
            throw new Error(`Invalid oracle setup "${oracleSetup}"`);
    }
}
function toBankDto(bank) {
    return {
        address: bank.address.toBase58(),
        group: bank.group.toBase58(),
        mint: bank.mint.toBase58(),
        mintDecimals: bank.mintDecimals,
        assetShareValue: bank.assetShareValue.toString(),
        liabilityShareValue: bank.liabilityShareValue.toString(),
        liquidityVault: bank.liquidityVault.toBase58(),
        liquidityVaultBump: bank.liquidityVaultBump,
        liquidityVaultAuthorityBump: bank.liquidityVaultAuthorityBump,
        insuranceVault: bank.insuranceVault.toBase58(),
        insuranceVaultBump: bank.insuranceVaultBump,
        insuranceVaultAuthorityBump: bank.insuranceVaultAuthorityBump,
        collectedInsuranceFeesOutstanding: bank.collectedInsuranceFeesOutstanding.toString(),
        feeVault: bank.feeVault.toBase58(),
        feeVaultBump: bank.feeVaultBump,
        feeVaultAuthorityBump: bank.feeVaultAuthorityBump,
        collectedGroupFeesOutstanding: bank.collectedGroupFeesOutstanding.toString(),
        lastUpdate: bank.lastUpdate,
        config: toBankConfigDto(bank.config),
        totalAssetShares: bank.totalAssetShares.toString(),
        totalLiabilityShares: bank.totalLiabilityShares.toString(),
        emissionsActiveBorrowing: bank.emissionsActiveBorrowing,
        emissionsActiveLending: bank.emissionsActiveLending,
        emissionsRate: bank.emissionsRate,
        emissionsMint: bank.emissionsMint.toBase58(),
        emissionsRemaining: bank.emissionsRemaining.toString(),
        oracleKey: bank.oracleKey.toBase58(),
        pythShardId: bank.pythShardId,
        emode: toEmodeSettingsDto(bank.emode),
        tokenSymbol: bank.tokenSymbol,
        feesDestinationAccount: bank.feesDestinationAccount?.toBase58(),
        lendingPositionCount: bank.lendingPositionCount?.toString(),
        borrowingPositionCount: bank.borrowingPositionCount?.toString(),
    };
}
function toEmodeSettingsDto(emodeSettings) {
    return {
        emodeTag: emodeSettings.emodeTag,
        timestamp: emodeSettings.timestamp,
        flags: emodeSettings.flags,
        emodeEntries: emodeSettings.emodeEntries.map((entry) => {
            return {
                collateralBankEmodeTag: entry.collateralBankEmodeTag,
                flags: entry.flags,
                assetWeightInit: entry.assetWeightInit.toString(),
                assetWeightMaint: entry.assetWeightMaint.toString(),
            };
        }),
    };
}
function toBankConfigDto(bankConfig) {
    return {
        assetWeightInit: bankConfig.assetWeightInit.toString(),
        assetWeightMaint: bankConfig.assetWeightMaint.toString(),
        liabilityWeightInit: bankConfig.liabilityWeightInit.toString(),
        liabilityWeightMaint: bankConfig.liabilityWeightMaint.toString(),
        depositLimit: bankConfig.depositLimit.toString(),
        borrowLimit: bankConfig.borrowLimit.toString(),
        riskTier: bankConfig.riskTier,
        operationalState: bankConfig.operationalState,
        totalAssetValueInitLimit: bankConfig.totalAssetValueInitLimit.toString(),
        assetTag: bankConfig.assetTag,
        oracleSetup: bankConfig.oracleSetup,
        oracleKeys: bankConfig.oracleKeys.map((key) => key.toBase58()),
        oracleMaxAge: bankConfig.oracleMaxAge,
        interestRateConfig: toInterestRateConfigDto(bankConfig.interestRateConfig),
        configFlags: bankConfig.configFlags,
    };
}
function toInterestRateConfigDto(interestRateConfig) {
    return {
        optimalUtilizationRate: interestRateConfig.optimalUtilizationRate.toString(),
        plateauInterestRate: interestRateConfig.plateauInterestRate.toString(),
        maxInterestRate: interestRateConfig.maxInterestRate.toString(),
        insuranceFeeFixedApr: interestRateConfig.insuranceFeeFixedApr.toString(),
        insuranceIrFee: interestRateConfig.insuranceIrFee.toString(),
        protocolFixedFeeApr: interestRateConfig.protocolFixedFeeApr.toString(),
        protocolIrFee: interestRateConfig.protocolIrFee.toString(),
        protocolOriginationFee: interestRateConfig.protocolOriginationFee.toString(),
    };
}
function bankRawToDto(bankRaw) {
    return {
        group: bankRaw.group.toBase58(),
        mint: bankRaw.mint.toBase58(),
        mintDecimals: bankRaw.mintDecimals,
        assetShareValue: bankRaw.assetShareValue,
        liabilityShareValue: bankRaw.liabilityShareValue,
        liquidityVault: bankRaw.liquidityVault.toBase58(),
        liquidityVaultBump: bankRaw.liquidityVaultBump,
        liquidityVaultAuthorityBump: bankRaw.liquidityVaultAuthorityBump,
        insuranceVault: bankRaw.insuranceVault.toBase58(),
        insuranceVaultBump: bankRaw.insuranceVaultBump,
        insuranceVaultAuthorityBump: bankRaw.insuranceVaultAuthorityBump,
        collectedInsuranceFeesOutstanding: bankRaw.collectedInsuranceFeesOutstanding,
        feeVault: bankRaw.feeVault.toBase58(),
        feeVaultBump: bankRaw.feeVaultBump,
        feeVaultAuthorityBump: bankRaw.feeVaultAuthorityBump,
        collectedGroupFeesOutstanding: bankRaw.collectedGroupFeesOutstanding,
        lastUpdate: bankRaw.lastUpdate.toString(),
        config: bankConfigRawToDto(bankRaw.config),
        totalAssetShares: bankRaw.totalAssetShares,
        totalLiabilityShares: bankRaw.totalLiabilityShares,
        flags: bankRaw.flags.toString(),
        emissionsRate: bankRaw.emissionsRate.toString(),
        emissionsRemaining: bankRaw.emissionsRemaining,
        emissionsMint: bankRaw.emissionsMint.toBase58(),
        feesDestinationAccount: bankRaw?.feesDestinationAccount?.toBase58(),
        lendingPositionCount: bankRaw?.lendingPositionCount?.toString(),
        borrowingPositionCount: bankRaw?.borrowingPositionCount?.toString(),
        emode: emodeSettingsRawToDto(bankRaw.emode),
    };
}
function emodeSettingsRawToDto(emodeSettingsRaw) {
    return {
        emodeTag: emodeSettingsRaw.emodeTag,
        timestamp: emodeSettingsRaw.timestamp.toString(),
        flags: emodeSettingsRaw.flags.toString(),
        emodeConfig: {
            entries: emodeSettingsRaw.emodeConfig.entries.map((entry) => {
                return {
                    collateralBankEmodeTag: entry.collateralBankEmodeTag,
                    flags: entry.flags,
                    assetWeightInit: entry.assetWeightInit,
                    assetWeightMaint: entry.assetWeightMaint,
                };
            }),
        },
    };
}
function bankConfigRawToDto(bankConfigRaw) {
    return {
        assetWeightInit: bankConfigRaw.assetWeightInit,
        assetWeightMaint: bankConfigRaw.assetWeightMaint,
        liabilityWeightInit: bankConfigRaw.liabilityWeightInit,
        liabilityWeightMaint: bankConfigRaw.liabilityWeightMaint,
        depositLimit: bankConfigRaw.depositLimit.toString(),
        borrowLimit: bankConfigRaw.borrowLimit.toString(),
        riskTier: bankConfigRaw.riskTier,
        operationalState: bankConfigRaw.operationalState,
        totalAssetValueInitLimit: bankConfigRaw.totalAssetValueInitLimit.toString(),
        assetTag: bankConfigRaw.assetTag,
        oracleSetup: bankConfigRaw.oracleSetup,
        oracleKeys: bankConfigRaw.oracleKeys.map((key) => key.toBase58()),
        oracleMaxAge: bankConfigRaw.oracleMaxAge,
        interestRateConfig: bankConfigRaw.interestRateConfig,
        configFlags: bankConfigRaw.configFlags,
        oracleMaxConfidence: bankConfigRaw.oracleMaxConfidence,
    };
}
