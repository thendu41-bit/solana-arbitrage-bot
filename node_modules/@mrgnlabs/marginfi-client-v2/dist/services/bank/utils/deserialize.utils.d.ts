import { PublicKey } from "@solana/web3.js";
import BN from "bn.js";
import { BankMetadata } from "@mrgnlabs/mrgn-common";
import { BankConfigRaw, BankConfigType, BankRaw, BankType, EmodeEntryFlags, EmodeFlags, EmodeSettingsType, EmodeTag, InterestRateConfig, OperationalState, OperationalStateRaw, OracleSetup, OracleSetupRaw, RiskTier, RiskTierRaw, BankConfigDto, BankTypeDto, EmodeSettingsDto, InterestRateConfigDto, BankRawDto, EmodeSettingsRaw, EmodeSettingsRawDto, BankConfigRawDto } from "../types";
import { MarginfiIdlType, PythPushFeedIdMap } from "../../..";
export declare function decodeBankRaw(encoded: Buffer, idl: MarginfiIdlType): BankRaw;
export declare function parseBankRaw(address: PublicKey, accountParsed: BankRaw, feedIdMap?: PythPushFeedIdMap, bankMetadata?: BankMetadata): BankType;
export declare function dtoToBank(bankDto: BankTypeDto): BankType;
export declare function dtoToEmodeSettings(emodeSettingsDto: EmodeSettingsDto): EmodeSettingsType;
export declare function dtoToBankConfig(bankConfigDto: BankConfigDto): BankConfigType;
export declare function dtoToInterestRateConfig(interestRateConfigDto: InterestRateConfigDto): InterestRateConfig;
export declare function dtoToBankRaw(bankDto: BankRawDto): BankRaw;
export declare function dtoToEmodeSettingsRaw(emodeSettingsDto: EmodeSettingsRawDto): EmodeSettingsRaw;
export declare function dtoToBankConfigRaw(bankConfigDto: BankConfigRawDto): BankConfigRaw;
export declare function parseBankConfigRaw(bankConfigRaw: BankConfigRaw): BankConfigType;
export declare function parseRiskTier(riskTierRaw: RiskTierRaw): RiskTier;
export declare function parseOperationalState(operationalStateRaw: OperationalStateRaw): OperationalState;
export declare function parseOracleSetup(oracleSetupRaw: OracleSetupRaw): OracleSetup;
/**
 * Get all active EMode flags as an array of flag names
 */
export declare function getActiveEmodeFlags(flags: BN): EmodeFlags[];
/**
 * Check if a specific EMode flag is set
 */
export declare function hasEmodeFlag(flags: BN, flag: number): boolean;
/**
 * Get all active EMode entry flags as an array of flag names
 */
export declare function getActiveEmodeEntryFlags(flags: number): EmodeEntryFlags[];
/**
 * Check if a specific EMode entry flag is set
 */
export declare function hasEmodeEntryFlag(flags: number, flag: number): boolean;
/**
 * Parse a raw EMode tag number into the corresponding EmodeTag enum value
 */
export declare function parseEmodeTag(emodeTagRaw: number): EmodeTag;
//# sourceMappingURL=deserialize.utils.d.ts.map