import { PublicKey } from "@solana/web3.js";
import BigNumber from "bignumber.js";
export declare enum RiskTier {
    Collateral = "Collateral",
    Isolated = "Isolated"
}
export declare enum OperationalState {
    Paused = "Paused",
    Operational = "Operational",
    ReduceOnly = "ReduceOnly"
}
export interface InterestRateConfig {
    optimalUtilizationRate: BigNumber;
    plateauInterestRate: BigNumber;
    maxInterestRate: BigNumber;
    insuranceFeeFixedApr: BigNumber;
    insuranceIrFee: BigNumber;
    protocolFixedFeeApr: BigNumber;
    protocolIrFee: BigNumber;
    protocolOriginationFee: BigNumber;
}
export declare enum OracleSetup {
    None = "None",
    PythLegacy = "PythLegacy",
    SwitchboardV2 = "SwitchboardV2",
    PythPushOracle = "PythPushOracle",
    SwitchboardPull = "SwitchboardPull",
    StakedWithPythPush = "StakedWithPythPush"
}
export declare enum AssetTag {
    DEFAULT = 0,
    SOL = 1,
    STAKED = 2
}
export declare enum BankConfigFlag {
    PYTH_MIGRATED = 1
}
export interface BankConfigOpt {
    assetWeightInit: BigNumber | null;
    assetWeightMaint: BigNumber | null;
    liabilityWeightInit: BigNumber | null;
    liabilityWeightMaint: BigNumber | null;
    depositLimit: BigNumber | null;
    borrowLimit: BigNumber | null;
    riskTier: RiskTier | null;
    totalAssetValueInitLimit: BigNumber | null;
    assetTag: AssetTag | null;
    interestRateConfig: InterestRateConfig | null;
    operationalState: OperationalState | null;
    oracleMaxAge: number | null;
    permissionlessBadDebtSettlement: boolean | null;
    oracleMaxConfidence: number | null;
}
export interface BankConfigType {
    assetWeightInit: BigNumber;
    assetWeightMaint: BigNumber;
    liabilityWeightInit: BigNumber;
    liabilityWeightMaint: BigNumber;
    depositLimit: BigNumber;
    borrowLimit: BigNumber;
    riskTier: RiskTier;
    totalAssetValueInitLimit: BigNumber;
    assetTag: AssetTag;
    configFlags: BankConfigFlag;
    interestRateConfig: InterestRateConfig;
    operationalState: OperationalState;
    oracleSetup: OracleSetup;
    oracleKeys: PublicKey[];
    oracleMaxAge: number;
}
export interface BankType {
    address: PublicKey;
    tokenSymbol?: string;
    group: PublicKey;
    mint: PublicKey;
    mintDecimals: number;
    assetShareValue: BigNumber;
    liabilityShareValue: BigNumber;
    liquidityVault: PublicKey;
    liquidityVaultBump: number;
    liquidityVaultAuthorityBump: number;
    insuranceVault: PublicKey;
    insuranceVaultBump: number;
    insuranceVaultAuthorityBump: number;
    collectedInsuranceFeesOutstanding: BigNumber;
    feeVault: PublicKey;
    feeVaultBump: number;
    feeVaultAuthorityBump: number;
    collectedGroupFeesOutstanding: BigNumber;
    lastUpdate: number;
    config: BankConfigType;
    totalAssetShares: BigNumber;
    totalLiabilityShares: BigNumber;
    emissionsActiveBorrowing: boolean;
    emissionsActiveLending: boolean;
    emissionsRate: number;
    emissionsMint: PublicKey;
    emissionsRemaining: BigNumber;
    oracleKey: PublicKey;
    pythShardId?: number;
    emode: EmodeSettingsType;
    feesDestinationAccount?: PublicKey;
    lendingPositionCount?: BigNumber;
    borrowingPositionCount?: BigNumber;
}
/**
 * Bitwise flags for EMode entry
 */
export declare enum EmodeEntryFlags {
    /**
     * If set, isolated banks with this tag also benefit.
     * If not set, isolated banks continue to offer zero collateral, even if they use this tag.
     * (NOT YET IMPLEMENTED)
     */
    APPLIES_TO_ISOLATED = 1,// 1
    /** Reserved for future use */
    RESERVED_1 = 2,// 2
    RESERVED_2 = 4,// 4
    RESERVED_3 = 8,// 8
    RESERVED_4 = 16,// 16
    RESERVED_5 = 32
}
export interface EmodeEntry {
    collateralBankEmodeTag: EmodeTag;
    flags: EmodeEntryFlags[];
    assetWeightInit: BigNumber;
    assetWeightMaint: BigNumber;
}
/**
 * Bitwise flags for EMode settings
 */
export declare enum EmodeFlags {
    /** If set, at least one entry is configured */
    EMODE_ON = 1,// 1
    /** Reserved for future use */
    RESERVED_1 = 2,// 2
    RESERVED_2 = 4,// 4
    RESERVED_3 = 8
}
export declare enum EmodeTag {
    UNSET = 0,
    SOL = 501,
    LST_T1 = 1571,
    LST_T2 = 1572
}
export interface EmodeSettingsType {
    emodeTag: EmodeTag;
    timestamp: number;
    flags: EmodeFlags[];
    emodeEntries: EmodeEntry[];
}
export interface OracleConfigOpt {
    setup: OracleSetup;
    keys: PublicKey[];
}
export type EmodePair = {
    collateralBanks: PublicKey[];
    collateralBankTag: EmodeTag;
    liabilityBank: PublicKey;
    liabilityBankTag: EmodeTag;
    assetWeightMaint: BigNumber;
    assetWeightInit: BigNumber;
};
export declare enum EmodeImpactStatus {
    ActivateEmode = 0,
    ExtendEmode = 1,
    IncreaseEmode = 2,
    ReduceEmode = 3,
    RemoveEmode = 4,
    InactiveEmode = 5
}
export interface EmodeImpact {
    status: EmodeImpactStatus;
    resultingPairs: EmodePair[];
    activePair?: EmodePair;
}
export interface ActionEmodeImpact {
    borrowImpact?: EmodeImpact;
    supplyImpact?: EmodeImpact;
    repayAllImpact?: EmodeImpact;
    withdrawAllImpact?: EmodeImpact;
}
//# sourceMappingURL=bank.types.d.ts.map