"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountFlags = exports.HealthCacheFlags = void 0;
var HealthCacheFlags;
(function (HealthCacheFlags) {
    /**
     * If set (1), the account is considered healthy and cannot be liquidated.
     * If not set (0), the account is unhealthy and can be liquidated.
     */
    HealthCacheFlags[HealthCacheFlags["HEALTHY"] = 1] = "HEALTHY";
    /**
     * If set (1), the engine did not error during the last health pulse.
     * If not set (0), the engine would have errored and this cache is likely invalid.
     * `RiskEngineInitRejected` is ignored and will allow the flag to be set anyways.
     */
    HealthCacheFlags[HealthCacheFlags["ENGINE_STATUS_OK"] = 2] = "ENGINE_STATUS_OK";
    /**
     * If set (1), the engine did not error due to an oracle issue.
     * If not set (0), engine was passed a bad bank or oracle account, or an oracle was stale.
     * Check the order in which accounts were passed and ensure each balance has the correct banks/oracles,
     * and that oracle cranks ran recently enough. Check `internal_err` and `err_index` for more details
     * in some circumstances. Invalid if generated after borrow/withdraw (these instructions will
     * ignore oracle issues if health is still satisfactory with some balance zeroed out).
     */
    HealthCacheFlags[HealthCacheFlags["ORACLE_OK"] = 4] = "ORACLE_OK";
})(HealthCacheFlags || (exports.HealthCacheFlags = HealthCacheFlags = {}));
var AccountFlags;
(function (AccountFlags) {
    AccountFlags[AccountFlags["ACCOUNT_DISABLED"] = 1] = "ACCOUNT_DISABLED";
    AccountFlags[AccountFlags["ACCOUNT_IN_FLASHLOAN"] = 2] = "ACCOUNT_IN_FLASHLOAN";
    AccountFlags[AccountFlags["ACCOUNT_FLAG_DEPRECATED"] = 4] = "ACCOUNT_FLAG_DEPRECATED";
    AccountFlags[AccountFlags["ACCOUNT_TRANSFER_AUTHORITY_ALLOWED"] = 8] = "ACCOUNT_TRANSFER_AUTHORITY_ALLOWED";
})(AccountFlags || (exports.AccountFlags = AccountFlags = {}));
