import BigNumber from "bignumber.js";
import { PublicKey } from "@solana/web3.js";
import { BankMetadataMap } from "@mrgnlabs/mrgn-common";
import { MarginfiAccountType, BalanceType } from "../types";
import { MarginRequirementType } from "../../../models/account";
import { BankType } from "../../bank";
import { OraclePrice } from "../../price";
/**
 * Marginfi Account Computes
 * =========================
 */
export declare function computeFreeCollateral(marginfiAccount: MarginfiAccountType, opts?: {
    clamped?: boolean;
}): BigNumber;
export declare function computeFreeCollateralLegacy(activeBalances: BalanceType[], banks: Map<string, BankType>, oraclePrices: Map<string, OraclePrice>, opts?: {
    clamped?: boolean;
}): BigNumber;
export declare function computeHealthComponents(marginfiAccount: MarginfiAccountType, marginReqType: MarginRequirementType): {
    assets: BigNumber;
    liabilities: BigNumber;
};
export declare function computeHealthComponentsLegacy(activeBalances: BalanceType[], banks: Map<string, BankType>, oraclePrices: Map<string, OraclePrice>, marginReqType: MarginRequirementType, excludedBanks?: PublicKey[]): {
    assets: BigNumber;
    liabilities: BigNumber;
};
export declare function computeHealthComponentsWithoutBiasLegacy(activeBalances: BalanceType[], banks: Map<string, BankType>, oraclePrices: Map<string, OraclePrice>, marginReqType: MarginRequirementType): {
    assets: BigNumber;
    liabilities: BigNumber;
};
export declare function computeAccountValue(marginfiAccount: MarginfiAccountType): BigNumber;
export declare function computeNetApy(marginfiAccount: MarginfiAccountType, activeBalances: BalanceType[], banks: Map<string, BankType>, oraclePrices: Map<string, OraclePrice>): number;
/**
 * Marginfi Balance Computes
 * =========================
 */
export declare function computeBalanceUsdValue(balance: BalanceType, bank: BankType, oraclePrice: OraclePrice, marginRequirementType: MarginRequirementType): {
    assets: BigNumber;
    liabilities: BigNumber;
};
export declare function getBalanceUsdValueWithPriceBias(balance: BalanceType, bank: BankType, oraclePrice: OraclePrice, marginRequirementType: MarginRequirementType): {
    assets: BigNumber;
    liabilities: BigNumber;
};
export declare function computeQuantity(balance: BalanceType, bank: BankType): {
    assets: BigNumber;
    liabilities: BigNumber;
};
export declare function computeQuantityUi(balance: BalanceType, bank: BankType): {
    assets: BigNumber;
    liabilities: BigNumber;
};
export declare function computeClaimedEmissions(balance: BalanceType, bank: BankType, currentTimestamp: number): BigNumber;
export declare function computeTotalOutstandingEmissions(balance: BalanceType, bank: BankType): BigNumber;
export declare function computeHealthCheckAccounts(balances: BalanceType[], banks: Map<string, BankType>, mandatoryBanks?: PublicKey[], excludedBanks?: PublicKey[]): BankType[];
export declare function computeHealthAccountMetas(banksToInclude: BankType[], bankMetadataMap?: BankMetadataMap, enableSorting?: boolean): PublicKey[];
//# sourceMappingURL=compute.utils.d.ts.map