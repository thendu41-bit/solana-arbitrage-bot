import { Connection, PublicKey } from "@solana/web3.js";
import { ValidatorStakeGroup, StakeAccount, StakePoolMevMap } from "../types";
/**
 * Retrieves all active stake accounts associated with a given public key grouped by validator
 *
 * @warning this is an expensive rpc call and should be heavily cached
 *
 * @param connection - Solana RPC connection
 * @param publicKey - Users's public key
 * @param opts - Options for filtering inactive stake accounts
 * @returns {Promise<ValidatorStakeGroup[]>} An array of validator stake groups
 */
export declare const fetchNativeStakeAccounts: (connection: Connection, publicKey: PublicKey, opts?: {
    filterInactive: boolean;
}) => Promise<ValidatorStakeGroup[]>;
/**
 * Gets active states for stake pools associated with staked asset banks
 *
 * @param connection - Solana RPC connection
 * @param bankInfos - Array of ExtendedBankInfo objects
 * @returns Promise<Map<string, boolean>> - Map of bank addresses to active states
 */
export declare const fetchStakePoolActiveStates: (connection: Connection, validatorVoteAccounts: PublicKey[]) => Promise<Map<string, boolean>>;
/**
 * Gets APY rates for validators associated with staked asset banks
 *
 * @param validatorVoteAccounts - Array of validator vote account public keys
 * @returns Promise<Map<string, number>> - Map of bank addresses to APY rates
 */
export declare const fetchStakeAccount: (data: Buffer) => StakeAccount;
export declare const fetchStakePoolMev: (connection: Connection, validatorVoteAccounts: PublicKey[]) => Promise<StakePoolMevMap>;
//# sourceMappingURL=fetch.utils.d.ts.map