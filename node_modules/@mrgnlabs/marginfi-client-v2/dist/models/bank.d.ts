import { BankMetadata } from "@mrgnlabs/mrgn-common";
import { PublicKey } from "@solana/web3.js";
import BigNumber from "bignumber.js";
import { MarginRequirementType } from "./account";
import { MarginfiIdlType } from "../idl";
import { PythPushFeedIdMap } from "../utils";
import { AssetTag, BankConfigFlag, BankConfigRaw, BankConfigType, BankRaw, BankType, InterestRateConfig, OperationalState, OraclePrice, OracleSetup, RiskTier } from "../services";
import { EmodeSettings } from "./emode-settings";
import { PriceBias } from "../services/price/types";
declare class Bank implements BankType {
    readonly address: PublicKey;
    readonly mint: PublicKey;
    readonly mintDecimals: number;
    readonly group: PublicKey;
    readonly assetShareValue: BigNumber;
    readonly liabilityShareValue: BigNumber;
    readonly liquidityVault: PublicKey;
    readonly liquidityVaultBump: number;
    readonly liquidityVaultAuthorityBump: number;
    readonly insuranceVault: PublicKey;
    readonly insuranceVaultBump: number;
    readonly insuranceVaultAuthorityBump: number;
    readonly collectedInsuranceFeesOutstanding: BigNumber;
    readonly feeVault: PublicKey;
    readonly feeVaultBump: number;
    readonly feeVaultAuthorityBump: number;
    readonly collectedGroupFeesOutstanding: BigNumber;
    readonly lastUpdate: number;
    config: BankConfig;
    readonly totalAssetShares: BigNumber;
    readonly totalLiabilityShares: BigNumber;
    readonly emissionsActiveBorrowing: boolean;
    readonly emissionsActiveLending: boolean;
    readonly emissionsRate: number;
    readonly emissionsMint: PublicKey;
    readonly emissionsRemaining: BigNumber;
    readonly oracleKey: PublicKey;
    readonly emode: EmodeSettings;
    readonly feesDestinationAccount?: PublicKey | undefined;
    readonly lendingPositionCount?: BigNumber | undefined;
    readonly borrowingPositionCount?: BigNumber | undefined;
    readonly pythShardId?: number | undefined;
    readonly tokenSymbol?: string | undefined;
    constructor(address: PublicKey, mint: PublicKey, mintDecimals: number, group: PublicKey, assetShareValue: BigNumber, liabilityShareValue: BigNumber, liquidityVault: PublicKey, liquidityVaultBump: number, liquidityVaultAuthorityBump: number, insuranceVault: PublicKey, insuranceVaultBump: number, insuranceVaultAuthorityBump: number, collectedInsuranceFeesOutstanding: BigNumber, feeVault: PublicKey, feeVaultBump: number, feeVaultAuthorityBump: number, collectedGroupFeesOutstanding: BigNumber, lastUpdate: number, config: BankConfig, totalAssetShares: BigNumber, totalLiabilityShares: BigNumber, emissionsActiveBorrowing: boolean, emissionsActiveLending: boolean, emissionsRate: number, emissionsMint: PublicKey, emissionsRemaining: BigNumber, oracleKey: PublicKey, emode: EmodeSettings, feesDestinationAccount?: PublicKey | undefined, lendingPositionCount?: BigNumber | undefined, borrowingPositionCount?: BigNumber | undefined, pythShardId?: number | undefined, tokenSymbol?: string | undefined);
    static decodeBankRaw(encoded: Buffer, idl: MarginfiIdlType): BankRaw;
    static fromBuffer(bankPk: PublicKey, rawData: Buffer, idl: MarginfiIdlType, feedIdMap: PythPushFeedIdMap): Bank;
    static fromBankType(bankType: BankType): Bank;
    static fromAccountParsed(address: PublicKey, accountParsed: BankRaw, feedIdMap?: PythPushFeedIdMap, bankMetadata?: BankMetadata): Bank;
    static withEmodeWeights(bank: Bank, emodeWeights: {
        assetWeightMaint: BigNumber;
        assetWeightInit: BigNumber;
    }): Bank;
    static getPrice(oraclePrice: OraclePrice, priceBias?: PriceBias, weightedPrice?: boolean): BigNumber;
    static computeQuantityFromUsdValue(oraclePrice: OraclePrice, usdValue: BigNumber, priceBias: PriceBias, weightedPrice: boolean): BigNumber;
    getTotalAssetQuantity(): BigNumber;
    getTotalLiabilityQuantity(): BigNumber;
    getAssetQuantity(assetShares: BigNumber): BigNumber;
    getLiabilityQuantity(liabilityShares: BigNumber): BigNumber;
    getAssetShares(assetQuantity: BigNumber): BigNumber;
    getLiabilityShares(liabilityQuantity: BigNumber): BigNumber;
    computeAssetUsdValue(oraclePrice: OraclePrice, assetShares: BigNumber, marginRequirementType: MarginRequirementType, priceBias: PriceBias): BigNumber;
    computeLiabilityUsdValue(oraclePrice: OraclePrice, liabilityShares: BigNumber, marginRequirementType: MarginRequirementType, priceBias: PriceBias): BigNumber;
    computeUsdValue(oraclePrice: OraclePrice, quantity: BigNumber, priceBias: PriceBias, weightedPrice: boolean, weight?: BigNumber, scaleToBase?: boolean): BigNumber;
    getAssetWeight(marginRequirementType: MarginRequirementType, oraclePrice: OraclePrice, ignoreSoftLimits?: boolean, assetWeightInitOverride?: BigNumber): BigNumber;
    getLiabilityWeight(marginRequirementType: MarginRequirementType): BigNumber;
    computeTvl(oraclePrice: OraclePrice): BigNumber;
    computeInterestRates(): {
        lendingRate: BigNumber;
        borrowingRate: BigNumber;
    };
    computeBaseInterestRate(): BigNumber;
    computeUtilizationRate(): BigNumber;
    computeRemainingCapacity(): {
        depositCapacity: BigNumber;
        borrowCapacity: BigNumber;
    };
    describe(oraclePrice: OraclePrice): string;
}
declare class BankConfig implements BankConfigType {
    assetWeightInit: BigNumber;
    assetWeightMaint: BigNumber;
    readonly liabilityWeightInit: BigNumber;
    readonly liabilityWeightMaint: BigNumber;
    readonly depositLimit: BigNumber;
    readonly borrowLimit: BigNumber;
    readonly riskTier: RiskTier;
    readonly totalAssetValueInitLimit: BigNumber;
    readonly assetTag: AssetTag;
    readonly configFlags: BankConfigFlag;
    readonly oracleSetup: OracleSetup;
    readonly oracleKeys: PublicKey[];
    readonly oracleMaxAge: number;
    readonly interestRateConfig: InterestRateConfig;
    readonly operationalState: OperationalState;
    constructor(assetWeightInit: BigNumber, assetWeightMaint: BigNumber, liabilityWeightInit: BigNumber, liabilityWeightMaint: BigNumber, depositLimit: BigNumber, borrowLimit: BigNumber, riskTier: RiskTier, totalAssetValueInitLimit: BigNumber, assetTag: AssetTag, configFlags: BankConfigFlag, oracleSetup: OracleSetup, oracleKeys: PublicKey[], oracleMaxAge: number, interestRateConfig: InterestRateConfig, operationalState: OperationalState);
    static fromAccountParsed(bankConfigRaw: BankConfigRaw): BankConfig;
}
export { Bank, BankConfig };
//# sourceMappingURL=bank.d.ts.map