"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BankConfig = exports.Bank = void 0;
const mrgn_common_1 = require("@mrgnlabs/mrgn-common");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const account_1 = require("./account");
const services_1 = require("../services");
const utils_1 = require("../services/bank/utils");
const types_1 = require("../services/price/types");
const SECONDS_PER_DAY = 24 * 60 * 60;
const SECONDS_PER_YEAR = SECONDS_PER_DAY * 365.25;
// ----------------------------------------------------------------------------
// Client types
// ----------------------------------------------------------------------------
class Bank {
    constructor(address, mint, mintDecimals, group, assetShareValue, liabilityShareValue, liquidityVault, liquidityVaultBump, liquidityVaultAuthorityBump, insuranceVault, insuranceVaultBump, insuranceVaultAuthorityBump, collectedInsuranceFeesOutstanding, feeVault, feeVaultBump, feeVaultAuthorityBump, collectedGroupFeesOutstanding, lastUpdate, config, totalAssetShares, totalLiabilityShares, emissionsActiveBorrowing, emissionsActiveLending, emissionsRate, emissionsMint, emissionsRemaining, oracleKey, emode, feesDestinationAccount, lendingPositionCount, borrowingPositionCount, pythShardId, tokenSymbol) {
        this.address = address;
        this.mint = mint;
        this.mintDecimals = mintDecimals;
        this.group = group;
        this.assetShareValue = assetShareValue;
        this.liabilityShareValue = liabilityShareValue;
        this.liquidityVault = liquidityVault;
        this.liquidityVaultBump = liquidityVaultBump;
        this.liquidityVaultAuthorityBump = liquidityVaultAuthorityBump;
        this.insuranceVault = insuranceVault;
        this.insuranceVaultBump = insuranceVaultBump;
        this.insuranceVaultAuthorityBump = insuranceVaultAuthorityBump;
        this.collectedInsuranceFeesOutstanding = collectedInsuranceFeesOutstanding;
        this.feeVault = feeVault;
        this.feeVaultBump = feeVaultBump;
        this.feeVaultAuthorityBump = feeVaultAuthorityBump;
        this.collectedGroupFeesOutstanding = collectedGroupFeesOutstanding;
        this.lastUpdate = lastUpdate;
        this.config = config;
        this.totalAssetShares = totalAssetShares;
        this.totalLiabilityShares = totalLiabilityShares;
        this.emissionsActiveBorrowing = emissionsActiveBorrowing;
        this.emissionsActiveLending = emissionsActiveLending;
        this.emissionsRate = emissionsRate;
        this.emissionsMint = emissionsMint;
        this.emissionsRemaining = emissionsRemaining;
        this.oracleKey = oracleKey;
        this.emode = emode;
        this.feesDestinationAccount = feesDestinationAccount;
        this.lendingPositionCount = lendingPositionCount;
        this.borrowingPositionCount = borrowingPositionCount;
        this.pythShardId = pythShardId;
        this.tokenSymbol = tokenSymbol;
    }
    static decodeBankRaw(encoded, idl) {
        return (0, utils_1.decodeBankRaw)(encoded, idl);
    }
    static fromBuffer(bankPk, rawData, idl, feedIdMap) {
        const accountParsed = Bank.decodeBankRaw(rawData, idl);
        return Bank.fromAccountParsed(bankPk, accountParsed, feedIdMap);
    }
    static fromBankType(bankType) {
        const config = new BankConfig(bankType.config.assetWeightInit, bankType.config.assetWeightMaint, bankType.config.liabilityWeightInit, bankType.config.liabilityWeightMaint, bankType.config.depositLimit, bankType.config.borrowLimit, bankType.config.riskTier, bankType.config.totalAssetValueInitLimit, bankType.config.assetTag, bankType.config.configFlags, bankType.config.oracleSetup, bankType.config.oracleKeys, bankType.config.oracleMaxAge, bankType.config.interestRateConfig, bankType.config.operationalState);
        return new Bank(bankType.address, bankType.mint, bankType.mintDecimals, bankType.group, bankType.assetShareValue, bankType.liabilityShareValue, bankType.liquidityVault, bankType.liquidityVaultBump, bankType.liquidityVaultAuthorityBump, bankType.insuranceVault, bankType.insuranceVaultBump, bankType.insuranceVaultAuthorityBump, bankType.collectedInsuranceFeesOutstanding, bankType.feeVault, bankType.feeVaultBump, bankType.feeVaultAuthorityBump, bankType.collectedGroupFeesOutstanding, bankType.lastUpdate, config, bankType.totalAssetShares, bankType.totalLiabilityShares, bankType.emissionsActiveBorrowing, bankType.emissionsActiveLending, bankType.emissionsRate, bankType.emissionsMint, bankType.emissionsRemaining, bankType.oracleKey, bankType.emode, bankType.feesDestinationAccount, bankType.lendingPositionCount, bankType.borrowingPositionCount, bankType.pythShardId, bankType.tokenSymbol);
    }
    static fromAccountParsed(address, accountParsed, feedIdMap, bankMetadata) {
        const props = (0, utils_1.parseBankRaw)(address, accountParsed, feedIdMap, bankMetadata);
        return new Bank(props.address, props.mint, props.mintDecimals, props.group, props.assetShareValue, props.liabilityShareValue, props.liquidityVault, props.liquidityVaultBump, props.liquidityVaultAuthorityBump, props.insuranceVault, props.insuranceVaultBump, props.insuranceVaultAuthorityBump, props.collectedInsuranceFeesOutstanding, props.feeVault, props.feeVaultBump, props.feeVaultAuthorityBump, props.collectedGroupFeesOutstanding, props.lastUpdate, props.config, props.totalAssetShares, props.totalLiabilityShares, props.emissionsActiveBorrowing, props.emissionsActiveLending, props.emissionsRate, props.emissionsMint, props.emissionsRemaining, props.oracleKey, props.emode, props.feesDestinationAccount, props.lendingPositionCount, props.borrowingPositionCount, props.pythShardId, props.tokenSymbol);
    }
    static withEmodeWeights(bank, emodeWeights) {
        const newBank = Object.create(Bank.prototype);
        Object.assign(newBank, bank);
        newBank.config = Object.assign({}, bank.config);
        newBank.config.assetWeightInit = bignumber_js_1.default.max(bank.config.assetWeightInit, emodeWeights.assetWeightInit);
        newBank.config.assetWeightMaint = bignumber_js_1.default.max(bank.config.assetWeightMaint, emodeWeights.assetWeightMaint);
        return newBank;
    }
    static getPrice(oraclePrice, priceBias = types_1.PriceBias.None, weightedPrice = false) {
        return (0, services_1.getPrice)(oraclePrice, priceBias, weightedPrice);
    }
    static computeQuantityFromUsdValue(oraclePrice, usdValue, priceBias, weightedPrice) {
        const price = (0, services_1.getPrice)(oraclePrice, priceBias, weightedPrice);
        return usdValue.div(price);
    }
    getTotalAssetQuantity() {
        return (0, utils_1.getTotalAssetQuantity)(this);
    }
    getTotalLiabilityQuantity() {
        return (0, utils_1.getTotalLiabilityQuantity)(this);
    }
    getAssetQuantity(assetShares) {
        return (0, utils_1.getAssetQuantity)(this, assetShares);
    }
    getLiabilityQuantity(liabilityShares) {
        return (0, utils_1.getLiabilityQuantity)(this, liabilityShares);
    }
    getAssetShares(assetQuantity) {
        return (0, utils_1.getAssetShares)(this, assetQuantity);
    }
    getLiabilityShares(liabilityQuantity) {
        return (0, utils_1.getLiabilityShares)(this, liabilityQuantity);
    }
    computeAssetUsdValue(oraclePrice, assetShares, marginRequirementType, priceBias) {
        return (0, utils_1.computeAssetUsdValue)(this, oraclePrice, assetShares, marginRequirementType, priceBias);
    }
    computeLiabilityUsdValue(oraclePrice, liabilityShares, marginRequirementType, priceBias) {
        return (0, utils_1.computeLiabilityUsdValue)(this, oraclePrice, liabilityShares, marginRequirementType, priceBias);
    }
    computeUsdValue(oraclePrice, quantity, priceBias, weightedPrice, weight, scaleToBase = true) {
        return (0, utils_1.computeUsdValue)(this, oraclePrice, quantity, priceBias, weightedPrice, weight, scaleToBase);
    }
    getAssetWeight(marginRequirementType, oraclePrice, ignoreSoftLimits = false, assetWeightInitOverride) {
        return (0, utils_1.getAssetWeight)(this, marginRequirementType, oraclePrice, {
            ignoreSoftLimits,
            assetWeightInitOverride,
        });
    }
    getLiabilityWeight(marginRequirementType) {
        return (0, utils_1.getLiabilityWeight)(this.config, marginRequirementType);
    }
    computeTvl(oraclePrice) {
        return (0, utils_1.computeTvl)(this, oraclePrice);
    }
    computeInterestRates() {
        return (0, utils_1.computeInterestRates)(this);
    }
    computeBaseInterestRate() {
        return (0, utils_1.computeBaseInterestRate)(this);
    }
    computeUtilizationRate() {
        return (0, utils_1.computeUtilizationRate)(this);
    }
    computeRemainingCapacity() {
        return (0, utils_1.computeRemainingCapacity)(this);
    }
    describe(oraclePrice) {
        return `
Bank address: ${this.address.toBase58()}
Mint: ${this.mint.toBase58()}, decimals: ${this.mintDecimals}

Total deposits: ${(0, mrgn_common_1.nativeToUi)(this.getTotalAssetQuantity(), this.mintDecimals)}
Total borrows: ${(0, mrgn_common_1.nativeToUi)(this.getTotalLiabilityQuantity(), this.mintDecimals)}

Total assets (USD value): ${this.computeAssetUsdValue(oraclePrice, this.totalAssetShares, account_1.MarginRequirementType.Equity, types_1.PriceBias.None)}
Total liabilities (USD value): ${this.computeLiabilityUsdValue(oraclePrice, this.totalLiabilityShares, account_1.MarginRequirementType.Equity, types_1.PriceBias.None)}

Asset price (USD): ${Bank.getPrice(oraclePrice, types_1.PriceBias.None, false)}
Asset price Weighted (USD): ${Bank.getPrice(oraclePrice, types_1.PriceBias.None, true)}

Config:
- Asset weight init: ${this.config.assetWeightInit.toFixed(2)}
- Asset weight maint: ${this.config.assetWeightMaint.toFixed(2)}
- Liability weight init: ${this.config.liabilityWeightInit.toFixed(2)}
- Liability weight maint: ${this.config.liabilityWeightMaint.toFixed(2)}

- Deposit limit: ${this.config.depositLimit}
- Borrow limit: ${this.config.borrowLimit}

LTVs:
- Initial: ${new bignumber_js_1.default(1).div(this.config.liabilityWeightInit).times(100).toFixed(2)}%
- Maintenance: ${new bignumber_js_1.default(1).div(this.config.liabilityWeightMaint).times(100).toFixed(2)}%
`;
    }
}
exports.Bank = Bank;
class BankConfig {
    constructor(assetWeightInit, assetWeightMaint, liabilityWeightInit, liabilityWeightMaint, depositLimit, borrowLimit, riskTier, totalAssetValueInitLimit, assetTag, configFlags, oracleSetup, oracleKeys, oracleMaxAge, interestRateConfig, operationalState) {
        this.assetWeightInit = assetWeightInit;
        this.assetWeightMaint = assetWeightMaint;
        this.liabilityWeightInit = liabilityWeightInit;
        this.liabilityWeightMaint = liabilityWeightMaint;
        this.depositLimit = depositLimit;
        this.borrowLimit = borrowLimit;
        this.riskTier = riskTier;
        this.totalAssetValueInitLimit = totalAssetValueInitLimit;
        this.assetTag = assetTag;
        this.configFlags = configFlags;
        this.oracleSetup = oracleSetup;
        this.oracleKeys = oracleKeys;
        this.oracleMaxAge = oracleMaxAge;
        this.interestRateConfig = interestRateConfig;
        this.operationalState = operationalState;
    }
    static fromAccountParsed(bankConfigRaw) {
        const bankConfig = (0, utils_1.parseBankConfigRaw)(bankConfigRaw);
        return new BankConfig(bankConfig.assetWeightInit, bankConfig.assetWeightMaint, bankConfig.liabilityWeightInit, bankConfig.liabilityWeightMaint, bankConfig.depositLimit, bankConfig.borrowLimit, bankConfig.riskTier, bankConfig.totalAssetValueInitLimit, bankConfig.assetTag, bankConfig.configFlags, bankConfig.oracleSetup, bankConfig.oracleKeys, bankConfig.oracleMaxAge, bankConfig.interestRateConfig, bankConfig.operationalState);
    }
}
exports.BankConfig = BankConfig;
