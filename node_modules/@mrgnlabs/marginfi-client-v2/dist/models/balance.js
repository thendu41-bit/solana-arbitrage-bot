"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Balance = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const __1 = require("..");
// ----------------------------------------------------------------------------
// Client types
// ----------------------------------------------------------------------------
class Balance {
    constructor(active, bankPk, assetShares, liabilityShares, emissionsOutstanding, lastUpdate) {
        this.active = active;
        this.bankPk = bankPk;
        this.assetShares = assetShares;
        this.liabilityShares = liabilityShares;
        this.emissionsOutstanding = emissionsOutstanding;
        this.lastUpdate = lastUpdate;
    }
    static from(balanceRaw) {
        const props = (0, __1.parseBalanceRaw)(balanceRaw);
        return new Balance(props.active, props.bankPk, props.assetShares, props.liabilityShares, props.emissionsOutstanding, props.lastUpdate);
    }
    static fromBalanceType(balance) {
        return new Balance(balance.active, balance.bankPk, balance.assetShares, balance.liabilityShares, balance.emissionsOutstanding, balance.lastUpdate);
    }
    static createEmpty(bankPk) {
        return new Balance(false, bankPk, new bignumber_js_1.default(0), new bignumber_js_1.default(0), new bignumber_js_1.default(0), 0);
    }
    computeUsdValue(bank, oraclePrice, marginRequirementType = __1.MarginRequirementType.Equity) {
        return (0, __1.computeBalanceUsdValue)(this, bank, oraclePrice, marginRequirementType);
    }
    getUsdValueWithPriceBias(bank, oraclePrice, marginRequirementType = __1.MarginRequirementType.Equity) {
        return (0, __1.getBalanceUsdValueWithPriceBias)(this, bank, oraclePrice, marginRequirementType);
    }
    computeQuantity(bank) {
        return (0, __1.computeQuantity)(this, bank);
    }
    computeQuantityUi(bank) {
        return (0, __1.computeQuantityUi)(this, bank);
    }
    computeTotalOutstandingEmissions(bank) {
        return (0, __1.computeTotalOutstandingEmissions)(this, bank);
    }
    computeClaimedEmissions(bank, currentTimestamp) {
        return (0, __1.computeClaimedEmissions)(this, bank, currentTimestamp);
    }
    describe(bank, oraclePrice) {
        let { assets: assetsQt, liabilities: liabsQt } = this.computeQuantityUi(bank);
        let { assets: assetsUsd, liabilities: liabsUsd } = this.computeUsdValue(bank, oraclePrice, __1.MarginRequirementType.Equity);
        return `> ${bank.tokenSymbol ?? bank.address} balance:
\t- Deposits: ${assetsQt.toFixed(5)} (${assetsUsd.toFixed(5)} USD)
\t- Borrows: ${liabsQt.toFixed(5)} (${liabsUsd.toFixed(5)} USD)
`;
    }
}
exports.Balance = Balance;
