"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MarginfiGroup = void 0;
const anchor_1 = require("@coral-xyz/anchor");
const types_1 = require("../types");
const services_1 = require("../services");
// ----------------------------------------------------------------------------
// Client types
// ----------------------------------------------------------------------------
class MarginfiGroup {
    constructor(admin, address) {
        this.admin = admin;
        this.address = address;
    }
    // ----------------------------------------------------------------------------
    // Factories
    // ----------------------------------------------------------------------------
    static fromAccountParsed(address, accountData) {
        const marginfiGroup = {
            admin: accountData.admin,
        };
        return new MarginfiGroup(marginfiGroup.admin, address);
    }
    static fromBuffer(address, rawData, idl) {
        const data = MarginfiGroup.decode(rawData, idl);
        return MarginfiGroup.fromAccountParsed(address, data);
    }
    static decode(encoded, idl) {
        const coder = new anchor_1.BorshCoder(idl);
        return coder.accounts.decode(types_1.AccountType.MarginfiGroup, encoded);
    }
    static async encode(decoded, idl) {
        const coder = new anchor_1.BorshCoder(idl);
        return await coder.accounts.encode(types_1.AccountType.MarginfiGroup, decoded);
    }
    // ----------------------------------------------------------------------------
    // Admin actions
    // ----------------------------------------------------------------------------
    // ------------------------------------------------------------------------
    // (TODO: move to Bank class)
    // ------------------------------------------------------------------------
    async makePoolConfigureBankIx(program, bank, args) {
        return (0, services_1.makePoolConfigureBankIx)(program, bank, args);
    }
    async makeAddPermissionlessStakedBankIx(program, voteAccountAddress, feePayer, pythOracle // wSOL oracle
    ) {
        return (0, services_1.makeAddPermissionlessStakedBankIx)(program, this.address, voteAccountAddress, feePayer, pythOracle);
    }
    async makePoolAddBankIx(program, bankPubkey, bankMint, bankConfig, feePayer) {
        return (0, services_1.makePoolAddBankIx)(program, this.address, bankPubkey, feePayer ?? this.admin, bankMint, bankConfig);
    }
}
exports.MarginfiGroup = MarginfiGroup;
