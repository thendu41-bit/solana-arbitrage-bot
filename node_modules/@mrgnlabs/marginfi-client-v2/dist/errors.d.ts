import { SolanaTransaction } from "@mrgnlabs/mrgn-common";
import { PublicKey } from "@solana/web3.js";
export declare enum ProcessTransactionErrorType {
    TransactionBuildingError = 0,
    TransactionSendingError = 1,
    SimulationError = 2,
    TransactionTupleError = 3,
    FallthroughError = 4,
    TimeoutError = 5
}
export declare class ProcessTransactionError extends Error {
    logs?: string[];
    type: ProcessTransactionErrorType;
    programId?: string;
    failedTxs?: SolanaTransaction[];
    constructor({ message, type, logs, programId, code, failedTxs, }: {
        message: string;
        type: ProcessTransactionErrorType;
        logs?: string[];
        programId?: string;
        code?: number;
        failedTxs?: SolanaTransaction[];
    });
    static withFailedTransactions(error: ProcessTransactionError, failedTxs: SolanaTransaction[]): ProcessTransactionError;
}
export interface ProgramError {
    programId: string;
    code: number;
}
export interface ProgramErrorWithDescription extends ProgramError {
    description: string;
}
export declare function parseTransactionError(error: any, mfiProgramId: PublicKey): {
    programId: any;
    type: any;
    description: any;
    code: any;
};
export declare function parseErrorFromLogs(logs: string[], mfiProgramId: PublicKey): ProgramErrorWithDescription | null;
//# sourceMappingURL=errors.d.ts.map