"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parsePriceInfo = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const borsh = __importStar(require("borsh"));
const priceUpdateV2Schema = {
    struct: {
        writeAuthority: {
            array: { type: 'u8', len: 32 },
        },
        verificationLevel: 'u8',
        priceMessage: {
            struct: {
                feedId: { array: { type: 'u8', len: 32 }, },
                price: 'i64',
                conf: 'u64',
                exponent: 'i32',
                publishTime: 'i64',
                prevPublishTime: 'i64',
                emaPrice: 'i64',
                emaConf: 'u64'
            },
        },
        postedSlot: 'u64'
    },
};
const parsePriceInfo = (data) => {
    let decoded = borsh.deserialize(priceUpdateV2Schema, data);
    return decoded;
};
exports.parsePriceInfo = parsePriceInfo;
function capConfidenceInterval(price, confidence, maxConfidence) {
    let maxConfidenceInterval = price.times(maxConfidence);
    return bignumber_js_1.default.min(confidence, maxConfidenceInterval);
}
