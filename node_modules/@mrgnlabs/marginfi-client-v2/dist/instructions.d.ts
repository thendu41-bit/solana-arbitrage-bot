import { AccountMeta, PublicKey } from "@solana/web3.js";
import BN from "bn.js";
import { MarginfiProgram } from "./types";
import { BankConfigCompactRaw, BankConfigOptRaw } from "./services";
declare function makeInitMarginfiAccountIx(mfProgram: MarginfiProgram, accounts: {
    marginfiGroup: PublicKey;
    marginfiAccount: PublicKey;
    authority: PublicKey;
    feePayer: PublicKey;
}): Promise<import("@solana/web3.js").TransactionInstruction>;
declare function makeDepositIx(mfProgram: MarginfiProgram, accounts: {
    marginfiAccount: PublicKey;
    signerTokenAccount: PublicKey;
    bank: PublicKey;
    tokenProgram: PublicKey;
    group?: PublicKey;
    authority?: PublicKey;
    liquidityVault?: PublicKey;
}, args: {
    amount: BN;
    depositUpToLimit?: boolean;
}, remainingAccounts?: AccountMeta[]): Promise<import("@solana/web3.js").TransactionInstruction>;
declare function makeRepayIx(mfProgram: MarginfiProgram, accounts: {
    marginfiAccount: PublicKey;
    signerTokenAccount: PublicKey;
    bank: PublicKey;
    tokenProgram: PublicKey;
    group?: PublicKey;
    authority?: PublicKey;
    liquidityVault?: PublicKey;
}, args: {
    amount: BN;
    repayAll?: boolean;
}, remainingAccounts?: AccountMeta[]): Promise<import("@solana/web3.js").TransactionInstruction>;
declare function makeWithdrawIx(mfProgram: MarginfiProgram, accounts: {
    marginfiAccount: PublicKey;
    bank: PublicKey;
    destinationTokenAccount: PublicKey;
    tokenProgram: PublicKey;
    group?: PublicKey;
    authority?: PublicKey;
}, args: {
    amount: BN;
    withdrawAll?: boolean;
}, remainingAccounts?: AccountMeta[]): Promise<import("@solana/web3.js").TransactionInstruction>;
declare function makeBorrowIx(mfProgram: MarginfiProgram, accounts: {
    marginfiAccount: PublicKey;
    bank: PublicKey;
    destinationTokenAccount: PublicKey;
    tokenProgram: PublicKey;
    group?: PublicKey;
    authority?: PublicKey;
}, args: {
    amount: BN;
}, remainingAccounts?: AccountMeta[]): Promise<import("@solana/web3.js").TransactionInstruction>;
declare function makeLendingAccountLiquidateIx(mfiProgram: MarginfiProgram, accounts: {
    assetBank: PublicKey;
    liabBank: PublicKey;
    liquidatorMarginfiAccount: PublicKey;
    liquidateeMarginfiAccount: PublicKey;
    tokenProgram: PublicKey;
    group?: PublicKey;
    authority?: PublicKey;
}, args: {
    assetAmount: BN;
}, remainingAccounts?: AccountMeta[]): Promise<import("@solana/web3.js").TransactionInstruction>;
declare function makelendingAccountWithdrawEmissionIx(mfiProgram: MarginfiProgram, accounts: {
    marginfiAccount: PublicKey;
    destinationAccount: PublicKey;
    bank: PublicKey;
    tokenProgram: PublicKey;
    group?: PublicKey;
    authority?: PublicKey;
    emissionsMint?: PublicKey;
}): Promise<import("@solana/web3.js").TransactionInstruction>;
declare function makePoolConfigureBankIx(mfiProgram: MarginfiProgram, accounts: {
    bank: PublicKey;
    group?: PublicKey;
    admin?: PublicKey;
}, args: {
    bankConfigOpt: BankConfigOptRaw;
}): Promise<import("@solana/web3.js").TransactionInstruction>;
declare function makeBeginFlashLoanIx(mfiProgram: MarginfiProgram, accounts: {
    marginfiAccount: PublicKey;
    authority?: PublicKey;
    ixsSysvar?: PublicKey;
}, args: {
    endIndex: BN;
}): Promise<import("@solana/web3.js").TransactionInstruction>;
declare function makeEndFlashLoanIx(mfiProgram: MarginfiProgram, accounts: {
    marginfiAccount: PublicKey;
    authority?: PublicKey;
}, remainingAccounts?: AccountMeta[]): Promise<import("@solana/web3.js").TransactionInstruction>;
declare function makeAccountTransferToNewAccountIx(mfProgram: MarginfiProgram, accounts: {
    oldMarginfiAccount: PublicKey;
    newMarginfiAccount: PublicKey;
    newAuthority: PublicKey;
    globalFeeWallet: PublicKey;
    group?: PublicKey;
    authority?: PublicKey;
}): Promise<import("@solana/web3.js").TransactionInstruction>;
declare function makeGroupInitIx(mfProgram: MarginfiProgram, accounts: {
    marginfiGroup: PublicKey;
    admin: PublicKey;
}, args?: {
    isArenaGroup?: boolean;
}): Promise<import("@solana/web3.js").TransactionInstruction>;
/**
 * Configure the oracle for a bank
 * @param mfProgram The marginfi program
 * @param accounts The accounts required for this instruction
 * @param args The oracle setup index and feed id
 * @param remainingAccounts The remaining accounts required for this instruction, should include the feed oracle key
 */
declare function makeLendingPoolConfigureBankOracleIx(mfProgram: MarginfiProgram, accounts: {
    bank: PublicKey;
    group?: PublicKey;
    admin?: PublicKey;
}, args: {
    /**
     * The oracle setup index, see {@link serializeOracleSetupToIndex}
     */
    setup: number;
    /**
     * The oracle feed id
     */
    feedId: PublicKey;
}, 
/**
 * The remaining accounts required for this instruction, should include the feed oracle key (non writable & signable)
 */
remainingAccounts?: AccountMeta[]): Promise<import("@solana/web3.js").TransactionInstruction>;
/**
 * Creates an instruction to add a permissionless staked bank to a lending pool.
 * @param mfProgram - The marginfi program instance
 * @param accounts - The accounts required for this instruction
 * @param remainingAccounts - The remaining accounts required for this instruction, including pythOracle, solPool and bankMint
 * @param args - Optional arguments for this instruction
 */
declare function makePoolAddPermissionlessStakedBankIx(mfProgram: MarginfiProgram, accounts: {
    stakedSettings: PublicKey;
    feePayer: PublicKey;
    bankMint: PublicKey;
    solPool: PublicKey;
    stakePool: PublicKey;
    marginfiGroup?: PublicKey;
    /**
     * The token program to use for this instruction, defaults to the SPL token program
     */
    tokenProgram?: PublicKey;
}, 
/**
 * The remaining accounts required for this instruction. Should include:
 * - pythOracle: The pyth oracle key (non writable & non signer)
 * - solPool: The sol pool key (non writable & non signer)
 * - bankMint: The bank mint key (non writable & non signer)
 */
remainingAccounts: AccountMeta[] | undefined, args: {
    /**
     * The seed to use for the bank account. Defaults to 0 (new BN(0)).
     * If the seed is not specified, the seed is set to 0, and the bank account
     * will be created at the address {@link findPoolAddress} with the default
     * bump.
     */
    seed?: BN;
}): Promise<import("@solana/web3.js").TransactionInstruction>;
declare function makePoolAddBankIx(mfProgram: MarginfiProgram, accounts: {
    marginfiGroup: PublicKey;
    feePayer: PublicKey;
    bankMint: PublicKey;
    bank: PublicKey;
    tokenProgram: PublicKey;
    admin?: PublicKey;
    globalFeeWallet?: PublicKey;
}, args: {
    bankConfig: BankConfigCompactRaw;
}): Promise<import("@solana/web3.js").TransactionInstruction>;
declare function makeCloseAccountIx(mfProgram: MarginfiProgram, accounts: {
    marginfiAccount: PublicKey;
    feePayer: PublicKey;
    authority?: PublicKey;
}): Promise<import("@solana/web3.js").TransactionInstruction>;
declare function makeLendingAccountSortBalancesIx(mfProgram: MarginfiProgram, accounts: {
    marginfiAccount: PublicKey;
}): Promise<import("@solana/web3.js").TransactionInstruction>;
declare function makePulseHealthIx(mfProgram: MarginfiProgram, accounts: {
    marginfiAccount: PublicKey;
}, 
/**
 * The remaining accounts required for this instruction. Should include:
 * - For each balance the user has, pass bank and oracle: <bank1, oracle1, bank2, oracle2>
 */
remainingAccounts?: AccountMeta[]): Promise<import("@solana/web3.js").TransactionInstruction>;
declare const instructions: {
    makeDepositIx: typeof makeDepositIx;
    makeRepayIx: typeof makeRepayIx;
    makeWithdrawIx: typeof makeWithdrawIx;
    makeBorrowIx: typeof makeBorrowIx;
    makeInitMarginfiAccountIx: typeof makeInitMarginfiAccountIx;
    makeLendingAccountLiquidateIx: typeof makeLendingAccountLiquidateIx;
    makelendingAccountWithdrawEmissionIx: typeof makelendingAccountWithdrawEmissionIx;
    makePoolAddBankIx: typeof makePoolAddBankIx;
    makePoolConfigureBankIx: typeof makePoolConfigureBankIx;
    makeBeginFlashLoanIx: typeof makeBeginFlashLoanIx;
    makeEndFlashLoanIx: typeof makeEndFlashLoanIx;
    makeAccountTransferToNewAccountIx: typeof makeAccountTransferToNewAccountIx;
    makeGroupInitIx: typeof makeGroupInitIx;
    makeCloseAccountIx: typeof makeCloseAccountIx;
    makePoolAddPermissionlessStakedBankIx: typeof makePoolAddPermissionlessStakedBankIx;
    makeLendingPoolConfigureBankOracleIx: typeof makeLendingPoolConfigureBankOracleIx;
    makePulseHealthIx: typeof makePulseHealthIx;
    makeLendingAccountSortBalancesIx: typeof makeLendingAccountSortBalancesIx;
};
export default instructions;
//# sourceMappingURL=instructions.d.ts.map