"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionArenaKeyMap = exports.TransactionConfigMap = exports.TransactionType = void 0;
const web3_js_1 = require("@solana/web3.js");
var TransactionType;
(function (TransactionType) {
    // BASE LENDING ACTIONS
    TransactionType["DEPOSIT"] = "DEPOSIT";
    TransactionType["WITHDRAW"] = "WITHDRAW";
    TransactionType["REPAY"] = "REPAY";
    TransactionType["BORROW"] = "BORROW";
    // FLASHLOANS
    TransactionType["FLASHLOAN"] = "FLASHLOAN";
    TransactionType["LOOP"] = "LOOP";
    TransactionType["REPAY_COLLAT"] = "REPAY_COLLAT";
    TransactionType["LONG"] = "LONG";
    TransactionType["SHORT"] = "SHORT";
    // SETUP
    TransactionType["CREATE_ACCOUNT"] = "CREATE_ACCOUNT";
    TransactionType["CREATE_ATA"] = "CREATE_ATA";
    // ACCOUNT MANAGEMENT
    TransactionType["CLOSE_ACCOUNT"] = "CLOSE_ACCOUNT";
    TransactionType["CLOSE_POSITION"] = "CLOSE_POSITION";
    TransactionType["MOVE_POSITION_WITHDRAW"] = "MOVE_POSITION_WITHDRAW";
    TransactionType["MOVE_POSITION_DEPOSIT"] = "MOVE_POSITION_DEPOSIT";
    TransactionType["WITHDRAW_ALL"] = "WITHDRAW_ALL";
    TransactionType["TRANSFER_AUTH"] = "TRANSFER_AUTH";
    // SWB
    TransactionType["CRANK"] = "CRANK";
    // NATIVE STAKE ACTIONS
    TransactionType["DEPOSIT_STAKE"] = "DEPOSIT_STAKE";
    TransactionType["WITHDRAW_STAKE"] = "WITHDRAW_STAKE";
    TransactionType["INITIALIZE_STAKED_POOL"] = "INITIALIZE_STAKED_POOL";
    TransactionType["ADD_STAKED_BANK"] = "ADD_STAKED_BANK";
    TransactionType["MERGE_STAKE_ACCOUNTS"] = "MERGE_STAKE_ACCOUNTS";
    // LST
    TransactionType["STAKE_TO_STAKE"] = "STAKE_TO_STAKE";
    TransactionType["MINT_LST_NATIVE"] = "MINT_LST_NATIVE";
    TransactionType["SWAP_TO_SOL"] = "SWAP_TO_SOL";
    TransactionType["SOL_TO_LST"] = "SOL_TO_LST";
    TransactionType["UNSTAKE_LST"] = "UNSTAKE_LST";
    // EMISSIONS
    TransactionType["WITHDRAW_EMISSIONS"] = "WITHDRAW_EMISSIONS";
    // LIQUIDATE
    TransactionType["LIQUIDATE_ACCOUNT"] = "LIQUIDATE_ACCOUNT";
    // BANK and GROUPS
    TransactionType["CREATE_PERM_BANK"] = "CREATE_PERM_BANK";
    TransactionType["CREATE_GROUP"] = "CREATE_GROUP";
    TransactionType["JUPITER_SWAP"] = "JUPITER_SWAP";
})(TransactionType || (exports.TransactionType = TransactionType = {}));
exports.TransactionConfigMap = {
    // BASE LENDING ACTIONS
    [TransactionType.DEPOSIT]: {
        label: ({ amount, token } = {}) => (amount && token ? `Deposit ${amount} ${token}` : "Deposit"),
    },
    [TransactionType.WITHDRAW]: {
        label: ({ amount, token } = {}) => (amount && token ? `Withdraw ${amount} ${token}` : "Withdraw"),
    },
    [TransactionType.REPAY]: {
        label: ({ amount, token } = {}) => (amount && token ? `Repay ${amount} ${token}` : "Repay"),
    },
    [TransactionType.BORROW]: {
        label: ({ amount, token } = {}) => (amount && token ? `Borrow ${amount} ${token}` : "Borrow"),
    },
    // FLASHLOANS
    [TransactionType.FLASHLOAN]: { label: () => "Executing Flashloan" },
    [TransactionType.LOOP]: {
        label: ({ depositAmount, depositToken, borrowAmount, borrowToken } = {}) => depositAmount && depositToken && borrowAmount && borrowToken
            ? `Loop ${depositAmount} ${depositToken} with ${borrowAmount} ${borrowToken}`
            : "Loop",
    },
    [TransactionType.REPAY_COLLAT]: {
        label: ({ repayAmount, repayToken, amount, token } = {}) => repayAmount && repayToken && amount && token
            ? `Repay ${repayAmount} ${token} with   ${amount} ${repayToken}`
            : "Repay with collateral",
    },
    [TransactionType.LONG]: {
        label: ({ depositToken, depositAmount, borrowToken } = {}) => depositToken && depositAmount && borrowToken
            ? `Long ${depositToken} with ${depositAmount} ${borrowToken}`
            : "Open long position",
    },
    [TransactionType.SHORT]: {
        label: ({ borrowToken, depositAmount, depositToken } = {}) => borrowToken && depositAmount && depositToken
            ? `Short ${borrowToken} with ${depositAmount} ${depositToken}`
            : "Open short position",
    },
    // SWB
    [TransactionType.CRANK]: { label: () => "Updating latest prices" },
    [TransactionType.JUPITER_SWAP]: {
        label: ({ originAmount, originToken, destinationAmount, destinationToken } = {}) => originAmount && originToken && destinationAmount && destinationToken
            ? `Swap ${originAmount} ${originToken} for ${destinationAmount} ${destinationToken}`
            : "Swap tokens",
    },
    // SETUP
    [TransactionType.CREATE_ACCOUNT]: { label: () => "Create marginfi account" },
    [TransactionType.CREATE_ATA]: { label: () => "Configure token account" },
    // ACCOUNT MANAGEMENT
    [TransactionType.CLOSE_ACCOUNT]: { label: () => "Close marginfi account" },
    [TransactionType.CLOSE_POSITION]: { label: () => "Close position" },
    [TransactionType.MOVE_POSITION_WITHDRAW]: {
        label: ({ originAccountAddress } = {}) => `Move position from ${originAccountAddress}`,
    },
    [TransactionType.MOVE_POSITION_DEPOSIT]: {
        label: ({ destinationAccountAddress } = {}) => `Move position to ${destinationAccountAddress}`,
    },
    [TransactionType.TRANSFER_AUTH]: { label: () => "Authorize account transfer" },
    // NATIVE STAKE ACTIONS
    [TransactionType.DEPOSIT_STAKE]: {
        label: ({ amount, token } = {}) => amount && token ? `Authorize stake account and deposit ${amount} ${token}` : "Authorize stake and deposit",
    },
    [TransactionType.WITHDRAW_STAKE]: {
        label: ({ amount, token } = {}) => "Authorize stake account",
    },
    [TransactionType.INITIALIZE_STAKED_POOL]: { label: () => "Initialize stake pool" },
    [TransactionType.ADD_STAKED_BANK]: { label: () => "Create staked asset bank" },
    [TransactionType.MERGE_STAKE_ACCOUNTS]: { label: () => "Merge stake accounts" },
    // LST (Liquid Staking Tokens)
    [TransactionType.STAKE_TO_STAKE]: { label: () => "Convert stake" },
    [TransactionType.MINT_LST_NATIVE]: { label: () => "Mint LST" },
    [TransactionType.SWAP_TO_SOL]: {
        label: ({ swapAmount, token } = {}) => (swapAmount && token ? `Swap ${swapAmount} ${token} to SOL` : "Swap to SOL"),
    },
    [TransactionType.SOL_TO_LST]: {
        label: ({ amount } = {}) => (amount ? `Mint LST with ${amount} SOL` : "Mint LST with SOL"),
    },
    [TransactionType.UNSTAKE_LST]: { label: ({ amount } = {}) => (amount ? `Unstake ${amount} LST` : "Unstake LST") },
    // EMISSIONS
    [TransactionType.WITHDRAW_EMISSIONS]: { label: () => "Withdraw emissions" },
    // LIQUIDATE
    [TransactionType.LIQUIDATE_ACCOUNT]: { label: () => "Liquidate account" },
    // BANK and GROUPS
    [TransactionType.CREATE_PERM_BANK]: { label: () => "Create permissionless bank" },
    [TransactionType.CREATE_GROUP]: { label: () => "Create marginfi group" },
    [TransactionType.WITHDRAW_ALL]: {
        label: ({ amount, token } = {}) => (amount && token ? `Withdraw ${amount} ${token}` : "Withdraw all"),
    },
};
exports.TransactionArenaKeyMap = {
    [TransactionType.DEPOSIT]: new web3_js_1.PublicKey("ArenaDeposit1111111111111111111111111111111"),
    [TransactionType.WITHDRAW]: new web3_js_1.PublicKey("ArenaWithdraw111111111111111111111111111111"),
    [TransactionType.BORROW]: new web3_js_1.PublicKey("ArenaBorrow11111111111111111111111111111111"),
    [TransactionType.REPAY]: new web3_js_1.PublicKey("ArenaRepay111111111111111111111111111111111"),
    [TransactionType.REPAY_COLLAT]: new web3_js_1.PublicKey("ArenaRepayCo11at111111111111111111111111111"),
    [TransactionType.LONG]: new web3_js_1.PublicKey("ArenaLong1111111111111111111111111111111111"),
    [TransactionType.SHORT]: new web3_js_1.PublicKey("ArenaShort111111111111111111111111111111111"),
    [TransactionType.CLOSE_POSITION]: new web3_js_1.PublicKey("ArenaC1ose111111111111111111111111111111111"),
    // Add more mappings if needed
};
