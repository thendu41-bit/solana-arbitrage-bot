declare class CustomNumberFormat extends Intl.NumberFormat {
    constructor(locale: string | string[] | undefined, options: Intl.NumberFormatOptions | undefined);
    format(value: number | bigint): string;
}
declare const groupedNumberFormatter: CustomNumberFormat;
declare const numeralFormatter: (value: number) => string;
interface dynamicNumeralFormatterOptions {
    minDisplay?: number;
    tokenPrice?: number;
    forceDecimals?: boolean;
    maxDisplay?: number;
    logging?: boolean;
    ignoreMinDisplay?: boolean;
}
export declare const dynamicNumeralFormatter: (value: number, options?: dynamicNumeralFormatterOptions) => string;
declare const groupedNumberFormatterDyn: Intl.NumberFormat;
declare const usdFormatter: Intl.NumberFormat;
declare const usdFormatterDyn: Intl.NumberFormat;
declare const percentFormatter: Intl.NumberFormat;
declare const percentFormatterDyn: Intl.NumberFormat;
declare const percentFormatterMod: (value: number, opts?: {
    minFractionDigits: number;
    maxFractionDigits: number;
}) => string;
declare const clampedNumeralFormatter: (value: number) => string;
declare const tokenPriceFormatter: (price: number, style?: "currency" | "decimal") => string | 0;
export { CustomNumberFormat, groupedNumberFormatter, groupedNumberFormatterDyn, numeralFormatter, clampedNumeralFormatter, percentFormatter, percentFormatterDyn, percentFormatterMod, usdFormatter, usdFormatterDyn, tokenPriceFormatter, };
//# sourceMappingURL=formatters.utils.d.ts.map