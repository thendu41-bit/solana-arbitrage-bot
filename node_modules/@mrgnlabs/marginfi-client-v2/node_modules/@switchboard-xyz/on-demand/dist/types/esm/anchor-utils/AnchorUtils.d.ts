import { AnchorProvider, Program, Provider, Wallet, web3 } from '@coral-xyz/anchor-31';
type SolanaConfig = {
    rpcUrl: string;
    webSocketUrl: string;
    keypairPath: string;
    commitment: web3.Commitment;
    keypair: web3.Keypair;
    connection: web3.Connection;
    provider: AnchorProvider;
    wallet: Wallet;
    program: Program | null;
};
export declare class AnchorUtils {
    private static initWalletFromKeypair;
    /**
     * Initializes a wallet from a file.
     *
     * @param {string} filePath - The path to the file containing the wallet's secret key.
     * @returns {Promise<[Wallet, web3.Keypair]>} A promise that resolves to a tuple containing the wallet and the keypair.
     */
    static initWalletFromFile(filePath: string): Promise<readonly [import("@coral-xyz/anchor-31/dist/cjs/nodewallet").default, web3.Keypair]>;
    /**
     * Initializes a keypair from a file.
     *
     * @param {string} filePath - The path to the file containing the keypair's secret key.
     * @returns {Promise<web3.Keypair>} A promise that resolves to the keypair.
     */
    static initKeypairFromFile(filePath: string): Promise<web3.Keypair>;
    /**
     * Loads an Anchor program from a connection.
     *
     * @param {web3.Connection} connection - The connection to load the program from.
     * @returns {Promise<Program>} A promise that resolves to the loaded Anchor program.
     */
    static loadProgramFromConnection(connection: web3.Connection, wallet?: Wallet, programId?: web3.PublicKey): Promise<Program<import("@coral-xyz/anchor-31").Idl>>;
    /**
     * Loads an Anchor program from a provider.
     *
     * @param {Provider} provider - The provider to load the program from.
     * @param {web3.PublicKey} programId - An optional program ID to load the program from.
     * @returns {Promise<Program>} A promise that resolves to the loaded Anchor program.
     */
    static loadProgramFromProvider(provider: Provider, programId?: web3.PublicKey): Promise<Program<import("@coral-xyz/anchor-31").Idl>>;
    /**
     * Loads an Anchor program from the environment.
     *
     * @returns {Promise<Program>} A promise that resolves to the loaded Anchor program.
     */
    static loadProgramFromEnv(): Promise<Program>;
    /**
     * Loads the same environment set for the Solana CLI.
     *
     * @returns {Promise<SolanaConfig>} A promise that resolves to the Solana configuration.
     */
    static loadEnv(): Promise<SolanaConfig>;
    /**
     * Parse out anchor events from the logs present in the program IDL.
     *
     * @param {Program} program - The Anchor program instance.
     * @param {string[]} logs - The array of logs to parse.
     * @returns {any[]} An array of parsed events.
     */
    static loggedEvents(program: Program, logs: string[]): ({
        name: string;
        data: any;
    } | null)[];
}
export {};
//# sourceMappingURL=AnchorUtils.d.ts.map