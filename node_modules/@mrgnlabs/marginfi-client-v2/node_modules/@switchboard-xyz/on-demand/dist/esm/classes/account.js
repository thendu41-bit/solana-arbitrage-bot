var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { web3 } from '@coral-xyz/anchor-31';
/**
 *  Base class for all Switchboard account types.
 */
export class SbAccount {
    /**
     *  Returns the payer public key to use for this account's actions.
     *
     *  If a payer is provided, it will be used. Otherwise, the program provider's public key will be
     *  used. If no public key is set in the provider, the default public key will be returned.
     */
    static getPayer(program, payer) {
        var _a;
        return (_a = payer !== null && payer !== void 0 ? payer : program.provider.publicKey) !== null && _a !== void 0 ? _a : web3.PublicKey.default;
    }
    constructor(program, pubkey) {
        this.program = program;
        this.pubkey = pubkey;
    }
    /**
     * Get the payer PublicKey for the account.
     *
     * @param payer The payer to use.
     * @returns The payer.
     */
    getPayer(payer) {
        return SbAccount.getPayer(this.program, payer);
    }
    /**
     * Loads the account data from on chain.
     *
     * @returns A promise that resolves to the account data.
     * @throws if the account does not exist.
     */
    loadData() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.program.account[this.accountKey].fetch(this.pubkey);
        });
    }
}
/**
 *  Base class for all Switchboard account types that can be used to load multiple accounts.
 */
export class SbMultipleLoadableAccount extends SbAccount {
    /**
     * Loads the account data from on chain for multiple accounts.
     *
     * @param program The program instance.
     * @param pubkeys The public keys of the accounts to load.
     * @returns A promise that resolves to an array of account data (or null if the account does not exist).
     */
    static loadMany(program, pubkeys) {
        return __awaiter(this, void 0, void 0, function* () {
            const instance = new this(program, pubkeys[0]);
            return yield program.account[instance.accountKey].fetchMultiple(pubkeys);
        });
    }
}
//# sourceMappingURL=account.js.map