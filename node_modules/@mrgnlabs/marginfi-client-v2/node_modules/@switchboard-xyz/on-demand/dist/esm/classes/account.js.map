{"version":3,"file":"account.js","sourceRoot":"","sources":["../../../src/classes/account.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAW,IAAI,EAAE,MAAM,sBAAsB,CAAC;AAErD;;GAEG;AACH,MAAM,OAAgB,SAAS;IAC7B;;;;;OAKG;IACK,MAAM,CAAC,QAAQ,CACrB,OAAgB,EAChB,KAAsB;;QAEtB,OAAO,MAAA,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,OAAO,CAAC,QAAQ,CAAC,SAAS,mCAAI,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;IACvE,CAAC;IAOD,YACW,OAAgB,EAChB,MAAsB;QADtB,YAAO,GAAP,OAAO,CAAS;QAChB,WAAM,GAAN,MAAM,CAAgB;IAC9B,CAAC;IAEJ;;;;;OAKG;IACO,QAAQ,CAAC,KAAsB;QACvC,OAAO,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IACjD,CAAC;IAED;;;;;OAKG;IACU,QAAQ;;YACnB,OAAO,MAAM,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACxE,CAAC;KAAA;CACF;AAED;;GAEG;AACH,MAAM,OAAgB,yBAEpB,SAAQ,SAAsB;IAC9B;;;;;;OAMG;IACI,MAAM,CAAO,QAAQ,CAK1B,OAAgB,EAChB,OAAyB;;YAEzB,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;YAC/C,OAAO,MAAM,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QAC3E,CAAC;KAAA;CACF","sourcesContent":["import { Program, web3 } from '@coral-xyz/anchor-31';\n\n/**\n *  Base class for all Switchboard account types.\n */\nexport abstract class SbAccount<AccountData> {\n  /**\n   *  Returns the payer public key to use for this account's actions.\n   *\n   *  If a payer is provided, it will be used. Otherwise, the program provider's public key will be\n   *  used. If no public key is set in the provider, the default public key will be returned.\n   */\n  private static getPayer(\n    program: Program,\n    payer?: web3.PublicKey\n  ): web3.PublicKey {\n    return payer ?? program.provider.publicKey ?? web3.PublicKey.default;\n  }\n\n  /**\n   * The key of the account in the IDL.\n   */\n  protected abstract get accountKey(): string;\n\n  constructor(\n    readonly program: Program,\n    readonly pubkey: web3.PublicKey\n  ) {}\n\n  /**\n   * Get the payer PublicKey for the account.\n   *\n   * @param payer The payer to use.\n   * @returns The payer.\n   */\n  protected getPayer(payer?: web3.PublicKey): web3.PublicKey {\n    return SbAccount.getPayer(this.program, payer);\n  }\n\n  /**\n   * Loads the account data from on chain.\n   *\n   * @returns A promise that resolves to the account data.\n   * @throws if the account does not exist.\n   */\n  public async loadData(): Promise<AccountData> {\n    return await this.program.account[this.accountKey].fetch(this.pubkey);\n  }\n}\n\n/**\n *  Base class for all Switchboard account types that can be used to load multiple accounts.\n */\nexport abstract class SbMultipleLoadableAccount<\n  AccountData,\n> extends SbAccount<AccountData> {\n  /**\n   * Loads the account data from on chain for multiple accounts.\n   *\n   * @param program The program instance.\n   * @param pubkeys The public keys of the accounts to load.\n   * @returns A promise that resolves to an array of account data (or null if the account does not exist).\n   */\n  public static async loadMany<T>(\n    this: new (\n      program: Program,\n      pubkey: web3.PublicKey\n    ) => SbMultipleLoadableAccount<T>,\n    program: Program,\n    pubkeys: web3.PublicKey[]\n  ): Promise<(T | null)[]> {\n    const instance = new this(program, pubkeys[0]);\n    return await program.account[instance.accountKey].fetchMultiple(pubkeys);\n  }\n}\n"]}