{"version":3,"file":"oracle.js","sourceRoot":"","sources":["../../../src/accounts/oracle.ts"],"names":[],"mappings":"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","sourcesContent":["import { SOL_NATIVE_MINT, SPL_TOKEN_PROGRAM_ID } from '../constants.js';\nimport * as spl from '../utils/index.js';\nimport { getLutKey, getLutSigner } from '../utils/lookupTable.js';\n\nimport { State } from './state.js';\n\nimport type { Program } from '@coral-xyz/anchor-31';\nimport { BN, web3 } from '@coral-xyz/anchor-31';\nimport { Buffer } from 'buffer';\n\nexport interface OracleAccountData {\n  enclave: {\n    enclaveSigner: web3.PublicKey;\n    mrEnclave: Uint8Array;\n    verificationStatus: number;\n    // padding1\n    verificationTimestamp: BN;\n    validUntil: BN;\n    quoteRegistry: Uint8Array;\n    registryKey: Uint8Array;\n    secp256K1Signer: Uint8Array;\n    lastEd25519Signer: web3.PublicKey;\n    lastSecp256K1Signer: Uint8Array;\n    lastRotateSlot: BN;\n    guardianApprovers: web3.PublicKey[];\n    guardianApproversLen: number;\n    // padding2\n    stagingEd25519Signer: web3.PublicKey;\n    stagingSecp256K1Signer: Uint8Array;\n    ethSigner: Uint8Array;\n    // ebuf4\n    // ebuf3\n    // ebuf2\n    // ebuf1\n  };\n  authority: web3.PublicKey;\n  queue: web3.PublicKey;\n  createdAt: BN;\n  lastHeartbeat: BN;\n  secpAuthority: Uint8Array;\n  gatewayUri: Uint8Array;\n  permissions: BN;\n  isOnQueue: boolean;\n  // padding1\n  lutSlot: BN;\n  lastRewardEpoch: BN;\n  operator: web3.PublicKey;\n  // ebuf3\n  // ebuf2\n  // ebuf1\n}\n\n/**\n *  This class represents an oracle account on chain.\n */\nexport class Oracle {\n  lut: web3.AddressLookupTableAccount | null;\n\n  constructor(\n    readonly program: Program,\n    readonly pubkey: web3.PublicKey\n  ) {\n    this.lut = null;\n  }\n\n  /**\n   * Creates a new oracle account. linked to the specified queue.\n   * After creation the oracle still must receive run approval and verify their\n   * enclave measurement.\n   * @param program - The program that owns the oracle account.\n   * @param params.queue - The queue that the oracle will be linked to.\n   * @returns A promise that resolves to a tuple containing the oracle account\n   * and the transaction signature.\n   *\n   */\n  static async create(\n    program: Program,\n    params: {\n      queue: web3.PublicKey;\n    }\n  ): Promise<[Oracle, web3.TransactionInstruction[], web3.Keypair]> {\n    const stateKey = State.keyFromSeed(program);\n    const state = await State.loadData(program);\n    const payer = spl.getNodePayer(program);\n    const oracle = web3.Keypair.generate();\n    const oracleStats = web3.PublicKey.findProgramAddressSync(\n      [Buffer.from('OracleStats'), oracle.publicKey.toBuffer()],\n      program.programId\n    )[0];\n    const lutSigner = getLutSigner(program.programId, oracle.publicKey);\n    const recentSlot = await program.provider.connection.getSlot('finalized');\n    const lutKey = getLutKey(lutSigner, recentSlot);\n\n    const ix = await program.instruction.oracleInit(\n      {\n        recentSlot: new BN(recentSlot.toString()),\n        authority: payer.publicKey,\n        queue: params.queue,\n        secpAuthority: null,\n      },\n      {\n        accounts: {\n          oracle: oracle.publicKey,\n          oracleStats,\n          authority: payer.publicKey,\n          programState: stateKey,\n          payer: payer.publicKey,\n          systemProgram: web3.SystemProgram.programId,\n          tokenProgram: SPL_TOKEN_PROGRAM_ID,\n          tokenMint: SOL_NATIVE_MINT,\n          lutSigner: lutSigner,\n          lut: lutKey,\n          addressLookupTableProgram: web3.AddressLookupTableProgram.programId,\n          switchMint: state.switchMint,\n          wsolVault: spl.getAssociatedTokenAddressSync(\n            SOL_NATIVE_MINT,\n            oracle.publicKey\n          ),\n          switchVault: spl.getAssociatedTokenAddressSync(\n            state.switchMint,\n            oracle.publicKey\n          ),\n        },\n      }\n    );\n\n    return [new Oracle(program, oracle.publicKey), [ix], oracle];\n  }\n\n  /**\n   * Creates a new oracle account for SVM chains (non-solana). linked to the specified queue.\n   * After creation the oracle still must receive run approval and verify their\n   * enclave measurement.\n   * @param program - The program that owns the oracle account.\n   * @param params.queue - The queue that the oracle will be linked to.\n   * @returns A promise that resolves to a tuple containing the oracle account\n   * and the transaction signature.\n   *\n   */\n  static async createSVM(\n    program: Program,\n    params: {\n      queue: web3.PublicKey;\n      sourceOracleKey: web3.PublicKey;\n    }\n  ): Promise<[Oracle, web3.TransactionInstruction[]]> {\n    const stateKey = State.keyFromSeed(program);\n    const state = await State.loadData(program);\n    const payer = spl.getNodePayer(program);\n    // Generate the queue PDA for the given source queue key\n    const [oracle] = web3.PublicKey.findProgramAddressSync(\n      [\n        Buffer.from('Oracle'),\n        params.queue.toBuffer(),\n        params.sourceOracleKey.toBuffer(),\n      ],\n      program.programId\n    );\n    const oracleStats = web3.PublicKey.findProgramAddressSync(\n      [Buffer.from('OracleStats'), oracle.toBuffer()],\n      program.programId\n    )[0];\n    const lutSigner = getLutSigner(program.programId, oracle);\n    const recentSlot = await program.provider.connection.getSlot('finalized');\n    const lutKey = getLutKey(lutSigner, recentSlot);\n\n    const ix = program.instruction.oracleInitSvm(\n      {\n        recentSlot: new BN(recentSlot.toString()),\n        authority: payer.publicKey,\n        queue: params.queue,\n        secpAuthority: null,\n        sourceOracleKey: params.sourceOracleKey,\n      },\n      {\n        accounts: {\n          oracle: oracle,\n          oracleStats,\n          authority: payer.publicKey,\n          programState: stateKey,\n          payer: payer.publicKey,\n          systemProgram: web3.SystemProgram.programId,\n          tokenProgram: SPL_TOKEN_PROGRAM_ID,\n          tokenMint: SOL_NATIVE_MINT,\n          lutSigner: lutSigner,\n          lut: lutKey,\n          addressLookupTableProgram: web3.AddressLookupTableProgram.programId,\n          switchMint: state.switchMint,\n          wsolVault: spl.getAssociatedTokenAddressSync(\n            SOL_NATIVE_MINT,\n            oracle,\n            true\n          ),\n          switchVault: spl.getAssociatedTokenAddressSync(\n            state.switchMint,\n            oracle,\n            true\n          ),\n        },\n      }\n    );\n\n    return [new Oracle(program, oracle), [ix]];\n  }\n\n  /**\n   * TODO: wrap this one up with the gateway bridge oracle fn\n   * @param params\n   * @returns\n   */\n  // static async quoteVerifySvmIx(\n  //   program: Program,\n  //   params: {\n  //     chain?: string; // Unused atm\n  //     network?: 'mainnet' | 'mainnet-beta' | 'testnet' | 'devnet';\n  //     queue: web3.PublicKey; // Solana queue\n  //     attestee: web3.PublicKey; // Solana attestee\n  //     attester: web3.PublicKey; // Solana attester guardian we're requesting from\n  //   }\n  // ): Promise<web3.TransactionInstruction> {\n  // const [queuePDA, queueBump] = PublicKey.findProgramAddressSync(\n  //   [Buffer.from(\"Queue\"), params.queue.toBuffer()],\n  //   program.programId\n  // );\n\n  // timestamp handled by bridge fn\n  // mrEnclave handled by bridge fn\n  // secp256k1Key handled by bridge fn\n  // slot has to be handled by us I think\n  // signature has to be handled by bridge fn\n  // recoveryId has to be handled by bridge fn\n\n  // guardian key & oracle key\n\n  // source oracle key handled by us:\n\n  // source oracle queue key handled by us:\n\n  // source guardian queue key handled by us:\n\n  // const ix = await program.instruction.guardianQuoteVerifySvm(\n  //   {\n  //     timestamp: new anchor.BN(params.timestamp),\n  //     mrEnclave: params.mrEnclave, // 32-byte array\n  //     _reserved1: params._reserved1, // 32-bit unsigned integer\n  //     secp256k1Key: params.secp256k1Key, // 64-byte array\n  //     slot: new anchor.BN(params.slot), // Slot as u64\n  //     signature: params.signature, // 64-byte array\n  //     recoveryId: params.recoveryId, // u8\n  //     sourceOracleKey: params.sourceOracleKey, // Pubkey of source oracle\n  //     sourceOracleQueueKey: params.sourceOracleQueueKey, // Pubkey of oracle queue\n  //     sourceGuardianQueueKey: params.sourceGuardianQueueKey, // Pubkey of guardian queue\n  //     oracleBump: params.oracleBump, // Bump for oracle PDA\n  //     oracleQueueBump: params.oracleQueueBump, // Bump for oracle queue PDA\n  //     guardianQueueBump: params.guardianQueueBump, // Bump for guardian queue PDA\n  //   },\n  //   {\n  //     accounts: {\n  //       guardian: guardianAccountLoader, // AccountLoader for OracleAccountData\n  //       oracle: oracleAccountLoader, // AccountLoader for OracleAccountData\n  //       oracleStats: oracleStatsAccountLoader, // AccountLoader for OracleStatsAccountData\n  //       payer: payer.publicKey, // Signer for transaction\n  //       systemProgram: SystemProgram.programId, // System program ID\n  //       oracleQueue: oracleQueueAccountLoader, // AccountLoader for QueueAccountData\n  //       guardianQueue: guardianQueueAccountLoader, // AccountLoader for QueueAccountData\n  //       state: stateAccountLoader, // AccountLoader for State\n  //       recentSlothashes: anchor.web3.SYSVAR_SLOT_HASHES_PUBKEY, // Sysvar slot hashes\n  //       lutSigner: lutSignerAccount, // AccountInfo for lut signer\n  //       lut: lutAccount, // AccountInfo for lut (lookup table)\n  //       programState: programStateAccountLoader, // AccountLoader for State\n  //     },\n  //     signers: [payer], // Add payer as the signer for the instruction\n  //   }\n  // );\n\n  //   throw new Error('Quote verify SVM not implemented yet.');\n  // }\n\n  async findSolanaOracleFromPDA(): Promise<{\n    oracleData: OracleAccountData;\n    oracle: web3.PublicKey;\n  }> {\n    const oracleData = await this.loadData();\n    const isMainnet = oracleData.queue.equals(spl.ON_DEMAND_MAINNET_QUEUE_PDA);\n    const queue = await spl.getQueue({\n      program: this.program,\n      queueAddress: spl.getDefaultQueueAddress(isMainnet),\n    });\n    const solanaOracles = await queue.fetchOracleKeys();\n    for (const oracle of solanaOracles) {\n      const [oraclePDA] = web3.PublicKey.findProgramAddressSync(\n        [Buffer.from('Oracle'), oracleData.queue.toBuffer(), oracle.toBuffer()],\n        this.program.programId\n      );\n      if (oraclePDA.equals(this.pubkey)) {\n        return {\n          oracleData: await new Oracle(queue.program, oracle).loadData(),\n          oracle,\n        };\n      }\n    }\n    throw new Error(`Solana Oracle not found for ${this.pubkey.toBase58()}`);\n  }\n\n  async setConfigsIx(params: {\n    authority: web3.PublicKey;\n  }): Promise<web3.TransactionInstruction> {\n    const ix = await this.program.instruction.oracleSetConfigs(\n      {\n        authority: params.authority,\n        newSecpAuthority: null,\n      },\n      {\n        accounts: {\n          oracle: this.pubkey,\n          authority: params.authority,\n        },\n      }\n    );\n    return ix;\n  }\n\n  /**\n   *  Loads the oracle data for this {@linkcode Oracle} account from on chain.\n   *\n   *  @returns A promise that resolves to the oracle data.\n   *  @throws if the oracle account does not exist.\n   */\n  async loadData(): Promise<OracleAccountData> {\n    return await Oracle.loadData(this.program, this.pubkey);\n  }\n\n  async fetchGateway(): Promise<string> {\n    const data = await this.loadData();\n    const gw = Buffer.from(data.gatewayUri).toString();\n    return gw.replace(/\\0+$/, '');\n  }\n\n  /**\n   *  Loads the oracle data for this {@linkcode Oracle} account from on chain.\n   *\n   *  @returns A promise that resolves to the oracle data.\n   *  @throws if the oracle account does not exist.\n   */\n  static async loadData(\n    program: Program,\n    pubkey: web3.PublicKey\n  ): Promise<OracleAccountData> {\n    return await program.account['oracleAccountData'].fetch(pubkey);\n  }\n\n  /**\n   * Loads the oracle data for a list of {@linkcode Oracle} accounts from on chain.\n   *\n   * @param program - The program that owns the oracle accounts.\n   * @param keys - The public keys of the oracle accounts to load.\n   * @returns A promise that resolves to an array of oracle data.\n   * @throws if any of the oracle accounts do not exist.\n   */\n  static async loadMany(\n    program: Program,\n    keys: web3.PublicKey[]\n  ): Promise<(OracleAccountData | null)[]> {\n    return await program.account['oracleAccountData'].fetchMultiple(keys);\n  }\n\n  /**\n   * Loads the oracle data and checks if the oracle is verified.\n   *\n   * @returns A promise that resolves to a tuple containing a boolean indicating\n   * if the oracle is verified and the expiration time of the verification.\n   * @throws if the oracle account does not exist.\n   */\n  async verificationStatus(): Promise<[boolean, number]> {\n    const data = await this.loadData();\n    const now = new BN(Date.now() / 1000);\n    const status = data.enclave.verificationStatus;\n    const expiration = data.enclave.validUntil;\n    return [status === 4 && now.lt(expiration), expiration.toNumber()];\n  }\n\n  /**\n   * Get the pubkey of the stats account for this oracle.\n   * @returns A promise that resolves to the pubkey of the stats account.\n   */\n  statsKey(): web3.PublicKey {\n    return web3.PublicKey.findProgramAddressSync(\n      [Buffer.from('OracleStats'), this.pubkey.toBuffer()],\n      this.program.programId\n    )[0];\n  }\n\n  async loadLookupTableKey(): Promise<web3.PublicKey> {\n    const data = await this.loadData();\n    return this.lookupTableKey(data);\n  }\n\n  public lookupTableKey(data: { lutSlot: number | BN }): web3.PublicKey {\n    const lutSigner = getLutSigner(this.program.programId, this.pubkey);\n    return getLutKey(lutSigner, data.lutSlot);\n  }\n\n  async loadLookupTable(): Promise<web3.AddressLookupTableAccount> {\n    if (this.lut !== null && this.lut !== undefined) return this.lut;\n\n    const lutKey = await this.loadLookupTableKey();\n    const accnt =\n      await this.program.provider.connection.getAddressLookupTable(lutKey);\n    this.lut = accnt.value!;\n    return this.lut!;\n  }\n\n  async setOperatorIx(params: {\n    operator: web3.PublicKey;\n  }): Promise<web3.TransactionInstruction> {\n    const data = await this.loadData();\n    const ix = await this.program.instruction.oracleSetOperator(\n      {},\n      {\n        accounts: {\n          oracle: this.pubkey,\n          operator: params.operator,\n          authority: data.authority,\n        },\n      }\n    );\n    return ix;\n  }\n}\n"]}