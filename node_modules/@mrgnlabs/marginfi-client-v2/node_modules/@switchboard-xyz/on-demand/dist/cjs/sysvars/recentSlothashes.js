"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecentSlotHashes = void 0;
const constants_js_1 = require("../constants.js");
const anchor_31_1 = require("@coral-xyz/anchor-31");
const bs58_1 = __importDefault(require("bs58"));
/**
 * Abstraction around the SysvarS1otHashes111111111111111111111111111 sysvar
 * This sysvar is used to store the recent slot hashes
 */
class RecentSlotHashes {
    /**
     *  Disable object instantiation.
     */
    constructor() { }
    /**
     * Fetches the latest slot hash from the sysvar.
     * @param connection The connection to use.
     * @returns A promise that resolves to the latest slot number and hash.
     */
    static fetchLatest(connection) {
        return __awaiter(this, void 0, void 0, function* () {
            const defaultHash = bs58_1.default.encode(Array(32).fill(0));
            const accountInfo = yield connection.getAccountInfo(constants_js_1.SPL_SYSVAR_SLOT_HASHES_ID, {
                commitment: 'finalized',
                dataSlice: { length: 40, offset: 8 },
            });
            if (!accountInfo) {
                return [new anchor_31_1.BN(0), defaultHash];
            }
            const buffer = accountInfo.data;
            const slotNumber = buffer.readBigUInt64LE(0);
            const encoded = bs58_1.default.encode(Uint8Array.prototype.slice.call(buffer, 8));
            return [new anchor_31_1.BN(slotNumber.toString()), encoded];
        });
    }
    static fetchLatestNSlothashes(connection, n) {
        return __awaiter(this, void 0, void 0, function* () {
            const defaultHash = bs58_1.default.encode(Array(32).fill(0));
            const accountInfo = yield connection.getAccountInfo(constants_js_1.SPL_SYSVAR_SLOT_HASHES_ID, {
                commitment: 'finalized',
                dataSlice: { length: 40 * Math.floor(n), offset: 8 },
            });
            if (!accountInfo) {
                return Array.from({ length: n }, () => [new anchor_31_1.BN(0), defaultHash]);
            }
            const out = [];
            const buffer = accountInfo.data;
            for (let i = 0; i < n; i++) {
                const slotNumber = buffer.readBigUInt64LE(i * 40);
                const hashStart = i * 40 + 8;
                const hashEnd = hashStart + 32;
                const encoded = bs58_1.default.encode(Uint8Array.prototype.slice.call(buffer, hashStart, hashEnd));
                out.push([new anchor_31_1.BN(slotNumber.toString()), encoded]);
            }
            return out;
        });
    }
}
exports.RecentSlotHashes = RecentSlotHashes;
//# sourceMappingURL=recentSlothashes.js.map