import type { RecentPrioritizationFees } from "@solana/web3.js";
import { Connection, type GetRecentPrioritizationFeesConfig } from "@solana/web3.js";
export type TransactionBroadcastType = "BUNDLE" | "RPC" | "DYNAMIC";
export type TransactionPriorityType = "NORMAL" | "HIGH" | "MAMAS";
export type MaxCapType = "DYNAMIC" | "MANUAL";
export type TransactionSettings = {
    broadcastType: TransactionBroadcastType;
    priorityType: TransactionPriorityType;
    maxCapType: MaxCapType;
    maxCap: number;
};
export declare const enum PriotitizationFeeLevels {
    LOW = 2500,
    MEDIAN = 5000,
    HIGH = 7500,
    MAX = 10000
}
interface GetRecentPrioritizationFeesByPercentileConfig extends GetRecentPrioritizationFeesConfig {
    percentile?: PriotitizationFeeLevels | number;
    fallback?: boolean;
}
type PriorityFeeCapByPercentileResponse = {
    min: RecentPrioritizationFees;
    max: RecentPrioritizationFees;
    mean: number;
    median: number;
};
export declare const getCalculatedPrioritizationFeeByPercentile: (connection: Connection, config: GetRecentPrioritizationFeesByPercentileConfig, slotsToReturn?: number) => Promise<PriorityFeeCapByPercentileResponse>;
export declare const getMinPrioritizationFeeByPercentile: (connection: Connection, config: GetRecentPrioritizationFeesByPercentileConfig, slotsToReturn?: number) => Promise<number>;
export declare const getMaxPrioritizationFeeByPercentile: (connection: Connection, config: GetRecentPrioritizationFeesByPercentileConfig, slotsToReturn?: number) => Promise<number>;
export declare const getMeanPrioritizationFeeByPercentile: (connection: Connection, config: GetRecentPrioritizationFeesByPercentileConfig, slotsToReturn?: number) => Promise<number>;
export declare const getMedianPrioritizationFeeByPercentile: (connection: Connection, config: GetRecentPrioritizationFeesByPercentileConfig, slotsToReturn?: number) => Promise<number>;
export declare const getRecentPrioritizationFeesByPercentile: (connection: Connection, config: GetRecentPrioritizationFeesByPercentileConfig, slotsToReturn?: number) => Promise<RecentPrioritizationFees[]>;
export {};
//# sourceMappingURL=priority.d.ts.map