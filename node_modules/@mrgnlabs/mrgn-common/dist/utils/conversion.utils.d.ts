import { Address, BN } from "@coral-xyz/anchor";
import BigNumber from "bignumber.js";
import { Amount, WrappedI80F48 } from "../types";
import { PublicKey } from "@solana/web3.js";
export declare function wrappedI80F48toBigNumber(wrapped: WrappedI80F48): BigNumber;
export declare function bigNumberToWrappedI80F48(value: Amount): WrappedI80F48;
/**
 * Converts a ui representation of a token amount into its native value as `BN`, given the specified mint decimal amount (default to 6 for USDC).
 */
export declare function toNumber(amount: Amount): number;
/**
 * Converts a ui representation of a token amount into its native value as `BN`, given the specified mint decimal amount (default to 6 for USDC).
 */
export declare function toBigNumber(amount: Amount | BN): BigNumber;
/**
 * Converts a UI representation of a token amount into its native value as `BN`, given the specified mint decimal amount (default to 6 for USDC).
 */
export declare function uiToNative(amount: Amount, decimals: number): BN;
export declare function uiToNativeBigNumber(amount: Amount, decimals: number): BigNumber;
/**
 * Converts a native representation of a token amount into its UI value as `number`, given the specified mint decimal amount.
 */
export declare function nativeToUi(amount: Amount | BN, decimals: number): number;
export declare function shortenAddress(pubkey: Address, chars?: number): string;
/**
 * Converts basis points (bps) to a decimal percentage value.
 */
export declare function bpsToPercentile(bps: number): number;
/**
 * Prepares transaction remaining accounts by processing bank-oracle groups:
 * 1. Sorts groups in descending order by bank public key (pushes inactive accounts to end)
 * 2. Flattens the structure into a single public key array
 *
 * Stable on most JS implementations (this shouldn't matter since we do not generally have duplicate
 * banks), in place, and uses the raw 32-byte value to sort in byte-wise lexicographical order (like
 * Rust's b.key.cmp(&a.key))
 *
 * @param banksAndOracles - Array where each element is a bank-oracle group: [bankPubkey,
 *                          oracle1Pubkey, oracle2Pubkey?, ...] Note: SystemProgram keys (111..111)
 *                          represent inactive accounts
 * @returns Flattened array of public keys with inactive accounts at the end, ready for transaction
 *          composition
 */
export declare const composeRemainingAccounts: (banksAndOracles: PublicKey[][]) => PublicKey[];
//# sourceMappingURL=conversion.utils.d.ts.map